This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-15T19:12:32.266Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  workflows/
    benchmark.yml
    pypi-release.yml
    test-cicd.yml
  release.yml
docs/
  archives/
    20250307_README.md
  CONTRIBUTING.md
  run_ollama_local_models.md
  sdk_tutorial.md
  setup.md
examples/
  benchmark_params.toml
  benchmarks.md
  cli_agent.py
  leetcode_agent.py
  notifier_agent.py
  vault_agent.py
packages/
  notte-agent/
    src/
      notte_agent/
        common/
          base.py
          config.py
          conversation.py
          notifier.py
          parser.py
          perception.py
          prompt.py
          safe_executor.py
          trajectory_history.py
          types.py
          validator.py
        falco/
          prompts/
            system_prompt_multi_actions.md
            system_prompt_single_action.md
          agent.py
          perception.py
          prompt.py
          trajectory_history.py
          types.py
        gufo/
          agent.py
          parser.py
          perception.py
          prompt.py
          system.md
        __init__.py
        main.py
        README.md
    pyproject.toml
  notte-browser/
    src/
      notte_browser/
        dom/
          buildDomNode.js
          csspaths.py
          dropdown_menu.py
          id_generation.py
          locate.py
          parsing.py
          pipe.py
          types.py
          wait_for_page_update.py
        rendering/
          interaction_only.py
          json.py
          markdown.py
          pipe.py
          pruning.py
        scraping/
          llm_scraping.py
          pipe.py
          schema.py
          simple.py
        tagging/
          action/
            llm_taging/
              base.py
              filtering.py
              listing.py
              parser.py
              pipe.py
              validation.py
            simple/
              pipe.py
            base.py
            pipe.py
          page.py
        __init__.py
        controller.py
        env.py
        errors.py
        resolution.py
        resource.py
        vault.py
        window.py
    pyproject.toml
    README.md
  notte-core/
    src/
      notte_core/
        actions/
          base.py
          space.py
        browser/
          dom_tree.py
          node_type.py
          observation.py
          snapshot.py
        common/
          credentials/
            __init__.py
            base.py
            types.py
          config.py
          logging.py
          resource.py
          telemetry.py
          tracer.py
        controller/
          actions.py
          proxy.py
          space.py
        data/
          space.py
        errors/
          actions.py
          base.py
          llm.py
          processing.py
          provider.py
          validation.py
        llms/
          config/
            endpoints.csv
          prompts/
            action-listing/
              anthropic/
                user.md
              optim/
                user.md
              simple/
                user.md
            action-listing-incr/
              user.md
            data-extraction/
              all_data/
                user.md
              only_main_content/
                user.md
              two_sections/
                user.md
              user.md
            debug-failing-action-exec/
              user.md
            document-category/
              base/
                user.md
              optim/
                user.md
            extract-json-schema/
              multi-entity/
                system.md
                user.md
            extract-without-json-schema/
              system.md
              user.md
            generate-json-schema/
              system.md
              user.md
          engine.py
          logging.py
          prompt.py
          service.py
        utils/
          code.py
          image.py
          platform.py
          singleton.py
          url.py
          webp_replay.py
        __init__.py
    pyproject.toml
  notte-integrations/
    src/
      notte_integrations/
        api/
          fastapi.py
        credentials/
          hashicorp/
            docker-compose.yml
            vault.py
          README.md
        notifiers/
          discord.py
          mail.py
          slack.py
        sessions/
          anchor_pool.py
          browserbase_pool.py
          steel_pool.py
    pyproject.toml
  notte-pools/
    src/
      notte_pools/
        base.py
        cdp_pool.py
        local_pool.py
        ports.py
    pyproject.toml
  notte-sdk/
    src/
      notte_sdk/
        endpoints/
          agents.py
          base.py
          env.py
          persona.py
          sessions.py
        __init__.py
        client.py
        errors.py
        types.py
        vault.py
    pyproject.toml
src/
  notte/
    __init__.py
tests/
  actions/
    test_execution.py
    test_parsing.py
  browser/
    test_clipboard_isolation.py
    test_context.py
    test_node_type.py
    test_pool.py
  code/
    test_code.py
  config/
    test_agent_config.py
    test_cli_config.py
    test_config.py
    test_env_config.py
  integration/
    test_basic_scripts.py
    test_e2e.py
    test_resolution.py
    test_special_actions.py
    test_webvoyager_resolution.py
    test_webvoyager_scripts.py
  llms/
    test_action_listing_prompt_discrepancies.py
    test_engine.py
    test_extract_data_prompt_discrepancies.py
    test_prompt.py
  mock/
    mock_browser.py
    mock_env.py
    mock_service.py
  pipe/
    action/
      test_listing.py
      test_main.py
  sdk/
    test_client.py
    test_types.py
  utils/
    test_image.py
  conftest.py
  test_env.py
.dockerignore
.env.example
.gitignore
.pre-commit-config.yaml
.python-version
build.sh
Dockerfile
LICENSE
makefile
pyproject.toml
README.md
sample.py
uv.lock

================================================================
Repository Files
================================================================

================
File: .github/workflows/benchmark.yml
================
name: benchmark

on:
  workflow_dispatch:
    inputs:
      config:
        description: "Full toml config"
        required: true
        default: '[RunParameters]\nn_jobs = 3\ntries_per_task = 1\nevaluator = \"None\"\ncapture_logging = true\n[RunParameters.task_set]\nname = \"WebVoyagerSimple\"\n[Falco]\nuse_vision = false\nheadless = true\nmodel = \"cerebras/llama-3.3-70b\"\nmax_steps = 20\nhistory_type = \"short_observations_with_short_data\"\npool = \"None\"'
concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref }}-
    ${{ github.event.inputs.config }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  CACHE_TYPE: "pip"

jobs:
  run-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY_CICD }}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_CICD }}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ${{ env.CACHE_TYPE }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit pytest mypy pytest-asyncio pytest-mock
          pip install -e .
          pip install types-requests types-beautifulsoup4 types-regex types-chevron pandas tabulate cloudpickle
          patchright install --with-deps chromium

      - name: Create config.toml file
        run: |
          printf "%s" "${{ github.event.inputs.config }}" > config.toml

      - name: Debug config.toml content
        run: |
          cat config.toml

      - name: Run benchmark unit tests
        run: pytest tests/integration/test_e2e.py --capture=no -p no:asyncio --config config.toml

      - name: Upload md results as step summary
        if: always()
        run: cat dist/results.html >> $GITHUB_STEP_SUMMARY

      - name: Upload Logs / Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            dist/*

================
File: .github/workflows/pypi-release.yml
================
name: Release

on:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_TYPE: "pip"

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Build python dist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
            enable-cache: true
            cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version-file: ".python-version"
            cache: ${{ env.CACHE_TYPE }}

      - name: Bump package version
        run:  uvx --from=toml-cli toml set --toml-path=pyproject.toml project.version ${{ github.ref_name }}

      - name: Build a binary wheel and a source tarball
        run: uv build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

    #   - name: Publish to TestPyPI
    #     run: uv publish  testpypi --token ${{ secrets.TEST_PYPI_API_TOKEN }}

    #   - name: Install the package from TestPyPI
    #     run: |
    #       uv venv test-pypi
    #       source test-pypi/bin/activate
    #       uv pip install notte==${{ github.ref_name }} --default-index testpypi


      - name: Publish to PyPI
        run: uv publish --token ${{ secrets.PYPI_API_TOKEN }}

      - name: Install the package from PyPI
        run: |
          uv venv pypi
          source pypi/bin/activate
          uv pip install notte==${{ github.ref_name }}

================
File: .github/workflows/test-cicd.yml
================
name: cicd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_TYPE: "pip"

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4


      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
            enable-cache: true
            cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          cache: ${{ env.CACHE_TYPE }}

      - name: Cache patchright
        id: cache-patchright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/patchright
            ~/.local/share/patchright
            ${{ github.workspace }}/.patchright
          key: ${{ runner.os }}-patchright-${{ hashFiles('**/pyproject.toml') }}-playwright1155-ffmpeg1011-v1
          restore-keys: |
            ${{ runner.os }}-patchright-${{ hashFiles('**/pyproject.toml') }}-playwright1155-ffmpeg1011-
            ${{ runner.os }}-patchright-

      - name: Cache pre-commit
        id: cache-pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml', '**/pyproject.toml') }}-v1
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Install dependencies
        run: uv sync --dev --all-extras

      - name: Install patchright
        if: steps.cache-patchright.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing patchright"
          uv run patchright install --with-deps chromium  --only-shell

      - name: Install pre-commit
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: uv run pre-commit install --install-hooks

      - name: Run pre-commit
        run: uv run --active pre-commit run --all-files

      - name: Run unit tests
        run: |
          uv run pytest tests --ignore=tests/integration/test_resolution.py --ignore=tests/integration/test_webvoyager_resolution.py --ignore=tests/browser/test_pool.py --ignore=tests/integration/test_e2e.py --ignore=tests/integration/test_webvoyager_scripts.py --durations=10

================
File: .github/release.yml
================
changelog:
  categories:
    - title: What's Changed
      labels:
        - '*'
    - title: New Contributors
      labels:
        - 'first-time-contributor'

================
File: docs/archives/20250307_README.md
================
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![PyPI version](https://img.shields.io/pypi/v/notte)](https://pypi.org/project/notte/)
[![Discord](https://img.shields.io/discord/1312234428444966924?color=7289DA&label=Discord&logo=discord&logoColor=white)](https://discord.gg/atbh5s6bts)
[![PyPI Downloads](https://static.pepy.tech/badge/notte)](https://pepy.tech/projects/notte)

# Notte 🌌

**[Notte](https://www.notte.cc/?ref=github) is a web browser for LLM agents.** It transforms the internet into an agent-friendly environment, turning websites into structured, navigable maps described in natural language. By using natural language commands, Notte minimizes hallucinations, reduces token usage, and lowers costs and latency. It handles the browser complexity so your LLM policies can focus on what they do best: conversational reasoning and planning.

## A new paradigm for web agent navigation:

- Language-first web navigation, no DOM/HTML parsing required
- Treats the web as a structured, natural language action map
- Reinforcement learning style action space and controls

# Install

Requires Python 3.11+

```bash
pip install notte
patchright install --with-deps chromium
```

# Config

Notte uses language models to parse and structure web pages into a structured action space. To get started, you need to provide at least one API key for a supported language model provider. These keys can be configured in `.env` file (use `cp .env.example .env` to get started and loaded into your environment;

```python
os.environ["OPENAI_API_KEY"] = "your-api-key"
# or any other provider(s) you have keys for
```

### Supported default providers

By default, Notte supports the following providers:

- [Cerebras](https://cerebras.ai/inference) fastest, 60K tpm rate limit, wait-list keys
- [Anthropic](https://docs.anthropic.com/en/docs/api/api-reference) 40K tpm rate limit
- [OpenAI](https://platform.openai.com/docs/guides/chat/introduction) 30k tpm rate limit
- [Groq](https://console.groq.com/docs/api-keys) fast, 6K tpm rate limit

# Usage

As a reinforcement learning environment to get full navigation control;

```python
import os
from notte_core.env import NotteEnv, NotteEnvConfig

# setting fast language model provider keys
os.environ['ANTHROPIC_API_KEY'] = "your-api-key"

# Important: this should be run in an async context (e.g. notebook, asyncio, etc.)
# if you are running in a script, you should start `asyncio.run(main())`
async with NotteEnv(NotteEnvConfig().not_headless()) as env:
  # observe a webpage, and take a random action
  obs = await env.observe("https://www.google.com/travel/flights")
  obs = await env.step(obs.space.sample(role="link").id)
```

The observation object contains all you need about the current state of a page (url, screenshot, list of available actions, etc.);

```bash
> obs = env.observe("https://www.google.com/travel/flights")
> print(obs.space.markdown()) # list of available actions
```

```
# Flight Search
* I1: Enters departure location (departureLocation: str = "San Francisco")
* I3: Selects departure date (departureDate: date)
* I6: Selects trip type (tripType: str = "round-trip", allowed=["round-trip", "one-way", "multi-city"])
* B3: Search flights options with current filters

# Website Navigation
* B5: Opens Google apps menu
* L28: Navigates to Google homepage

# User Preferences
* B26: Open menu to change language settings
...
```

You can also scrape data from the page using the `scrape` function;
```python
...
async with NotteEnv(NotteEnvConfig().not_headless()) as env:
  ...
  obs = await env.scrape()
print(obs.data) # data extracted from the page (if any)
```

```
# Flight Search inputs
- Where from?: Paris
- Where to?: London
- Departure: Tue, Jan 14

# Flight Search Results
20 of 284 results returned.
They are ranked based on price and convenience

| Airline       | Departure  | Arrival  | Duration   | Stops     | Price |
|---------------|------------|----------|------------|-----------|-------|
| easyJet       | 10:15 AM   | 10:35 AM | 1 hr 20 min| Nonstop   | $62   |
| Air France    | 4:10 PM    | 4:35 PM  | 1 hr 25 min| Nonstop   | $120  |
```

scrape also supports structured data extraction with Pydantic models, e.g.

```python
from notte_core.env import NotteEnv, NotteEnvConfig
from pydantic import BaseModel, Field
class ArticleSchema(BaseModel):
    title: str
    points: int
    by: str
    commentsURL: str

class TopArticlesSchema(BaseModel):
    top: list[ArticleSchema] = Field(..., max_items=5, description="Top 5 stories")


async with NotteEnv(NotteEnvConfig().disable_perception()) as env:
    obs = await env.scrape(url='https://news.ycombinator.com', response_format=TopArticlesSchema)
    print(obs.data.structured)
```

# Run an AI agent with Notte

You can use Notte conversationally with an LLM agent:

```bash
$ python examples/cli_agent.py --task "subscribe to notte.cc newsletter with ap@agpinto.com"
```

🌌 Use Notte as a backend environment for a web-based LLM agent. In this example, you integrate your own LLM policy, manage the interaction flow, handle errors, and define rewards, all while letting Notte handle webpages parsing/understanding and browser interactions.

or alternatively, you can use the FastAPI server with docker:

```bash
docker build -t notte-fastapi-server .
docker run -d -p 8000:8000 notte-fastapi-server
```

then you can use the server with the following curl command:

```bash
curl -X POST "http://localhost:8000/agent/run" -H "Content-Type: application/json" -d '{"task": "subscribe to notte.cc newsletter with ap@agpinto.com"}'
```







# API services

We offer managed cloud browser sessions with the following premium add-ons:

- **Authentication:** Built-in auth for secure workflows.
- **Caching:** Fast responses with intelligent caching.
- **Action Permissions:** Control over sensitive actions.

Request access to a set of API keys on [notte.cc](https://www.notte.cc/?ref=github)

Then integrate with the SDK;

```python
from notte_core.sdk import NotteClient
url = "https://www.google.com/flights"
with NotteClient(api_key="your-api-key") as env:
    # Navigate to the page and observe its state
    obs = env.observe(url=url)
    # Interact with the page - type "Paris" into input field I1
    obs = env.step(action_id="I1", params="Paris")
    # Print the current state of the page
```

# Main features

- **Web Driver Support:** Compatible with any web driver. Defaults to Playwright.
- **LLM Integration:** Use any LLM as a policy engine with quick prompt tuning.
- **Multi-Step Actions**: Navigate and act across multiple steps.
- **Extensible:** Simple to integrate and customize.

# Advanced Config

### Using multiple keys

If you supply multiple keys in your `.env` file, Notte uses a [llamux](https://github.com/andreakiro/llamux-llm-router) configuration to intelligently select the best model for each invocation. This approach helps avoid rate limits, optimize cost-performance balance, and enhance your experience. You can add more providers or adjust rate limits by modifying the [config file](notte/llms/config/endpoints.csv)

# Contribute

Setup your local working environment;

```bash
uv sync --dev
uv run patchright install --with-deps chromium
uv run pre-commit install
```

Find an issue, fork, open a PR, and merge :)

# License

Notte is released under the [Apache 2.0 license](LICENSE)

================
File: docs/CONTRIBUTING.md
================
# How to Contribute

You can contribute to Notte by submitting a PR or by reporting an issue.

## Submitting a PR

1. Fork the repository
2. Create a new branch
3. Make your changes
4. Submit a PR

## Reporting an Issue

1. Check if the issue already exists
2. If it doesn't, create a new issue
3. Provide a detailed description of the issue
4. Provide a code example if possible

## Installing Notte

Follow the instructions in the [setup docs](../docs/setup.md) file.

================
File: docs/run_ollama_local_models.md
================
# How to use local LLMs (Ollama) to power Notte

## Installing notte in server mode

First you need to install the server version of Notte

```
uv sync --extra server
```

## Installing Ollama
For Mac and Windows, [download Ollama](https://ollama.com/download).

For Linux:
```
curl -fsSL https://ollama.com/install.sh | sh
```

## Downloading models
Ollama has a library of models to choose from, see them [here](https://ollama.com/library).

Before you can use a model, you need to download it (using the name of the model from the library):

```
ollama pull llama3:instruct
```

To view the models you have downloaded and can use:

```
ollama list
```

## Running LiteLLM proxy server

To run LiteLLM with the model you have downloaded, in your terminal:

```
litellm --model ollama/llama3:instruct
```
then you simply need to set the name of the model you want to use inside the notte config object:

## Python code example (notebook)

```python
from notte_agent import Agent
agi = Agent(reasoning_model="ollama/llama3:instruct")
agi.run(task="doom scroll cat memes on google images")
```

notte that there is currently a bug with litellm and ollama which prevents us from using the structured output feature ([issue reference](https://github.com/BerriAI/litellm/issues/8594)).

================
File: docs/sdk_tutorial.md
================
# Notte SDK Tutorial

## Manage your sessions

```python
from notte_core.sdk.client import NotteClient

client = NotteClient(api_key="<your_api_key>")

# start you session
session = client.sessions.start(
    timeout_minutes=5,
)
# get the session status
status = client.sessions.status(session.session_id)
# list your active sessions
active_sessions = client.sessions.list()

# visualize your session (open browser with debug_url)
client.sessions.viewer(session.session_id)
# stop your session
client.sessions.stop(session.session_id)
```

## Connect over CDP

```python
from patchright.async_api import async_playwright
from notte_core.sdk.client import NotteClient

client = NotteClient(api_key="<your-api-key>")

# start notte session
session = client.sessions.start()
debug_info = client.sessions.debug_info(session.session_id)

# connect using CDP
async with async_playwright() as p:
    browser = await p.chromium.connect_over_cdp(debug_info.ws_url)
    page = browser.contexts[0].pages[0]
    _ = await page.goto("https://www.google.com")
    screenshot = await page.screenshot(path="screenshot.png")
    # Work with browser here
    await browser.close()

client.sessions.close(session.session_id)
```

you can also easily visualize the session using the `debug_info.debug_url` url. Paste it in your browser to see the session in action.



## Manage your agents

```python

# start an agent
agent = client.agents.run(
    task="What is the capital of France?",
    url="https://www.google.com",
)
# get the agent status
status = client.agents.status(agent.agent_id)
# list your agents
agents = client.agents.list()
# stop an agent
client.agents.stop(agent.agent_id)
```

Note that starting an agent also starts a session which is automatically stopped when the agent completes its tasks (or is stopped).


## Execute actions in a session

The notte sdk also allows you to `observe` a web page and its actions, `scrape` the page content as well as `execute` actions in a running session.

```python

# start a session
session = client.sessions.start()

# observe a web page
obs = client.sessions.observe(session_id=session.session_id, url="https://www.google.com", keep_alive=True)

# execute an action in the session
action = obs.space.sample(role='link')
obs = client.env.step(session_id=session.session_id, action_id=action.id, keep_alive=True)
# scrape the page content
obs = client.sessions.scrape(session_id=session.session_id, keep_alive=True)
# print the scraped content
print(obs.data.markdown)
```

================
File: docs/setup.md
================
# Local Setup of Notte

To install `notte` locally, run the following commands:
```sh
uv sync --dev --all-extras
uv run pre-commit install
```

`notte` uses `patchright` to automate browser interactions. If you haven't already, you'll need to install the browsers you want to use, e.g. using chromium:

```sh
uv run patchright install --with-deps chromium
```

Copy the `.env.example` file to `.env` and fill in your API keys. Note that by default, `notte` uses `groq/llama-3.3-70b-versatile`. So you need to set the `GROQ_API_KEY` environment variable in your `.env` file. You can set up this key by creating a [GROQ account](https://groq.com/docs/api-reference/introduction) and creating an API key.

```sh
cp .env.example .env
```

Notte uses `litellm` to interface with multiple LLM providers. You can also set other API keys in your `.env` file to use other LLM providers (e.g. `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, etc.)

================
File: examples/benchmark_params.toml
================
[RunParameters]
n_jobs = 1
tries_per_task = 1
evaluator = "None" # no external llm eval, could be webvoyager instead
task_set = "WebVoyagerSingle"
capture_logging = false # whether to display on stdout, or capture and show only in logs
max_task_duration_in_s = 300 # cancel task if it runs for longer than this

[RunParameters.task_set]
name = "WebVoyagerSingle"
# start = None # if we want to run only a slice of tasks
# end = None


[Falco]
use_vision = false
headless = false
model = "cerebras/llama-3.3-70b"
max_steps = 7
history_type = "short_observations_with_short_data"
pool = "None" # could instead be anchor, browserbase, steel etc..
# user_agent = "Mozilla/5.0 (Windows NT 6.2;) Gecko/20100101 Firefox/54.8"

# this being commented out means no proxy is used
# [Falco.proxy]
# server = "hostname"
# username = "username"
# password = "password"

================
File: examples/benchmarks.md
================
# Running benchmarks

Running benchmarks should be as easy as running this command:

❯ `cat examples/benchmark_params.toml | uv run python -m notte_eval.run`

We chose to use a toml file (being piped into the module) because it makes it easy to reproduce experiments, ensuring that we always keep the correct parameters. (see [example toml](/examples/benchmark_params) for relevant parameters we can tune). In this toml file we select which agent to benchmark, on which dataset and which external evaluator to use for determining if the task was handled correctly. For now we support the webvoyager benchmark with the default webvoyager evaluator, but integrating new agents and benchmarks is pretty straightforward!

# Benchmark results

Once a task runs, it creates a folder with the following structure (in current working directory):

```
webvoyager # benchmark name
└── Falco # agent name
    ├── 1741604281 # timestamp of run
    │   ├── Allrecipes_3 # id of the task
    │   │   └── 0 # run_id (useful if we try multiple times each task)
    │   │       ├── results.json # full results
    │   │       ├── results_no_screenshot.json # results, stripping away b64 screenshots for easier readability
    │   │       └── summary.webp # screenshots in animated webp
    │   └── params.json # parameters for this run
    ...
```

Each task runs independently, and will create its own subfolder.
The resulting json files will look something like this:

```
{
  "success": bool,
  "run_id": int,
  "eval": null | {"success": bool, "reason": bool},
  "duration_in_s": float,
  "agent_answer": str,
  "task": {
    "question": str,
    "id": str,
    "answer": str,
    "url": str,
    "website_name": str
  },
  "steps": [
    {
      "url":str,
      "llm_calls": [
        {
          "input_tokens": int,
          "output_tokens": int,
          "messages_in": [
            {
              "role": "system",
              "content": str
            },
            {
              "role": "user",
              "content": str
            },
          ],
          "message_out": {
            "content": str,
            "role": "assistant",
          },
          "pretty_out": str
        }
      ],
      "duration_in_s": float
    },
  ],
  "logs": {},
  "task_description": str,
  "task_id": str,
  "task_website": str,
  "reference_answer":str,
  "total_input_tokens": int,
  "total_output_tokens": int,
  "last_message": str
}


```

================
File: examples/cli_agent.py
================
import asyncio

from dotenv import load_dotenv
from notte_agent.falco.agent import (
    FalcoAgent as Agent,
)
from notte_agent.falco.agent import (
    FalcoAgentConfig as AgentConfig,
)

# Load environment variables
_ = load_dotenv()

if __name__ == "__main__":
    parser = AgentConfig.create_parser()
    _ = parser.add_argument("--task", type=str, required=True, help="The task to run the agent on.")
    args = parser.parse_args()
    config = AgentConfig.from_args(args).map_env(lambda env: env.agent_mode())
    agent = Agent(config=config)

    out = asyncio.run(agent.run(args.task))
    print(out)

# export task="open google flights and book cheapest flight from nyc to sf"
# uv run examples/cli_agent.py --task $task --reasoning_model "openai/gpt-4o" --env.disable_web_security True

================
File: examples/leetcode_agent.py
================
import asyncio
import os

from dotenv import load_dotenv
from notte_agent import Agent
from notte_agent.common.types import AgentResponse
from notte_integrations.credentials.hashicorp.vault import HashiCorpVault


async def main():
    # Load environment variables and create vault
    # Required environment variables for HashiCorp Vault:
    # - VAULT_URL: The URL of your HashiCorp Vault server
    # - VAULT_DEV_ROOT_TOKEN_ID: The root token for authentication in dev mode
    _ = load_dotenv()
    vault = HashiCorpVault.create_from_env()

    # Add leetcode credentials
    email = os.environ["LEETCODE_USERNAME"]
    password = os.environ["LEETCODE_PASSWORD"]
    await vault.add_credentials(url="https://leetcode.com", email=email, password=password)

    agent: Agent = Agent(vault=vault)

    response: AgentResponse = agent.run(
        task=(
            "Go to leetcode.com and solve the problem of the day. when you arrive on the page change the programming language to python."
            "First login to leetcode and then resolve the problem of the day"
            "When there is a cloudflare challenge, click on the box to verify that you are human"
        )
    )
    print(response)


if __name__ == "__main__":
    asyncio.run(main())

================
File: examples/notifier_agent.py
================
import asyncio
import os

from dotenv import load_dotenv
from notte_agent.common.notifier import NotifierAgent
from notte_agent.falco.agent import FalcoAgent as Agent
from notte_agent.falco.agent import FalcoAgentConfig as AgentConfig
from notte_integrations.notifiers.mail import EmailConfig, EmailNotifier

# Load environment variables
_ = load_dotenv()

# Configure email notifier
smtp_server = os.getenv("SMTP_SERVER")
smtp_port = os.getenv("SMTP_PORT")
sender_email = os.getenv("EMAIL_SENDER")
sender_password = os.getenv("EMAIL_PASSWORD")
receiver_email = os.getenv("EMAIL_RECEIVER")

# Check for required environment variables
if not smtp_server or not smtp_port or not sender_email or not sender_password or not receiver_email:
    raise ValueError("SMTP_SERVER, SMTP_PORT, EMAIL_SENDER, EMAIL_PASSWORD, EMAIL_RECEIVER")

# Convert smtp_port to int, providing a default if necessary
try:
    smtp_port = int(smtp_port)
except ValueError:
    raise ValueError(f"SMTP_PORT must be an integer, but got: {smtp_port}")

# Create the EmailConfig
email_config = EmailConfig(
    smtp_server=smtp_server,
    smtp_port=smtp_port,
    sender_email=sender_email,
    sender_password=sender_password,
    receiver_email=receiver_email,
)

notifier = EmailNotifier(email_config)

# Configure the agent
config = AgentConfig().cerebras().map_env(lambda env: env.not_headless().steps(15).disable_web_security())
notifier_agent = NotifierAgent(Agent(config=config), notifier)


async def main():
    return await notifier_agent.run(
        ("Make a summary of the financial times latest news"),
    )


if __name__ == "__main__":
    response = asyncio.run(main())
    print(response)


# Run the async function

================
File: examples/vault_agent.py
================
import asyncio
import os

from dotenv import load_dotenv
from notte_agent.falco.agent import FalcoAgent as Agent
from notte_agent.falco.agent import FalcoAgentConfig as AgentConfig
from notte_integrations.credentials.hashicorp.vault import HashiCorpVault


async def main():
    _ = load_dotenv()

    # Load environment variables and create vault
    # Required environment variables for HashiCorp Vault:
    # - VAULT_URL: The URL of your HashiCorp Vault server
    # - VAULT_DEV_ROOT_TOKEN_ID: The root token for authentication in dev mode
    vault = HashiCorpVault.create_from_env()

    email = os.environ["GITHUB_USERNAME"]
    password = os.environ["GITHUB_PASSWORD"]
    mfa_secret = os.environ["GITHUB_2FA"]

    await vault.add_credentials(
        url="https://github.com", email=email, username=email, password=password, mfa_secret=mfa_secret
    )

    config = (
        AgentConfig()
        .cerebras()
        .map_env(lambda env: (env.disable_web_security().not_headless().gemini().agent_mode().steps(15)))
    )
    agent = Agent(config=config, vault=vault)

    output = await agent.run(
        ("Go to github.com, and login with your provided credentials"),
    )
    print(output)


if __name__ == "__main__":
    # Run the async function
    asyncio.run(main())

================
File: packages/notte-agent/src/notte_agent/common/base.py
================
from abc import ABC, abstractmethod

from notte_agent.common.types import AgentResponse


class BaseAgent(ABC):
    @abstractmethod
    async def run(self, task: str, url: str | None = None) -> AgentResponse:
        pass

================
File: packages/notte-agent/src/notte_agent/common/config.py
================
from abc import ABC, abstractmethod
from argparse import ArgumentParser, Namespace
from collections.abc import Callable
from enum import StrEnum
from typing import Any, ClassVar, Self, get_origin, get_type_hints

from notte_browser.env import NotteEnvConfig
from notte_core.common.config import FrozenConfig
from notte_core.llms.engine import LlmModel
from notte_sdk.types import DEFAULT_MAX_NB_STEPS
from pydantic import Field, model_validator


class RaiseCondition(StrEnum):
    """How to raise an error when the agent fails to complete a step.

    Either immediately upon failure, after retry, or never.
    """

    IMMEDIATELY = "immediately"
    RETRY = "retry"
    NEVER = "never"


class DefaultAgentArgs(StrEnum):
    ENV_DISABLE_WEB_SECURITY = "disable_web_security"
    ENV_HEADLESS = "headless"
    ENV_PERCEPTION_MODEL = "perception_model"
    ENV_MAX_STEPS = "max_steps"

    def with_prefix(self: Self, prefix: str = "env") -> str:
        return f"{prefix}.{self.value}"


class AgentConfig(FrozenConfig, ABC):
    # make env private to avoid exposing the NotteEnvConfig class
    env: NotteEnvConfig = Field(init=False)
    reasoning_model: str = Field(
        default=LlmModel.default(), description="The model to use for reasoning (i.e taking actions)."
    )
    include_screenshot: bool = Field(default=False, description="Whether to include a screenshot in the response.")
    max_history_tokens: int | None = Field(
        default=None,
        description="The maximum number of tokens in the history. When the history exceeds this limit, the oldest messages are discarded.",
    )
    max_error_length: int = Field(
        default=500, description="The maximum length of an error message to be forwarded to the reasoning model."
    )
    raise_condition: RaiseCondition = Field(
        default=RaiseCondition.RETRY, description="How to raise an error when the agent fails to complete a step."
    )
    max_consecutive_failures: int = Field(
        default=3, description="The maximum number of consecutive failures before the agent gives up."
    )
    force_env: bool | None = Field(
        default=None,
        description="Whether to allow the user to set the environment.",
    )

    @classmethod
    @abstractmethod
    def default_env(cls) -> NotteEnvConfig:
        raise NotImplementedError("Subclasses must implement this method")

    @model_validator(mode="before")
    @classmethod
    def set_env(cls, values: dict[str, Any]) -> dict[str, Any]:
        if "env" in values:
            if "force_env" in values and values["force_env"]:
                del values["force_env"]
                return values
            raise ValueError("Env should not be set by the user. Set `default_env` instead.")
        values["env"] = cls.default_env()  # Set the env field using the subclass's method
        return values

    def groq(self: Self, deep: bool = True) -> Self:
        return self.model(LlmModel.groq, deep=deep)

    def openai(self: Self, deep: bool = True) -> Self:
        return self.model(LlmModel.openai, deep=deep)

    def gemini(self: Self, deep: bool = True) -> Self:
        return self.model(LlmModel.gemini, deep=deep)

    def cerebras(self: Self, deep: bool = True) -> Self:
        return self.model(LlmModel.cerebras, deep=deep)

    def model(self: Self, model: LlmModel, deep: bool = True) -> Self:
        config = self._copy_and_validate(reasoning_model=model, max_history_tokens=LlmModel.context_length(model))
        if deep:
            config = config.map_env(lambda env: env.model(model))
        return config

    def use_vision(self: Self, value: bool = True) -> Self:
        return self._copy_and_validate(include_screenshot=value)

    def dev_mode(self: Self) -> Self:
        return self._copy_and_validate(
            raise_condition=RaiseCondition.IMMEDIATELY,
            max_error_length=1000,
            env=self.env.dev_mode(),
            force_env=True,
        )

    def set_raise_condition(self: Self, value: RaiseCondition) -> Self:
        return self._copy_and_validate(raise_condition=value)

    def map_env(self: Self, env: Callable[[NotteEnvConfig], NotteEnvConfig]) -> Self:
        return self._copy_and_validate(env=env(self.env), force_env=True)

    @staticmethod
    def _get_arg_type(python_type: Any) -> Any:
        """Maps Python types to argparse types."""
        type_map = {
            str: str,
            int: int,
            float: float,
            bool: bool,
        }
        return type_map.get(python_type, str)

    @staticmethod
    def create_base_parser() -> ArgumentParser:
        """Creates a base ArgumentParser with all the fields from the config."""
        parser = ArgumentParser()
        _ = parser.add_argument(
            f"--{DefaultAgentArgs.ENV_HEADLESS.with_prefix()}",
            action="store_true",
            help="Whether to run the browser in headless mode.",
        )
        _ = parser.add_argument(
            f"--{DefaultAgentArgs.ENV_DISABLE_WEB_SECURITY.with_prefix()}",
            action="store_true",
            help="Whether disable web security.",
        )
        _ = parser.add_argument(
            f"--{DefaultAgentArgs.ENV_PERCEPTION_MODEL.with_prefix()}",
            type=str,
            default=None,
            help="The model to use for perception.",
        )
        _ = parser.add_argument(
            f"--{DefaultAgentArgs.ENV_MAX_STEPS.with_prefix()}",
            type=int,
            default=DEFAULT_MAX_NB_STEPS,
            help="The maximum number of steps the agent can take.",
        )
        return parser

    @classmethod
    def create_parser(cls) -> ArgumentParser:
        """Creates an ArgumentParser with all the fields from the config."""
        parser = cls.create_base_parser()
        hints = get_type_hints(cls)

        for field_name, field_info in cls.model_fields.items():
            if field_name == "env":
                continue
            field_type = hints.get(field_name)
            if get_origin(field_type) is ClassVar:
                continue

            default = field_info.default
            help_text = field_info.description or "no description available"
            arg_type = cls._get_arg_type(field_type)

            _ = parser.add_argument(
                f"--{field_name.replace('_', '-')}",
                type=arg_type,
                default=default,
                help=f"{help_text} (default: {default})",
            )

        return parser

    @classmethod
    def from_args(cls: type[Self], args: Namespace) -> Self:
        """Creates an AgentConfig from a Namespace of arguments.

        The return type will match the class that called this method.
        """
        disallowed_args = ["task", "env.window.headless"]

        env_args = {
            k.replace("env.", "").replace("-", "_"): v
            for k, v in vars(args).items()
            if k.startswith("env.") and k not in disallowed_args
        }
        agent_args = {
            k.replace("-", "_"): v
            for k, v in vars(args).items()
            if not k.startswith("env.") and k not in disallowed_args
        }

        def update_env(env: NotteEnvConfig) -> NotteEnvConfig:
            operations: list[Callable[[NotteEnvConfig], NotteEnvConfig]] = []
            if DefaultAgentArgs.ENV_HEADLESS in env_args:
                headless = env_args[DefaultAgentArgs.ENV_HEADLESS]
                operations.append(lambda env: env.headless(headless))
                del env_args[DefaultAgentArgs.ENV_HEADLESS]
            if DefaultAgentArgs.ENV_DISABLE_WEB_SECURITY in env_args:
                disable_web_security = env_args[DefaultAgentArgs.ENV_DISABLE_WEB_SECURITY]
                operations.append(
                    lambda env: env.disable_web_security() if disable_web_security else env.enable_web_security()
                )
                del env_args[DefaultAgentArgs.ENV_DISABLE_WEB_SECURITY]

            env = env._copy_and_validate(**env_args)
            for operation in operations:
                env = operation(env)
            return env

        return cls(**agent_args).map_env(update_env)

================
File: packages/notte-agent/src/notte_agent/common/conversation.py
================
import base64
import json
from dataclasses import dataclass, field
from typing import TypeVar

from litellm import (
    AllMessageValues,
    ChatCompletionAssistantMessage,
    ChatCompletionAssistantToolCall,
    ChatCompletionImageObject,
    ChatCompletionSystemMessage,
    ChatCompletionTextObject,
    ChatCompletionToolMessage,
    ChatCompletionUserMessage,
    ModelResponse,  # type: ignore[reportPrivateImportUsage]
    OpenAIMessageContent,
)
from litellm.utils import token_counter  # type: ignore[reportUnknownVariableType]
from loguru import logger
from notte_core.errors.llm import LLMParsingError
from notte_core.llms.engine import LlmModel, StructuredContent
from pydantic import BaseModel

# Define valid message roles


@dataclass
class CachedMessage:
    """Message with cached token count"""

    message: AllMessageValues
    token_count: int


T = TypeVar("T", bound=BaseModel)


@dataclass
class Conversation:
    """Manages conversation history and message extraction"""

    history: list[CachedMessage] = field(default_factory=list)
    json_extractor: StructuredContent = field(default_factory=lambda: StructuredContent(inner_tag="json"))
    autosize: bool = False
    model: str = LlmModel.default()
    max_tokens: int | None = None
    conservative_factor: float = 0.8

    _total_tokens: int = field(default=0, init=False)
    convert_tools_to_assistant: bool = False

    def __post_init__(self) -> None:
        if self.max_tokens is None:
            self.max_tokens = LlmModel.context_length(self.model)

    @property
    def default_max_tokens(self) -> int:
        if self.max_tokens is None:
            raise ValueError("max_tokens is not set")
        return self.max_tokens

    @property
    def conservative_max_tokens(self) -> int:
        """Since token count isn't 100% accurate, allow to be
        slightly conservative, to make sure we trim under the total context length"""
        return int(self.default_max_tokens * self.conservative_factor)

    def count_tokens(self, content: AllMessageValues) -> int:
        """Count the number of tokens in a list of messages"""
        return token_counter(model=self.model, messages=[content])

    def total_tokens(self) -> int:
        """Get total tokens in conversation history"""
        return self._total_tokens

    def trim_history_to_fit(self, new_content: AllMessageValues) -> None:
        """Trim history to make room for new content while preserving system messages"""
        if not self.autosize:
            return

        # Always keep system messages
        init_messages: list[CachedMessage] = []
        other_messages: list[CachedMessage] = []
        is_init_msg = True
        for msg in self.history:
            match is_init_msg, msg.message["role"]:
                case True, "system":
                    init_messages.append(msg)
                case True, "user":
                    # keep first user message as init message (need task description)
                    is_init_msg = False
                    init_messages.append(msg)
                case _, _:
                    other_messages.append(msg)

        new_content_tokens = self.count_tokens(new_content)
        init_tokens = sum(msg.token_count for msg in init_messages)
        available_tokens = self.conservative_max_tokens - init_tokens - new_content_tokens

        # Remove oldest non-system messages until we have room
        current_tokens = sum(msg.token_count for msg in other_messages)
        has_trimmed = 0
        while other_messages and current_tokens > available_tokens:
            removed = other_messages.pop(0)
            current_tokens -= removed.token_count
            has_trimmed += 1

        if has_trimmed > 0:
            logger.info(
                f"Trimmed {has_trimmed} message(s) to stay under max token limit (i.e {self.default_max_tokens // 1000}k)"
            )

        self.history = init_messages + other_messages
        self._total_tokens = sum(msg.token_count for msg in self.history)

    def _add_message(self, msg: AllMessageValues) -> None:
        """Internal helper to add a message with token counting"""
        token_count = self.count_tokens(msg)
        if self.autosize:
            self.trim_history_to_fit(msg)
        cached_msg = CachedMessage(message=msg, token_count=token_count)
        self.history.append(cached_msg)
        self._total_tokens += token_count

    def add_system_message(self, content: str) -> None:
        """Add a system message to the conversation"""
        self._add_message(ChatCompletionSystemMessage(role="system", content=content))

    def format_image_content(self, image: bytes) -> ChatCompletionImageObject:
        image_str = base64.b64encode(image).decode("utf-8")
        return ChatCompletionImageObject(
            type="image_url",
            image_url={"url": f"data:image/png;base64,{image_str}"},
        )

    def format_user_contents(self, contents: list[str | bytes]) -> OpenAIMessageContent:
        return [
            (
                ChatCompletionTextObject(type="text", text=content)
                if isinstance(content, str)
                else self.format_image_content(content)
            )
            for content in contents
        ]

    def add_user_message(self, content: OpenAIMessageContent, image: bytes | None = None) -> None:
        """Add a user message to the conversation"""
        _content: OpenAIMessageContent = content
        if image is not None and isinstance(content, str):
            _content = self.format_user_contents([content, image])
        self._add_message(ChatCompletionUserMessage(role="user", content=_content))

    def add_user_messages(self, contents: list[str | bytes]) -> None:
        """Add a user message to the conversation"""
        _content: OpenAIMessageContent = self.format_user_contents(contents)
        self._add_message(ChatCompletionUserMessage(role="user", content=_content))

    def add_assistant_message(self, content: str) -> None:
        """Add an assistant message to the conversation"""
        self._add_message(ChatCompletionAssistantMessage(role="assistant", content=content))

    def add_tool_message(self, parsed_content: BaseModel, tool_id: str) -> None:
        """Add a tool message to the conversation"""
        content: str = str(parsed_content.model_dump(mode="json", exclude_unset=True))
        if not self.convert_tools_to_assistant:
            self._add_message(
                ChatCompletionToolMessage(
                    role="tool",
                    content=content,
                    tool_call_id=tool_id,
                )
            )
        else:
            # Optional, convert tools to assistant role
            self._add_message(
                ChatCompletionAssistantMessage(
                    role="assistant",
                    content="",
                    tool_calls=[
                        ChatCompletionAssistantToolCall(
                            id=tool_id,
                            type="function",
                            function={
                                "arguments": content,
                                "name": parsed_content.__class__.__name__,
                            },
                        )
                    ],
                )
            )

    def parse_structured_response(self, response: ModelResponse | str, model: type[T]) -> T:
        """Parse a structured response from the LLM into a Pydantic model

        Args:
            response: The LLM model response
            model: The Pydantic model class to parse into

        Returns:
            Instance of the specified Pydantic model

        Raises:
            LLMParsingError: If response cannot be parsed into the model
        """
        if isinstance(response, str):
            return model.model_validate(response)
        if not response.choices:
            raise LLMParsingError("No choices in LLM response")

        choice = response.choices[0]
        # Extract content from either streaming or non-streaming response
        content: str | None = None
        if isinstance(choice, dict):
            message = choice.get("message", {})  # type: ignore[reportUnknownMemberType]
            if isinstance(message, dict):
                content = message.get("content")  # type: ignore[reportUnknownMemberType]
        else:
            content = getattr(choice, "text")

        if not content:
            raise LLMParsingError("No content in LLM response message")

        try:
            if content is None or not isinstance(content, str):
                raise LLMParsingError("No content in LLM response message")
            extracted = self.json_extractor.extract(content)
            return model.model_validate_json(extracted)
        except (json.JSONDecodeError, ValueError) as e:
            raise LLMParsingError(f"Failed to parse response into {model.__name__}: {str(e)}")

    def messages(self) -> list[AllMessageValues]:
        """Get messages in LiteLLM format

        Returns:
            List of messages formatted for LiteLLM

        Note:
            This converts our internal message format to litellm's format.
            litellm only supports 'assistant' role, so we map all roles to that.
        """
        return [msg.message for msg in self.history]

    def reset(self) -> None:
        """Clear all messages from the conversation"""
        self.history.clear()
        self._total_tokens = 0

================
File: packages/notte-agent/src/notte_agent/common/notifier.py
================
from abc import ABC, abstractmethod

from typing_extensions import override

from notte_agent.common.base import BaseAgent
from notte_agent.common.types import AgentResponse


class BaseNotifier(ABC):
    """Base class for notification implementations."""

    @abstractmethod
    async def send_message(self, text: str) -> None:
        """Send a message using the specific notification service."""
        pass

    async def notify(self, task: str, result: AgentResponse) -> None:
        """Send a notification about the task result.

        Args:
            task: The task description
            result: The agent's response to be sent
        """
        message = f"""
Notte Agent Report 🌙

Task Details:
-------------
Task: {task}
Execution Time: {round(result.duration_in_s, 2)} seconds
Status: {"✅ Success" if result.success else "❌ Failed"}


Agent Response:
--------------
{result.answer}

Powered by Notte 🌒"""
        await self.send_message(text=message)


class NotifierAgent(BaseAgent):
    """Agent wrapper that sends notifications after task completion."""

    def __init__(self, agent: BaseAgent, notifier: BaseNotifier):
        self.agent: BaseAgent = agent
        self.notifier: BaseNotifier = notifier

    @override
    async def run(self, task: str, url: str | None = None) -> AgentResponse:
        """Run the agent and send notification about the result."""
        result = await self.agent.run(task, url)
        await self.notifier.notify(task, result)
        return result

================
File: packages/notte-agent/src/notte_agent/common/parser.py
================
import json
import re
from abc import ABC, abstractmethod
from typing import Literal

from notte_core.actions.base import ExecutableAction
from notte_core.controller.actions import (
    BaseAction,
    CompletionAction,
    GotoAction,
    ScrapeAction,
)
from pydantic import BaseModel


class NotteStepAgentOutput(BaseModel):
    observe: GotoAction | None = None
    step: ExecutableAction | None = None
    scrape: ScrapeAction | None = None
    completion: CompletionAction | None = None

    @property
    def endpoint(self) -> Literal["observe", "step", "scrape", "done"] | None:
        if self.observe is not None:
            return "observe"
        elif self.step is not None:
            return "step"
        elif self.scrape is not None:
            return "scrape"
        elif self.completion is not None:
            return "done"
        else:
            return None

    @property
    def action(self) -> BaseAction | None:
        if self.observe is not None:
            return self.observe
        elif self.step is not None:
            return self.step
        elif self.scrape is not None:
            return self.scrape
        else:
            return None


class ParameterizedAction(BaseModel):
    action_id: str
    params: dict[str, str] | None = None


class BaseParser(ABC):
    @abstractmethod
    def parse(self, text: str) -> NotteStepAgentOutput | None:
        raise NotImplementedError

    @abstractmethod
    def example_format(self, endpoint: Literal["observe", "step", "scrape"]) -> str | None:
        raise NotImplementedError

    @staticmethod
    def search_pattern(text: str, tag: str) -> str | None:
        pattern = re.compile(rf"<{tag}>(.*?)</{tag}>", re.IGNORECASE | re.DOTALL)
        match = pattern.search(text)
        return match.group(1).strip() if match else None

    @staticmethod
    def parse_json(text: str, tag: str | None = None) -> dict[str, str]:
        if tag is not None:
            _text = BaseParser.search_pattern(text, tag)
            if _text is None:
                raise ValueError(f"No text found within <{tag}> tags")
            text = _text
        try:
            data: dict[str, str] = json.loads(text)
        except json.JSONDecodeError:
            raise ValueError("Invalid JSON in action")
        return data

================
File: packages/notte-agent/src/notte_agent/common/perception.py
================
from abc import ABC, abstractmethod

from notte_core.browser.observation import Observation


class BasePerception(ABC):
    @abstractmethod
    def perceive_metadata(self, obs: Observation) -> str:
        pass

    @abstractmethod
    def perceive_actions(self, obs: Observation) -> str:
        pass

    @abstractmethod
    def perceive_data(self, obs: Observation) -> str:
        pass

    @abstractmethod
    def perceive(self, obs: Observation) -> str:
        pass

================
File: packages/notte-agent/src/notte_agent/common/prompt.py
================
from abc import ABC, abstractmethod


class BasePrompt(ABC):
    @abstractmethod
    def system(self) -> str:
        pass

    @abstractmethod
    def output_format_rules(self) -> str:
        pass

    @abstractmethod
    def select_action_rules(self) -> str:
        pass

================
File: packages/notte-agent/src/notte_agent/common/safe_executor.py
================
from collections.abc import Awaitable
from typing import Callable, Generic, TypeVar, final

from notte_core.errors.base import NotteBaseError
from notte_core.errors.provider import RateLimitError
from pydantic import BaseModel
from pydantic_core import ValidationError

S = TypeVar("S")  # Source type
T = TypeVar("T")  # Target type


class ExecutionStatus(BaseModel, Generic[S, T]):
    input: S
    output: T | None
    success: bool
    message: str

    def get(self) -> T:
        if self.output is None or not self.success:
            raise ValueError(f"Execution failed with message: {self.message}")
        return self.output


class StepExecutionFailure(NotteBaseError):
    def __init__(self, message: str):
        super().__init__(
            user_message=message,
            agent_message=message,
            dev_message=message,
        )


class MaxConsecutiveFailuresError(NotteBaseError):
    def __init__(self, max_failures: int):
        self.max_failures: int = max_failures
        message = f"Max consecutive failures reached in a single step: {max_failures}."
        super().__init__(
            user_message=message,
            agent_message=message,
            dev_message=message,
        )


@final
class SafeActionExecutor(Generic[S, T]):
    def __init__(
        self,
        func: Callable[[S], Awaitable[T]],
        max_consecutive_failures: int = 3,
        raise_on_failure: bool = True,
    ) -> None:
        self.func = func
        self.max_consecutive_failures = max_consecutive_failures
        self.consecutive_failures = 0
        self.raise_on_failure = raise_on_failure

    def reset(self) -> None:
        self.consecutive_failures = 0

    def on_failure(self, input_data: S, error_msg: str, e: Exception) -> ExecutionStatus[S, T]:
        self.consecutive_failures += 1
        if self.consecutive_failures >= self.max_consecutive_failures:
            raise MaxConsecutiveFailuresError(self.max_consecutive_failures) from e
        if self.raise_on_failure:
            raise StepExecutionFailure(error_msg) from e
        return ExecutionStatus(
            input=input_data,
            output=None,
            success=False,
            message=error_msg,
        )

    async def execute(self, input_data: S) -> ExecutionStatus[S, T]:
        try:
            result = await self.func(input_data)
            self.consecutive_failures = 0
            return ExecutionStatus(
                input=input_data,
                success=True,
                output=result,
                message=f"Successfully executed action with input: {input_data}",
            )
        except RateLimitError as e:
            return self.on_failure(input_data, "Rate limit reached. Waiting before retry.", e)
        except NotteBaseError as e:
            # When raise_on_failure is True, we use the dev message to give more details to the user
            msg = e.dev_message if self.raise_on_failure else e.agent_message
            return self.on_failure(input_data, msg, e)
        except ValidationError as e:
            return self.on_failure(
                input_data,
                (
                    "JSON Schema Validation error: The output format is invalid. "
                    f"Please ensure your response follows the expected schema. Details: {str(e)}"
                ),
                e,
            )
        except Exception as e:
            return self.on_failure(input_data, f"An unexpected error occurred: {e}", e)

================
File: packages/notte-agent/src/notte_agent/common/trajectory_history.py
================
from abc import ABC, abstractmethod
from typing import Generic

from notte_core.browser.observation import Observation
from notte_core.common.tracer import TStepAgentOutput
from notte_core.controller.actions import BaseAction, GotoAction
from pydantic import BaseModel, Field

from notte_agent.common.safe_executor import ExecutionStatus

ExecutionStepStatus = ExecutionStatus[BaseAction, Observation]


class TrajectoryStep(BaseModel, Generic[TStepAgentOutput]):
    agent_response: TStepAgentOutput
    results: list[ExecutionStepStatus]

    def observations(self) -> list[Observation]:
        return [result.output for result in self.results if result.output is not None]


def trim_message(message: str, max_length: int | None = None) -> str:
    if max_length is None or len(message) <= max_length:
        return message
    return f"...{message[-max_length:]}"


class TrajectoryHistory(BaseModel, ABC, Generic[TStepAgentOutput]):  # type: ignore[reportUnsafeMultipleInheritance]
    steps: list[TrajectoryStep[TStepAgentOutput]] = Field(default_factory=list)
    max_error_length: int | None = None

    def reset(self) -> None:
        self.steps = []

    def perceive(self) -> str:
        steps = "\n".join([self.perceive_step(step, step_idx=i) for i, step in enumerate(self.steps)])
        return f"""
[Start of action execution history memory]
{steps or self.start_rules()}
[End of action execution history memory]
    """

    def start_rules(self) -> str:
        return f"""
No action executed so far...
Your first action should always be a `{GotoAction.name()}` action with a url related to the task.
You should reflect what url best fits the task you are trying to solve to start the task, e.g.
- flight search task => https://www.google.com/travel/flights
- go to reddit => https://www.reddit.com
- ...
ONLY if you have ABSOLUTELY no idea what to do, you can use `https://www.google.com` as the default url.
THIS SHOULD BE THE LAST RESORT.
"""

    def perceive_step_result(
        self,
        result: ExecutionStepStatus,
        include_ids: bool = False,
        include_data: bool = False,
    ) -> str:
        action = result.input
        id_str = f" with id={action.id}" if include_ids else ""
        if not result.success:
            err_msg = trim_message(result.message, self.max_error_length)
            return f"❌ action '{action.name()}'{id_str} failed with error: {err_msg}"
        success_msg = f"✅ action '{action.name()}'{id_str} succeeded: '{action.execution_message()}'"
        data = result.get().data
        if include_data and data is not None and data.structured is not None and data.structured.data is not None:
            return f"{success_msg}\n\nExtracted JSON data:\n{data.structured.data.model_dump_json()}"
        return success_msg

    @abstractmethod
    def perceive_step(
        self,
        step: TrajectoryStep[TStepAgentOutput],
        step_idx: int = 0,
        include_ids: bool = False,
        include_data: bool = True,
    ) -> str:
        raise NotImplementedError

    @abstractmethod
    def add_output(self, output: TStepAgentOutput) -> None:
        raise NotImplementedError

    def add_step(self, step: ExecutionStepStatus) -> None:
        if len(self.steps) == 0:
            raise ValueError("Cannot add step to empty trajectory. Use `add_output` first.")
        else:
            self.steps[-1].results.append(step)

    def observations(self) -> list[Observation]:
        return [obs for step in self.steps for obs in step.observations()]

    def last_obs(self) -> Observation | None:
        for step in self.steps[::-1]:
            for step_result in step.results[::-1]:
                if step_result.success and step_result.output is not None:
                    return step_result.output
        return None

================
File: packages/notte-agent/src/notte_agent/common/types.py
================
from __future__ import annotations

from litellm import AllMessageValues
from notte_browser.env import TrajectoryStep
from notte_core.common.tracer import LlmUsageDictTracer
from notte_core.utils.webp_replay import ScreenshotReplay
from pydantic import BaseModel
from typing_extensions import override

from notte_agent.common.trajectory_history import TrajectoryStep as AgentTrajectoryStep


class AgentResponse(BaseModel):
    success: bool
    answer: str
    env_trajectory: list[TrajectoryStep]
    agent_trajectory: list[AgentTrajectoryStep[BaseModel]]
    messages: list[AllMessageValues] | None = None
    llm_usage: list[LlmUsageDictTracer.LlmUsage]
    duration_in_s: float = -1

    @override
    def __str__(self) -> str:
        return (
            f"AgentResponse(success={self.success}, duration_in_s={round(self.duration_in_s, 2)}, answer={self.answer})"
        )

    def replay(self) -> bytes:
        screenshots: list[bytes] = [
            obs.screenshot
            for step in self.agent_trajectory
            for obs in step.observations()
            if obs.screenshot is not None
        ]
        if len(screenshots) == 0:
            raise ValueError("No screenshots found in agent trajectory")
        return ScreenshotReplay.from_bytes(screenshots).summary_webp()

    @override
    def __repr__(self) -> str:
        return self.__str__()

================
File: packages/notte-agent/src/notte_agent/common/validator.py
================
from typing import final

import chevron
from notte_browser.env import TrajectoryStep
from notte_core.controller.actions import CompletionAction
from notte_core.llms.engine import LLMEngine
from pydantic import BaseModel

from notte_agent.common.conversation import Conversation
from notte_agent.common.perception import BasePerception

system_rules = """
You are a validator of an agent who interacts with a browser.
Validate if the output of last action is what the user wanted and if the task is completed.
If the task is unclear defined, you can let it pass.
But if something is missing or the image does not show what was requested dont let it pass.
Try to understand the page and help the model with suggestions like scroll, do x, ... to get the solution right.

Task to validate: {{task}}.

Return a JSON object with 2 keys: `is_valid` and `reason`:
- `is_valid` is a boolean that indicates if the output is correct.
- `reason` is a string that explains why it is valid or not.

Example:
```json
{{&example}}
```

Your turn:
"""


class CompletionValidation(BaseModel):
    is_valid: bool
    reason: str


@final
class CompletionValidator:
    def __init__(
        self,
        llm: LLMEngine,
        perception: BasePerception,
        use_vision: bool = True,
        include_attributes: bool = True,
    ):
        self.use_vision = use_vision
        self.include_attributes = include_attributes
        self.llm: LLMEngine = llm
        self.conv: Conversation = Conversation()
        self.perception: BasePerception = perception

    @staticmethod
    def example() -> CompletionValidation:
        return CompletionValidation(
            is_valid=False,
            reason="The user wanted to search for 'cat photos', but the agent searched for 'dog photos' instead.",
        )

    def validation_message(
        self,
        output: CompletionAction,
        step: TrajectoryStep,
    ) -> str:
        return f"""
Last observation:
{self.perception.perceive(step.obs)}

Last action:
{step.action.model_dump_json(exclude_unset=True)}

Agent task output:
{output}
"""

    def validate(
        self,
        task: str,
        output: CompletionAction,
        step: TrajectoryStep,
    ) -> CompletionValidation:
        """Validate the output of the last action is what the user wanted"""
        self.conv.reset()
        system_prompt = chevron.render(system_rules, {"task": task, "example": self.example().model_dump_json()})
        self.conv.add_system_message(content=system_prompt)
        self.conv.add_user_message(content=self.validation_message(output, step))

        answer: CompletionValidation = self.llm.structured_completion(self.conv.messages(), CompletionValidation)
        return answer

================
File: packages/notte-agent/src/notte_agent/falco/prompts/system_prompt_multi_actions.md
================
You are a precise browser automation agent that interacts with websites through structured commands.
Your role is to:
1. Analyze the provided webpage elements and structure
2. Plan a sequence of actions to accomplish the given task
3. Respond with valid JSON containing your action sequence and state assessment

Current date and time: {{timstamp}}

INPUT STRUCTURE:
1. Current URL: The webpage you're currently on
2. Available Tabs: List of open browser tabs
3. Interactive Elements: List in the format:
   id[:]<element_type>element_text</element_type>
   - `id`: identifier for interaction. `ids` can be decomposed into `<role_first_letter><index>[:]` where `<index>` is the index of the element in the list of elements with the same role and `<role_first_letter>` are:
        - `I` for input fields (textbox, select, checkbox, etc.)
        - `B` for buttons
        - `L` for links
        - `F` for figures and images
        - `O` for options in select elements
        - `M` for miscallaneous elements (e.g. modals, dialogs, etc.) that are only clickable for the most part.
   - `element_type`: HTML element type (button, input, etc.)
   - `element_text`: Visible text or element description

Example:
B1[:]<button>Submit Form</button>
_[:] Non-interactive text


Notes:
- Only elements with `ids` are interactive
- `_[:]` elements provide context but cannot be interacted with

1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
```json
{{& example_step}}
```

2. ACTIONS: You can specify multiple actions in the list to be executed in sequence. But always specify only one action name per item.

   Common action sequences:
   - Form filling:
```json
{{& example_form_filling}}
```
   - Navigation and extraction:
```json
{{& example_navigation_and_extraction}}
```

CRITICAL: some actions sequences are invalid because they cannot be executed in the same step without triggering a page change:
- `link clicks` always trigger a page change and hence cannot be part of multiple actions, e.g. this sequence is invalid:
```json
{{& example_invalid_sequence}}
```



3. ELEMENT INTERACTION:
   - Only use `ids` that exist in the provided element list
   - Each element has a unique `id` (e.g., `I2[:]<button>`)
   - Elements marked with `_[:]` are non-interactive (for context only)

4. NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for

5. TASK COMPLETION:
   - Use the `{{completion_action_name}}` action as the last action as soon as the task is complete
   - Don't hallucinate actions
   - If the task requires specific information - make sure to include everything in the done function. This is what the user will see.
   - If you are running out of steps (current step), think about speeding it up, and ALWAYS use the done action as the last action.

   - Example of sucessfuly `{{completion_action_name}}` action:
```json
{{& completion_example}}
```

6. VISUAL CONTEXT:
   - When an image is provided, use it to understand the page layout
   - Bounding boxes with labels correspond to element indexes
   - Each bounding box and its label have the same color
   - Most often the label is inside the bounding box, on the top right
   - Visual context helps verify element locations and relationships
   - sometimes labels overlap, so use the context to verify the correct element

7. Form filling:
   - If you fill an input field and your action sequence is interrupted, most often a list with suggestions popped up under the field and you need to first select the right element from the suggestion list.

8. ACTION SEQUENCING:
   - Actions are executed in the order they appear in the list
   - Each action should logically follow from the previous one
   - If the page changes after an action, the sequence is interrupted and you get the new state.
   - If content only disappears the sequence continues.
   - Only provide the action sequence until you think the page will change.
   - Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page like saving, extracting, checkboxes...
   - only use multiple actions if it makes sense.
   - use maximum {{max_actions_per_step}} actions per sequence

9. Long tasks:
- If the task is long keep track of the status in the memory. If the ultimate task requires multiple subinformation, keep track of the status in the memory

Functions:
{{& action_description}}

Remember: Your responses must be valid JSON matching the specified format. Each action in the sequence must be valid.

================
File: packages/notte-agent/src/notte_agent/falco/prompts/system_prompt_single_action.md
================
You are a precise browser automation agent that interacts with websites through structured commands.
Your role is to:
1. Analyze the provided webpage elements and structure
2. Plan a sequence of actions to accomplish the given task
3. Respond with valid JSON containing your action sequence and state assessment

Current date and time: {{timstamp}}

INPUT STRUCTURE:
1. Current URL: The webpage you're currently on
2. Available Tabs: List of open browser tabs
3. Interactive Elements: List in the format:
   id[:]<element_type>element_text</element_type>
   - `id`: identifier for interaction. `ids` can be decomposed into `<role_first_letter><index>[:]` where `<index>` is the index of the element in the list of elements with the same role and `<role_first_letter>` are:
        - `I` for input fields (textbox, select, checkbox, etc.)
        - `B` for buttons
        - `L` for links
        - `F` for figures and images
        - `O` for options in select elements
        - `M` for miscallaneous elements (e.g. modals, dialogs, etc.) that are only clickable for the most part.
   - `element_type`: HTML element type (button, input, etc.)
   - `element_text`: Visible text or element description

Example:
B1[:]<button>Submit Form</button>
_[:] Non-interactive text


Notes:
- Only elements with `ids` are interactive
- `_[:]` elements provide context but cannot be interacted with

1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
```json
{{& example_step}}
```


2. ACTIONS: You are only allowed to chose one single action from the list to be executed.

You will find below some common actions sequences so that you can undertand the flow of some tasks.
IDS presented in those sequences correspond to interactionable elements found in the page.
You might encounter the same ids, but never assume them to exist, or have the same role.

   Common action sequences:
   - Form filling:
```json
{{& example_form_filling}}
```
   - Navigation and extraction:
```json
{{& example_navigation_and_extraction}}
```

REMEMBER: You are NEVER allowed to specify multiple actions in the list of actions.


3. ELEMENT INTERACTION:
   - Only use `ids` that exist in the provided element list
   - Each element has a unique `id` (e.g., `I2[:]<button>`)
   - Elements marked with `_[:]` are non-interactive (for context only)

4. NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for

5. TASK COMPLETION:
   - Use the `{{completion_action_name}}` action as the last action as soon as the task is complete
   - Don't hallucinate actions
   - If the task requires specific information - make sure to include everything in the `{{completion_action_name}}` function. This is what the user will see.
   - If you are running out of steps (current step), think about speeding it up, and ALWAYS use the `{{completion_action_name}}` action as the last action.
   - Note that the `{{completion_action_name}}` can fail because an external validator failed to validate the output. If this happens, you should reflect on why the output is invalid and try to fix it.

   - Example of sucessfuly `{{completion_action_name}}` action:
```json
{{& completion_example}}
```

6. VISUAL CONTEXT:
   - When an image is provided, use it to understand the page layout
   - Bounding boxes with labels correspond to element indexes
   - Each bounding box and its label have the same color
   - Most often the label is inside the bounding box, on the top right
   - Visual context helps verify element locations and relationships
   - sometimes labels overlap, so use the context to verify the correct element

7. Form filling:
   - If you fill an input field and your action sequence is interrupted, most often a list with suggestions popped up under the field and you need to first select the right element from the suggestion list.

8. ACTION SEQUENCING:
   - Actions are executed in the order they appear in the list
   - Each action should logically follow from the previous one
   - If the page changes after an action, the sequence is interrupted and you get the new state.
   - If content only disappears the sequence continues.
   - Only provide the action sequence until you think the page will change.
   - Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page like saving, extracting, checkboxes...
   - NEVER use multiple actions in a single step (otherwise ONLY the first action will be executed)

9. Long tasks:
- If the task is long keep track of the status in the memory. If the ultimate task requires multiple subinformation, keep track of the status in the memory

Functions:
{{& action_description}}

Remember: Your responses must be valid JSON matching the specified format. Each action in the sequence must be valid.

================
File: packages/notte-agent/src/notte_agent/falco/agent.py
================
import time
import traceback
import typing
from collections.abc import Callable
from enum import StrEnum

import notte_core
from litellm import AllMessageValues, override
from loguru import logger
from notte_browser.dom.locate import locate_element
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_browser.window import BrowserWindow
from notte_core.browser.observation import Observation
from notte_core.common.credentials.base import BaseVault
from notte_core.common.tracer import LlmUsageDictTracer
from notte_core.controller.actions import BaseAction, CompletionAction, FallbackObserveAction, InteractionAction
from notte_core.llms.engine import LLMEngine
from patchright.async_api import Locator

from notte_agent.common.base import BaseAgent
from notte_agent.common.config import AgentConfig, RaiseCondition
from notte_agent.common.conversation import Conversation
from notte_agent.common.safe_executor import ExecutionStatus, SafeActionExecutor
from notte_agent.common.types import AgentResponse
from notte_agent.common.validator import CompletionValidator
from notte_agent.falco.perception import FalcoPerception
from notte_agent.falco.prompt import FalcoPrompt
from notte_agent.falco.trajectory_history import FalcoTrajectoryHistory
from notte_agent.falco.types import StepAgentOutput

# TODO: list
# handle tooling calling methods for different providers (if not supported by litellm)
# Handle control flags
# Done callback
# Setup telemetry
# Setup memory
# Handle custom functions, e.g. `Upload file to element`ç
# Remove base 64 images from current state
# TODO: add fault tolerance LLM parsing
# TODO: only display modal actions when modal is open (same as before)
# TODO: handle prevent default click JS events
# TODO: add some tree structure for menu elements (like we had in notte before. Ex. Menu in Arxiv)


class HistoryType(StrEnum):
    FULL_CONVERSATION = "full_conversation"
    SHORT_OBSERVATIONS = "short_observations"
    SHORT_OBSERVATIONS_WITH_RAW_DATA = "short_observations_with_raw_data"
    SHORT_OBSERVATIONS_WITH_SHORT_DATA = "short_observations_with_short_data"
    COMPRESSED = "compressed"


class FalcoAgentConfig(AgentConfig):
    max_actions_per_step: int = 1
    history_type: HistoryType = HistoryType.SHORT_OBSERVATIONS_WITH_SHORT_DATA

    @classmethod
    @override
    def default_env(cls) -> NotteEnvConfig:
        return NotteEnvConfig().disable_perception()


class FalcoAgent(BaseAgent):
    def __init__(
        self,
        config: FalcoAgentConfig,
        window: BrowserWindow | None = None,
        vault: BaseVault | None = None,
        step_callback: Callable[[str, StepAgentOutput], None] | None = None,
    ):
        self.config: FalcoAgentConfig = config
        self.vault: BaseVault | None = vault

        if config.include_screenshot and not config.env.window.screenshot:
            raise ValueError("Cannot `include_screenshot=True` if `screenshot` is not enabled in the browser config")
        self.tracer: LlmUsageDictTracer = LlmUsageDictTracer()
        self.llm: LLMEngine = LLMEngine(
            model=config.reasoning_model,
            tracer=self.tracer,
            structured_output_retries=config.env.structured_output_retries,
            verbose=self.config.verbose,
        )

        self.step_callback: Callable[[str, StepAgentOutput], None] | None = step_callback
        # Users should implement their own parser to customize how observations
        # and actions are formatted for their specific LLM and use case
        self.env: NotteEnv = NotteEnv(
            config=config.env,
            window=window,
        )

        if self.vault is not None:
            # hide vault leaked credentials within llm inputs
            self.llm.structured_completion = self.vault.patch_structured_completion(0, self.vault.get_replacement_map)(
                self.llm.structured_completion
            )

            # hide vault leaked credentials within screenshots
            self.env._window.vault_replacement_fn = self.vault.get_replacement_map  # type: ignore

        self.perception: FalcoPerception = FalcoPerception()
        self.validator: CompletionValidator = CompletionValidator(llm=self.llm, perception=self.perception)
        self.prompt: FalcoPrompt = FalcoPrompt(max_actions_per_step=config.max_actions_per_step)
        self.conv: Conversation = Conversation(
            max_tokens=config.max_history_tokens,
            convert_tools_to_assistant=True,
            autosize=True,
            model=config.reasoning_model,
        )
        self.history_type: HistoryType = config.history_type
        self.trajectory: FalcoTrajectoryHistory = FalcoTrajectoryHistory(max_error_length=config.max_error_length)

        async def execute_action(action: BaseAction) -> Observation:
            if self.vault is not None and self.vault.contains_credentials(action):
                action_with_selector = await self.env._node_resolution_pipe.forward(action, self.env.snapshot)  # type: ignore
                locator: Locator = await locate_element(self.env._window.page, action_with_selector.selector)  # type: ignore

                assert isinstance(action_with_selector, InteractionAction) and action_with_selector.selector is not None

                action = await self.vault.replace_credentials(
                    action,
                    locator,
                    self.env.snapshot,
                )
            return await self.env.act(action)

        self.step_executor: SafeActionExecutor[BaseAction, Observation] = SafeActionExecutor(
            func=execute_action,
            raise_on_failure=(self.config.raise_condition is RaiseCondition.IMMEDIATELY),
            max_consecutive_failures=config.max_consecutive_failures,
        )

    async def reset(self) -> None:
        self.conv.reset()
        self.trajectory.reset()
        self.step_executor.reset()
        await self.env.reset()

    def output(self, answer: str, success: bool) -> AgentResponse:
        return AgentResponse(
            answer=answer,
            success=success,
            env_trajectory=self.env.trajectory,
            agent_trajectory=self.trajectory.steps,  # type: ignore[reportArgumentType]
            messages=self.conv.messages(),
            duration_in_s=time.time() - self.start_time,
            llm_usage=self.tracer.usage,
        )

    async def get_messages(self, task: str) -> list[AllMessageValues]:
        self.conv.reset()
        system_msg, task_msg = self.prompt.system(), self.prompt.task(task)
        if self.vault is not None:
            system_msg += "\n" + await self.vault.instructions()
        self.conv.add_system_message(content=system_msg)
        self.conv.add_user_message(content=task_msg)
        # just for logging
        traj_msg = self.trajectory.perceive()
        if self.config.verbose:
            logger.info(f"🔍 Trajectory history:\n{traj_msg}")
        # add trajectory to the conversation
        match self.history_type:
            case HistoryType.COMPRESSED:
                self.conv.add_user_message(content=traj_msg)
            case _:
                if len(self.trajectory.steps) == 0:
                    self.conv.add_user_message(content=self.trajectory.start_rules())
                for step in self.trajectory.steps:
                    # TODO: choose if we want this to be an assistant message or a tool message
                    # self.conv.add_tool_message(step.agent_response, tool_id="step")
                    self.conv.add_assistant_message(step.agent_response.model_dump_json(exclude_none=True))
                    for result in step.results:
                        short_step_msg = self.trajectory.perceive_step_result(result, include_ids=True)
                        self.conv.add_user_message(content=short_step_msg)
                        if not result.success:
                            continue
                        # add observation data to the conversation
                        obs = result.get()
                        match (self.history_type, obs.has_data()):
                            case (HistoryType.FULL_CONVERSATION, _):
                                self.conv.add_user_message(
                                    content=self.perception.perceive(obs),
                                    image=(obs.screenshot if self.config.include_screenshot else None),
                                )
                            case (HistoryType.SHORT_OBSERVATIONS_WITH_RAW_DATA, True):
                                # add data if data was scraped
                                self.conv.add_user_message(content=self.perception.perceive_data(obs, raw=True))

                            case (HistoryType.SHORT_OBSERVATIONS_WITH_SHORT_DATA, True):
                                self.conv.add_user_message(content=self.perception.perceive_data(obs, raw=False))
                            case _:
                                pass

        last_valid_obs = self.trajectory.last_obs()
        if last_valid_obs is not None and self.history_type is not HistoryType.FULL_CONVERSATION:
            self.conv.add_user_message(
                content=self.perception.perceive(last_valid_obs),
                image=(last_valid_obs.screenshot if self.config.include_screenshot else None),
            )

        if len(self.trajectory.steps) > 0:
            self.conv.add_user_message(self.prompt.action_message())

        return self.conv.messages()

    async def step(self, task: str) -> CompletionAction | None:
        """Execute a single step of the agent"""
        messages = await self.get_messages(task)
        response: StepAgentOutput = self.llm.structured_completion(messages, response_format=StepAgentOutput)
        if self.step_callback is not None:
            self.step_callback(task, response)

        if self.config.verbose:
            logger.info(f"🔍 LLM response:\n{response}")

        for line in response.pretty_string().split("\n"):
            logger.opt(colors=True).info(line)

        self.trajectory.add_output(response)
        # check for completion
        if response.output is not None:
            return response.output
        # Execute the actions
        for action in response.get_actions(self.config.max_actions_per_step):
            result = await self.step_executor.execute(action)

            self.trajectory.add_step(result)
            step_msg = self.trajectory.perceive_step_result(result, include_ids=True)
            logger.info(f"{step_msg}\n\n")
            if not result.success:
                # observe again
                obs = await self.env.observe()

                # cast is necessary because we cant have covariance
                # in ExecutionStatus
                ex_status = ExecutionStatus(
                    input=typing.cast(BaseAction, FallbackObserveAction()),
                    output=obs,
                    success=True,
                    message="Observed",
                )
                self.trajectory.add_output(response)
                self.trajectory.add_step(ex_status)

                # stop the loop
                break
            # Successfully executed the action
        return None

    @override
    async def run(self, task: str, url: str | None = None) -> AgentResponse:
        logger.info(f"Running task: {task}")
        self.start_time: float = time.time()
        try:
            return await self._run(task, url=url)

        except Exception as e:
            if self.config.raise_condition is RaiseCondition.NEVER:
                return self.output(f"Failed due to {e}: {traceback.format_exc()}", False)
            raise e

    async def _run(self, task: str, url: str | None = None) -> AgentResponse:
        """Execute the task with maximum number of steps"""
        # change this to DEV if you want more explicit error messages
        # when you are developing your own agent
        notte_core.set_error_mode("agent")
        if url is not None:
            task = f"Start on '{url}' and {task}"

        # Loop through the steps
        async with self.env:
            for step in range(self.env.config.max_steps):
                logger.info(f"💡 Step {step}")
                output: CompletionAction | None = await self.step(task)

                if output is None:
                    continue
                # validate the output
                if not output.success:
                    logger.error(f"🚨 Agent terminated early with failure: {output.answer}")
                    return self.output(output.answer, False)
                # Sucessful execution and LLM output is not None
                # Need to validate the output
                logger.info(f"🔥 Validating agent output:\n{output.model_dump_json()}")
                val = self.validator.validate(task, output, self.env.trajectory[-1])
                if val.is_valid:
                    # Successfully validated the output
                    logger.info("✅ Task completed successfully")
                    return self.output(output.answer, output.success)
                else:
                    # TODO handle that differently
                    failed_val_msg = f"Final validation failed: {val.reason}. Continuing..."
                    logger.error(failed_val_msg)
                    # add the validation result to the trajectory and continue
                    self.trajectory.add_step(
                        ExecutionStatus(
                            input=output,
                            output=None,
                            success=False,
                            message=failed_val_msg,
                        )
                    )

        error_msg = f"Failed to solve task in {self.env.config.max_steps} steps"
        logger.info(f"🚨 {error_msg}")
        notte_core.set_error_mode("developer")
        return self.output(error_msg, False)

================
File: packages/notte-agent/src/notte_agent/falco/perception.py
================
from typing import final

from notte_core.browser.observation import Observation
from typing_extensions import override

from notte_agent.common.perception import BasePerception


@final
class FalcoPerception(BasePerception):
    def __init__(
        self,
        include_step_info: bool = True,
        include_attributes: list[str] | None = None,
    ):
        self.include_attributes = include_attributes
        self.include_step_info = include_step_info

    @override
    def perceive_metadata(self, obs: Observation) -> str:
        if obs.progress is None:
            raise ValueError("Observation has no progress")
        return f"""
You will see the following only once. If you need to remember it and you dont know it yet, write it down in the memory.

* Current url: {obs.metadata.url}
* Current page title: {obs.metadata.title}
* Current date and time: {obs.metadata.timestamp.strftime("%Y-%m-%d %H:%M:%S")}
* Available tabs:
{obs.metadata.tabs}
* Current step: {obs.progress.current_step + 1}/{obs.progress.max_steps}'
"""

    @override
    def perceive(self, obs: Observation) -> str:
        return f"""
[Relevant metadata]
{self.perceive_metadata(obs)}

[Interaction elements and context]
{self.perceive_actions(obs)}

[Data found in the page]
{self.perceive_data(obs)}
"""

    @override
    def perceive_actions(self, obs: Observation) -> str:
        if not obs.has_space():
            return "Empty page"

        px_above = obs.metadata.viewport.pixels_above
        px_below = obs.metadata.viewport.pixels_below

        more_above = f"... {px_above} pixels above - scroll or scrape content to see more ..."
        more_below = f"... {px_below} pixels below - scroll or scrape content to see more ..."

        space_description = obs.space.description if obs.space is not None else None

        return f"""
[Start of page]
{more_above if px_above > 0 else ""}
{space_description or "No content to display"}
{more_below if px_below > 0 else ""}
[End of page]

"""

    @override
    def perceive_data(self, obs: Observation, raw: bool = True) -> str:
        if not obs.has_data() or obs.data is None:
            return ""
        if raw:
            percieved_data = obs.data.markdown
        else:
            structured_data = obs.data.structured
            if structured_data is None or not structured_data.success or structured_data.data is None:
                error_msg = f" with error: {structured_data.error}" if structured_data is not None else ""
                return f"Scraping failed{error_msg}. Please try again with different instructions."
            percieved_data = structured_data.data.model_dump_json()

        return f"""
Data scraped from current page view:

{percieved_data or "No valid data to display"}
"""

================
File: packages/notte-agent/src/notte_agent/falco/prompt.py
================
import datetime as dt
from enum import StrEnum
from pathlib import Path

import chevron
from notte_core.controller.actions import (
    BaseAction,
    ClickAction,
    CompletionAction,
    FallbackObserveAction,
    FillAction,
    GotoAction,
    ScrapeAction,
)
from notte_core.controller.space import ActionSpace

system_prompt_dir = Path(__file__).parent / "prompts"


class PromptType(StrEnum):
    SINGLE_ACTION = "single_action"
    MULTI_ACTION = "multi_action"

    def prompt_file(self) -> Path:
        match self:
            case PromptType.SINGLE_ACTION:
                return system_prompt_dir / "system_prompt_single_action.md"
            case PromptType.MULTI_ACTION:
                return system_prompt_dir / "system_prompt_multi_action.md"


class FalcoPrompt:
    def __init__(
        self,
        max_actions_per_step: int,
    ) -> None:
        multi_act = max_actions_per_step > 1
        prompt_type = PromptType.MULTI_ACTION if multi_act else PromptType.SINGLE_ACTION
        self.system_prompt: str = prompt_type.prompt_file().read_text()
        self.max_actions_per_step: int = max_actions_per_step
        self.space: ActionSpace = ActionSpace(description="", exclude_actions={FallbackObserveAction})

    @staticmethod
    def _json_dump(steps: list[BaseAction]) -> str:
        lines = ",\n  ".join([action.dump_str() for action in steps])
        return "[\n  " + lines + "\n]"

    def example_form_filling(self) -> str:
        return self._json_dump(
            [FillAction(id="I99", value="username"), FillAction(id="I101", value="password"), ClickAction(id="B1")]
        )

    def example_invalid_sequence(self) -> str:
        return self._json_dump(
            [
                ClickAction(id="L1"),
                ClickAction(id="B4"),
                ClickAction(id="L2"),
            ]
        )

    def example_navigation_and_extraction(self) -> str:
        return self._json_dump([GotoAction(url="https://www.google.com"), ScrapeAction()])

    def completion_example(self) -> str:
        return self._json_dump([CompletionAction(success=True, answer="<answer to the task>")])

    def example_step(self) -> str:
        goal_eval = (
            "Analyze the current elements and the image to check if the previous goals/actions"
            " are successful like intended by the task. Ignore the action result. The website is the ground truth. "
            "Also mention if something unexpected happened like new suggestions in an input field. "
            "Shortly state why/why not"
        )
        return chevron.render(
            """
{
  "state": {
    "page_summary": "On the page are company a,b,c wtih their revenue 1,2,3.",
    "relevant_interactions": [{"id": "B2", "reason": "The button with id B2 represents search and I'm looking to search"}],
    "previous_goal_status": "success|failure|unknown",
    "previous_goal_eval": "{{goal_eval}}",
    "memory": "Description of what has been done and what you need to remember until the end of the task",
    "next_goal": "What needs to be done with the next actions"
  },
  "actions": [
   { "one_action_name": {
      // action-specific parameter
      ...
   }
   }, // ... more actions in sequence ...
  ]
}
""",
            {"goal_eval": goal_eval},
        )

    def system(self) -> str:
        return chevron.render(
            self.system_prompt,
            {
                "timstamp": dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "max_actions_per_step": self.max_actions_per_step,
                "action_description": self.space.markdown(),
                "example_form_filling": self.example_form_filling(),
                "example_step": self.example_step(),
                "completion_example": self.completion_example(),
                "completion_action_name": CompletionAction.name(),
                "goto_action_name": GotoAction.name(),
                "example_navigation_and_extraction": self.example_navigation_and_extraction(),
                "example_invalid_sequence": self.example_invalid_sequence(),
            },
        )

    def task(self, task: str):
        return f"""
Your ultimate task is: "{task}".
If you achieved your ultimate task, stop everything and use the done action in the next step to complete the task.
If not, continue as usual.
"""

    def new_task(self, task: str) -> str:
        return f"""
Your new ultimate task is: {task}.
Take the previous context into account and finish your new ultimate task.
"""

    def action_message(self) -> str:
        return """Given the previous information, start by reflecting on your last action. Then, summarize the current page and list relevant available interactions.
Absolutely do not under any circumstance list or pay attention to any id that is not explicitly found in the page.
From there, select the your next goal, and in turn, your next action.
    """

================
File: packages/notte-agent/src/notte_agent/falco/trajectory_history.py
================
from pydantic import Field
from typing_extensions import override

from notte_agent.common.trajectory_history import (
    TrajectoryHistory,
    TrajectoryStep,
)
from notte_agent.falco.types import StepAgentOutput


class FalcoTrajectoryHistory(TrajectoryHistory[StepAgentOutput]):
    steps: list[TrajectoryStep[StepAgentOutput]] = Field(default_factory=list)
    max_error_length: int | None = None

    @override
    def perceive_step(
        self,
        step: TrajectoryStep[StepAgentOutput],
        step_idx: int = 0,
        include_ids: bool = False,
        include_data: bool = True,
    ) -> str:
        action_msg = "\n".join(["  - " + result.input.dump_str() for result in step.results])
        status_msg = "\n".join(
            ["  - " + self.perceive_step_result(result, include_ids, include_data) for result in step.results]
        )
        return f"""
# Execution step {step_idx}
* state:
    - page_summary: {step.agent_response.state.page_summary}
    - previous_goal_status: {step.agent_response.state.previous_goal_status}
    - previous_goal_eval: {step.agent_response.state.previous_goal_eval}
    - memory: {step.agent_response.state.memory}
    - next_goal: {step.agent_response.state.next_goal}
* selected actions:
{action_msg}
* execution results:
{status_msg}"""

    @override
    def add_output(self, output: StepAgentOutput) -> None:
        self.steps.append(TrajectoryStep(agent_response=output, results=[]))

================
File: packages/notte-agent/src/notte_agent/falco/types.py
================
from typing import Any, Literal, TypeVar

from loguru import logger
from notte_core.controller.actions import BaseAction, ClickAction, CompletionAction
from notte_core.controller.space import ActionSpace
from pydantic import BaseModel, Field, create_model, field_serializer


class RelevantInteraction(BaseModel):
    """Interaction ids that can be relevant to the next actions"""

    id: str
    reason: str


class AgentState(BaseModel):
    """Current state of the agent"""

    previous_goal_status: Literal["success", "failure", "unknown"]
    previous_goal_eval: str
    page_summary: str
    relevant_interactions: list[RelevantInteraction]
    memory: str
    next_goal: str


# TODO: for later when we do a refactoring
class BetterAgentAction(BaseModel):
    """Base class for agent actions with explicit action handling"""

    action_name: str
    parameters: dict[str, str | int | bool | None]

    @classmethod
    def from_action(cls, action: BaseAction) -> "BetterAgentAction":
        return cls(action_name=action.name(), parameters=action.model_dump(exclude={"category", "id"}))

    def to_action(self, space: ActionSpace) -> BaseAction:
        action_cls = space.action_map.get(self.action_name)
        if not action_cls:
            raise ValueError(f"Unknown action type: {self.action_name}")
        return action_cls(**self.parameters)  # type: ignore[arg-type]


class AgentAction(BaseModel):
    def to_action(self) -> BaseAction:
        field_sets = self.model_fields_set
        if len(field_sets) != 1:
            raise ValueError(f"Multiple actions found in {self.model_dump_json()}")
        action_name = list(field_sets)[0]
        return getattr(self, action_name)


def create_agent_action_model() -> type[AgentAction]:
    """Creates a Pydantic model from registered actions"""
    space = ActionSpace(description="does not matter")
    fields = {
        name: (
            ActionModel | None,
            Field(default=None, description=ActionModel.model_json_schema()["properties"]["description"]["default"]),
        )
        for name, ActionModel in space.action_map.items()
    }
    return create_model(AgentAction.__name__, __base__=AgentAction, **fields)  # type: ignore[call-overload]


TAgentAction = TypeVar("TAgentAction", bound=AgentAction)

_AgentAction: type[AgentAction] = create_agent_action_model()


class StepAgentOutput(BaseModel):
    state: AgentState
    actions: list[_AgentAction] = Field(min_length=1)  # type: ignore[type-arg]

    @field_serializer("actions")
    def serialize_actions(self, actions: list[AgentAction], _info: Any) -> list[dict[str, Any]]:
        return [action.to_action().dump_dict() for action in actions]

    @property
    def output(self) -> CompletionAction | None:
        last_action: CompletionAction | None = getattr(self.actions[-1], CompletionAction.name())  # type: ignore[attr-defined]
        if last_action is not None:
            return CompletionAction(success=last_action.success, answer=last_action.answer)
        return None

    def get_actions(self, max_actions: int | None = None) -> list[BaseAction]:
        actions: list[BaseAction] = []
        # compute valid list of actions
        raw_actions: list[AgentAction] = self.actions  # type: ignore[type-assignment]
        for i, _action in enumerate(raw_actions):
            is_last = i == len(raw_actions) - 1
            actions.append(_action.to_action())
            if not is_last and max_actions is not None and i >= max_actions:
                logger.warning(f"Max actions reached: {max_actions}. Skipping remaining actions.")
                break
            if not is_last and actions[-1].name() == ClickAction.name() and actions[-1].id.startswith("L"):
                logger.warning(f"Removing all actions after link click: {actions[-1].id}")
                # all actions after a link `L` should be removed from the list
                break
        return actions

    def pretty_string(self, colors: bool = True) -> str:
        status = self.state.previous_goal_status
        status_emoji: str
        match status:
            case "unknown":
                status_emoji = "❓"
            case "success":
                status_emoji = "✅"
            case "failure":
                status_emoji = "❌"

        def surround_tags(s: str, tags: tuple[str, ...] = ("b", "blue")) -> str:
            if not colors:
                return s

            start = "".join(f"<{tag}>" for tag in tags)
            end = "".join(f"</{tag}>" for tag in reversed(tags))
            return f"{start}{s}{end}"

        action_str = ""
        actions: list[AgentAction] = self.actions  # type: ignore[reportUnkownMemberType]
        for action in actions:
            action_base: BaseAction = action.to_action()
            action_str += f"   ▶ {action_base.name()} with id {action_base.id}"
        return f"""📝 {surround_tags("Current page:")} {self.state.page_summary}
🔬 {surround_tags("Previous goal:")} {status_emoji} {self.state.previous_goal_eval}
🧠 {surround_tags("Memory:")} {self.state.memory}
🎯 {surround_tags("Next goal:")} {self.state.next_goal}
⚡ {surround_tags("Taking action:")}
{action_str}"""

================
File: packages/notte-agent/src/notte_agent/gufo/agent.py
================
from collections.abc import Callable

from loguru import logger
from notte_browser.dom.locate import locate_element
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_browser.window import BrowserWindow
from notte_core.browser.observation import Observation
from notte_core.common.credentials.base import BaseVault
from notte_core.common.tracer import LlmUsageDictTracer
from notte_core.controller.actions import CompletionAction, InteractionAction
from notte_core.llms.engine import LLMEngine
from patchright.async_api import Locator
from typing_extensions import override

from notte_agent.common.base import BaseAgent
from notte_agent.common.config import AgentConfig
from notte_agent.common.conversation import Conversation
from notte_agent.common.parser import NotteStepAgentOutput
from notte_agent.common.types import AgentResponse
from notte_agent.gufo.parser import GufoParser
from notte_agent.gufo.perception import GufoPerception
from notte_agent.gufo.prompt import GufoPrompt


class GufoAgentConfig(AgentConfig):
    @classmethod
    @override
    def default_env(cls) -> NotteEnvConfig:
        return NotteEnvConfig().use_llm()


class GufoAgent(BaseAgent):
    """
    A base agent implementation that coordinates between an LLM and the Notte environment.

    This class demonstrates how to build an agent that can:
    1. Maintain a conversation with an LLM
    2. Execute actions in the Notte environment
    3. Parse and format responses between the LLM and Notte

    To customize this agent:
    1. Implement your own Parser class to format observations and actions
    2. Modify the conversation flow in the run() method
    3. Adjust the think() method to handle LLM interactions
    4. Customize the ask_notte() method for your specific needs

    Args:
        task (str): The task description for the agent
        model (str): The LLM model identifier
        max_steps (int): Maximum number of steps before terminating
        headless (bool): Whether to run browser in headless mode
        parser (Parser | None): Custom parser for formatting interactions
    """

    def __init__(
        self,
        config: AgentConfig,
        window: BrowserWindow | None = None,
        vault: BaseVault | None = None,
        step_callback: Callable[[str, NotteStepAgentOutput], None] | None = None,
    ) -> None:
        self.step_callback: Callable[[str, NotteStepAgentOutput], None] | None = step_callback
        self.tracer: LlmUsageDictTracer = LlmUsageDictTracer()
        self.config: AgentConfig = config
        self.vault: BaseVault | None = vault
        self.llm: LLMEngine = LLMEngine(
            model=config.reasoning_model,
            tracer=self.tracer,
            structured_output_retries=config.env.structured_output_retries,
            verbose=self.config.verbose,
        )
        # Users should implement their own parser to customize how observations
        # and actions are formatted for their specific LLM and use case
        self.env: NotteEnv = NotteEnv(config=config.env, window=window)
        self.parser: GufoParser = GufoParser()
        self.prompt: GufoPrompt = GufoPrompt(self.parser)
        self.perception: GufoPerception = GufoPerception()
        self.conv: Conversation = Conversation()

        if self.vault is not None:
            # hide vault leaked credentials within llm inputs
            self.llm.structured_completion = self.vault.patch_structured_completion(0, self.vault.get_replacement_map)(
                self.llm.structured_completion
            )

            # hide vault leaked credentials within screenshots
            self.env._window.vault_replacement_fn = self.vault.get_replacement_map  # type: ignore

    async def reset(self):
        await self.env.reset()
        self.conv.reset()

    def output(self, answer: str, success: bool) -> AgentResponse:
        return AgentResponse(
            answer=answer,
            success=success,
            env_trajectory=self.env.trajectory,
            agent_trajectory=[],
            llm_usage=self.tracer.usage,
        )

    async def step(self, task: str) -> CompletionAction | None:
        # Processes the conversation history through the LLM to decide the next action.
        # logger.info(f"🤖 LLM prompt:\n{self.conv.messages()}")
        response: str = self.llm.single_completion(self.conv.messages())
        self.conv.add_assistant_message(content=response)
        logger.info(f"🤖 LLM response:\n{response}")
        # Ask Notte to perform the selected action
        parsed_response = self.parser.parse(response)

        if parsed_response is None or parsed_response.action is None:
            self.conv.add_user_message(content=self.prompt.env_rules())
            return None

        if self.step_callback is not None:
            self.step_callback(task, parsed_response)

        if parsed_response.completion is not None:
            return parsed_response.completion
        action = parsed_response.action
        # Replace credentials if needed using the vault
        if self.vault is not None and self.vault.contains_credentials(action):
            action_with_selector = await self.env._node_resolution_pipe.forward(action, self.env.snapshot)  # type: ignore
            locator: Locator = await locate_element(self.env._window.page, action_with_selector.selector)  # type: ignore

            assert isinstance(action_with_selector, InteractionAction) and action_with_selector.selector is not None

            action = await self.vault.replace_credentials(
                action,
                locator,
                self.env.snapshot,
            )
        # Execute the action
        obs: Observation = await self.env.act(action)
        text_obs = self.perception.perceive(obs)
        self.conv.add_user_message(
            content=f"""
{text_obs}
{self.prompt.select_action_rules()}
{self.prompt.completion_rules()}
""",
            image=obs.screenshot if self.config.include_screenshot else None,
        )
        logger.info(f"🌌 Action successfully executed:\n{text_obs}")
        return None

    @override
    async def run(self, task: str, url: str | None = None) -> AgentResponse:
        """
        Main execution loop that coordinates between the LLM and Notte environment.

        This method shows a basic conversation flow. Consider customizing:
        1. The initial system prompt
        2. How observations are added to the conversation
        3. When and how to determine task completion
        4. Error handling and recovery strategies
        """
        logger.info(f"🚀 starting agent with task: {task} and url: {url}")
        system_msg = self.prompt.system(task, url)
        if self.vault is not None:
            system_msg += "\n" + await self.vault.instructions()
        self.conv.add_system_message(content=system_msg)
        self.conv.add_user_message(self.prompt.env_rules())
        async with self.env:
            for i in range(self.config.env.max_steps):
                logger.info(f"> step {i}: looping in")
                output = await self.step(task=task)
                if output is not None:
                    status = "😎 task completed sucessfully" if output.success else "👿 task failed"
                    logger.info(f"{status} with answer: {output.answer}")
                    return self.output(output.answer, output.success)
            # If the task is not done, raise an error
            error_msg = f"Failed to solve task in {self.config.env.max_steps} steps"
            logger.info(f"🚨 {error_msg}")
            return self.output(error_msg, False)

================
File: packages/notte-agent/src/notte_agent/gufo/parser.py
================
from typing import ClassVar, Literal

from notte_core.actions.base import ActionParameterValue, ExecutableAction
from notte_core.controller.actions import CompletionAction, GotoAction, ScrapeAction
from typing_extensions import override

from notte_agent.common.parser import BaseParser, NotteStepAgentOutput


class GufoParser(BaseParser):
    observe_tag: ClassVar[str] = "observe"
    step_tag: ClassVar[str] = "execute-action"
    scrape_tag: ClassVar[str] = "scrape-data"
    done_tag: ClassVar[str] = "done"

    @override
    def example_format(self, endpoint: Literal["observe", "step", "scrape", "done", "error"]) -> str | None:
        match endpoint:
            case "observe":
                return f"""
<{self.observe_tag}>
{GotoAction(url="https://www.example.com").dump_str(name=False)}
</{self.observe_tag}>
"""
            case "step":
                return f"""
<{self.step_tag}>
{
                    ExecutableAction(
                        id="<YOUR_ACTION_ID>",
                        params_values=[ActionParameterValue(name="<YOUR_PARAM_NAME>", value="<YOUR_PARAM_VALUE>")],
                    ).dump_str(name=False)
                }
</{self.step_tag}>
"""
            case "scrape":
                return f"""
<{self.scrape_tag}>
{ScrapeAction(instructions="<YOUR_SCRAPING_INSTRUCTIONS | null to scrape the whole page>").dump_str(name=False)}
</{self.scrape_tag}>
"""
            case "done":
                return f"""
<{self.done_tag}>
{CompletionAction(success=True, answer="<YOUR_ANSWER>").dump_str(name=False)}
</{self.done_tag}>
"""
            case "error":
                return f"""
<{self.done_tag}>
{CompletionAction(success=False, answer="<REASON_FOR_FAILURE>").dump_str(name=False)}
</{self.done_tag}>
"""

    @override
    def parse(self, text: str) -> NotteStepAgentOutput | None:
        url = self.search_pattern(text, GufoParser.observe_tag)
        action = self.search_pattern(text, GufoParser.step_tag)
        scrape = self.search_pattern(text, GufoParser.scrape_tag)
        output = self.search_pattern(text, GufoParser.done_tag)
        match (bool(url), bool(action), bool(scrape), bool(output)):
            case (True, False, False, False):
                return NotteStepAgentOutput(
                    observe=GotoAction.model_validate(self.parse_json(text, GufoParser.observe_tag))
                )
            case (False, True, False, False):
                return NotteStepAgentOutput(
                    step=ExecutableAction.model_validate(self.parse_json(text, GufoParser.step_tag)),
                )
            case (False, False, True, False):
                return NotteStepAgentOutput(
                    scrape=ScrapeAction.model_validate(self.parse_json(text, GufoParser.scrape_tag))
                )
            case (False, False, False, True):
                return NotteStepAgentOutput(
                    completion=CompletionAction.model_validate(self.parse_json(text, GufoParser.done_tag))
                )
            case _:
                return None

================
File: packages/notte-agent/src/notte_agent/gufo/perception.py
================
from typing import final

from notte_core.browser.observation import Observation
from typing_extensions import override

from notte_agent.common.perception import BasePerception


@final
class GufoPerception(BasePerception):
    @override
    def perceive_metadata(self, obs: Observation) -> str:
        space_description = obs.space.description if obs.space is not None else ""
        category: str = obs.space.category.value if obs.space is not None and obs.space.category is not None else ""
        return f"""
Webpage information:
- URL: {obs.metadata.url}
- Title: {obs.metadata.title}
- Description: {space_description or "No description available"}
- Timestamp: {obs.metadata.timestamp.strftime("%Y-%m-%d %H:%M:%S")}
- Page category: {category or "No category available"}
"""

    @override
    def perceive_data(
        self,
        obs: Observation,
    ) -> str:
        if not obs.has_data():
            raise ValueError("No scraping data found")
        return f"""
Here is some data that has been extracted from this page:
<data>
{obs.data.markdown if obs.data is not None else "No data available"}
</data>
"""

    @override
    def perceive_actions(self, obs: Observation) -> str:
        if not obs.has_space():
            raise ValueError("No actions found")

        return f"""
Here are the available actions you can take on this page:
<actions>
{obs.space.markdown() if obs.space is not None else "No actions available"}
</actions>
"""

    @override
    def perceive(self, obs: Observation) -> str:
        if not obs.has_data() and not obs.has_space():
            raise ValueError("No data or actions found")
        return f"""
{self.perceive_metadata(obs).strip()}
{self.perceive_data(obs).strip() if obs.has_data() else ""}
{self.perceive_actions(obs).strip() if obs.has_space() else ""}
"""

================
File: packages/notte-agent/src/notte_agent/gufo/prompt.py
================
from pathlib import Path

import chevron

from notte_agent.gufo.parser import GufoParser

system_prompt_file = Path(__file__).parent / "system.md"


class GufoPrompt:
    def __init__(self, parser: GufoParser):
        self.parser: GufoParser = parser
        self.system_prompt: str = system_prompt_file.read_text()

    def system(self, task: str, url: str | None = None) -> str:
        return chevron.render(self.system_prompt, {"task": task, "url": url or "the web"}, warn=True)

    def env_rules(self) -> str:
        return f"""
Hi there! I am the Notte web environment, and will help you navigate the internet.
# How it works:
* Provide me with a URL. I will respond with the actions you can take on that page.
* You are NOT allowed to provide me with more than one URL.
* Important: Make sure to use the **exact format** below when sending me a URL:
{self.parser.example_format("observe")}
> So, where would you like to go?
"""

    def completion_rules(self) -> str:
        return f"""
# How to format your answer when you're done
## Success answer
* If you're done, include you final answer in <{self.parser.done_tag}> tags.
* Don't forget to justify why your answer is correct and solves the task.
* Don't assume anything, just provide factual information backuped by the page you're on.
Format your answer as follows:
{self.parser.example_format("done")}

## Error answer
* If you feel stuck, remember that you are also allowed to use `Special Browser Actions` at any time to:
    * Go to a different url
    * Go back to the previous page
    * Refresh the current page
    * Scrape data from the page
    * Etc
* If you want to stop or you're unable to pursue your goal, format your answer as follows:
{self.parser.example_format("error")}
"""

    def select_action_rules(self) -> str:
        return f"""
# Next Action Selection
* Provide me with the ID of the action you want to take next.
* You are allowed to take only exactly ONE action from the list.
* You are ONLY allowed to pick actions from the latest list of actions!
* You are NOT allowed to pick actions from list of actions in previous messages!
* If the action is parameterized, provide the value for each parameter.
Use the exact following format:

{self.parser.example_format("step")}
"""

================
File: packages/notte-agent/src/notte_agent/gufo/system.md
================
You are a helpful web agent.
Now you are given the task: {{task}}.
Please interact with : {{url}} to get the answer.

Instructions:
- At every step, you will be provided with a list of actions you can take.
- If you are asked to accept cookies to continue, please accept them. Accepting cookies is MANDATORY.
- If you see one action about cookie management, you should stop thinking about the goal and accept cookies DIRECTLY.

================
File: packages/notte-agent/src/notte_agent/__init__.py
================
from notte_agent.falco.agent import FalcoAgent, FalcoAgentConfig
from notte_agent.gufo.agent import GufoAgent, GufoAgentConfig
from notte_agent.main import Agent

__all__ = [
    "FalcoAgent",
    "FalcoAgentConfig",
    "GufoAgent",
    "GufoAgentConfig",
    "Agent",
]

================
File: packages/notte-agent/src/notte_agent/main.py
================
import asyncio
from collections.abc import Callable

from notte_browser.window import BrowserWindow
from notte_core.common.credentials.base import BaseVault
from notte_core.llms.engine import LlmModel
from notte_sdk.types import DEFAULT_MAX_NB_STEPS

from notte_agent.common.base import BaseAgent
from notte_agent.common.notifier import BaseNotifier, NotifierAgent
from notte_agent.common.types import AgentResponse
from notte_agent.falco.agent import FalcoAgent, FalcoAgentConfig
from notte_agent.falco.types import StepAgentOutput


class Agent:
    def __init__(
        self,
        headless: bool = False,
        reasoning_model: LlmModel = LlmModel.default(),  # type: ignore[reportCallInDefaultInitializer]
        max_steps: int = DEFAULT_MAX_NB_STEPS,
        use_vision: bool = True,
        # /!\ web security is disabled by default to increase agent performance
        # turn it off if you need to input confidential information on trajectories
        web_security: bool = False,
        vault: BaseVault | None = None,
        notifier: BaseNotifier | None = None,
    ):
        self.config: FalcoAgentConfig = (
            FalcoAgentConfig()
            .use_vision(use_vision)
            .model(reasoning_model, deep=True)
            .map_env(lambda env: (env.agent_mode().steps(max_steps).headless(headless).web_security(web_security)))
        )
        self.vault: BaseVault | None = vault
        self.notifier: BaseNotifier | None = notifier

    def create_agent(
        self,
        step_callback: Callable[[str, StepAgentOutput], None] | None = None,
        window: BrowserWindow | None = None,
    ) -> BaseAgent:
        agent = FalcoAgent(
            config=self.config,
            vault=self.vault,
            window=window,
            step_callback=step_callback,
        )
        if self.notifier:
            agent = NotifierAgent(agent, notifier=self.notifier)
        return agent

    async def async_run(self, task: str, url: str | None = None) -> AgentResponse:
        agent = self.create_agent()
        return await agent.run(task, url=url)

    def run(self, task: str, url: str | None = None) -> AgentResponse:
        agent = self.create_agent()
        return asyncio.run(agent.run(task, url=url))

================
File: packages/notte-agent/src/notte_agent/README.md
================
# How to build an LLM agent with *Notte*

This guide explains how to build a custom LLM agent using *Notte*. The example in `agent.py` demonstrates a basic implementation that you can customize for your specific needs.

## Overview

*Notte* provides a flexible environment for web automation that can be controlled through an API. To build an agent with *Notte*, you need:

1. An agent implementation that coordinates between your LLM and the *Notte* environment
2. A parser that formats *Notte*'s outputs into prompts suitable for your LLM
3. A way to interpret the LLM's responses back into *Notte* commands

## Key Components

### Agent

The `Agent` class in `agent.py` shows how to:
- Initialize a connection to your LLM service
- Manage the conversation flow between the LLM and *Notte*
- Track the state of task completion

### Parser

The parser is crucial for translating between *Notte* and your LLM. You'll need to:

1. Create a custom parser (by extending `BaseNotteParser` or implementing the `Parser` interface)
2. Define how to format:
   - Observations from web pages
   - Available actions
   - Data extraction results
   - Task completion status

The provided `BaseNotteParser` is a simple example that you should modify based on your needs. Consider:
- The prompt format your LLM works best with
- How to structure web observations for your specific tasks
- What action format makes sense for your use case
- How to handle task completion and data extraction

## Example Implementation

See `agent.py` for a basic implementation. Key points to customize:
- The parser implementation
- The prompt engineering in the conversation flow
- How task completion is determined
- Error handling and retry logic

## Best Practices

1. **Custom Parser**: Don't just use the `BaseNotteParser` as-is. Create your own parser that:
   - Formats observations in a way that makes sense for your LLM
   - Structures action possibilities clearly
   - Handles task-specific data extraction

2. **Prompt Engineering**: Carefully design your system prompt and conversation flow

3. **Error Handling**: Add robust error handling for both LLM and *Notte* interactions

4. **Testing**: Test your parser and agent with different scenarios

================
File: packages/notte-agent/pyproject.toml
================
[project]
name = "notte-agent"
version = "1.3.3"
description = "Notte Web AI Agents"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
  { include = "notte_agent", from = "src" },
]

requires-python = ">=3.11"
dependencies = [
    "notte_core>=1.3.3",
    "notte_browser>=1.3.3",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

================
File: packages/notte-browser/src/notte_browser/dom/buildDomNode.js
================
// file taken from: https://github.com/browser-use/browser-use/blob/main/browser_use/dom/buildDomTree.js
(
	args = { doHighlightElements: true, focusHighlightIndex: -1, viewportExpansion: 0 }
) => {
	const { doHighlightElements, focusHighlightIndex, viewportExpansion } = args;
	let highlightIndex = 0; // Reset highlight index

	// Quick check to confirm the script receives focusHighlightIndex
	console.log('focusHighlightIndex:', focusHighlightIndex);

	function highlightElement(element, index, parentIframe = null) {
		// Create or get highlight container
		let container = document.getElementById('playwright-highlight-container');
		if (!container) {
			container = document.createElement('div');
			container.id = 'playwright-highlight-container';
			container.style.position = 'absolute';
			container.style.pointerEvents = 'none';
			container.style.top = '0';
			container.style.left = '0';
			container.style.width = '100%';
			container.style.height = '100%';
			container.style.zIndex = '2147483647'; // Maximum z-index value
			document.body.appendChild(container);
		}

		// Generate a color based on the index
		const colors = [
			'#FF0000', '#00FF00', '#0000FF', '#FFA500',
			'#800080', '#008080', '#FF69B4', '#4B0082',
			'#FF4500', '#2E8B57', '#DC143C', '#4682B4'
		];
		const colorIndex = index % colors.length;
		const baseColor = colors[colorIndex];
		const backgroundColor = `${baseColor}1A`; // 10% opacity version of the color

		// Create highlight overlay
		const overlay = document.createElement('div');
		overlay.style.position = 'absolute';
		overlay.style.border = `2px solid ${baseColor}`;
		overlay.style.backgroundColor = backgroundColor;
		overlay.style.pointerEvents = 'none';
		overlay.style.boxSizing = 'border-box';

		// Position overlay based on element, including scroll position
		const rect = element.getBoundingClientRect();
		let top = rect.top + window.scrollY;
		let left = rect.left + window.scrollX;

		// Adjust position if element is inside an iframe
		if (parentIframe) {
			const iframeRect = parentIframe.getBoundingClientRect();
			top += iframeRect.top;
			left += iframeRect.left;
		}

		overlay.style.top = `${top}px`;
		overlay.style.left = `${left}px`;
		overlay.style.width = `${rect.width}px`;
		overlay.style.height = `${rect.height}px`;

		// Create label
		const label = document.createElement('div');
		label.className = 'playwright-highlight-label';
		label.style.position = 'absolute';
		label.style.background = baseColor;
		label.style.color = 'white';
		label.style.padding = '1px 4px';
		label.style.borderRadius = '4px';
		label.style.fontSize = `${Math.min(12, Math.max(8, rect.height / 2))}px`; // Responsive font size
		label.textContent = index;

		// Calculate label position
		const labelWidth = 20; // Approximate width
		const labelHeight = 16; // Approximate height

		// Default position (top-right corner inside the box)
		let labelTop = top + 2;
		let labelLeft = left + rect.width - labelWidth - 2;

		// Adjust if box is too small
		if (rect.width < labelWidth + 4 || rect.height < labelHeight + 4) {
			// Position outside the box if it's too small
			labelTop = top - labelHeight - 2;
			labelLeft = left + rect.width - labelWidth;
		}


		label.style.top = `${labelTop}px`;
		label.style.left = `${labelLeft}px`;

		// Add to container
		container.appendChild(overlay);
		container.appendChild(label);

		// Store reference for cleanup
		element.setAttribute('browser-user-highlight-id', `playwright-highlight-${index}`);

		return index + 1;
	}


	// Helper function to generate XPath as a tree
	function getXPathTree(element, stopAtBoundary = true) {
		const segments = [];
		let currentElement = element;

		while (currentElement && currentElement.nodeType === Node.ELEMENT_NODE) {
			// Stop if we hit a shadow root or iframe
			if (stopAtBoundary && (currentElement.parentNode instanceof ShadowRoot || currentElement.parentNode instanceof HTMLIFrameElement)) {
				break;
			}

			let index = 0;
			let sibling = currentElement.previousSibling;
			while (sibling) {
				if (sibling.nodeType === Node.ELEMENT_NODE &&
					sibling.nodeName === currentElement.nodeName) {
					index++;
				}
				sibling = sibling.previousSibling;
			}
			// should also iteratate over the next siblings look if there is a next sibling with the same tag name
			let moreSiblings = false;
			let nextSibling = currentElement.nextSibling;
			while (nextSibling) {
				if (nextSibling.nodeType === Node.ELEMENT_NODE &&
					nextSibling.nodeName === currentElement.nodeName) {
					moreSiblings = true;
				}
				nextSibling = nextSibling.nextSibling;
			}

			const tagName = currentElement.nodeName.toLowerCase();
			const xpathIndex = (index > 0 || moreSiblings) ? `[${index + 1}]` : '';
			segments.unshift(`${tagName}${xpathIndex}`);

			currentElement = currentElement.parentNode;
		}

		return segments.join('/');
	}

	// Helper function to check if element is accepted
	function isElementAccepted(element) {
		const leafElementDenyList = new Set(['svg', 'script', 'style', 'link', 'meta']);
		return !leafElementDenyList.has(element.tagName.toLowerCase());
	}


    // Add isEditable check
    function isEditableElement(element) {
        // Check if element is disabled
        if (element.disabled || element.getAttribute('aria-disabled') === 'true') {
            return false;
        }

        // Check for readonly attribute
        const isReadonly = element.hasAttribute('readonly') ||
                          element.getAttribute('aria-readonly') === 'true';

        // For select, input, and textarea, check readonly attribute
        if (element.tagName.toLowerCase() in {'select': 1, 'input': 1, 'textarea': 1}) {
            return !isReadonly;
        }

        // Check contenteditable
        if (element.hasAttribute('contenteditable') &&
            element.getAttribute('contenteditable') !== 'false') {
            return !isReadonly;
        }

        return false;
    }

	// Helper function to check if element is interactive
	function isInteractiveElement(element) {
		// Base interactive elements and roles
		const interactiveElements = new Set([
			'a', 'button', 'details', 'embed', 'input', 'label',
			'menu', 'menuitem', 'object', 'select', 'textarea', 'summary'
		]);

		const interactiveRoles = new Set([
			'button', 'menu', 'menuitem', 'link', 'checkbox', 'radio',
			'slider', 'tab', 'tabpanel', 'textbox', 'combobox', 'grid',
			'listbox', 'option', 'progressbar', 'scrollbar', 'searchbox',
			'switch', 'tree', 'treeitem', 'spinbutton', 'tooltip', 'a-button-inner', 'a-dropdown-button', 'click',
			'menuitemcheckbox', 'menuitemradio', 'a-button-text', 'button-text', 'button-icon', 'button-icon-only', 'button-text-icon-only', 'dropdown', 'combobox'
		]);

		const tagName = element.tagName.toLowerCase();
		const role = element.getAttribute('role');
		const ariaRole = element.getAttribute('aria-role');
		const tabIndex = element.getAttribute('tabindex');

		// Add check for specific class
		const hasAddressInputClass = element.classList.contains('address-input__container__input');

		// Basic role/attribute checks
		const hasInteractiveRole = hasAddressInputClass ||
			interactiveElements.has(tagName) ||
			interactiveRoles.has(role) ||
			interactiveRoles.has(ariaRole) ||
			(tabIndex !== null && tabIndex !== '-1') ||
			element.getAttribute('data-action') === 'a-dropdown-select' ||
			element.getAttribute('data-action') === 'a-dropdown-button';

		if (hasInteractiveRole) return true;

		// Get computed style
		const style = window.getComputedStyle(element);

		// Check if element has click-like styling
		// const hasClickStyling = style.cursor === 'pointer' ||
		//     element.style.cursor === 'pointer' ||
		//     style.pointerEvents !== 'none';

		// Check for event listeners
		const hasClickHandler = element.onclick !== null ||
			element.getAttribute('onclick') !== null ||
			element.hasAttribute('ng-click') ||
			element.hasAttribute('@click') ||
			element.hasAttribute('v-on:click');

		// Helper function to safely get event listeners
		function getEventListeners(el) {
			try {
				// Try to get listeners using Chrome DevTools API
				return window.getEventListeners?.(el) || {};
			} catch (e) {
				// Fallback: check for common event properties
				const listeners = {};

				// List of common event types to check
				const eventTypes = [
					'click', 'mousedown', 'mouseup',
					'touchstart', 'touchend',
					'keydown', 'keyup', 'focus', 'blur'
				];

				for (const type of eventTypes) {
					const handler = el[`on${type}`];
					if (handler) {
						listeners[type] = [{
							listener: handler,
							useCapture: false
						}];
					}
				}

				return listeners;
			}
		}

		// Check for click-related events on the element itself
		const listeners = getEventListeners(element);
		const hasClickListeners = listeners && (
			listeners.click?.length > 0 ||
			listeners.mousedown?.length > 0 ||
			listeners.mouseup?.length > 0 ||
			listeners.touchstart?.length > 0 ||
			listeners.touchend?.length > 0
		);

		// Check for ARIA properties that suggest interactivity
		const hasAriaProps = element.hasAttribute('aria-expanded') ||
			element.hasAttribute('aria-pressed') ||
			element.hasAttribute('aria-selected') ||
			element.hasAttribute('aria-checked');

		// Check for form-related functionality
		const isFormRelated = element.form !== undefined ||
			element.hasAttribute('contenteditable') ||
			style.userSelect !== 'none';

		// Check if element is draggable
		const isDraggable = element.draggable ||
			element.getAttribute('draggable') === 'true';

		return hasAriaProps ||
			// hasClickStyling ||
			hasClickHandler ||
			hasClickListeners ||
			// isFormRelated ||
			isDraggable;

	}

	// Helper function to check if element is visible
	function isElementVisible(element) {
		const style = window.getComputedStyle(element);
		return element.offsetWidth > 0 &&
			element.offsetHeight > 0 &&
			style.visibility !== 'hidden' &&
			style.display !== 'none';
	}

	// Helper function to check if element is the top element at its position
	function isTopElement(element) {
		// Find the correct document context and root element
		let doc = element.ownerDocument;

		// If we're in an iframe, elements are considered top by default
		if (doc !== window.document) {
			return true;
		}

		// For shadow DOM, we need to check within its own root context
		const shadowRoot = element.getRootNode();
		if (shadowRoot instanceof ShadowRoot) {
			const rect = element.getBoundingClientRect();
			const point = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };

			try {
				// Use shadow root's elementFromPoint to check within shadow DOM context
				const topEl = shadowRoot.elementFromPoint(point.x, point.y);
				if (!topEl) return false;

				// Check if the element or any of its parents match our target element
				let current = topEl;
				while (current && current !== shadowRoot) {
					if (current === element) return true;
					current = current.parentElement;
				}
				return false;
			} catch (e) {
				return true; // If we can't determine, consider it visible
			}
		}

		// Regular DOM elements
		const rect = element.getBoundingClientRect();

		// If viewportExpansion is -1, check if element is the top one at its position
		if (viewportExpansion === -1) {
			return true; // Consider all elements as top elements when expansion is -1
		}

		// Calculate expanded viewport boundaries including scroll position
		const scrollX = window.scrollX;
		const scrollY = window.scrollY;
		const viewportTop = -viewportExpansion + scrollY;
		const viewportLeft = -viewportExpansion + scrollX;
		const viewportBottom = window.innerHeight + viewportExpansion + scrollY;
		const viewportRight = window.innerWidth + viewportExpansion + scrollX;

		// Get absolute element position
		const absTop = rect.top + scrollY;
		const absLeft = rect.left + scrollX;
		const absBottom = rect.bottom + scrollY;
		const absRight = rect.right + scrollX;

		// Skip if element is completely outside expanded viewport
		if (absBottom < viewportTop ||
			absTop > viewportBottom ||
			absRight < viewportLeft ||
			absLeft > viewportRight) {
			return false;
		}

		// For elements within expanded viewport, check if they're the top element
		try {
			const centerX = rect.left + rect.width / 2;
			const centerY = rect.top + rect.height / 2;

			// Only clamp the point if it's outside the actual document
			const point = {
				x: centerX,
				y: centerY
			};

			if (point.x < 0 || point.x >= window.innerWidth ||
				point.y < 0 || point.y >= window.innerHeight) {
				return false; // Consider elements with center outside viewport as visible
			}

			const topEl = document.elementFromPoint(point.x, point.y);
			if (!topEl) return false;

			let current = topEl;
			while (current && current !== document.documentElement) {
				if (current === element) return true;
				current = current.parentElement;
			}
			return false;
		} catch (e) {
			return true;
		}
	}

	// Helper function to check if text node is visible
	function isTextNodeVisible(textNode) {
		const range = document.createRange();
		range.selectNodeContents(textNode);
		const rect = range.getBoundingClientRect();

		return rect.width !== 0 &&
			rect.height !== 0 &&
			rect.top >= 0 &&
			rect.top <= window.innerHeight &&
			textNode.parentElement?.checkVisibility({
				checkOpacity: true,
				checkVisibilityCSS: true
			});
	}


	// Function to traverse the DOM and create nested JSON
	function buildDomTree(node, parentIframe = null) {
		if (!node) return null;

		// Special case for text nodes
		if (node.nodeType === Node.TEXT_NODE) {
			const textContent = node.textContent.trim();
			if (textContent && isTextNodeVisible(node)) {
				return {
					type: "TEXT_NODE",
					text: textContent,
					isVisible: true,
				};
			}
			return null;
		}

		// Check if element is accepted
		if (node.nodeType === Node.ELEMENT_NODE && !isElementAccepted(node)) {
			return null;
		}

		const nodeData = {
			tagName: node.tagName ? node.tagName.toLowerCase() : null,
			attributes: {},
			xpath: node.nodeType === Node.ELEMENT_NODE ? getXPathTree(node, true) : null,
			children: [],
		};

		// Copy all attributes if the node is an element
		if (node.nodeType === Node.ELEMENT_NODE && node.attributes) {
			// Use getAttributeNames() instead of directly iterating attributes
			const attributeNames = node.getAttributeNames?.() || [];
			for (const name of attributeNames) {
				nodeData.attributes[name] = node.getAttribute(name);
			}
		}

		if (node.nodeType === Node.ELEMENT_NODE) {
			const isInteractive = isInteractiveElement(node);
			const isVisible = isElementVisible(node);
			const isTop = isTopElement(node);
            const isEditable = isEditableElement(node);

			nodeData.isInteractive = isInteractive;
			nodeData.isVisible = isVisible;
			nodeData.isTopElement = isTop;
			nodeData.isEditable = isEditable;

			// Highlight if element meets all criteria and highlighting is enabled
			if (isInteractive && isVisible && isTop) {
				nodeData.highlightIndex = highlightIndex++;
				if (doHighlightElements) {
					if (focusHighlightIndex >= 0) {
						if (focusHighlightIndex === nodeData.highlightIndex) {
							highlightElement(node, nodeData.highlightIndex, parentIframe);
						}
					} else {
						highlightElement(node, nodeData.highlightIndex, parentIframe);
					}
				}
			}
		}

		// Only add iframeContext if we're inside an iframe
		// if (parentIframe) {
		//     nodeData.iframeContext = `iframe[src="${parentIframe.src || ''}"]`;
		// }

		// Only add shadowRoot field if it exists
		if (node.shadowRoot) {
			nodeData.shadowRoot = true;
		}

		// Handle shadow DOM
		if (node.shadowRoot) {
			const shadowChildren = Array.from(node.shadowRoot.childNodes).map(child =>
				buildDomTree(child, parentIframe)
			);
			nodeData.children.push(...shadowChildren);
		}

		// Handle iframes
		if (node.tagName === 'IFRAME') {
			try {
				const iframeDoc = node.contentDocument || node.contentWindow.document;
				if (iframeDoc) {
					const iframeChildren = Array.from(iframeDoc.body.childNodes).map(child =>
						buildDomTree(child, node)
					);
					nodeData.children.push(...iframeChildren);
				}
			} catch (e) {
				console.warn('Unable to access iframe:', node);
			}
		} else {
			const children = Array.from(node.childNodes).map(child =>
				buildDomTree(child, parentIframe)
			);
			nodeData.children.push(...children);
		}

		return nodeData;
	}


	return buildDomTree(document.body);
}

================
File: packages/notte-browser/src/notte_browser/dom/csspaths.py
================
# functions from: https://github.com/browser-use/browser-use/blob/main/browser_use/browser/context.py
import re


def xpath_to_css_path(xpath: str) -> str:
    """Converts simple XPath expressions to CSS selectors."""
    if not xpath:
        return ""

    # Remove leading slash if present
    xpath = xpath.lstrip("/")

    # Split into parts
    parts: list[str] = xpath.split("/")
    css_parts: list[str] = []

    for part in parts:
        if not part:
            continue

        # Handle index notation [n]
        if "[" in part:
            base_part = part[: part.find("[")]
            index_part = part[part.find("[") :]

            # Handle multiple indices
            indices = [i.strip("[]") for i in index_part.split("]")[:-1]]

            for idx in indices:
                try:
                    # Handle numeric indices
                    if idx.isdigit():
                        index = int(idx) - 1
                        base_part += f":nth-of-type({index + 1})"
                    # Handle last() function
                    elif idx == "last()":
                        base_part += ":last-of-type"
                    # Handle position() functions
                    elif "position()" in idx:
                        if ">1" in idx:
                            base_part += ":nth-of-type(n+2)"
                except ValueError:
                    continue

            css_parts.append(base_part)
        else:
            css_parts.append(part)

    base_selector = " > ".join(css_parts)
    return base_selector


def build_csspath(
    tag_name: str,
    xpath: str,
    attributes: dict[str, str],
    highlight_index: int | None,
    include_dynamic_attributes: bool = True,
) -> str:
    """
    Creates a CSS selector for a DOM element, handling various edge cases and special characters.
    """
    try:
        # Get base selector from XPath
        css_selector = xpath_to_css_path(xpath)

        # Handle class attributes
        if "class" in attributes and attributes["class"] and include_dynamic_attributes:
            # Define a regex pattern for valid class names in CSS
            valid_class_name_pattern = re.compile(r"^[a-zA-Z_][a-zA-Z0-9_-]*$")

            # Iterate through the class attribute values
            classes = attributes["class"].split()
            for class_name in classes:
                # Skip empty class names
                if not class_name.strip():
                    continue

                # Check if the class name is valid
                if valid_class_name_pattern.match(class_name):
                    # Append the valid class name to the CSS selector
                    css_selector += f".{class_name}"
                else:
                    # Skip invalid class names
                    continue

        # Expanded set of safe attributes that are stable and useful for selection
        SAFE_ATTRIBUTES = {
            # Data attributes (if they're stable in your application)
            "id",
            # Standard HTML attributes
            "name",
            "type",
            "placeholder",
            # Accessibility attributes
            "aria-label",
            "aria-labelledby",
            "aria-describedby",
            "role",
            # Common form attributes
            "for",
            "autocomplete",
            "required",
            "readonly",
            # Media attributes
            "alt",
            "title",
            "src",
            # Custom stable attributes (add any application-specific ones)
            "href",
            "target",
        }

        if include_dynamic_attributes:
            dynamic_attributes = {
                "data-id",
                "data-qa",
                "data-cy",
                "data-testid",
            }
            SAFE_ATTRIBUTES.update(dynamic_attributes)

        # Handle other attributes
        for attribute, value in attributes.items():
            if attribute == "class":
                continue

            # Skip invalid attribute names
            if not attribute.strip():
                continue

            if attribute not in SAFE_ATTRIBUTES:
                continue

            # Escape special characters in attribute names
            safe_attribute = attribute.replace(":", r"\:")

            # Handle different value cases
            if value == "":
                css_selector += f"[{safe_attribute}]"
            elif any(char in value for char in "\"'<>`\n\r\t"):
                # Use contains for values with special characters
                # Regex-substitute *any* whitespace with a single space, then strip.
                collapsed_value = re.sub(r"\s+", " ", value).strip()
                # Escape embedded double-quotes.
                safe_value = collapsed_value.replace('"', '\\"')
                css_selector += f'[{safe_attribute}*="{safe_value}"]'
            else:
                css_selector += f'[{safe_attribute}="{value}"]'

        return css_selector

    except Exception:
        # Fallback to a more basic selector if something goes wrong
        return f"{tag_name}[highlight_index='{highlight_index}']"

================
File: packages/notte-browser/src/notte_browser/dom/dropdown_menu.py
================
import json

from loguru import logger
from patchright.async_api import Page
from typing_extensions import TypedDict

# TODO: refactor this


class DropdownMenuOptions(TypedDict):
    text: str
    value: str
    index: int


class DropdownMenu(TypedDict):
    options: list[DropdownMenuOptions]
    id: str
    name: str


async def dropdown_menu_options(page: Page, selector: str) -> list[str]:
    try:
        # Frame-aware approach since we know it works
        all_options: list[str] = []
        frame_index = 0

        for frame in page.frames:
            try:
                options: DropdownMenu = await frame.evaluate(
                    """
(xpath) => {
    const select = document.evaluate(xpath, document, null,
        XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (!select) return null;

    return {
        options: Array.from(select.options).map(opt => ({
            text: opt.text, //do not trim, because we are doing exact match in select_dropdown_option
            value: opt.value,
            index: opt.index
        })),
        id: select.id,
        name: select.name
    };
}
                """,
                    selector,
                )

                if options:
                    logger.debug(f"Found dropdown in frame {frame_index}")
                    logger.debug(f"Dropdown ID: {options['id']}, Name: {options['name']}")

                    formatted_options: list[str] = []
                    for opt in options["options"]:
                        # encoding ensures AI uses the exact string in select_dropdown_option
                        encoded_text = json.dumps(opt["text"])
                        formatted_options.append(f"{opt['index']}: text={encoded_text}")

                    all_options.extend(formatted_options)

            except Exception as frame_e:
                logger.debug(f"Frame {frame_index} evaluation failed: {str(frame_e)}")

            frame_index += 1

        return all_options
    except Exception as e:
        logger.error(f"Error getting dropdown menu options: {str(e)}")
        return []


async def select_dropdown_option(
    page: Page,
    tag_name: str,
    xpath: str,
    text: str,
) -> str:
    """Select dropdown option by the text of the option you want to select"""

    # Validate that we're working with a select element
    if tag_name != "select":
        logger.error(f"Element is not a select! Tag: {tag_name}")
        msg = f"Cannot select option: Element with a {tag_name} tag, not a select"
        return msg

    logger.debug(f"Attempting to select '{text}' using xpath: {xpath}")
    logger.debug(f"Element tag: {tag_name}")

    _xpath = "//" + xpath

    try:
        frame_index = 0
        for frame in page.frames:
            try:
                logger.debug(f"Trying frame {frame_index} URL: {frame.url}")

                # First verify we can find the dropdown in this frame
                find_dropdown_js = """
(xpath) => {
    try {
        const select = document.evaluate(xpath, document, null,
            XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (!select) return null;
        if (select.tagName.toLowerCase() !== 'select') {
            return {
                error: `Found element but it's a ${select.tagName}, not a SELECT`,
                found: false
            };
        }
        return {
            id: select.id,
            name: select.name,
            found: true,
            tagName: select.tagName,
            optionCount: select.options.length,
            currentValue: select.value,
            availableOptions: Array.from(select.options).map(o => o.text.trim())
        };
    } catch (e) {
        return {error: e.toString(), found: false};
    }
}
                """

                dropdown_info = await frame.evaluate(find_dropdown_js, xpath)

                if dropdown_info:
                    if not dropdown_info.get("found"):
                        logger.error(f"Frame {frame_index} error: {dropdown_info.get('error')}")
                        continue

                    logger.debug(f"Found dropdown in frame {frame_index}: {dropdown_info}")

                    # "label" because we are selecting by text
                    # nth(0) to disable error thrown by strict mode
                    # timeout=1000 because we are already waiting for all network events, therefore
                    # ideally we don't need to wait a lot here (default 30s)
                    select_element = frame.locator(_xpath).nth(0)
                    selected_option_values = await select_element.select_option(label=text, timeout=1000)

                    msg = f"selected option {text} with value {selected_option_values}"
                    logger.info(msg + f" in frame {frame_index}")

                    return msg

            except Exception as frame_e:
                logger.error(f"Frame {frame_index} attempt failed: {str(frame_e)}")
                logger.error(f"Frame type: {type(frame)}")
                logger.error(f"Frame URL: {frame.url}")

            frame_index += 1

        msg = f"Could not select option '{text}' in any frame"
        logger.info(msg)
        return msg

    except Exception as e:
        msg = f"Selection failed: {str(e)}"
        logger.error(msg)
        return msg

================
File: packages/notte-browser/src/notte_browser/dom/id_generation.py
================
from collections import defaultdict

from loguru import logger
from notte_core.browser.node_type import NodeRole

from notte_browser.dom.types import DOMBaseNode


def generate_sequential_ids(root: DOMBaseNode) -> DOMBaseNode:
    """
    Generates sequential IDs for interactive elements in the accessibility tree
    using depth-first search.
    """
    stack = [root]
    id_counter: defaultdict[str, int] = defaultdict(lambda: 1)
    while stack:
        node = stack.pop()
        children = node.children

        role = NodeRole.from_value(node.role)
        if isinstance(role, str):
            logger.debug(
                f"Unsupported role to convert to ID: {node}. Please add this role to the NodeRole e logic ASAP."
            )
        elif node.highlight_index is not None:
            id = role.short_id(force_id=True)
            if id is not None:
                node.notte_id = f"{id}{id_counter[id]}"
                id_counter[id] += 1
            else:
                raise ValueError(
                    (
                        f"Role {role} was incorrectly converted from raw Dom Node."
                        " It is an interaction node. It should have a short ID but is currently None"
                    )
                )
        stack.extend(reversed(children))

    return root

================
File: packages/notte-browser/src/notte_browser/dom/locate.py
================
from loguru import logger
from notte_core.browser.dom_tree import DomNode, NodeSelectors
from patchright.async_api import FrameLocator, Locator, Page


async def locale_element_in_iframes(page: Page, selectors: NodeSelectors) -> FrameLocator | Page:
    if not selectors.in_iframe:
        raise ValueError("Node is not in an iframe")

    iframes_css_paths = selectors.iframe_parent_css_selectors
    if len(iframes_css_paths) == 0:
        raise ValueError("Node is not in an iframe")

    current_frame: FrameLocator | Page = page
    for css_path in iframes_css_paths:
        current_frame = current_frame.frame_locator(css_path)

    return current_frame


async def locate_element(page: Page, selectors: NodeSelectors) -> Locator:
    frame: Page | FrameLocator = page
    if selectors.in_iframe:
        frame = await locale_element_in_iframes(page, selectors)
    # regular case, locate element + scroll into view if needed

    for selector in [f"css={selectors.css_selector}", f"xpath={selectors.xpath_selector}"]:
        locator = frame.locator(selector)
        count = await locator.count()
        if count > 1:
            logger.warning(f"Found {count} elements for '{selector}'. Check out the dom tree for more details.")
        elif count == 1:
            return locator
    raise ValueError(
        f"No locator is available for xpath='{selectors.xpath_selector}' or css='{selectors.css_selector}'"
    )


def selectors_through_shadow_dom(node: DomNode) -> NodeSelectors:
    root_selectors = node.computed_attributes.selectors
    if root_selectors is None:
        raise ValueError(f"Node id={node.id} has no selectors")
    xpaths = [f"xpath={root_selectors.xpath_selector}"]
    while node.parent is not None:
        selectors = node.computed_attributes.selectors
        if selectors is None:
            raise ValueError("Is this a valid dom tree?")
        elif node.computed_attributes.shadow_root:
            if len(selectors.xpath_selector) == 0:
                if node.attributes is None:
                    raise ValueError(f"Node id={node.id} has no attributes")
                logger.warning(
                    (
                        f"Unexpected case during shadow root xpath resolution for node '{node.id}'. "
                        f"Empty xpath. Using tag_name = {node.attributes.tag_name} instead."
                    )
                )
                xpaths.append(node.attributes.tag_name)
            else:
                # xpaths of children also contain xpaths part of parent that we need to remove for shadow root handling
                xpaths[-1] = xpaths[-1].replace(selectors.xpath_selector, "")
                if node.parent.parent is None:
                    xpaths.append(selectors.xpath_selector)
                else:
                    xpaths.append(f"xpath={selectors.xpath_selector}")
        node = node.parent

    shadow_locator = " >> ".join(xpaths[::-1])
    # shadow_locator_css = " >> css=".join(css[::-1])
    return NodeSelectors(
        # override xpath and css selectors to include the shadow dom
        xpath_selector=shadow_locator,
        css_selector=root_selectors.css_selector,
        # keep the rest of the selectors
        in_iframe=root_selectors.in_iframe,
        iframe_parent_css_selectors=root_selectors.iframe_parent_css_selectors,
        notte_selector=root_selectors.notte_selector,
        playwright_selector=root_selectors.playwright_selector,
        in_shadow_root=root_selectors.in_shadow_root,
    )

================
File: packages/notte-browser/src/notte_browser/dom/parsing.py
================
from pathlib import Path

from loguru import logger
from notte_core.browser.dom_tree import DomErrorBuffer
from notte_core.browser.dom_tree import DomNode as NotteDomNode
from notte_core.common.config import FrozenConfig
from notte_core.errors.processing import SnapshotProcessingError
from patchright.async_api import Page
from typing_extensions import TypedDict

from notte_browser.dom.csspaths import build_csspath
from notte_browser.dom.id_generation import generate_sequential_ids
from notte_browser.dom.types import DOMBaseNode, DOMElementNode, DOMTextNode

DOM_TREE_JS_PATH = Path(__file__).parent / "buildDomNode.js"


class DomTreeDict(TypedDict):
    type: str
    text: str
    tagName: str | None
    xpath: str | None
    attributes: dict[str, str]
    isVisible: bool
    isInteractive: bool
    isTopElement: bool
    isEditable: bool
    highlightIndex: int | None
    shadowRoot: bool
    children: list["DomTreeDict"]


class DomParsingConfig(FrozenConfig):
    """
    Viewport expansion in pixels.
    This amount will increase the number of elements which are included in the state what the LLM will see.
    - If set to -1, all elements will be included (this leads to high token usage).
    - If set to 0, only the elements which are visible in the viewport will be included.

    """

    highlight_elements: bool = True
    focus_element: int = -1
    viewport_expansion: int = 500  # update from 0


class ParseDomTreePipe:
    @staticmethod
    async def forward(page: Page, config: DomParsingConfig | None = None) -> NotteDomNode:
        config = config or DomParsingConfig()
        dom_tree = await ParseDomTreePipe.parse_dom_tree(page, config)
        dom_tree = generate_sequential_ids(dom_tree)
        notte_dom_tree = dom_tree.to_notte_domnode()
        DomErrorBuffer.flush()
        return notte_dom_tree

    @staticmethod
    async def parse_dom_tree(page: Page, config: DomParsingConfig) -> DOMBaseNode:
        js_code = DOM_TREE_JS_PATH.read_text()
        if config.verbose:
            logger.info(f"Parsing DOM tree for {page.url} with config: {config.model_dump()}")
        node: DomTreeDict | None = await page.evaluate(js_code, config.model_dump())
        if node is None:
            raise SnapshotProcessingError(page.url, "Failed to parse HTML to dictionary")
        parsed = ParseDomTreePipe._parse_node(
            node,
            parent=None,
            in_iframe=False,
            in_shadow_root=False,
            iframe_parent_css_paths=[],
            notte_selector=page.url,
        )
        if parsed is None:
            raise SnapshotProcessingError(page.url, f"Failed to parse DOM tree. Dom Tree is empty. {node}")
        return parsed

    @staticmethod
    def _parse_node(
        node: DomTreeDict,
        parent: "DOMElementNode | None",
        in_iframe: bool,
        in_shadow_root: bool,
        iframe_parent_css_paths: list[str],
        notte_selector: str,
    ) -> DOMBaseNode | None:
        if node.get("type") == "TEXT_NODE":
            text_node = DOMTextNode(
                text=node["text"],
                is_visible=node["isVisible"],
                parent=parent,
            )

            return text_node

        tag_name = node["tagName"]
        attrs = node.get("attributes", {})
        xpath = node["xpath"]

        if tag_name is None:
            if xpath is None and len(attrs) == 0 and len(node.get("children", [])) == 0:
                return None
            raise ValueError(f"Tag name is None for node: {node}")

        highlight_index = node.get("highlightIndex")
        shadow_root = node.get("shadowRoot", False)
        if xpath is None:
            raise ValueError(f"XPath is None for node: {node}")
        css_path = build_csspath(
            tag_name=tag_name,
            xpath=xpath,
            attributes=attrs,
            highlight_index=highlight_index,
        )
        _iframe_parent_css_paths = iframe_parent_css_paths
        notte_selector = ":".join([notte_selector, str(hash(xpath)), str(hash(css_path))])

        if shadow_root:
            in_shadow_root = True

        if tag_name.lower() == "iframe":
            in_iframe = True
            _iframe_parent_css_paths = _iframe_parent_css_paths + [css_path]

        element_node = DOMElementNode(
            tag_name=tag_name,
            in_iframe=in_iframe,
            xpath=xpath,
            css_path=css_path,
            notte_selector=notte_selector,
            iframe_parent_css_selectors=iframe_parent_css_paths,
            attributes=attrs,
            is_visible=node.get("isVisible", False),
            is_interactive=node.get("isInteractive", False),
            is_top_element=node.get("isTopElement", False),
            is_editable=node.get("isEditable", False),
            highlight_index=node.get("highlightIndex"),
            shadow_root=shadow_root,
            in_shadow_root=in_shadow_root,
            parent=parent,
        )

        children: list[DOMBaseNode] = []
        for child in node.get("children", []):
            if child is not None:
                child_node = ParseDomTreePipe._parse_node(
                    node=child,
                    parent=element_node,
                    in_iframe=in_iframe,
                    iframe_parent_css_paths=_iframe_parent_css_paths,
                    notte_selector=notte_selector,
                    in_shadow_root=in_shadow_root,
                )
                if child_node is not None:
                    children.append(child_node)

        element_node.children = children

        return element_node

================
File: packages/notte-browser/src/notte_browser/dom/pipe.py
================
from notte_core.browser.snapshot import BrowserSnapshot


class DomPreprocessingPipe:
    @staticmethod
    def forward(snapshot: BrowserSnapshot) -> BrowserSnapshot:
        return BrowserSnapshot(
            metadata=snapshot.metadata,
            html_content=snapshot.html_content,
            a11y_tree=snapshot.a11y_tree,
            dom_node=snapshot.dom_node,
            screenshot=snapshot.screenshot,
        )

================
File: packages/notte-browser/src/notte_browser/dom/types.py
================
from dataclasses import dataclass, field
from typing import Any

from loguru import logger
from notte_core.browser.dom_tree import ComputedDomAttributes, DomAttributes, NodeSelectors
from notte_core.browser.dom_tree import DomNode as NotteDomNode
from notte_core.browser.node_type import NodeRole, NodeType
from typing_extensions import override

VERBOSE = False


# clean up aria attributes
def cleanup_aria_attributes(attrs: dict[str, str]) -> dict[str, str]:
    to_add: dict[str, str] = {}
    to_remove: list[str] = []
    pattern = "aria-"
    for attr, value in attrs.items():
        if pattern in attr:
            # remove anything before aria_
            new_attr_split = attr.split(pattern)[1:]
            new_attr = pattern + (pattern.join(new_attr_split))
            if new_attr in attrs and attrs[new_attr] != value:
                logger.debug(f"Key {new_attr} got updated while loading: old={attrs[new_attr]}, new={value}")

            to_add[new_attr] = value
            to_remove.append(attr)
    for attr in to_remove:
        del attrs[attr]
    for attr, value in to_add.items():
        attrs[attr] = value
    return attrs


@dataclass(frozen=False)
class DOMBaseNode:
    parent: "DOMElementNode | None"
    is_visible: bool
    highlight_index: int | None
    notte_id: str | None = field(init=False, default=None)
    children: list["DOMBaseNode"] = field(init=False, default_factory=list)
    # Use None as default and set parent later to avoid circular reference issues

    def __post_init__(self) -> None:
        self.children = [] if getattr(self, "children", None) is None else self.children
        self.notte_id = None if getattr(self, "notte_id", None) is None else self.notte_id

    def to_dict(self) -> dict[str, str]:
        raise NotImplementedError("to_dict method not implemented for DOMBaseNode")

    def to_notte_domnode(self) -> NotteDomNode:
        raise NotImplementedError("to_notte_domnode method not implemented for DOMBaseNode")

    @property
    def name(self) -> str:
        raise NotImplementedError("name property not implemented for DOMBaseNode")

    @property
    def role(self) -> str:
        raise NotImplementedError("role property not implemented for DOMBaseNode")


@dataclass(frozen=False)
class DOMTextNode(DOMBaseNode):
    text: str = ""
    type: str = "TEXT_NODE"
    highlight_index: int | None = None

    def has_parent_with_highlight_index(self) -> bool:
        current = self.parent
        while current is not None:
            if current.highlight_index is not None:
                return True
            current = current.parent
        return False

    @override
    def to_dict(self) -> dict[str, str]:
        return {
            "role": "text",
            "text": self.text,
        }

    @property
    @override
    def role(self) -> str:
        return "text"

    @property
    @override
    def name(self) -> str:
        return self.text

    @override
    def to_notte_domnode(self) -> NotteDomNode:
        return NotteDomNode(
            id=self.notte_id,
            role=NodeRole.from_value(self.role),
            type=NodeType.TEXT,
            text=self.name,
            children=[],
            computed_attributes=ComputedDomAttributes(
                in_viewport=self.is_visible,
            ),
            attributes=None,
        )


@dataclass(frozen=False)
class DOMElementNode(DOMBaseNode):
    """
    xpath: the xpath of the element from the last root node
    (shadow root or iframe OR document if no shadow root or iframe).
    To properly reference the element we need to recursively switch the root node
    until we find the element (work you way up the tree with `.parent`)
    """

    tag_name: str
    xpath: str
    # iframe resolution
    in_iframe: bool
    in_shadow_root: bool
    css_path: str
    iframe_parent_css_selectors: list[str]
    notte_selector: str
    # html attributes
    attributes: dict[str, str]
    # computed attributes
    is_interactive: bool = False
    is_top_element: bool = False
    shadow_root: bool = False
    is_editable: bool = False

    @override
    def __post_init__(self) -> None:
        if self.tag_name is not None and self.tag_name.startswith("wiz_"):  # type: ignore[arg-type]
            self.tag_name = self.tag_name[len("wiz_") :].replace("_", "-")
        # replace also in the attributes
        self.attributes = cleanup_aria_attributes(self.attributes)

    @override
    def __repr__(self) -> str:
        tag_str = f"<{self.tag_name}"

        # Add attributes
        for key, value in self.attributes.items():
            tag_str += f' {key}="{value}"'
        tag_str += ">"

        # Add extra info
        extras: list[str] = []
        if self.is_interactive:
            extras.append("interactive")
        if self.is_top_element:
            extras.append("top")
        if self.shadow_root:
            extras.append("shadow-root")
        if self.highlight_index is not None:
            extras.append(f"highlight:{self.highlight_index}")

        if extras:
            tag_str += f" [{', '.join(extras)}]"

        return tag_str

    @property
    @override
    def role(self) -> str:
        # transform to axt role
        if self.attributes.get("role"):
            return self.attributes["role"]
        if self.tag_name is None or len(self.tag_name) == 0:  # type: ignore[arg-type]
            if len(self.attributes) == 0 and len(self.children) == 0:
                return "none"
            raise ValueError(f"No tag_name found for element: {self} with attributes: {self.attributes}")
        clean_tag_name = self.tag_name.lower().replace("-", "").replace("_", "")
        match self.tag_name.lower():
            # Structural elements
            case "body":
                return "WebArea"
            case "nav":
                return "navigation"
            case "main":
                return "main"
            case "header":
                return "banner"
            case "footer":
                return "contentinfo"
            case "aside":
                return "complementary"
            case "section" | "article":
                return "article"
            case "div":
                return "group"

            # Interactive elements
            case "a":
                return "link"
            case "button":
                return "button"
            case "input":
                input_type = self.attributes.get("type", "text").lower()
                match input_type:
                    # TODO: could create a special type for submit/reset
                    case "button" | "submit" | "reset":
                        return "button"
                    case "radio":
                        return "radio"
                    case "checkbox":
                        return "checkbox"
                    case "search":
                        return "searchbox"
                    case _:
                        return "textbox"
            case "select":
                return "combobox"
            case "textarea":
                return "textbox"
            case "option":
                return "option"

            # Text elements
            case "h1" | "h2" | "h3" | "h4" | "h5" | "h6":
                return "heading"
            case "p":
                return "paragraph"
            case "span" | "strong" | "em" | "small" | "bdi" | "i":
                return "text"
            case "label":
                return "LabelText"
            case "blockquote":
                return "blockquote"
            case "code" | "pre":
                return "code"
            case "time":
                return "time"
            case "br":
                return "LineBreak"

            # List elements
            case "ul" | "ol" | "dl":
                return "list"
            case "li":
                return "listitem"
            case "dt" | "dd":
                return "listitem"

            # Table elements
            case "table":
                return "table"
            case "tr":
                return "row"
            case "td":
                return "cell"
            case "th":
                return "columnheader"
            case "thead" | "tbody" | "tfoot":
                return "rowgroup"

            # Media elements
            case "img":
                return "img"
            case "figure":
                return "figure"
            case "iframe":
                return "Iframe"

            # Form elements
            case "form":
                return "form"
            case "fieldset":
                return "group"
            case "dialog":
                return "dialog"
            case "progress":
                return "progressbar"
            case "meter":
                return "meter"

            # Menu elements
            case "menu":
                return "menu"
            case "menuitem":
                return "menuitem"

            # Default case
            case "hr":
                return "separator"
            case _:
                roles_to_check = ["menuitemcheckbox", "menuitemradio", "menuitem", "menu", "dialog"]
                for role in roles_to_check:
                    if role in clean_tag_name:
                        return role
                if "popup" in clean_tag_name:
                    return "MenuListPopup"

                if VERBOSE:
                    logger.warning(f"No role found for tag: {self.tag_name} with attributes: {self.attributes}")
                return "generic"

    @property
    @override
    def name(self) -> str:
        if len(self.attributes) == 0:
            return ""
        # Check explicit ARIA labeling
        if "aria-label" in self.attributes:
            if len(self.attributes["aria-label"]) > 0:
                return self.attributes["aria-label"]

        # Check for standard labeling attributes
        for attr in ["name", "title", "alt", "placeholder", "value"]:
            if attr in self.attributes:
                value = self.attributes.get(attr)
                if value and value.strip():
                    return value.strip()

        # Check for button/input value
        if self.tag_name.lower() in ["button", "input"]:
            if "value" in self.attributes:
                value = self.attributes.get("value")
                if value and len(value.strip()) > 0:
                    return value.strip()

        # Check aria-labelledby if present
        # if "aria-labelledby" in self.attributes:
        #     # Note: This would require access to other elements
        #     # TODO: Implement aria-labelledby resolution
        #     pass

        # Check for text content for certain elements
        if self.tag_name.lower() in ["button", "a", "label"]:
            text_content = self._get_text_content().strip()
            if len(text_content) > 0:
                return text_content

        if self.tag_name.lower() in ["img", "a"]:
            if "src" in self.attributes:
                return self.attributes["src"]
            if "href" in self.attributes:
                return self.attributes["href"]

        if self.tag_name.lower() in ["body"]:
            # Usually in accessibility mode, the WebArea name is the page title
            # TODO: get the page title from the browser
            return "body content"

        if self.tag_name.lower() in [
            "main",
            "div",
            "section",
            "article",
            "header",
            "footer",
            "aside",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "span",
            "label",
            "strong",
            "em",
            "small",
            "bdi",
            "li",
            "ol",
            "ul",
            "dl",
            "dt",
            "dd",
            "table",
            "tr",
            "td",
            "th",
            "thead",
            "tbody",
            "tfoot",
            "img",
            "figure",
            "iframe",
            "form",
            "fieldset",
            "dialog",
            "progress",
            "meter",
            "menu",
            "menuitem",
            "hr",
            "br",
            "p",
            "i",
        ]:
            # TODO: create a better name computation using text children and attributes
            return ""

        if self.tag_name.lower() in ["footer"]:
            return self.tag_name

        if self.tag_name.lower() in ["button"]:
            return self.attributes.get("type") or ""

        first_5_attrs = list(self.attributes.items())[:5]
        if VERBOSE:
            logger.error(f"No name found for element: {self} with attributes: {first_5_attrs}")
        return ""

    def _get_text_content(self) -> str:
        """Recursively get text content from child text nodes."""

        def extract_text(node: DOMBaseNode) -> str:
            if isinstance(node, DOMTextNode):
                return node.text if node.is_visible else ""
            else:
                children_text = "".join(extract_text(child) for child in node.children)
                return children_text

        result = extract_text(self)
        return result

    @override
    def to_dict(self) -> dict[str, Any]:
        role, name = self.role, self.name
        if (name == "" or role == "") and len(self.children) == 0:
            return {}
        base: dict[str, Any] = {"role": role, "name": name}
        if self.children:
            base["children"] = [child.to_dict() for child in self.children]
        return base

    @override
    def to_notte_domnode(self) -> NotteDomNode:
        node = NotteDomNode(
            id=self.notte_id,
            type=NodeType.INTERACTION if self.is_interactive else NodeType.OTHER,
            role=NodeRole.from_value(self.role),
            text=self.name,
            children=[child.to_notte_domnode() for child in self.children],
            attributes=DomAttributes.safe_init(
                tag_name=self.tag_name,
                **self.attributes,
            ),
            computed_attributes=ComputedDomAttributes(
                in_viewport=self.is_visible,
                is_interactive=self.is_interactive,
                is_top_element=self.is_top_element,
                is_editable=self.is_editable,
                shadow_root=self.shadow_root,
                highlight_index=self.highlight_index,
                selectors=NodeSelectors(
                    css_selector=self.css_path,
                    xpath_selector=self.xpath,
                    notte_selector=self.notte_selector,
                    in_iframe=self.in_iframe,
                    iframe_parent_css_selectors=self.iframe_parent_css_selectors,
                    in_shadow_root=self.in_shadow_root,
                ),
            ),
        )
        # second path to set the parent
        for child in node.children:
            child.set_parent(node)
        return node

================
File: packages/notte-browser/src/notte_browser/dom/wait_for_page_update.py
================
# from collections.abc import AsyncGenerator, Awaitable
# from contextlib import asynccontextmanager
# import time
# from patchright.async_api import Page, TimeoutError as PlaywrightTimeoutError
# import asyncio
# from loguru import logger

# # @asynccontextmanager
# # async def wait_for_page_update_2(
# #     page: Page,
# #     timeout: int = 1000,
# #     wait_until: str = "domcontentloaded"
# # ) -> AsyncGenerator[None, None]:
# #     """Context manager that waits for navigation or response if they occur after an action.

# #     Args:
# #         page: Playwright page object
# #         timeout: Maximum time to wait in milliseconds
# #         wait_until: Navigation wait condition ('domcontentloaded', 'load', 'networkidle')

# #     Example:
# #         async with wait_for_page_update(page):
# #             success = await element.click()
# #     """
# #     try:
# #         navigation_task = None
# #         response_task = None

# #         async with page.expect_navigation(wait_until=wait_until, timeout=timeout) as navigation, \
# #                   page.expect_response("**/*", timeout=timeout) as response:

# #             yield

# #             try:
# #                 # Create tasks but don't await them yet
# #                 navigation_task = asyncio.create_task(navigation.value)
# #                 response_task = asyncio.create_task(response.value)

# #                 # Wait for first completion
# #                 _, pending = await asyncio.wait(
# #                     [navigation_task, response_task],
# #                     return_when=asyncio.FIRST_COMPLETED
# #                 )

# #                 # Properly cancel pending tasks
# #                 for task in pending:
# #                     _ = task.cancel()
# #                     try:
# #                         await task
# #                     except asyncio.CancelledError:
# #                         pass

# #                 # Wait for network to be idle
# #                 try:
# #                     await page.wait_for_load_state("networkidle", timeout=timeout)
# #                 except PlaywrightTimeoutError:
# #                     logger.debug("Network did not reach idle state within timeout")

# #             except Exception as e:
# #                 logger.error(f"Error waiting for navigation/response: {e}")
# #                 raise
# #             finally:
# #                 # Clean up tasks if they weren't handled
# #                 if navigation_task and not navigation_task.done():
# #                     navigation_task.cancel()
# #                 if response_task and not response_task.done():
# #                     response_task.cancel()

# #     except PlaywrightTimeoutError:
# #         logger.debug("No navigation or response detected within timeout")
# #     except Exception as e:
# #         logger.error(f"Unexpected error in wait_for_page_update: {e}")
# #         raise


# @asynccontextmanager
# async def wait_for_page_update(
#     page: Page,
#     timeout: int = 500,
#     wait_until: str = "domcontentloaded"
# ) -> AsyncGenerator[None, None]:
#     """Context manager that waits for navigation or response if they occur after an action.

#     Args:
#         page: Playwright page object
#         timeout: Maximum time to wait in milliseconds
#         wait_until: Navigation wait condition ('domcontentloaded', 'load', 'networkidle')

#     Example:
#         async with wait_for_page_update(page):
#             success = await element.click()
#     """
#     try:
#         # Start listening but don't await yet
#         # event = 'popup'
#         page_promise: Awaitable[Page] = page.context.wait_for_event("page", timeout=timeout)
#         navigation_promise = page.wait_for_navigation(wait_until=wait_until, timeout=timeout)
#         response_promise = page.wait_for_response("**/*", timeout=timeout)

#         # Execute the action
#         yield
#         wait_time = time.time()
#         # Now check if a new page was created
#         try:
#             done, _ = await asyncio.wait(
#                 [
#                     asyncio.create_task(navigation_promise.value),
#                     asyncio.create_task(response_promise.value),
#                     asyncio.create_task(page_promise),
#                 ],
#                 timeout=timeout/1000,  # convert to seconds for asyncio.wait
#                 return_when=asyncio.FIRST_COMPLETED
#             )
#             if done:
#                 try:
#                     # Try less strict load states first
#                     await page.wait_for_load_state("networkidle", timeout=10000)
#                 except PlaywrightTimeoutError:
#                     logger.warning("Page didn't reach domcontentloaded state, continuing anyway")

#             # Store the page even if load state isn't complete
#             logger.info(f"Navitation event detected for {page.url}. Took {time.time() - wait_time} seconds.")
#             # self._pages.append(new_page)
#             # self._current_page_url = new_page.url
#         except PlaywrightTimeoutError:
#             # No new page was created, which is the common case
#             pass
#     except PlaywrightTimeoutError:
#         logger.debug("No navigation or response detected within timeout")
#     except Exception as e:
#         logger.error(f"Unexpected error in wait_for_page_update: {e}")
#         raise

================
File: packages/notte-browser/src/notte_browser/rendering/interaction_only.py
================
from loguru import logger
from notte_core.browser.dom_tree import DomNode
from notte_core.browser.node_type import NodeType
from notte_core.errors.processing import InvalidInternalCheckError


class InteractionOnlyDomNodeRenderingPipe:
    @staticmethod
    def render_node(
        node: DomNode,
        include_attributes: frozenset[str] | None = None,
        max_len_per_attribute: int | None = None,
    ) -> str:
        if node.id is None:
            raise InvalidInternalCheckError(
                check="Node should have an id",
                url=node.get_url(),
                dev_advice="This should never happen.",
            )
        attrs = node.attributes
        if attrs is None:
            raise ValueError(f"Attributes are None for node: {node}")
        attrs_str = ""
        attrs_relevant = attrs.relevant_attrs(include_attributes, max_len_per_attribute)
        if len(attrs_relevant) > 0:
            attrs_str = " " + " ".join([f'{key}="{value}"' for key, value in attrs_relevant.items()])
        children_texts = InteractionOnlyDomNodeRenderingPipe.children_texts(node)
        children_str = "\n".join(children_texts).strip()
        return f"<{attrs.tag_name}{attrs_str}>{children_str}</{attrs.tag_name}>"

    @staticmethod
    def format(
        node: DomNode,
        depth: int,
        node_texts: list[str],
        include_attributes: frozenset[str] | None,
        max_len_per_attribute: int | None,
        is_parent_interaction: bool = False,
    ) -> list[str]:
        if node.type.value == NodeType.TEXT.value:
            if len(node.children) > 0:
                raise InvalidInternalCheckError(
                    check="Text node should not have children",
                    url=node.get_url(),
                    dev_advice="This should never happen.",
                )
            # Add text only if it doesn't have a highlighted parent
            if not is_parent_interaction and len(node.text.strip()) > 0:
                node_texts.append(f"_[:]{node.text.strip()}")
        else:
            # Add element with highlight_index
            if node.id is not None:
                is_parent_interaction = True
                html_description = InteractionOnlyDomNodeRenderingPipe.render_node(
                    node, include_attributes, max_len_per_attribute
                )
                node_texts.append(f"{node.id}[:]{html_description}")

            # Process children regardless
            for child in node.children:
                _ = InteractionOnlyDomNodeRenderingPipe.format(
                    node=child,
                    depth=depth + 1,
                    node_texts=node_texts,
                    include_attributes=include_attributes,
                    max_len_per_attribute=max_len_per_attribute,
                    is_parent_interaction=is_parent_interaction,
                )
        return node_texts

    @staticmethod
    def children_texts(root_node: DomNode, max_depth: int = -1) -> list[str]:
        texts: list[str] = []

        def collect_text(node: DomNode, current_depth: int) -> None:
            if max_depth != -1 and current_depth > max_depth:
                return

            # Skip this branch if we hit a highlighted element (except for the current node)
            if node.id is not None and node.id != root_node.id:
                return

            if node.get_role_str() == "text" and len(node.text.strip()) > 0:
                texts.append(node.text.strip())
            else:
                for child in node.children:
                    collect_text(child, current_depth + 1)

        collect_text(root_node, 0)
        return texts

    @staticmethod
    def forward(
        node: DomNode,
        include_attributes: frozenset[str] | None = None,
        max_len_per_attribute: int | None = None,
        verbose: bool = False,
    ) -> str:
        """Convert the processed DOM content to HTML."""
        # inodes = "\n".join([str(inode) for inode in node.interaction_nodes()])
        # logger.info(f"📄 Rendering interaction only node: \n{inodes}")
        component_node_strs: list[str] = []
        components = node.prune_non_dialogs_if_present()
        for component_node in components:
            formatted_text: list[str] = InteractionOnlyDomNodeRenderingPipe.format(
                node=component_node,
                depth=0,
                node_texts=[],
                include_attributes=include_attributes,
                max_len_per_attribute=max_len_per_attribute,
            )

            rendered_component = "\n".join(formatted_text).strip()
            if len(components) > 0:
                # more than 1 component => modals here add some special text to separate them
                rendered_component = f"""
### Content of '{component_node.get_role_str()}' component with text '{component_node.text}'
{rendered_component}
"""
            component_node_strs.append(rendered_component)

        rendered_node = "\n".join(component_node_strs).strip()
        if verbose:
            logger.info(f"📄 Rendered node: \n{rendered_node}")
        return rendered_node

================
File: packages/notte-browser/src/notte_browser/rendering/json.py
================
import json

from loguru import logger
from notte_core.browser.dom_tree import A11yNode, DomNode


class JsonDomNodeRenderingPipe:
    @staticmethod
    def _dom_node_to_dict(
        node: DomNode,
        include_ids: bool,
        include_links: bool,
    ) -> A11yNode:
        _dict: A11yNode = {
            "role": node.get_role_str(),
            "name": node.text,
        }
        if include_ids and node.id is not None:
            _dict["id"] = node.id
        attrs = node.attributes
        if attrs is not None:
            relevant_attrs = attrs.relevant_attrs()
            if not include_links and "href" in relevant_attrs:
                del relevant_attrs["href"]
            _dict.update(relevant_attrs)  # type: ignore[arg-type]
        # add children
        if len(node.children) > 0:
            _dict["children"] = [
                JsonDomNodeRenderingPipe._dom_node_to_dict(child, include_ids, include_links) for child in node.children
            ]
        return _dict

    @staticmethod
    def forward(
        node: DomNode,
        include_ids: bool = True,
        include_links: bool = False,
        verbose: bool = False,
    ) -> str:
        dict_node = JsonDomNodeRenderingPipe._dom_node_to_dict(
            node,
            include_ids=include_ids,
            include_links=include_links,
        )
        if verbose:
            logger.info(f"🔍 JSON rendering:\n{dict_node}")
        return json.dumps(dict_node)

================
File: packages/notte-browser/src/notte_browser/rendering/markdown.py
================
from loguru import logger
from notte_core.browser.dom_tree import DomNode


class MarkdownDomNodeRenderingPipe:
    @staticmethod
    def forward(
        node: DomNode,
        include_ids: bool,
        verbose: bool = False,
    ) -> str:
        if verbose:
            logger.info(f"Dom Node markdown rendering with include_ids={include_ids}")
        return MarkdownDomNodeRenderingPipe.format(
            node,
            indent_level=0,
            include_ids=include_ids,
            expand_non_interaction_subtree=False,
        )

    @staticmethod
    def format(
        node: DomNode,
        indent_level: int = 0,
        include_ids: bool = True,
        expand_non_interaction_subtree: bool = False,
    ) -> str:
        indent = " " * indent_level

        # Start with role and optional text
        id_str = ""
        if node.id is not None and include_ids:
            id_str = f" {node.id}"

        result = f"{indent}{node.get_role_str()}{id_str}"
        if len(node.text.strip()) > 0:
            result += f' "{node.text}"'

        # iterate dom attributes
        if node.attributes is not None:
            dom_attrs = [
                f"{key}={value}"
                for key, value in node.attributes.relevant_attrs().items()
                if str(value) not in node.text
            ]

            if dom_attrs:
                # TODO: prompt engineering to select the most readable format
                # for the LLM to understand this information
                result += " " + " ".join(dom_attrs)

        # Recursively format children
        if len(node.children) > 0:
            result += " {\n"
            for child in node.children:
                if len(child.subtree_ids) == 0 and not expand_non_interaction_subtree:
                    inner_text = child.inner_text().strip()
                    if len(inner_text) > 0:
                        result += f"{indent} inner_text: {inner_text}\n"
                else:
                    result += MarkdownDomNodeRenderingPipe.format(
                        child,
                        indent_level + 1,
                        include_ids=include_ids,
                        expand_non_interaction_subtree=expand_non_interaction_subtree,
                    )
            result += indent + "}\n"
        else:
            result += "\n"

        return result

================
File: packages/notte-browser/src/notte_browser/rendering/pipe.py
================
from enum import StrEnum
from typing import Self, final

from loguru import logger
from notte_core.browser.dom_tree import DomNode
from notte_core.common.config import FrozenConfig

from notte_browser.rendering.interaction_only import InteractionOnlyDomNodeRenderingPipe
from notte_browser.rendering.json import JsonDomNodeRenderingPipe
from notte_browser.rendering.markdown import MarkdownDomNodeRenderingPipe
from notte_browser.rendering.pruning import prune_dom_tree


class DomNodeRenderingType(StrEnum):
    INTERACTION_ONLY = "interaction_only"
    JSON = "json"
    MARKDOWN = "markdown"


DEFAULT_INCLUDE_ATTRIBUTES = frozenset(
    [
        "title",
        "type",
        "name",
        "role",
        "tabindex",
        "aria_label",
        "placeholder",
        "value",
        "alt",
        "src",
        "href",
        "aria_expanded",
    ]
)


class DomNodeRenderingConfig(FrozenConfig):
    type: DomNodeRenderingType = DomNodeRenderingType.MARKDOWN
    include_ids: bool = True
    include_attributes: frozenset[str] = DEFAULT_INCLUDE_ATTRIBUTES
    max_len_per_attribute: int | None = 60
    include_text: bool = True
    include_links: bool = True
    prune_dom_tree: bool = True

    def set_markdown(self: Self) -> Self:
        return self._copy_and_validate(type=DomNodeRenderingType.MARKDOWN)

    def set_json(self: Self) -> Self:
        return self._copy_and_validate(type=DomNodeRenderingType.JSON)

    def set_interaction_only(self: Self) -> Self:
        return self._copy_and_validate(type=DomNodeRenderingType.INTERACTION_ONLY)


@final
class DomNodeRenderingPipe:
    @staticmethod
    def forward(node: DomNode, config: DomNodeRenderingConfig) -> str:
        if config.prune_dom_tree and config.type != DomNodeRenderingType.INTERACTION_ONLY:
            if config.verbose:
                logger.info("🫧 Pruning DOM tree...")
            node = prune_dom_tree(node)

        # Exclude images if requested
        match config.type:
            case DomNodeRenderingType.INTERACTION_ONLY:
                return InteractionOnlyDomNodeRenderingPipe.forward(
                    node,
                    include_attributes=config.include_attributes,
                    max_len_per_attribute=config.max_len_per_attribute,
                    verbose=config.verbose,
                )
            case DomNodeRenderingType.JSON:
                return JsonDomNodeRenderingPipe.forward(
                    node,
                    include_ids=config.include_ids,
                    include_links=config.include_links,
                    verbose=config.verbose,
                )
            case DomNodeRenderingType.MARKDOWN:
                return MarkdownDomNodeRenderingPipe.forward(
                    node,
                    include_ids=config.include_ids,
                    verbose=config.verbose,
                )

================
File: packages/notte-browser/src/notte_browser/rendering/pruning.py
================
from loguru import logger
from notte_core.browser.dom_tree import DomNode
from notte_core.browser.node_type import NodeCategory, NodeType


def prune_empty_texts(node: DomNode) -> bool:
    if node.type.value == NodeType.TEXT.value:
        if node.text.strip() == "":
            return False
    return True


def prioritize_role(parent: DomNode, child: DomNode) -> str:
    low_priority_roles = ["none", "generic", "group"]
    node_role = parent.get_role_str()
    child_role = child.get_role_str()
    if node_role == child_role:
        return node_role
    match (node_role in low_priority_roles, child_role in low_priority_roles):
        case (True, True):
            return "group"
        case (True, False):
            return child_role
        case (False, True):
            return node_role
        case (False, False):
            if node_role in ["listitem", "paragraph", "main"]:
                return child_role
            if child_role in ["list", "paragraph"]:
                return node_role
            # always prioritize links, buttons and text (i.e interactive elements)
            if child.id is not None:
                return child_role
            if parent.id is not None:
                return node_role
            return child_role


def prioritize_text(parent: DomNode, child: DomNode) -> str:
    ptext, ctext = parent.text.strip(), child.text.strip()
    if len(ptext) == 0:
        return ctext
    if len(ctext) == 0:
        return ptext
    if ctext in ptext:
        # child text is part of parent text => return parent text
        return ptext
    if ptext in ctext:
        # parent text is part of child text => return child text
        return ctext
    # otherwise return concat of both texts
    return ptext + " " + ctext


def _fold_single_child(parent: DomNode, child: DomNode) -> DomNode:
    new_role = prioritize_role(parent, child)
    new_text = prioritize_text(parent, child)

    def build_node(child_priority: bool) -> DomNode:
        return DomNode(
            id=child.id if child_priority else parent.id,
            role=new_role,
            text=new_text,
            # skip parent children since there is only one child
            children=child.children,
            attributes=child.attributes if child_priority else parent.attributes,
            computed_attributes=child.computed_attributes if child_priority else parent.computed_attributes,
            type=child.type if child_priority else parent.type,
        )

    match (parent.id, child.id):
        case (None, None):
            if (child.get_role_str() in NodeCategory.LIST.roles()) or (
                child.get_role_str() in NodeCategory.STRUCTURAL.roles()
            ):
                # skip list/structure child node
                return build_node(child_priority=False)
            # otherwise skip parent node
            return build_node(child_priority=True)
        case (None, _):
            # do not fold if parent has no id
            return build_node(child_priority=True)
        case (_, None):
            # do not fold if child has no id
            return build_node(child_priority=False)
        case (_, _):
            # do not fold if both parent and child have an id
            # TODO: consider cases such as link => button, button => link, etc.
            return parent


def fold_single_childs(node: DomNode) -> DomNode:
    if len(node.children) == 0:
        return node
    pruned_children = [fold_single_childs(child) for child in node.children]
    if len(pruned_children) == 1:
        return _fold_single_child(node, pruned_children[0])
    return DomNode(
        id=node.id,
        role=node.role,
        text=node.text,
        type=node.type,
        children=pruned_children,
        attributes=node.attributes,
        computed_attributes=node.computed_attributes,
    )


def prune_hidden_nodes(node: DomNode) -> bool:
    if node.attributes is None:
        return True
    if node.attributes.hidden or node.attributes.aria_hidden or node.attributes.type == "hidden":
        return False
    return True


def prune_dom_tree(node: DomNode) -> DomNode:
    fnode = node.subtree_filter(lambda n: prune_empty_texts(n))
    # fnode = node.subtree_filter(lambda n: prune_empty_texts(n) and prune_hidden_nodes(n))
    if fnode is None:
        logger.warning("No node found after pruning empty texts")
        fnode = node
    fnode = fold_single_childs(fnode)
    return fnode

================
File: packages/notte-browser/src/notte_browser/scraping/llm_scraping.py
================
from typing import Required, Unpack

from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.data.space import DataSpace
from notte_core.errors.llm import LLMnoOutputCompletionError
from notte_core.llms.engine import StructuredContent
from notte_core.llms.service import LLMService
from typing_extensions import TypedDict

from notte_browser.rendering.pipe import DomNodeRenderingConfig, DomNodeRenderingPipe


class LlmDataScrapingDict(TypedDict):
    only_main_content: Required[bool]
    max_tokens: Required[int]


class LlmDataScrapingPipe:
    """
    Data scraping pipe that scrapes data from the page
    """

    def __init__(self, llmserve: LLMService, config: DomNodeRenderingConfig) -> None:
        self.llmserve: LLMService = llmserve
        self.config: DomNodeRenderingConfig = config

    def _render_node(
        self,
        snapshot: BrowserSnapshot,
        max_tokens: int,
    ) -> str:
        # TODO: add DIVID & CONQUER once this is implemented
        document = DomNodeRenderingPipe.forward(node=snapshot.dom_node, config=self.config)
        document = self.llmserve.clip_tokens(document, max_tokens)
        return document

    def forward(
        self,
        snapshot: BrowserSnapshot,
        **params: Unpack[LlmDataScrapingDict],
    ) -> DataSpace:
        document = self._render_node(snapshot, params["max_tokens"])
        # make LLM call
        prompt = "only_main_content" if params["only_main_content"] else "all_data"
        response = self.llmserve.completion(prompt_id=f"data-extraction/{prompt}", variables={"document": document})
        if response.choices[0].message.content is None:  # type: ignore[arg-type]
            raise LLMnoOutputCompletionError()
        response_text = str(response.choices[0].message.content)  # type: ignore[arg-type]
        sc = StructuredContent(
            outer_tag="data-extraction",
            inner_tag="markdown",
            fail_if_final_tag=False,
            fail_if_inner_tag=False,
        )
        text = sc.extract(response_text)
        return DataSpace(
            markdown=text,
            images=None,
            structured=None,
        )

================
File: packages/notte-browser/src/notte_browser/scraping/pipe.py
================
from enum import StrEnum
from typing import Self, final

from html2text import config
from loguru import logger
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.data.space import DataSpace
from notte_core.llms.service import LLMService
from notte_sdk.types import ScrapeParams
from typing_extensions import override

from notte_browser.rendering.pipe import DomNodeRenderingConfig, DomNodeRenderingType
from notte_browser.scraping.llm_scraping import LlmDataScrapingPipe
from notte_browser.scraping.schema import SchemaScrapingPipe
from notte_browser.scraping.simple import SimpleScrapingPipe
from notte_browser.window import BrowserWindow


class ScrapingType(StrEnum):
    SIMPLE = "simple"
    LLM_EXTRACT = "llm_extract"


class ScrapingConfig(FrozenConfig):
    type: ScrapingType = ScrapingType.LLM_EXTRACT
    rendering: DomNodeRenderingConfig = DomNodeRenderingConfig(
        type=DomNodeRenderingType.MARKDOWN,
        include_ids=False,
        include_text=True,
    )
    # Change this to 7300 for free tier of Groq / Cerbras
    max_tokens: int = 5000
    long_max_tokens: int = 10000

    def update_rendering(self, params: ScrapeParams) -> DomNodeRenderingConfig:
        # override rendering config based on request
        return self.rendering.model_copy(
            deep=True,
            update={
                "include_links": params.scrape_links,
            },
        )

    def set_llm_extract(self: Self) -> Self:
        return self.set_type(ScrapingType.LLM_EXTRACT)

    def set_simple(self: Self) -> Self:
        return self.set_type(ScrapingType.SIMPLE)

    def set_rendering(self: Self, value: DomNodeRenderingConfig) -> Self:
        return self._copy_and_validate(rendering=value)

    def set_max_tokens(self: Self, value: int) -> Self:
        return self._copy_and_validate(max_tokens=value)

    def set_long_max_tokens(self: Self, value: int) -> Self:
        return self._copy_and_validate(long_max_tokens=value)

    def set_type(self: Self, value: ScrapingType) -> Self:
        return self._copy_and_validate(type=value)

    @override
    def set_verbose(self: Self) -> Self:
        return self._copy_and_validate(rendering=self.rendering.set_verbose())


@final
class DataScrapingPipe:
    """
    Data scraping pipe that scrapes data from the page
    """

    def __init__(
        self,
        llmserve: LLMService,
        window: BrowserWindow,
        config: ScrapingConfig,
    ) -> None:
        self.llm_pipe = LlmDataScrapingPipe(llmserve=llmserve, config=config.rendering)
        self.schema_pipe = SchemaScrapingPipe(llmserve=llmserve)
        self.config: ScrapingConfig = config

    def get_scraping_type(self, params: ScrapeParams) -> ScrapingType:
        # use_llm has priority over config.type
        if params.use_llm is not None:
            if self.config.rendering.verbose:
                logger.info(f"📄 User override data scraping type: use_llm={params.use_llm}")
            return ScrapingType.LLM_EXTRACT if params.use_llm else ScrapingType.SIMPLE
        # otherwise, use config.type
        if params.requires_schema():
            return ScrapingType.SIMPLE
        return self.config.type

    async def forward(
        self,
        snapshot: BrowserSnapshot,
        params: ScrapeParams,
    ) -> DataSpace:
        match self.get_scraping_type(params):
            case ScrapingType.SIMPLE:
                if self.config.rendering.verbose:
                    logger.info("📀 Scraping page with simple scraping pipe")

                # band-aid fix for now: html2text only takes this global config, no args
                # want to keep image, but can't handle nicer conversion when src is base64
                tmp_images_to_alt = config.IMAGES_TO_ALT
                config.IMAGES_TO_ALT = True
                data = SimpleScrapingPipe.forward(snapshot, params.scrape_links)
                config.IMAGES_TO_ALT = tmp_images_to_alt

            case ScrapingType.LLM_EXTRACT:
                if self.config.rendering.verbose:
                    logger.info("📀 Scraping page with complex/LLM-based scraping pipe")
                data = self.llm_pipe.forward(
                    snapshot,
                    only_main_content=params.only_main_content,
                    max_tokens=self.config.long_max_tokens,
                )
        if self.config.rendering.verbose:
            logger.info(f"📀 Extracted page as markdown\n: {data.markdown}\n")

        # scrape structured data if required
        if params.requires_schema() and data.markdown is not None:
            if self.config.rendering.verbose:
                logger.info("🎞️ Structuring data with schema pipe")
            data.structured = self.schema_pipe.forward(
                url=snapshot.metadata.url,
                document=data.markdown,
                response_format=params.response_format,
                instructions=params.instructions,
                max_tokens=self.config.max_tokens,
                verbose=self.config.rendering.verbose,
            )
        return data

    async def forward_async(
        self,
        snapshot: BrowserSnapshot,
        params: ScrapeParams,
    ) -> DataSpace:
        return await self.forward(snapshot, params)

================
File: packages/notte-browser/src/notte_browser/scraping/schema.py
================
import datetime as dt

from litellm import json
from loguru import logger
from notte_core.data.space import DictBaseModel, NoStructuredData, StructuredData
from notte_core.llms.engine import TResponseFormat
from notte_core.llms.service import LLMService
from pydantic import BaseModel


class _Hotel(BaseModel):
    city: str
    price: int
    currency: str
    availability: str
    return_date: str
    link: str


class _Hotels(BaseModel):
    hotels: list[_Hotel]


class SchemaScrapingPipe:
    """
    Data scraping pipe that scrapes data from the page into a structured JSON output format
    """

    def __init__(self, llmserve: LLMService) -> None:
        self.llmserve: LLMService = llmserve

    @staticmethod
    def success_example() -> StructuredData[_Hotels]:
        return StructuredData(
            success=True,
            data=_Hotels.model_validate(
                {
                    "hotels": [
                        {
                            "city": "Edinburg",
                            "price": 100,
                            "currency": "USD",
                            "availability": "2024-12-28",
                            "return_date": "2024-12-30",
                            "link": "https://www.example.com/edinburg-hotel-1",
                        },
                        {
                            "city": "Edinburg",
                            "price": 120,
                            "currency": "USD",
                            "availability": "2024-12-28",
                            "return_date": "2024-12-30",
                            "link": "https://www.example.com/edinburg-hotel-2",
                        },
                    ]
                }
            ),
        )

    @staticmethod
    def failure_example() -> StructuredData[NoStructuredData]:
        return StructuredData(
            success=False, error="The user requested information about a cat but the document is about a dog", data=None
        )

    def forward(
        self,
        url: str,
        document: str,
        response_format: type[TResponseFormat] | None,
        instructions: str | None,
        max_tokens: int,
        verbose: bool = False,
    ) -> StructuredData[BaseModel]:
        # make LLM call
        document = self.llmserve.clip_tokens(document, max_tokens)
        match (response_format, instructions):
            case (None, None):
                raise ValueError("response_format and instructions cannot be both None")
            case (None, _):
                structured = self.llmserve.structured_completion(
                    prompt_id="extract-without-json-schema",
                    variables={
                        "document": document,
                        "instructions": instructions,
                        "success_example": self.success_example().model_dump_json(),
                        "failure_example": self.failure_example().model_dump_json(),
                        "timestamp": dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    },
                    response_format=StructuredData[DictBaseModel],
                )
                if verbose:
                    logger.info(f"LLM Structured Response with no schema:\n{structured}")
                return structured
            case (_response_format, _):
                assert _response_format is not None

                response: StructuredData[DictBaseModel] = self.llmserve.structured_completion(
                    prompt_id="extract-json-schema/multi-entity",
                    response_format=StructuredData[DictBaseModel],
                    variables={
                        "url": url,
                        "failure_example": StructuredData(
                            success=False,
                            error="<REASONING ABOUT WHY YOU CANNOT ANSWER THE USER REQUEST>",
                            data=None,
                        ).model_dump_json(),
                        "success_example": self.success_example().model_dump_json(),
                        "schema": json.dumps(_response_format.model_json_schema(), indent=2),
                        "content": document,
                        "timestamp": dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "instructions": instructions or "no additional instructions",
                    },
                )
                if verbose:
                    logger.info(f"LLM Structured Response with user provided schema:\n{response}")
                # try model_validate
                if not response.success or response.data is None:
                    return response
                try:
                    if isinstance(response.data.root, list):
                        return StructuredData(
                            success=False,
                            error="The response is a list, but the schema is not a list",
                            data=response.data,
                        )
                    data: BaseModel = _response_format.model_validate(response.data.root)
                    return StructuredData[BaseModel](
                        success=response.success,
                        error=response.error,
                        data=data,
                    )
                except Exception as e:
                    if verbose:
                        logger.info(
                            (
                                "LLM Response cannot be validated into the provided"
                                f" schema:\n{_response_format.model_json_schema()}"
                            )
                        )
                    return StructuredData(
                        success=False,
                        error=f"Cannot validate response into the provided schema. Error: {e}",
                        data=response.data,
                    )

================
File: packages/notte-browser/src/notte_browser/scraping/simple.py
================
from main_content_extractor import MainContentExtractor  # type: ignore[import]
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.data.space import DataSpace


class SimpleScrapingPipe:
    """
    Data scraping pipe that scrapes data from the page
    """

    @staticmethod
    def forward(
        snapshot: BrowserSnapshot,
        scrape_links: bool,
    ) -> DataSpace:
        markdown: str = MainContentExtractor.extract(  # type: ignore[attr-defined]
            html=snapshot.html_content,
            output_format="markdown",
            include_links=scrape_links,
        )
        return DataSpace(markdown=markdown)  # type: ignore[arg-type]

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/base.py
================
import re
from abc import ABC, abstractmethod
from typing import Any, ClassVar

from loguru import logger
from notte_core.actions.base import Action, PossibleAction
from notte_core.actions.space import PossibleActionSpace
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.tracer import LlmParsingErrorFileTracer
from notte_core.errors.llm import (
    ContextSizeTooLargeError,
    LLMnoOutputCompletionError,
    LLMParsingError,
)
from notte_core.llms.service import LLMService
from typing_extensions import override


class BaseActionListingPipe(ABC):
    def __init__(self, llmserve: LLMService) -> None:
        self.llmserve: LLMService = llmserve

    @abstractmethod
    def forward(
        self, snapshot: BrowserSnapshot, previous_action_list: list[Action] | None = None
    ) -> PossibleActionSpace:
        pass

    def llm_completion(self, prompt_id: str, variables: dict[str, Any]) -> str:
        response = self.llmserve.completion(prompt_id, variables)
        if response.choices[0].message.content is None:  # type: ignore
            raise LLMnoOutputCompletionError()
        return response.choices[0].message.content  # type: ignore

    @abstractmethod
    def forward_incremental(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: list[Action],
    ) -> PossibleActionSpace:
        """
        This method is used to get the next action list based on the previous action list.

        /!\\ This was designed to only be used in the `forward` method when the previous action list is not empty.
        """
        raise NotImplementedError("forward_incremental")


class RetryPipeWrapper(BaseActionListingPipe):
    tracer: ClassVar[LlmParsingErrorFileTracer] = LlmParsingErrorFileTracer()

    def __init__(self, pipe: BaseActionListingPipe, max_tries: int, verbose: bool = False):
        super().__init__(pipe.llmserve)
        self.pipe: BaseActionListingPipe = pipe
        self.max_tries: int = max_tries
        self.verbose: bool = verbose

    @override
    def forward(
        self, snapshot: BrowserSnapshot, previous_action_list: list[Action] | None = None
    ) -> PossibleActionSpace:
        errors: list[str] = []
        last_error: Exception | None = None
        for _ in range(self.max_tries):
            try:
                out = self.pipe.forward(snapshot, previous_action_list)
                self.tracer.trace(
                    status="success",
                    pipe_name=self.pipe.__class__.__name__,
                    nb_retries=len(errors),
                    error_msgs=errors,
                )
                return out
            except Exception as e:
                last_error = e
                if "Please reduce the length of the messages or completions" in str(e):
                    # this is a known error that happens when the context is too long
                    # we should not retry in this case (nothing is going to change)
                    pattern = r"Current length is (\d+) while limit is (\d+)"
                    size: int | None = None
                    max_size: int | None = None
                    match = re.search(pattern, str(e))
                    if match:
                        size = int(match.group(1))
                        max_size = int(match.group(2))
                    else:
                        if self.verbose:
                            logger.error(
                                f"Failed to parse context size from error message: {str(e)}. Please fix this ASAP."
                            )
                        raise ContextSizeTooLargeError(size=size, max_size=max_size) from e
                if self.verbose:
                    logger.warning(f"failed to parse action list but retrying. Start of error msg: {str(e)[:200]}...")
                errors.append(str(e))
        self.tracer.trace(
            status="failure",
            pipe_name=self.pipe.__class__.__name__,
            nb_retries=len(errors),
            error_msgs=errors,
        )
        raise LLMParsingError(
            context=f"Action listing failed after {self.max_tries} tries with errors: {errors}"
        ) from last_error

    @override
    def forward_incremental(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: list[Action],
    ) -> PossibleActionSpace:
        for _ in range(self.max_tries):
            try:
                return self.pipe.forward_incremental(snapshot, previous_action_list)
            except Exception:
                pass
        if self.verbose:
            logger.error("Failed to get action list after max tries => returning previous action list")
        return PossibleActionSpace(
            # TODO: get description from previous action list
            description="",
            actions=[
                PossibleAction(
                    id=act.id,
                    description=act.description,
                    category=act.category,
                    params=act.params,
                )
                for act in previous_action_list
            ],
        )

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/filtering.py
================
from collections.abc import Sequence
from typing import final

from notte_core.actions.base import Action
from notte_core.browser.snapshot import BrowserSnapshot


@final
class ActionFilteringPipe:
    @staticmethod
    def forward(
        snapshot: BrowserSnapshot,  # type: ignore[unused-argument]
        actions: Sequence[Action],
    ) -> Sequence[Action]:
        for action in actions:
            if ActionFilteringPipe.exclude_actions_with_invalid_params(action):
                action.status = "excluded"
            if ActionFilteringPipe.exclude_actions_with_invalid_category(action):
                action.status = "excluded"
            if ActionFilteringPipe.exclude_actions_with_invalid_description(action):
                action.status = "excluded"
        return actions

    @staticmethod
    def exclude_actions_with_invalid_params(action: Action) -> bool:  # type: ignore[unused-argument]
        return False  # TODO.

    @staticmethod
    def exclude_actions_with_invalid_category(action: Action) -> bool:  # type: ignore[unused-argument]
        return False  # TODO.

    @staticmethod
    def exclude_actions_with_invalid_description(action: Action) -> bool:  # type: ignore[unused-argument]
        return False  # TODO.

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/listing.py
================
from collections.abc import Sequence

from loguru import logger
from notte_core.actions.base import Action, PossibleAction
from notte_core.actions.space import ActionSpace, PossibleActionSpace
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.llms.engine import StructuredContent
from notte_core.llms.service import LLMService
from typing_extensions import override

from notte_browser.rendering.pipe import DomNodeRenderingConfig, DomNodeRenderingPipe
from notte_browser.tagging.action.llm_taging.base import BaseActionListingPipe, RetryPipeWrapper
from notte_browser.tagging.action.llm_taging.parser import (
    ActionListingParserConfig,
    ActionListingParserPipe,
)


class ActionListingConfig(FrozenConfig):
    prompt_id: str = "action-listing/optim"
    incremental_prompt_id: str = "action-listing-incr"
    parser: ActionListingParserConfig = ActionListingParserConfig()
    rendering: DomNodeRenderingConfig = DomNodeRenderingConfig()
    max_retries: int | None = 3


class ActionListingPipe(BaseActionListingPipe):
    def __init__(
        self,
        llmserve: LLMService,
        config: ActionListingConfig,
    ) -> None:
        super().__init__(llmserve)
        self.config: ActionListingConfig = config

    def get_prompt_variables(
        self, snapshot: BrowserSnapshot, previous_action_list: Sequence[Action] | None
    ) -> dict[str, str]:
        vars = {"document": DomNodeRenderingPipe.forward(snapshot.dom_node, config=self.config.rendering)}
        if previous_action_list is not None:
            vars["previous_action_list"] = ActionSpace(raw_actions=previous_action_list, description="").markdown(
                "all", include_browser=False
            )
        return vars

    def parse_action_listing(self, response: str) -> list[PossibleAction]:
        sc = StructuredContent(
            outer_tag="action-listing",
            inner_tag="markdown",
            fail_if_final_tag=False,
            fail_if_inner_tag=False,
        )
        text = sc.extract(response)
        try:
            return ActionListingParserPipe.forward(text, self.config.parser)
        except Exception as e:
            logger.error(f"Failed to parse action listing: with content: \n {text}")
            raise e

    def parse_webpage_description(self, response: str) -> str:
        sc = StructuredContent(
            outer_tag="document-summary",
            next_outer_tag="document-analysis",
            fail_if_inner_tag=False,
            fail_if_final_tag=False,
            fail_if_next_outer_tag=False,
        )
        text = sc.extract(response)
        return text

    @override
    def forward(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[Action] | None = None,
    ) -> PossibleActionSpace:
        if previous_action_list is not None and len(previous_action_list) > 0:
            return self.forward_incremental(snapshot, previous_action_list)
        if len(snapshot.interaction_nodes()) == 0:
            if self.config.verbose:
                logger.error("No interaction nodes found in context. Returning empty action list.")
            return PossibleActionSpace(
                description="Description not available because no interaction actions found",
                actions=[],
            )
        variables = self.get_prompt_variables(snapshot, previous_action_list)
        response = self.llm_completion(self.config.prompt_id, variables)
        return PossibleActionSpace(
            description=self.parse_webpage_description(response),
            actions=self.parse_action_listing(response),
        )

    @override
    def forward_incremental(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[Action],
    ) -> PossibleActionSpace:
        incremental_snapshot = snapshot.subgraph_without(previous_action_list)
        if incremental_snapshot is None:
            if self.config.verbose:
                logger.error(
                    (
                        "No nodes left in context after filtering of exesting actions "
                        f"for url {snapshot.metadata.url}. "
                        "Returning previous action list..."
                    )
                )
            return PossibleActionSpace(
                description="",
                actions=[
                    PossibleAction(
                        id=act.id,
                        description=act.description,
                        category=act.category,
                        params=act.params,
                    )
                    for act in previous_action_list
                ],
            )
        document = DomNodeRenderingPipe.forward(snapshot.dom_node, config=self.config.rendering)
        incr_document = DomNodeRenderingPipe.forward(incremental_snapshot.dom_node, config=self.config.rendering)
        total_length, incremental_length = len(document), len(incr_document)
        reduction_perc = (total_length - incremental_length) / total_length * 100
        if self.config.verbose:
            logger.info(f"🚀 Forward incremental reduces context length by {reduction_perc:.2f}%")
        variables = self.get_prompt_variables(incremental_snapshot, previous_action_list)
        response = self.llm_completion(self.config.incremental_prompt_id, variables)
        return PossibleActionSpace(
            description=self.parse_webpage_description(response),
            actions=self.parse_action_listing(response),
        )


def MainActionListingPipe(
    llmserve: LLMService,
    config: ActionListingConfig,
) -> BaseActionListingPipe:
    if config.max_retries is not None:
        return RetryPipeWrapper(
            pipe=ActionListingPipe(llmserve=llmserve, config=config),
            max_tries=config.max_retries,
            verbose=config.verbose,
        )
    return ActionListingPipe(llmserve=llmserve, config=config)

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/parser.py
================
from enum import Enum
from typing import Self

import regex as re
from loguru import logger
from notte_core.actions.base import ActionParameter, PossibleAction
from notte_core.common.config import FrozenConfig
from notte_core.errors.llm import LLMParsingError
from notte_core.errors.processing import InvalidInternalCheckError


class ActionListingParserType(Enum):
    MARKDOWN = "markdown"
    TABLE = "table"
    JSON = "json"  # TODO


class ActionListingParserConfig(FrozenConfig):
    type: ActionListingParserType = ActionListingParserType.TABLE
    allow_partial: bool = True

    def set_markdown(self: Self) -> Self:
        return self._copy_and_validate(type=ActionListingParserType.MARKDOWN)

    def set_table(self: Self) -> Self:
        return self._copy_and_validate(type=ActionListingParserType.TABLE)

    def set_json(self: Self) -> Self:
        return self._copy_and_validate(type=ActionListingParserType.JSON)


class ActionListingParserPipe:
    @staticmethod
    def forward(content: str, config: ActionListingParserConfig) -> list[PossibleAction]:
        # partial is enabled by default to avoid too many retries.
        match config.type:
            case ActionListingParserType.MARKDOWN:
                return parse_markdown_action_list(content, partial=config.allow_partial)
            case ActionListingParserType.TABLE:
                return parse_table(content, partial=config.allow_partial)
            case _:
                raise InvalidInternalCheckError(
                    check=(
                        f"invalid action listing parser: {config.type}. "
                        f"Valid parsers are: {list(ActionListingParserType)}."
                    ),
                    url="unknown url",
                    dev_advice=(
                        "If this error is raised, it probably means that you forgot to add a new entry in "
                        "`ActionListingParser.parse`."
                    ),
                )


def parse_action_ids(action: str) -> list[str]:
    """

    Should be able to parse action ids in the following format:
    - B1 or [B1]
    - B1-3 or [B1-3]
    - B1-B3 or [B1-B3]
    - B1, B2, B3 or [B1, B2, B3]
    """
    if ":" not in action:
        raise LLMParsingError(f"Action line '{action}' should contain ':'")

    id_part = action.split(":")[0].replace("[", "").replace("]", "").replace("ID ", "").strip()
    if "," in id_part:
        return [id.strip() for id in id_part.split(",")]
    if "-" not in id_part:
        return [id_part]

    range_id_parts = id_part.split("-")
    if len(range_id_parts) != 2:
        raise LLMParsingError(f"Invalid action id group: {action}")

    def split_id(sub_id_part: str) -> tuple[str, int]:
        if sub_id_part[0].isalpha():
            return sub_id_part[0], int(sub_id_part[1:])
        return "", int(sub_id_part)

    first_letter, range_start = split_id(range_id_parts[0].strip())
    other_letter, range_end = split_id(range_id_parts[1].strip())

    if len(first_letter) <= 0 or not first_letter.isalpha():
        raise LLMParsingError(f"Not a valid first letter: '{first_letter}' for '{id_part}' and range {range_id_parts}")
    if (len(other_letter) > 0) and first_letter != other_letter:
        raise LLMParsingError(f"Letters are not the same: {first_letter} and {other_letter} for '{id_part}'")

    return [f"{first_letter}{id}" for id in range(range_start, range_end + 1)]


def parse_action_parameters(action: str) -> list[ActionParameter]:
    """
    Should be able to parse action parameters in the following format:
    - (parameterName1: Type1 = [value1, value2, ..., valueN],
            parameterName2: Type2 = [value1, value2, ..., valueM])
    """

    def parse_name_and_type(parameter_str: str) -> tuple[str, str]:
        if ":" not in parameter_str:
            raise LLMParsingError(f"Invalid parameter: {parameter_str} (should be in the format parameterName: Type)")
        parts = parameter_str.split(":")
        if len(parts) != 2:
            raise LLMParsingError(f"Invalid parameter: {parameter_str} (should be in the format parameterName: Type)")
        return parts[0].strip(), parts[1].strip()

    def parse_values(values_str: str) -> list[str]:
        match = re.search(r"\[(.*)\]", values_str, re.DOTALL)
        if not match:
            raise LLMParsingError(
                f"Invalid values: {values_str} (should be in the format [value1, value2, ..., valueN])"
            )
        return [value.strip() for value in match.group(1).split(",")]

    def split_parameters(parameters_str: str) -> list[str]:
        output: list[str] = []
        splits: list[str] = parameters_str.split(",")
        current: list[str] = []
        is_in_brackets = False
        for split in splits:
            if "[" in split:
                is_in_brackets = True

            if not is_in_brackets:
                output.append(split)
            else:
                current.append(split)

            if "]" in split:
                is_in_brackets = False
                output.append(",".join(current))
                current = []

        return output

    parameters: list[ActionParameter] = []
    matches: list[str] = re.findall(r"\(([^)]+)\)", action)
    if matches and ":" in matches[-1]:
        parameters_str = matches[-1]
        for parameter_str in split_parameters(parameters_str):
            # parse each parameter
            parameter_list_str = parameter_str.strip().split("=")
            if len(parameter_list_str) > 2:
                raise LLMParsingError(f"Invalid parameter: {parameter_str} (should not contain more than one '=')")
            name, type_str = parse_name_and_type(parameter_list_str[0])
            values = []
            if len(parameter_list_str) == 2:
                values = parse_values(parameter_list_str[1])
            # add parameter to list
            parameters.append(
                ActionParameter(
                    name=name,
                    type=type_str,
                    values=values,
                    default=None,
                )
            )
    return parameters


def parse_markdown_action_list(
    markdown_content: str,
    parse_parameters: bool = True,
    partial: bool = False,
) -> list[PossibleAction]:
    actions: list[PossibleAction] = []
    current_category: str | None = None

    # Process each line
    for line in markdown_content.split("\n"):
        try:
            line = line.strip()
            if not line:
                continue

            if any(
                disabled in line.lower()
                for disabled in [
                    "text-related action",
                    "hover action",
                    "keyboard navigation action",
                    "* none",
                ]
            ):
                logger.warning(f"Excluding {line} because it's a disabled action")
                continue

            # Check if it's a category header (starts with #)
            if line.startswith("#"):
                current_category = line.lstrip("#").strip()
            # Check if it's a bullet point
            elif line.startswith("*"):
                bullet_text = line.lstrip("*").strip()
                action_id = parse_action_ids(bullet_text)
                parameters = parse_action_parameters(bullet_text) if parse_parameters else []
                action_description = bullet_text.split(":")[1].strip()
                if len(parameters) > 0:
                    action_description = action_description.split("(")[0].strip()
                if current_category is None:
                    raise LLMParsingError("Category is required for each action but is currently None.")
                actions.append(
                    PossibleAction(
                        id=action_id[0],
                        description=action_description,
                        category=current_category,
                        params=parameters,
                    )
                )
            else:
                if partial:
                    logger.warning(f"[Markdown parsing] Failed to parse action line: {line}")
                    continue
                raise LLMParsingError(f"Invalid action line: {line}. Action lines should start with '*' or '#'")
        except Exception as e:
            if partial:
                logger.warning(f"[Markdown parsing] Failed to parse action line: {line} with error: {e}")
                continue
            raise e
    return actions


def parse_table_parameter(param_string: str) -> ActionParameter:
    """
    Parse a parameter string into an ActionParameter object.

    Args:
            param_string: String in format 'name: value type: value [default=value] [values=[v1,v2,...]]'

    Returns:
            ActionParameter object

    Raises:
            ValueError: If required fields are missing or format is invalid
    """
    # Initialize parameter attributes
    name: str | None = None
    param_type: str | None = None
    default: str | None = None
    values: list[str] = []

    # Split the string into main parts based on commas, but preserve commas inside brackets
    parts: list[str] = []
    current_part: list[str] = []
    bracket_count: int = 0

    for char in param_string:
        if char == "[":
            bracket_count += 1
        elif char == "]":
            bracket_count -= 1
        elif char == "," and bracket_count == 0:
            parts.append("".join(current_part).strip())
            current_part = []
            continue
        current_part.append(char)

    if current_part:
        parts.append("".join(current_part).strip())

    # Parse each part
    for part in parts:
        if ":" in part:
            key_values = [kv.strip() for kv in part.split(":")]
            for i in range(0, len(key_values) - 1, 2):
                key = key_values[i].strip()
                value = key_values[i + 1].strip()

                if key == "name":
                    name = value
                elif key == "type":
                    param_type = value

        elif "=" in part:
            key, value = [x.strip() for x in part.split("=", 1)]

            if key == "default":
                # Remove quotes if present
                default = value.strip("\"'")

            elif key == "values":
                # Extract list values, handling the bracket format
                match = re.match(r"\[(.*)\]", value)
                if match:
                    values_str = match.group(1)
                    values = [v.strip().strip("\"'") for v in values_str.split(",")]
                else:
                    raise LLMParsingError(
                        f"Action parameter values must be in list format: [value1, value2, ...] but is: '{value}'"
                    )

    # Validate required fields
    if not name or not param_type:
        raise LLMParsingError(f"Name and type are required fields but not found in : {param_string}")

    return ActionParameter(name=name, type=param_type, default=default, values=values)


def parse_table(table_text: str, partial: bool = False) -> list[PossibleAction]:
    """
    Parse a table of actions into a list of PossibleAction objects.

    Args:
            table_text: The text of the table to parse.
            partial: Whether to fail if the table is not complete or return a partial list of actions.

    Returns:
            A list of PossibleAction objects.
    """
    # Skip empty lines
    lines = [line.strip() for line in table_text.split("\n") if line.strip()]
    lines = [line for line in lines if not line.startswith("|---") and "|" in line]

    if not lines:
        raise LLMParsingError("Empty table returned by LLM. At least one action should be returned.")

    # Validate headers
    expected_headers = ["ID", "Description", "Parameters", "Category"]
    headers = [col.strip() for col in lines[0].split("|")[1:-1]]

    if headers != expected_headers:
        raise LLMParsingError(f"Invalid table headers. Expected {expected_headers}, got {headers}")

    actions: list[PossibleAction] = []

    for line in lines[1:]:  # Skip header row
        try:
            # Split the line into columns and clean whitespace
            cols = [col.strip() for col in line.split("|")[1:-1]]
            if len(cols) != 4:
                continue

            id_, description, params_str, category = cols

            action = PossibleAction(
                id=id_,
                description=description,
                category=category,
                params=[] if params_str == "" else [parse_table_parameter(params_str)],
            )
            actions.append(action)
        except Exception as e:
            if partial:
                logger.warning(f"[Markdown table parsing] Failed to parse action line: {line} with error: {e}")
                continue
            raise e

    return actions

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/pipe.py
================
from collections.abc import Sequence

from loguru import logger
from notte_core.actions.base import Action, PossibleAction
from notte_core.actions.space import ActionSpace
from notte_core.browser.node_type import NodeCategory
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.controller.actions import BaseAction
from notte_core.errors.actions import NotEnoughActionsListedError
from notte_core.errors.base import UnexpectedBehaviorError
from notte_core.errors.processing import NodeFilteringResultsInEmptyGraph
from notte_core.llms.service import LLMService
from notte_sdk.types import PaginationParams
from typing_extensions import override

from notte_browser.tagging.action.base import BaseActionSpacePipe
from notte_browser.tagging.action.llm_taging.base import BaseActionListingPipe
from notte_browser.tagging.action.llm_taging.filtering import ActionFilteringPipe
from notte_browser.tagging.action.llm_taging.listing import (
    ActionListingConfig,
    MainActionListingPipe,
)
from notte_browser.tagging.action.llm_taging.validation import ActionListValidationPipe
from notte_browser.tagging.page import PageCategoryPipe


class LlmActionSpaceConfig(FrozenConfig):
    listing: ActionListingConfig = ActionListingConfig()
    doc_categorisation: bool = True
    # completion config
    required_action_coverage: float = 0.95
    max_listing_trials: int = 3
    include_images: bool = False

    def __post_init__(self):
        if self.required_action_coverage > 1.0 or self.required_action_coverage < 0.0:
            raise UnexpectedBehaviorError(
                "'required_action_coverage' must be between 0.0 and 1.0",
                advice="Check the `required_action_coverage` parameter in the `LlmActionSpaceConfig` class.",
            )
        if self.max_listing_trials < 0:
            raise UnexpectedBehaviorError(
                "'max_listing_trials' must be positive",
                advice="Check the `max_listing_trials` parameter in the `LlmActionSpaceConfig` class.",
            )


class LlmActionSpacePipe(BaseActionSpacePipe):
    def __init__(
        self,
        llmserve: LLMService,
        config: LlmActionSpaceConfig,
    ) -> None:
        self.config: LlmActionSpaceConfig = config
        self.action_listing_pipe: BaseActionListingPipe = MainActionListingPipe(llmserve, config=self.config.listing)
        self.doc_categoriser_pipe: PageCategoryPipe | None = (
            PageCategoryPipe(llmserve, verbose=self.config.verbose) if self.config.doc_categorisation else None
        )

    def get_n_trials(
        self,
        nb_nodes: int = 0,
        max_nb_actions: int | None = None,
    ) -> int:
        effective_n = nb_nodes // 50
        if max_nb_actions is not None:
            effective_n = min(effective_n, (max_nb_actions // 50) + 1)
        return max(self.config.max_listing_trials, effective_n)

    def check_enough_actions(
        self,
        inodes_ids: list[str],
        action_list: Sequence[Action],
        pagination: PaginationParams,
    ) -> bool:
        # gobally check if we have enough actions to proceed.
        n_listed = len(action_list)
        n_required = int(len(inodes_ids) * self.config.required_action_coverage)
        n_required = min(n_required, pagination.max_nb_actions)
        if n_listed >= n_required and pagination.min_nb_actions is None:
            if self.config.verbose:
                logger.info(
                    f"[ActionListing] Enough actions: {n_listed} >= {n_required}. Stop action listing prematurely."
                )
            return True
        # for min_nb_actions, we want to check that the first min_nb_actions are in the action_list
        # /!\ the order matter here ! We want to make sure that all the early actions are in the action_list
        listed_ids = set([action.id for action in action_list])
        if pagination.min_nb_actions is not None:
            for i, id in enumerate(inodes_ids[: pagination.min_nb_actions]):
                if id not in listed_ids:
                    if self.config.verbose:
                        logger.warning(
                            f"[ActionListing] min_nb_actions = {pagination.min_nb_actions} but action {id} "
                            + f"({i + 1}th action) is not in the action list. Retry listng."
                        )
                    return False
            if self.config.verbose:
                logger.info(
                    (
                        f"[ActionListing] Min_nb_actions = {pagination.min_nb_actions} and all "
                        "actions are in the action list. Stop action listing prematurely."
                    )
                )
            return True

        if self.config.verbose:
            logger.warning(
                (
                    f"Not enough actions listed: {len(inodes_ids)} total, "
                    f"{n_required} required for completion but only {n_listed} listed"
                )
            )
        return False

    def forward_unfiltered(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[Action] | None,
        pagination: PaginationParams,
        n_trials: int,
    ) -> ActionSpace:
        # this function assumes tld(previous_actions_list) == tld(context)!
        inodes_ids = [inode.id for inode in snapshot.interaction_nodes()]
        previous_action_list = previous_action_list or []
        # we keep only intersection of current context inodes and previous actions!
        previous_action_list = [action for action in previous_action_list if action.id in inodes_ids]
        # TODO: question, can we already perform a `check_enough_actions` here ?
        possible_space = self.action_listing_pipe.forward(snapshot, previous_action_list)
        merged_actions = self.merge_action_lists(inodes_ids, possible_space.actions, previous_action_list)
        # check if we have enough actions to proceed.
        completed = self.check_enough_actions(inodes_ids, merged_actions, pagination)
        if not completed and n_trials == 0:
            raise NotEnoughActionsListedError(
                n_trials=self.get_n_trials(nb_nodes=len(inodes_ids), max_nb_actions=pagination.max_nb_actions),
                n_actions=len(inodes_ids),
                threshold=self.config.required_action_coverage,
            )

        if not completed and n_trials > 0:
            if self.config.verbose:
                logger.info(f"[ActionListing] Retry listing actions with {n_trials} trials left.")
            return self.forward_unfiltered(
                snapshot,
                merged_actions,
                n_trials=n_trials - 1,
                pagination=pagination,
            )

        space = ActionSpace(
            description=possible_space.description,
            raw_actions=merged_actions,
        )
        # categorisation should only be done after enough actions have been listed to avoid unecessary LLM calls.
        if self.doc_categoriser_pipe:
            space.category = self.doc_categoriser_pipe.forward(snapshot, space)
        return space

    def tagging_context(self, snapshot: BrowserSnapshot) -> BrowserSnapshot:
        if self.config.include_images:
            return snapshot
        if self.config.verbose:
            logger.info("🏞️ Excluding images from the action tagging process")
        _snapshot = snapshot.subgraph_without(actions=[], roles=NodeCategory.IMAGE.roles())
        if _snapshot is None:
            raise NodeFilteringResultsInEmptyGraph(
                url=snapshot.metadata.url,
                operation=f"subtree_without(roles={NodeCategory.IMAGE.roles()})",
            )
        return _snapshot

    @override
    def forward(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[BaseAction] | None,
        pagination: PaginationParams,
    ) -> ActionSpace:
        # TODO: handle the typing of this properly later on
        cast_previous_action_list: Sequence[Action] | None = previous_action_list  # type: ignore
        _snapshot = self.tagging_context(snapshot)

        space = self.forward_unfiltered(
            _snapshot,
            cast_previous_action_list,
            pagination=pagination,
            n_trials=self.get_n_trials(
                nb_nodes=len(snapshot.interaction_nodes()),
                max_nb_actions=pagination.max_nb_actions,
            ),
        )
        filtered_actions = ActionFilteringPipe.forward(_snapshot, space.raw_actions)
        return ActionSpace(
            description=space.description,
            raw_actions=filtered_actions,
            category=space.category,
        )

    def merge_action_lists(
        self,
        inodes_ids: list[str],
        actions: Sequence[PossibleAction],
        previous_action_list: Sequence[Action],
    ) -> Sequence[Action]:
        validated_action = ActionListValidationPipe.forward(
            inodes_ids,
            actions,
            previous_action_list,
            verbose=self.config.verbose,
        )
        # we merge newly validated actions with the misses we got from previous actions!
        valided_action_ids = set([action.id for action in validated_action])
        return validated_action + [
            a for a in previous_action_list if (a.id not in valided_action_ids) and (a.id in inodes_ids)
        ]

================
File: packages/notte-browser/src/notte_browser/tagging/action/llm_taging/validation.py
================
from collections.abc import Sequence

from loguru import logger
from notte_core.actions.base import Action, PossibleAction


class ActionListValidationPipe:
    @staticmethod
    def forward(
        inodes_ids: list[str],
        actions: Sequence[PossibleAction],
        # Just for logging purposes
        previous_action_list: Sequence[Action] | None = None,
        verbose: bool = False,
    ) -> list[Action]:
        # this function returns a list of valid actions (appearing in the context)
        actions_ids = {action.id for action in actions}
        previous_action_ids = {action.id for action in (previous_action_list or [])}
        hallucinated_ids = {id for id in actions_ids if id not in inodes_ids}
        missed_ids = {id for id in inodes_ids if (id not in actions_ids) and (id not in previous_action_ids)}

        if len(hallucinated_ids) > 0 and verbose:
            logger.warning(f"Hallucinated actions: {len(hallucinated_ids)} : {hallucinated_ids}")
            # TODO: log them into DB.

        if len(missed_ids) > 0 and verbose:
            logger.warning(f"Missed actions: {len(missed_ids)} : {missed_ids}")
            # TODO: log them into DB.

        return [
            Action(
                id=a.id,
                description=a.description,
                category=a.category,
                params=a.params,
                status="valid",
            )
            for a in actions
            if a.id not in missed_ids and a.id not in hallucinated_ids
        ]

================
File: packages/notte-browser/src/notte_browser/tagging/action/simple/pipe.py
================
from collections.abc import Sequence

from notte_core.actions.base import ActionParameterValue, ExecutableAction
from notte_core.browser.dom_tree import DomNode, InteractionDomNode
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.controller.actions import BaseAction
from notte_core.controller.space import ActionSpace
from notte_core.errors.processing import InvalidInternalCheckError
from notte_sdk.types import PaginationParams
from typing_extensions import override

from notte_browser.rendering.interaction_only import InteractionOnlyDomNodeRenderingPipe
from notte_browser.rendering.pipe import (
    DomNodeRenderingConfig,
    DomNodeRenderingPipe,
    DomNodeRenderingType,
)
from notte_browser.tagging.action.base import BaseActionSpacePipe


class SimpleActionSpaceConfig(FrozenConfig):
    rendering: DomNodeRenderingConfig = DomNodeRenderingConfig(type=DomNodeRenderingType.INTERACTION_ONLY)


class SimpleActionSpacePipe(BaseActionSpacePipe):
    def __init__(self, config: SimpleActionSpaceConfig) -> None:
        self.config: SimpleActionSpaceConfig = config

    def node_to_executable(self, node: InteractionDomNode) -> ExecutableAction:
        selectors = node.computed_attributes.selectors
        if selectors is None:
            raise InvalidInternalCheckError(
                check="Node should have an xpath selector",
                url=node.get_url(),
                dev_advice="This should never happen.",
            )
        return ExecutableAction(
            id=node.id,
            category="Interaction action",
            description=InteractionOnlyDomNodeRenderingPipe.render_node(node, self.config.rendering.include_attributes),
            # node=ResolvedLocator(
            #     selector=selectors,
            #     is_editable=False,
            #     input_type=None,
            #     role=node.role,
            # ),
            node=node,
            params_values=[
                ActionParameterValue(
                    name="value",
                    value="<sample_value>",
                )
            ],
        )

    def actions(self, node: DomNode) -> list[BaseAction]:
        return [self.node_to_executable(inode) for inode in node.interaction_nodes()]

    @override
    def forward(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[BaseAction] | None,
        pagination: PaginationParams,
    ) -> ActionSpace:
        page_content = DomNodeRenderingPipe.forward(snapshot.dom_node, config=self.config.rendering)
        return ActionSpace(
            description=page_content,
            raw_actions=self.actions(snapshot.dom_node),
        )

================
File: packages/notte-browser/src/notte_browser/tagging/action/base.py
================
from abc import ABC, abstractmethod
from collections.abc import Sequence

from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.controller.actions import BaseAction
from notte_core.controller.space import BaseActionSpace
from notte_sdk.types import PaginationParams


class BaseActionSpacePipe(ABC):
    @abstractmethod
    def forward(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[BaseAction] | None,
        pagination: PaginationParams,
    ) -> BaseActionSpace:
        raise NotImplementedError()

    async def forward_async(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[BaseAction] | None,
        pagination: PaginationParams,
    ) -> BaseActionSpace:
        return self.forward(snapshot, previous_action_list, pagination)

================
File: packages/notte-browser/src/notte_browser/tagging/action/pipe.py
================
from collections.abc import Sequence
from enum import StrEnum
from typing import Self

from loguru import logger
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.controller.actions import BaseAction
from notte_core.controller.space import BaseActionSpace
from notte_core.llms.service import LLMService
from notte_sdk.types import PaginationParams
from typing_extensions import override

from notte_browser.tagging.action.base import BaseActionSpacePipe
from notte_browser.tagging.action.llm_taging.pipe import LlmActionSpaceConfig, LlmActionSpacePipe
from notte_browser.tagging.action.simple.pipe import SimpleActionSpaceConfig, SimpleActionSpacePipe


class ActionSpaceType(StrEnum):
    LLM_TAGGING = "llm_tagging"
    SIMPLE = "simple"


class MainActionSpaceConfig(FrozenConfig):
    type: ActionSpaceType = ActionSpaceType.LLM_TAGGING
    llm_tagging: LlmActionSpaceConfig = LlmActionSpaceConfig()
    simple: SimpleActionSpaceConfig = SimpleActionSpaceConfig()

    def set_llm_tagging(self: Self) -> Self:
        return self.set_type(ActionSpaceType.LLM_TAGGING)

    def set_simple(self: Self) -> Self:
        return self.set_type(ActionSpaceType.SIMPLE)

    def set_type(self: Self, value: ActionSpaceType) -> Self:
        return self._copy_and_validate(type=value)

    def set_llm_tagging_config(self: Self, value: LlmActionSpaceConfig) -> Self:
        return self._copy_and_validate(llm_tagging=value)

    def set_simple_config(self: Self, value: SimpleActionSpaceConfig) -> Self:
        return self._copy_and_validate(simple=value)

    @override
    def set_verbose(self: Self) -> Self:
        return self._copy_and_validate(
            llm_tagging=self.llm_tagging.set_verbose(),
            simple=self.simple.set_verbose(),
            verbose=True,
        )


class MainActionSpacePipe(BaseActionSpacePipe):
    def __init__(self, llmserve: LLMService, config: MainActionSpaceConfig) -> None:
        self.config: MainActionSpaceConfig = config
        self.llmserve: LLMService = llmserve
        self.llm_pipe: LlmActionSpacePipe = LlmActionSpacePipe(llmserve=llmserve, config=self.config.llm_tagging)
        self.simple_pipe: SimpleActionSpacePipe = SimpleActionSpacePipe(config=self.config.simple)

    @override
    def forward(
        self,
        snapshot: BrowserSnapshot,
        previous_action_list: Sequence[BaseAction] | None,
        pagination: PaginationParams,
    ) -> BaseActionSpace:
        match self.config.type:
            case ActionSpaceType.LLM_TAGGING:
                if self.config.verbose:
                    logger.info("🏷️ Running LLM tagging action listing")
                return self.llm_pipe.forward(snapshot, previous_action_list, pagination)
            case ActionSpaceType.SIMPLE:
                if self.config.verbose:
                    logger.info("📋 Running simple action listing")
                return self.simple_pipe.forward(snapshot, previous_action_list, pagination)

================
File: packages/notte-browser/src/notte_browser/tagging/page.py
================
import time

from loguru import logger
from notte_core.actions.space import ActionSpace
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.controller.space import SpaceCategory
from notte_core.llms.engine import StructuredContent
from notte_core.llms.service import LLMService


class PageCategoryPipe:
    def __init__(self, llmserve: LLMService, verbose: bool = False) -> None:
        self.llmserve: LLMService = llmserve
        self.verbose: bool = verbose

    def forward(self, snapshot: BrowserSnapshot, space: ActionSpace) -> SpaceCategory:
        description = f"""
- URL: {snapshot.metadata.url}
- Title: {snapshot.metadata.title}
- Description: {space.description or "No description available"}
""".strip()

        start_time = time.time()
        response = self.llmserve.completion(
            prompt_id="document-category/optim",
            variables={"document": description},
        )
        end_time = time.time()

        sc = StructuredContent(outer_tag="document-category")
        category = sc.extract(response.choices[0].message.content)  # type: ignore

        if self.verbose:
            logger.info(f"🏷️ Page categorisation: {category} (took {end_time - start_time:.2f} seconds)")
        return SpaceCategory(category)

================
File: packages/notte-browser/src/notte_browser/__init__.py
================
from importlib import metadata

from notte_core.errors.base import ErrorConfig, ErrorMessageMode, ErrorMode

__version__ = metadata.version("notte")


def set_error_mode(mode: ErrorMode) -> None:
    """Set the error message mode for the package.

    Args:
        mode: Either 'developer', 'user' or 'agent'
    """
    ErrorConfig.set_message_mode(mode)


# Default to user mode
ErrorConfig.set_message_mode(ErrorMessageMode.DEVELOPER.value)

# Initialize telemetry
# This import only initializes the module, actual tracking will be disabled
# if ANONYMIZED_TELEMETRY=false is set or if PostHog is not installed
from notte_core.common import telemetry  # type: ignore # noqa

================
File: packages/notte-browser/src/notte_browser/controller.py
================
from loguru import logger
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.credentials.types import get_str_value
from notte_core.controller.actions import (
    BaseAction,
    CheckAction,
    ClickAction,
    CompletionAction,
    FillAction,
    GoBackAction,
    GoForwardAction,
    GotoAction,
    GotoNewTabAction,
    InteractionAction,
    ListDropdownOptionsAction,
    PressKeyAction,
    ReloadAction,
    ScrapeAction,
    ScrollDownAction,
    ScrollUpAction,
    SelectDropdownOptionAction,
    SwitchTabAction,
    WaitAction,
)
from notte_core.utils.code import text_contains_tabs
from notte_core.utils.platform import platform_control_key
from patchright.async_api import Locator
from typing_extensions import final

from notte_browser.dom.dropdown_menu import dropdown_menu_options
from notte_browser.dom.locate import locate_element
from notte_browser.errors import capture_playwright_errors
from notte_browser.window import BrowserWindow


@final
class BrowserController:
    def __init__(self, window: BrowserWindow, verbose: bool = False) -> None:
        self.window: BrowserWindow = window
        self.verbose: bool = verbose

        self.execute = capture_playwright_errors(verbose=verbose)(self.execute)  # type: ignore[reportAttributeAccessIssue]

    async def switch_tab(self, tab_index: int) -> None:
        context = self.window.page.context
        if tab_index != -1 and (tab_index < 0 or tab_index >= len(context.pages)):
            raise ValueError(f"Tab index '{tab_index}' is out of range for context with {len(context.pages)} pages")
        tab_page = context.pages[tab_index]
        await tab_page.bring_to_front()
        self.window.page = tab_page
        await self.window.long_wait()
        if self.verbose:
            logger.info(
                f"🪦 Switched to tab {tab_index} with url: {tab_page.url} ({len(context.pages)} tabs in context)"
            )

    async def execute_browser_action(self, action: BaseAction) -> BrowserSnapshot | None:
        match action:
            case GotoAction(url=url):
                return await self.window.goto(url)
            case GotoNewTabAction(url=url):
                new_page = await self.window.page.context.new_page()
                self.window.page = new_page
                _ = await new_page.goto(url)
            case SwitchTabAction(tab_index=tab_index):
                await self.switch_tab(tab_index)
            case WaitAction(time_ms=time_ms):
                await self.window.page.wait_for_timeout(time_ms)
            case GoBackAction():
                _ = await self.window.page.go_back()
            case GoForwardAction():
                _ = await self.window.page.go_forward()
            case ReloadAction():
                _ = await self.window.page.reload()
                await self.window.long_wait()
            case PressKeyAction(key=key):
                await self.window.page.keyboard.press(key)
            case ScrollUpAction(amount=amount):
                if amount is not None:
                    await self.window.page.mouse.wheel(delta_x=0, delta_y=-amount)
                else:
                    await self.window.page.keyboard.press("PageUp")
            case ScrollDownAction(amount=amount):
                if amount is not None:
                    await self.window.page.mouse.wheel(delta_x=0, delta_y=amount)
                else:
                    await self.window.page.keyboard.press("PageDown")
            case ScrapeAction():
                raise NotImplementedError("Scrape action is not supported in the browser controller")
            case _:
                raise ValueError(f"Unsupported action type: {type(action)}")

        # perform snapshot in execute
        return None

    async def execute_interaction_action(self, action: InteractionAction) -> BrowserSnapshot | None:
        if action.selector is None:
            raise ValueError(f"Selector is required for {action.name()}")
        press_enter = False
        if action.press_enter is not None:
            press_enter = action.press_enter
        # locate element (possibly in iframe)
        locator: Locator = await locate_element(self.window.page, action.selector)
        original_url = self.window.page.url

        action_timeout = self.window.config.wait.action_timeout

        match action:
            # Interaction actions
            case ClickAction():
                await locator.click(timeout=action_timeout)
            case FillAction(value=value):
                if text_contains_tabs(text=get_str_value(value)):
                    if self.verbose:
                        logger.info(
                            "🪦 Indentation detected in fill action: simulating clipboard copy/paste for better string formatting"
                        )
                    await locator.focus()

                    if action.clear_before_fill:
                        await self.window.page.keyboard.press(key=f"{platform_control_key()}+A")
                        await self.window.short_wait()
                        await self.window.page.keyboard.press(key="Backspace")
                        await self.window.short_wait()

                    # Use isolated clipboard variable instead of system clipboard
                    await self.window.page.evaluate(
                        """
                        (text) => {
                            window.__isolatedClipboard = text;
                            const dataTransfer = new DataTransfer();
                            dataTransfer.setData('text/plain', window.__isolatedClipboard);
                            document.activeElement.dispatchEvent(new ClipboardEvent('paste', {
                                clipboardData: dataTransfer,
                                bubbles: true,
                                cancelable: true
                            }));
                        }
                    """,
                        value,
                    )

                    await self.window.short_wait()
                else:
                    await locator.fill(get_str_value(value), timeout=action_timeout, force=action.clear_before_fill)
                    await self.window.short_wait()
            case CheckAction(value=value):
                if value:
                    await locator.check()
                else:
                    await locator.uncheck()
            case SelectDropdownOptionAction(value=value, option_selector=option_selector):
                # Check if it's a standard HTML select
                tag_name: str = await locator.evaluate("el => el.tagName.toLowerCase()")
                if tag_name == "select":
                    # Handle standard HTML select
                    _ = await locator.select_option(value)
                elif option_selector is None:
                    raise ValueError(f"Option selector is required for {action.name()}")
                else:
                    option_locator = await locate_element(self.window.page, option_selector)
                    # Handle non-standard select
                    await option_locator.click()

            case ListDropdownOptionsAction():
                options = await dropdown_menu_options(self.window.page, action.selector.xpath_selector)
                if self.verbose:
                    logger.info(f"Dropdown options: {options}")
                raise NotImplementedError("ListDropdownOptionsAction is not supported in the browser controller")
            case _:
                raise ValueError(f"Unsupported action type: {type(action)}")
        if press_enter:
            if self.verbose:
                logger.info(f"🪦 Pressing enter for action {action.id}")
            await self.window.short_wait()
            await self.window.page.keyboard.press("Enter")
        if original_url != self.window.page.url:
            if self.verbose:
                logger.info(f"🪦 Page navigation detected for action {action.id} waiting for networkidle")
            await self.window.long_wait()

        # perform snapshot in execute
        return None

    async def execute(self, action: BaseAction) -> BrowserSnapshot:
        context = self.window.page.context
        num_pages = len(context.pages)
        match action:
            case InteractionAction():
                retval = await self.execute_interaction_action(action)
            case CompletionAction(success=success, answer=answer):
                snapshot = await self.window.snapshot()
                if self.verbose:
                    logger.info(
                        f"Completion action: status={'success' if success else 'failure'} with answer = {answer}"
                    )
                await self.window.close()
                return snapshot
            case _:
                retval = await self.execute_browser_action(action)
        # add short wait before we check for new tabs to make sure that
        # the page has time to be created
        await self.window.short_wait()
        if len(context.pages) != num_pages:
            if self.verbose:
                logger.info(f"🪦 Action {action.id} resulted in a new tab, switched to it...")
            await self.switch_tab(tab_index=-1)
        elif retval is not None:
            # only return snapshot if we didn't switch to a new tab
            # otherwise, the snapshot is out of date and we need to take a new one
            return retval

        return await self.window.snapshot()

    async def execute_multiple(self, actions: list[BaseAction]) -> list[BrowserSnapshot]:
        snapshots: list[BrowserSnapshot] = []
        for action in actions:
            snapshots.append(await self.execute(action))
        return snapshots

================
File: packages/notte-browser/src/notte_browser/env.py
================
import asyncio
import datetime as dt
import sys
from collections.abc import Callable, Sequence
from typing import Self, Unpack

from loguru import logger
from notte_core.actions.base import ExecutableAction
from notte_core.browser.observation import Observation, TrajectoryProgress
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.config import FrozenConfig
from notte_core.common.logging import timeit
from notte_core.common.resource import AsyncResource
from notte_core.common.telemetry import capture_event, track_usage
from notte_core.controller.actions import (
    BaseAction,
    BrowserActionId,
    GotoAction,
    ScrapeAction,
    WaitAction,
)
from notte_core.errors.processing import InvalidInternalCheckError
from notte_core.llms.engine import LlmModel
from notte_core.llms.service import LLMService
from notte_core.utils.webp_replay import ScreenshotReplay
from notte_sdk.types import (
    DEFAULT_MAX_NB_STEPS,
    BrowserType,
    PaginationParams,
    PaginationParamsDict,
    ProxySettings,
    ScrapeParams,
    ScrapeParamsDict,
)
from pydantic import BaseModel
from typing_extensions import override

from notte_browser.controller import BrowserController
from notte_browser.dom.pipe import DomPreprocessingPipe
from notte_browser.errors import MaxStepsReachedError, NoSnapshotObservedError
from notte_browser.resolution import NodeResolutionPipe
from notte_browser.scraping.pipe import DataScrapingPipe, ScrapingConfig
from notte_browser.tagging.action.pipe import (
    MainActionSpaceConfig,
    MainActionSpacePipe,
)
from notte_browser.window import BrowserWindow, BrowserWindowConfig


class ScrapeAndObserveParamsDict(ScrapeParamsDict, PaginationParamsDict):
    pass


class NotteEnvConfig(FrozenConfig):
    max_steps: int = DEFAULT_MAX_NB_STEPS
    window: BrowserWindowConfig = BrowserWindowConfig()
    scraping: ScrapingConfig = ScrapingConfig()
    action: MainActionSpaceConfig = MainActionSpaceConfig()
    observe_max_retry_after_snapshot_update: int = 2
    nb_seconds_between_snapshots_check: int = 10
    auto_scrape: bool = True
    perception_model: str | None = None
    verbose: bool = False
    structured_output_retries: int = 3

    def dev_mode(self: Self) -> Self:
        format = "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
        logger.configure(handlers=[dict(sink=sys.stderr, level="DEBUG", format=format)])  # type: ignore
        return self.set_deep_verbose()

    def user_mode(self: Self) -> Self:
        return self._copy_and_validate(
            verbose=True,
            window=self.window.set_verbose(),
            action=self.action.set_verbose(),
        )

    def agent_mode(self: Self) -> Self:
        format = "<level>{level: <8}</level> - <level>{message}</level>"
        logger.configure(handlers=[dict(sink=sys.stderr, level="INFO", format=format)])  # type: ignore
        return self.set_deep_verbose(False)

    def groq(self: Self) -> Self:
        return self._copy_and_validate(perception_model=LlmModel.groq)

    def openai(self: Self) -> Self:
        return self._copy_and_validate(perception_model=LlmModel.openai)

    def cerebras(self: Self) -> Self:
        return self._copy_and_validate(perception_model=LlmModel.cerebras)

    def gemini(self: Self) -> Self:
        return self._copy_and_validate(perception_model=LlmModel.gemini)

    def model(self: Self, model: LlmModel) -> Self:
        return self._copy_and_validate(perception_model=model)

    def set_max_steps(self: Self, max_steps: int | None = None) -> Self:
        return self._copy_and_validate(max_steps=max_steps if max_steps is not None else DEFAULT_MAX_NB_STEPS)

    def headless(self: Self, value: bool = True) -> Self:
        return self._copy_and_validate(window=self.window.set_headless(value))

    def set_proxy(self: Self, value: ProxySettings | None) -> Self:
        return self._copy_and_validate(window=self.window.set_proxy(value))

    def set_browser_type(self: Self, value: BrowserType) -> Self:
        return self._copy_and_validate(window=self.window.set_browser_type(value))

    def set_user_agent(self: Self, value: str | None) -> Self:
        return self._copy_and_validate(window=self.window.set_user_agent(value))

    def set_cdp_debug(self: Self, value: bool) -> Self:
        return self._copy_and_validate(window=self.window.set_cdp_debug(value))

    def not_headless(self: Self) -> Self:
        return self.headless(False)

    def cdp(self: Self, url: str) -> Self:
        return self._copy_and_validate(window=self.window.set_cdp_url(url))

    def llm_action_tagging(self: Self) -> Self:
        return self._copy_and_validate(action=self.action.set_llm_tagging())

    def llm_data_extract(self: Self) -> Self:
        return self._copy_and_validate(scraping=self.scraping.set_llm_extract())

    def web_security(self: Self, value: bool = True) -> Self:
        """
        Enable or disable web security.
        """
        return self._copy_and_validate(window=self.window.set_web_security(value))

    def disable_web_security(self: Self) -> Self:
        return self.web_security(False)

    def enable_web_security(self: Self) -> Self:
        return self.web_security(True)

    def disable_auto_scrape(self: Self) -> Self:
        return self.set_auto_scrape(False)

    def enable_auto_scrape(self: Self) -> Self:
        return self.set_auto_scrape(True)

    def use_llm(self: Self) -> Self:
        return self.llm_data_extract().llm_action_tagging()

    def disable_perception(self: Self) -> Self:
        return self._copy_and_validate(
            scraping=self.scraping.set_simple(),
            action=self.action.set_simple(),
        ).disable_auto_scrape()

    def set_structured_output_retries(self: Self, value: int) -> Self:
        return self._copy_and_validate(structured_output_retries=value)

    def set_window(self: Self, value: BrowserWindowConfig) -> Self:
        return self._copy_and_validate(window=value)

    def set_scraping(self: Self, value: ScrapingConfig) -> Self:
        return self._copy_and_validate(scraping=value)

    def set_action(self: Self, value: MainActionSpaceConfig) -> Self:
        return self._copy_and_validate(action=value)

    def set_observe_max_retry_after_snapshot_update(self: Self, value: int) -> Self:
        return self._copy_and_validate(observe_max_retry_after_snapshot_update=value)

    def set_nb_seconds_between_snapshots_check(self: Self, value: int) -> Self:
        return self._copy_and_validate(nb_seconds_between_snapshots_check=value)

    def set_auto_scrape(self: Self, value: bool) -> Self:
        return self._copy_and_validate(auto_scrape=value)

    def set_perception_model(self: Self, value: str | None) -> Self:
        return self._copy_and_validate(perception_model=value)

    def steps(self: Self, value: int) -> Self:
        """
        Set the maximum number of steps for the agent.
        """
        return self.set_max_steps(value)


class TrajectoryStep(BaseModel):
    obs: Observation
    action: BaseAction


class NotteEnv(AsyncResource):
    def __init__(
        self,
        config: NotteEnvConfig | None = None,
        window: BrowserWindow | None = None,
        llmserve: LLMService | None = None,
        act_callback: Callable[[BaseAction, Observation], None] | None = None,
    ) -> None:
        self.config: NotteEnvConfig = config or NotteEnvConfig().use_llm()
        if llmserve is None:
            llmserve = LLMService(
                base_model=self.config.perception_model, structured_output_retries=self.config.structured_output_retries
            )
        self._window: BrowserWindow = window or BrowserWindow(config=self.config.window)
        super().__init__(self._window)
        self.controller: BrowserController = BrowserController(self._window, verbose=self.config.verbose)

        self.trajectory: list[TrajectoryStep] = []
        self._snapshot: BrowserSnapshot | None = None
        self._action_space_pipe: MainActionSpacePipe = MainActionSpacePipe(llmserve=llmserve, config=self.config.action)
        self._data_scraping_pipe: DataScrapingPipe = DataScrapingPipe(
            llmserve=llmserve, window=self._window, config=self.config.scraping
        )
        self.act_callback: Callable[[BaseAction, Observation], None] | None = act_callback

        # Track initialization
        capture_event(
            "env.initialized",
            {
                "config": {
                    "perception_model": self.config.perception_model,
                    "auto_scrape": self.config.auto_scrape,
                    "headless": self.config.window.headless,
                }
            },
        )

    @property
    def snapshot(self) -> BrowserSnapshot:
        if self._snapshot is None:
            raise NoSnapshotObservedError()
        return self._snapshot

    @property
    def previous_actions(self) -> Sequence[BaseAction] | None:
        # This function is always called after trajectory.append(preobs)
        # —This means trajectory[-1] is always the "current (pre)observation"
        # And trajectory[-2] is the "previous observation" we're interested in.
        if len(self.trajectory) <= 1:
            return None
        previous_obs: Observation = self.trajectory[-2].obs
        if not previous_obs.has_space():
            return None  # we don't have a space for pre-observations
        if self.obs.clean_url != previous_obs.clean_url:
            return None  # the page has significantly changed
        if previous_obs.space is None:
            raise InvalidInternalCheckError(
                check="Previous observation has no space. This should never happen.",
                url=previous_obs.metadata.url,
                dev_advice=(
                    "This technnically should never happen. There is likely an issue during the action space pipe."
                ),
            )
        return previous_obs.space.actions("all")

    @property
    def obs(self) -> Observation:
        if len(self.trajectory) <= 0:
            raise NoSnapshotObservedError()
        return self.trajectory[-1].obs

    def progress(self) -> TrajectoryProgress:
        return TrajectoryProgress(
            max_steps=self.config.max_steps,
            current_step=len(self.trajectory),
        )

    def replay(self) -> bytes:
        screenshots: list[bytes] = [step.obs.screenshot for step in self.trajectory if step.obs.screenshot is not None]
        if len(screenshots) == 0:
            raise ValueError("No screenshots found in agent trajectory")
        return ScreenshotReplay.from_bytes(screenshots).summary_webp()

    # ---------------------------- observe, step functions ----------------------------

    def _preobserve(self, snapshot: BrowserSnapshot, action: BaseAction) -> Observation:
        if len(self.trajectory) >= self.config.max_steps:
            raise MaxStepsReachedError(max_steps=self.config.max_steps)
        self._snapshot = DomPreprocessingPipe.forward(snapshot)
        preobs = Observation.from_snapshot(snapshot, progress=self.progress())
        self.trajectory.append(TrajectoryStep(obs=preobs, action=action))
        if self.act_callback is not None:
            self.act_callback(action, preobs)
        return preobs

    async def _observe(
        self,
        pagination: PaginationParams,
        retry: int,
    ) -> Observation:
        if self.config.verbose:
            logger.info(f"🧿 observing page {self.snapshot.metadata.url}")
        self.obs.space = self._action_space_pipe.forward(
            self.snapshot,
            self.previous_actions,
            pagination=pagination,
        )
        # TODO: improve this
        # Check if the snapshot has changed since the beginning of the trajectory
        # if it has, it means that the page was not fully loaded and that we should restart the oblisting
        time_diff = dt.datetime.now() - self.snapshot.metadata.timestamp
        if time_diff.total_seconds() > self.config.nb_seconds_between_snapshots_check:
            if self.config.verbose:
                logger.warning(
                    (
                        f"{time_diff.total_seconds()} seconds since the beginning of the action listing."
                        "Check if page content has changed..."
                    )
                )
            check_snapshot = await self._window.snapshot(screenshot=False)
            if not self.snapshot.compare_with(check_snapshot) and retry > 0:
                if self.config.verbose:
                    logger.warning(
                        "Snapshot changed since the beginning of the action listing, retrying to observe again"
                    )
                _ = self._preobserve(check_snapshot, action=WaitAction(time_ms=int(time_diff.total_seconds() * 1000)))
                return await self._observe(retry=retry - 1, pagination=pagination)

        if (
            self.config.auto_scrape
            and self.obs.space.category is not None
            and self.obs.space.category.is_data()
            and not self.obs.has_data()
        ):
            if self.config.verbose:
                logger.info(f"🛺 Autoscrape enabled and page is {self.obs.space.category}. Scraping page...")
            self.obs.data = await self._data_scraping_pipe.forward(self.snapshot, ScrapeParams())
        return self.obs

    @timeit("goto")
    @track_usage("env.goto")
    async def goto(self, url: str | None) -> Observation:
        snapshot = await self._window.goto(url)
        return self._preobserve(snapshot, action=GotoAction(url=snapshot.metadata.url))

    @timeit("observe")
    @track_usage("env.observe")
    async def observe(
        self,
        url: str | None = None,
        **pagination: Unpack[PaginationParamsDict],
    ) -> Observation:
        _ = await self.goto(url)
        if self.config.verbose:
            logger.debug(f"ℹ️ previous actions IDs: {[a.id for a in self.previous_actions or []]}")
            logger.debug(f"ℹ️ snapshot inodes IDs: {[node.id for node in self.snapshot.interaction_nodes()]}")
        return await self._observe(
            pagination=PaginationParams.model_validate(pagination),
            retry=self.config.observe_max_retry_after_snapshot_update,
        )

    @timeit("execute")
    @track_usage("env.execute")
    async def execute(
        self,
        action_id: str,
        params: dict[str, str] | str | None = None,
        enter: bool | None = None,
    ) -> Observation:
        if action_id == BrowserActionId.SCRAPE.value:
            # Scrape action is a special case
            return await self.scrape()
        exec_action = ExecutableAction.parse(action_id, params, enter=enter)
        action = await NodeResolutionPipe.forward(exec_action, self._snapshot, verbose=self.config.verbose)
        snapshot = await self.controller.execute(action)
        obs = self._preobserve(snapshot, action=action)
        return obs

    @timeit("act")
    @track_usage("env.act")
    async def act(
        self,
        action: BaseAction,
    ) -> Observation:
        if self.config.verbose:
            logger.info(f"🌌 starting execution of action {action.id}...")
        if isinstance(action, ScrapeAction):
            # Scrape action is a special case
            # TODO: think about flow. Right now, we do scraping and observation in one step
            return await self.god(instructions=action.instructions)
        action = await NodeResolutionPipe.forward(action, self._snapshot, verbose=self.config.verbose)
        snapshot = await self.controller.execute(action)
        if self.config.verbose:
            logger.info(f"🌌 action {action.id} executed in browser. Observing page...")
        _ = self._preobserve(snapshot, action=action)
        return await self._observe(
            pagination=PaginationParams(),
            retry=self.config.observe_max_retry_after_snapshot_update,
        )

    @timeit("step")
    @track_usage("env.step")
    async def step(
        self,
        action_id: str,
        params: dict[str, str] | str | None = None,
        enter: bool | None = None,
        **pagination: Unpack[PaginationParamsDict],
    ) -> Observation:
        _ = await self.execute(action_id, params, enter=enter)
        if self.config.verbose:
            logger.debug(f"ℹ️ previous actions IDs: {[a.id for a in self.previous_actions or []]}")
            logger.debug(f"ℹ️ snapshot inodes IDs: {[node.id for node in self.snapshot.interaction_nodes()]}")
        return await self._observe(
            pagination=PaginationParams.model_validate(pagination),
            retry=self.config.observe_max_retry_after_snapshot_update,
        )

    @timeit("scrape")
    @track_usage("env.scrape")
    async def scrape(
        self,
        url: str | None = None,
        **scrape_params: Unpack[ScrapeParamsDict],
    ) -> Observation:
        if url is not None:
            _ = await self.goto(url)
        params = ScrapeParams(**scrape_params)
        self.obs.data = await self._data_scraping_pipe.forward(self.snapshot, params)
        return self.obs

    @timeit("god")
    @track_usage("env.god")
    async def god(
        self,
        url: str | None = None,
        **params: Unpack[ScrapeAndObserveParamsDict],
    ) -> Observation:
        if self.config.verbose:
            logger.info("🌊 God mode activated (scraping + action listing)")
        if url is not None:
            _ = await self.goto(url)
        scrape = ScrapeParams.model_validate(params)
        pagination = PaginationParams.model_validate(params)
        space, data = await asyncio.gather(
            self._action_space_pipe.forward_async(
                self.snapshot, previous_action_list=self.previous_actions, pagination=pagination
            ),
            self._data_scraping_pipe.forward_async(self.snapshot, scrape),
        )
        self.obs.space = space
        self.obs.data = data
        return self.obs

    @timeit("reset")
    @track_usage("env.reset")
    @override
    async def reset(self) -> None:
        if self.config.verbose:
            logger.info("🌊 Resetting environment...")
        self.trajectory = []
        self._snapshot = None
        # reset the window
        await super().reset()

================
File: packages/notte-browser/src/notte_browser/errors.py
================
from collections.abc import Awaitable
from functools import wraps
from typing import Any, Callable, TypeVar

from loguru import logger
from notte_core.errors.base import NotteBaseError, NotteTimeoutError, UnexpectedBehaviorError
from notte_core.errors.processing import InvalidInternalCheckError
from patchright.async_api import Error as PlayrightError
from patchright.async_api import TimeoutError as PlaywrightTimeoutError

T = TypeVar("T")

# #######################################################
# #################### Browser errors ###################
# #######################################################


class BrowserError(NotteBaseError):
    """Base class for Browser related errors."""

    pass


class PageLoadingError(BrowserError):
    def __init__(self, url: str) -> None:
        super().__init__(
            dev_message=f"Failed to load page from {url}. Check if the URL is reachable.",
            user_message="Failed to load page from the given URL. Check if the URL is reachable.",
            agent_message=(
                f"Failed to load page from {url}. Hint: check if the URL is valid and reachable and wait a couple"
                " seconds before retrying. Otherwise, try another URL."
            ),
            should_retry_later=True,
        )


class InvalidURLError(BrowserError):
    def __init__(
        self,
        url: str,
    ) -> None:
        super().__init__(
            dev_message=(
                f"Invalid URL: {url}. Check if the URL is reachable. URLs should start with https:// or http://. "
            ),
            user_message=(
                "Impossible to access the given URL. Check if the URL is reachable. "
                "Remember that URLs should start with https:// or http://"
            ),
            agent_message=f"Invalid URL: {url}. Hint: URL should start with https:// or http://.",
            should_retry_later=False,
        )


class BrowserNotStartedError(BrowserError):
    def __init__(self) -> None:
        super().__init__(
            dev_message=(
                "Browser not started. You should use `await browser.start()` to start a new session "
                "(or `await env.start()`)."
            ),
            user_message="Session not started. Please start a new session to continue.",
            agent_message="Browser not started. Terminate the current session and start a new one.",
            should_retry_later=False,
        )


class RemoteDebuggingNotAvailableError(BrowserError):
    def __init__(self) -> None:
        super().__init__(
            dev_message="Remote debugging is not available. You should use a `local_pool` instead of a `remote_pool`.",
            user_message="Remote debugging is not available. Please use a `local_pool` instead of a `remote_pool`.",
            agent_message="Remote debugging is not available. Please use a `local_pool` instead of a `remote_pool`.",
            should_retry_later=False,
        )


class BrowserPoolNotStartedError(BrowserError):
    def __init__(self) -> None:
        super().__init__(
            dev_message="Browser pool not started. You should use `await pool.start()` to start the pool.",
            user_message="Browser pool not started. Please start the pool to continue.",
            agent_message="Browser pool not started. Please start the pool to continue.",
            should_retry_later=False,
        )


class BrowserExpiredError(BrowserError):
    def __init__(self) -> None:
        super().__init__(
            dev_message=(
                "Browser or context expired or closed. You should use `await browser.start()` to start a new session."
            ),
            user_message="Session expired or closed. Create a new session to continue.",
            agent_message="Browser or context expired or closed. Terminate the current session and start a new one.",
            should_retry_later=False,
        )


class EmptyPageContentError(BrowserError):
    def __init__(self, url: str, nb_retries: int) -> None:
        super().__init__(
            dev_message=(
                f"Browser snapshot failed after {nb_retries} retries to get a non-empty web page for: {url}. "
                "Notte cannot continue without a valid page. Try to increase the short waiting time in "
                "`notte.browser.window.py`."
            ),
            user_message="Webpage appears to be empty and cannot be processed.",
            agent_message=(
                "Webpage appears to be empty at the moment. Hint: wait a couple seconds and resume browsing to see if"
                " the problem persist. Otherwise, try another URL."
            ),
            should_retry_later=True,
            should_notify_team=True,
        )


class UnexpectedBrowserError(BrowserError):
    def __init__(self, url: str) -> None:
        super().__init__(
            dev_message=f"Unexpected error detected: {url}. Notte cannot continue without a valid page. ",
            user_message="An unexpected error occurred within the browser session.",
            agent_message=(
                "An unexpected error occurred within the browser session. Hint: wait a couple seconds and retry the"
                " action. Otherwise, try another URL."
            ),
            should_retry_later=True,
            should_notify_team=True,
        )


class BrowserResourceNotFoundError(BrowserError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=message,
            user_message="The requested browser resource was not found. Please start a new session.",
            agent_message=(
                "The requested browser resource was not found. Hint: terminate the current session and start a new one."
            ),
            should_retry_later=False,
        )


class BrowserResourceLimitError(BrowserError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=message,
            user_message="Sorry, we are experiencing high traffic at the moment. Try again later with a new session.",
            agent_message=(
                "The browser is currently experiencing high traffic. Wait 30 seconds before retrying to create a new"
                " session."
            ),
            should_retry_later=False,
        )


# #######################################################
# ################ Environment errors ###################
# #######################################################


class NoSnapshotObservedError(UnexpectedBehaviorError):
    def __init__(self) -> None:
        super().__init__(
            message="Tried to access `env.snapshot` but no snapshot is available in the environment",
            advice="You should use `await env.observe()` first to get a snapshot",
        )


class MaxStepsReachedError(NotteBaseError):
    def __init__(self, max_steps: int) -> None:
        super().__init__(
            dev_message=(
                f"Max number steps reached: {max_steps} in the currrent trajectory. Either use "
                "`env.reset()` to reset the environment or increase max steps in `NotteEnv(max_steps=..)`."
            ),
            user_message=(
                f"Too many actions executed in the current session (i.e. {max_steps} actions). "
                "Please start a new session to continue."
            ),
            # same as user message
            agent_message=None,
        )


# #######################################################
# ################# Resolution errors ###################
# #######################################################


class FailedNodeResolutionError(InvalidInternalCheckError):
    def __init__(self, node_id: str):
        super().__init__(
            check=f"No selector found for action {node_id}",
            url=None,
            dev_advice=(
                "This technnically should never happen. There is likely an issue during playright "
                "conflict resolution pipeline, i.e `ActionResolutionPipe`."
            ),
        )


# #######################################################
# ################# Playwright errors ###################
# #######################################################


class InvalidLocatorRuntimeError(NotteBaseError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=(
                f"Invalid Playwright locator. Interactive element is not found or not visible. Error:\n{message}"
            ),
            user_message="Interactive element is not found or not visible. Execution failed.",
            agent_message=(
                "Execution failed because interactive element is not found or not visible. "
                "Hint: wait 5s and try again, check for any modal/dialog/popup that might be blocking the element,"
                " or try another action."
            ),
        )


class PlaywrightRuntimeError(NotteBaseError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=f"Playwright runtime error: {message}",
            user_message="An unexpected error occurred. Our team has been notified.",
            agent_message=f"An unexpected error occurred:\n{message}. You should wait a 5s seconds and try again.",
        )


def capture_playwright_errors(verbose: bool = False):
    """Decorator to handle playwright errors.

    Args:
        verbose (bool): Whether to log detailed debugging information
    """

    def decorator(func: Callable[..., Awaitable[T]]) -> Callable[..., Awaitable[T]]:
        @wraps(func)
        async def wrapper(*args: Any, **kwargs: Any) -> T:
            try:
                return await func(*args, **kwargs)
            except NotteBaseError as e:
                # Already our error type, just log and re-raise
                logger.error(f"NotteBaseError: {e.dev_message if verbose else e.user_message}")
                raise e
            except PlaywrightTimeoutError as e:
                # only timeout issue if the last line is it
                # otherwise more generic error
                if "- waiting for locator(" in str(e).strip().split("\n")[-1]:
                    raise InvalidLocatorRuntimeError(message=str(e)) from e
                raise PlaywrightRuntimeError(message=str(e)) from e
            except TimeoutError as e:
                raise NotteTimeoutError(message="Request timed out.") from e
            # Add more except blocks for other external errors
            except PlayrightError as e:
                raise NotteBaseError(
                    dev_message=f"Unexpected playwright error: {str(e)}",
                    user_message="An unexpected error occurred. Our team has been notified.",
                    agent_message=f"An unexpected playwright error occurred: {str(e)}.",
                ) from e
            except Exception as e:
                # Catch-all for unexpected errors
                logger.error(
                    "Unexpected error occurred. Please use the NotteBaseError class to handle this error.",
                    exc_info=verbose,
                )
                raise NotteBaseError(
                    dev_message=f"Unexpected error: {str(e)}",
                    user_message="An unexpected error occurred. Our team has been notified.",
                    agent_message="An unexpected error occurred. You can try again later.",
                    should_retry_later=False,
                ) from e

        return wrapper

    return decorator

================
File: packages/notte-browser/src/notte_browser/resolution.py
================
from loguru import logger
from notte_core.actions.base import ExecutableAction
from notte_core.browser.dom_tree import InteractionDomNode, NodeSelectors
from notte_core.browser.node_type import NodeRole
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.controller.actions import (
    BaseAction,
    BrowserAction,
    ClickAction,
    InteractionAction,
    SelectDropdownOptionAction,
)
from notte_core.controller.proxy import NotteActionProxy
from notte_core.errors.actions import InvalidActionError

from notte_browser.dom.locate import selectors_through_shadow_dom
from notte_browser.errors import FailedNodeResolutionError


class SimpleActionResolutionPipe:
    @staticmethod
    def forward(
        action: InteractionAction | BrowserAction,
        snapshot: BrowserSnapshot | None = None,
        verbose: bool = False,
    ) -> InteractionAction | BrowserAction:
        if not isinstance(action, InteractionAction) or snapshot is None:
            # no need to resolve
            return action
        if isinstance(action, SelectDropdownOptionAction):
            select_action = SimpleActionResolutionPipe.resolve_dropdown_locators(action, snapshot, verbose)
            if select_action is not None:
                return select_action
            # hack: fallback to click action if no selector is found
            if verbose:
                logger.warning(
                    f"🚸 No selector found for select dropdown action with id={action.id}, falling back to click action"
                )
            fallback_action = ClickAction(id=action.id)
            return SimpleActionResolutionPipe.forward(fallback_action, snapshot, verbose)

        selector_map: dict[str, InteractionDomNode] = {inode.id: inode for inode in snapshot.interaction_nodes()}
        if action.id not in selector_map:
            raise InvalidActionError(action_id=action.id, reason=f"action '{action.id}' not found in page context.")
        node = selector_map[action.id]
        action.selector = SimpleActionResolutionPipe.resolve_selectors(node, verbose)
        action.text_label = node.text
        return action

    @staticmethod
    def resolve_selectors(node: InteractionDomNode, verbose: bool = False) -> NodeSelectors:
        if node.computed_attributes.selectors is None:
            raise FailedNodeResolutionError(node.id)
        selectors = node.computed_attributes.selectors
        if selectors.in_shadow_root:
            if verbose:
                logger.info(f"🔍 Resolving shadow root selectors for {node.id} ({node.text})")
            selectors = selectors_through_shadow_dom(node)
        return selectors

    @staticmethod
    def resolve_dropdown_locators(
        action: SelectDropdownOptionAction,
        snapshot: BrowserSnapshot,
        verbose: bool = False,
    ) -> SelectDropdownOptionAction | None:
        """
        Resolve the selector locators for a dropdown option.

        We need to find the selector node and the option node.
        This function simply iterates over the interaction nodes to find the option node.
        The selector node is the first node with a role in [COMBOBOX, LISTBOX, LIST]
        that appears before the option node.
        """
        inodes = snapshot.dom_node.interaction_nodes()
        snode = None
        for node in inodes:
            if node.get_role_str() in [NodeRole.COMBOBOX.value, NodeRole.LISTBOX.value, NodeRole.LIST.value]:
                snode = node
            if (action.option_id is not None and node.id == action.option_id) or (
                action.value is not None and node.text == action.value and node.get_role_str() == NodeRole.OPTION.value
            ):
                if snode is None:
                    raise ValueError(f"No select html element found for {action.option_id} or {action.value}")

                if node.computed_attributes.selectors is None or snode.computed_attributes.selectors is None:
                    raise FailedNodeResolutionError(action.id)
                selectors = snode.computed_attributes.selectors
                option_selectors = node.computed_attributes.selectors
                if verbose:
                    logger.info(
                        (
                            f"Resolved locators for select dropdown {snode.id} ({snode.text})"
                            f" and option {node.id} ({node.text})"
                        )
                    )
                action.option_selector = option_selectors
                action.selector = selectors
                return action

        return None


class NodeResolutionPipe:
    @staticmethod
    async def forward(
        action: BaseAction,
        snapshot: BrowserSnapshot | None,
        verbose: bool = False,
    ) -> InteractionAction | BrowserAction:
        if isinstance(action, ExecutableAction):
            if action.node is None and snapshot is not None:
                action.node = snapshot.dom_node.find(action.id)
            action = NotteActionProxy.forward(action)
            if verbose:
                logger.info(f"Resolving to action {action.dump_str()}")

        return SimpleActionResolutionPipe.forward(action, snapshot=snapshot, verbose=verbose)  # type: ignore

================
File: packages/notte-browser/src/notte_browser/resource.py
================
import asyncio
from abc import ABC, abstractmethod
from dataclasses import asdict, dataclass
from typing import ClassVar, Self

from loguru import logger
from notte_core.common.config import FrozenConfig
from notte_sdk.types import BrowserType, Cookie, ProxySettings
from openai import BaseModel
from patchright.async_api import (
    Browser as PlaywrightBrowser,
)
from patchright.async_api import BrowserContext, Playwright, async_playwright
from patchright.async_api import (
    Page as PlaywrightPage,
)
from pydantic import Field, PrivateAttr
from typing_extensions import override

from notte_browser.errors import (
    BrowserNotStartedError,
    BrowserPoolNotStartedError,
)


@dataclass(frozen=True)
class BrowserResourceOptions:
    headless: bool
    user_agent: str | None = None
    proxy: ProxySettings | None = None
    debug: bool = False
    debug_port: int | None = None
    cookies: list[Cookie] | None = None
    viewport_width: int = 1280
    viewport_height: int = 1020
    cdp_url: str | None = None
    browser_type: BrowserType = BrowserType.CHROMIUM
    chrome_args: list[str] | None = None

    def set_port(self, port: int) -> "BrowserResourceOptions":
        options = dict(asdict(self), debug_port=port, debug=True)
        return BrowserResourceOptions(**options)


class BrowserResource(BaseModel):
    model_config = {  # pyright: ignore[reportUnannotatedClassAttribute]
        "arbitrary_types_allowed": True
    }

    page: PlaywrightPage = Field(exclude=True)
    resource_options: BrowserResourceOptions
    # TODO:check if this is needed
    cdp_url: str | None = None
    browser_id: str | None = None
    context_id: str | None = None


class BrowserResourceHandlerConfig(FrozenConfig):
    base_debug_port: int = 9222
    web_security: bool = False
    max_browsers: int | None = None
    max_total_contexts: int | None = None
    viewport_width: int = 1280
    viewport_height: int = 1020  # Default in playright is 720
    custom_devtools_frontend: str | None = None
    default_chromium_args: list[str] = [
        "--disable-dev-shm-usage",
        "--disable-extensions",
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--no-zygote",
        "--mute-audio",
        '--js-flags="--max-old-space-size=100"',
        "--no-first-run",
        "--no-default-browser-check",
        "--start-maximized",
    ]
    security_chromium_args: list[str] = [
        "--disable-web-security",
        "--disable-site-isolation-trials",
        "--disable-features=IsolateOrigins,site-per-process",
        "--remote-allow-origins=*",
    ]

    def set_web_security(self: Self, value: bool = True) -> Self:
        return self._copy_and_validate(web_security=value)

    def disable_web_security(self: Self) -> Self:
        return self.set_web_security(False)

    def enable_web_security(self: Self) -> Self:
        return self.set_web_security(True)

    def set_base_debug_port(self: Self, value: int) -> Self:
        return self._copy_and_validate(base_debug_port=value)

    def set_chromium_args(self: Self, value: list[str] | None) -> Self:
        return self._copy_and_validate(default_chromium_args=value)

    def set_viewport_width(self: Self, value: int) -> Self:
        return self._copy_and_validate(viewport_width=value)

    def set_viewport_height(self: Self, value: int) -> Self:
        return self._copy_and_validate(viewport_height=value)

    def get_chromium_args(self, chrome_args: list[str] | None = None, cdp_port: int | None = None) -> list[str]:
        # chrome args override default + security
        if chrome_args is not None:
            chromium_args = chrome_args.copy()
        else:
            chromium_args = self.default_chromium_args.copy()
            if not self.web_security:
                chromium_args.extend(self.security_chromium_args)

        if self.custom_devtools_frontend is not None:
            chromium_args.extend(
                [
                    f"--custom-devtools-frontend={self.custom_devtools_frontend}",
                ]
            )

        if cdp_port is not None:
            chromium_args.append(f"--remote-debugging-port={cdp_port}")

        return chromium_args


class PlaywrightResourceHandler(BaseModel, ABC):
    model_config = {  # pyright: ignore[reportUnannotatedClassAttribute]
        "arbitrary_types_allowed": True
    }
    BROWSER_CREATION_TIMEOUT_SECONDS: ClassVar[int] = 30
    BROWSER_OPERATION_TIMEOUT_SECONDS: ClassVar[int] = 30

    _playwright: Playwright | None = PrivateAttr(default=None)

    async def start(self) -> None:
        """Initialize the playwright instance"""
        if self._playwright is None:
            self._playwright = await async_playwright().start()

    async def stop(self) -> None:
        """Stop the playwright instance"""
        if self._playwright is not None:
            await self._playwright.stop()
            self._playwright = None

    def is_started(self) -> bool:
        return self._playwright is not None

    @property
    def playwright(self) -> Playwright:
        if self._playwright is None:
            raise BrowserPoolNotStartedError()
        return self._playwright

    def set_playwright(self, playwright: Playwright) -> None:
        self._playwright = playwright

    async def connect_cdp_browser(self, resource_options: BrowserResourceOptions) -> PlaywrightBrowser:
        if resource_options.cdp_url is None:
            raise ValueError("CDP URL is required to connect to a browser over CDP")
        match resource_options.browser_type:
            case BrowserType.CHROMIUM:
                return await self.playwright.chromium.connect_over_cdp(resource_options.cdp_url)
            case BrowserType.FIREFOX:
                return await self.playwright.firefox.connect(resource_options.cdp_url)

    @abstractmethod
    async def get_browser_resource(self, resource_options: BrowserResourceOptions) -> BrowserResource:
        pass

    @abstractmethod
    async def release_browser_resource(self, resource: BrowserResource) -> None:
        pass


class BrowserResourceHandler(PlaywrightResourceHandler):
    config: BrowserResourceHandlerConfig = Field(default_factory=BrowserResourceHandlerConfig)
    browser: PlaywrightBrowser | None = None

    async def create_playwright_browser(self, resource_options: BrowserResourceOptions) -> PlaywrightBrowser:
        """Get an existing browser or create a new one if needed"""
        if resource_options.cdp_url is not None:
            return await self.connect_cdp_browser(resource_options)

        if self.config.verbose:
            if resource_options.debug:
                logger.info(f"[Browser Settings] Launching browser in debug mode on port {resource_options.debug_port}")
            if resource_options.cdp_url is not None:
                logger.info(f"[Browser Settings] Connecting to browser over CDP at {resource_options.cdp_url}")
            if resource_options.proxy is not None:
                logger.info(f"[Browser Settings] Using proxy {resource_options.proxy.server}")
            if resource_options.browser_type != BrowserType.CHROMIUM:
                logger.info(
                    f"[Browser Settings] Using {resource_options.browser_type} browser. Note that CDP may not be supported for this browser."
                )

        match resource_options.browser_type:
            case BrowserType.CHROMIUM:
                browser_args = self.config.get_chromium_args(
                    chrome_args=resource_options.chrome_args, cdp_port=resource_options.debug_port
                )

                if resource_options.headless and resource_options.user_agent is None:
                    logger.warning(
                        "Launching browser in headless without providing a user-agent"
                        + ", for better odds at evading bot detection, set a user-agent or run in headful mode"
                    )

                browser = await self.playwright.chromium.launch(
                    headless=resource_options.headless,
                    proxy=resource_options.proxy.to_playwright() if resource_options.proxy is not None else None,
                    timeout=self.BROWSER_CREATION_TIMEOUT_SECONDS * 1000,
                    args=browser_args,
                )
            case BrowserType.FIREFOX:
                browser = await self.playwright.firefox.launch(
                    headless=resource_options.headless,
                    proxy=resource_options.proxy.to_playwright() if resource_options.proxy is not None else None,
                    timeout=self.BROWSER_CREATION_TIMEOUT_SECONDS * 1000,
                )
        self.browser = browser
        return browser

    async def close_playwright_browser(self, browser: PlaywrightBrowser | None = None) -> bool:
        _browser = browser or self.browser
        if _browser is None:
            raise BrowserNotStartedError()
        try:
            async with asyncio.timeout(self.BROWSER_OPERATION_TIMEOUT_SECONDS):
                await _browser.close()
                return True
        except Exception as e:
            logger.error(f"Failed to close window: {e}")
        self.browser = None
        return False

    @override
    async def get_browser_resource(self, resource_options: BrowserResourceOptions) -> BrowserResource:
        if self.browser is None:
            self.browser = await self.create_playwright_browser(resource_options)
        async with asyncio.timeout(self.BROWSER_OPERATION_TIMEOUT_SECONDS):
            context = await self.browser.new_context(
                no_viewport=False,
                viewport={
                    "width": self.config.viewport_width,
                    "height": self.config.viewport_height,
                },
                permissions=[
                    "clipboard-read",
                    "clipboard-write",
                ],  # Needed for clipboard copy/paste to respect tabs / new lines
                proxy=resource_options.proxy.to_playwright() if resource_options.proxy is not None else None,
                user_agent=resource_options.user_agent,
            )
            if resource_options.cookies is not None:
                if self.config.verbose:
                    logger.info("Adding cookies to browser...")
                for cookie in resource_options.cookies:
                    await context.add_cookies([cookie.model_dump()])  # type: ignore

            if len(context.pages) == 0:
                page = await context.new_page()
            else:
                page = context.pages[-1]
            return BrowserResource(
                page=page,
                resource_options=resource_options,
            )

    @override
    async def release_browser_resource(self, resource: BrowserResource) -> None:
        context: BrowserContext = resource.page.context
        await context.close()

================
File: packages/notte-browser/src/notte_browser/vault.py
================
import re

from notte_core.common.credentials.base import CredentialField, PasswordField, RegexCredentialField, VaultCredentials
from notte_core.common.credentials.types import ValueWithPlaceholder
from patchright.async_api import Locator


async def validate_element(locator: Locator, field: CredentialField) -> bool:
    match field:
        case PasswordField():
            attr_type = await locator.get_attribute("type")
            return attr_type == "password"
        case RegexCredentialField(field_regex=field_regex, field_autocomplete=field_autocomplete):
            autocomplete = await locator.get_attribute("autocomplete")
            outer_html = await locator.evaluate("el => el.outerHTML")
            match = re.search(field_regex, outer_html)
            return autocomplete == field_autocomplete or match is not None
        case _:
            return True


async def validate_replace_placeholder_credentials(
    value: str | ValueWithPlaceholder, locator: Locator, creds: VaultCredentials
) -> bool:
    for cred_value in creds.creds:
        if value == cred_value.placeholder_value:
            return await validate_element(locator, cred_value)
    return False

================
File: packages/notte-browser/src/notte_browser/window.py
================
import time
from typing import Any, Callable, ClassVar, Self

import httpx
from loguru import logger
from notte_core.browser.dom_tree import A11yNode, A11yTree, DomNode
from notte_core.browser.snapshot import (
    BrowserSnapshot,
    SnapshotMetadata,
    TabsData,
    ViewportData,
)
from notte_core.common.config import FrozenConfig
from notte_core.errors.processing import SnapshotProcessingError
from notte_core.utils.url import is_valid_url
from notte_sdk.types import BrowserType, Cookie, ProxySettings
from patchright.async_api import CDPSession, Locator, Page
from patchright.async_api import TimeoutError as PlaywrightTimeoutError
from pydantic import BaseModel, Field
from typing_extensions import override

from notte_browser.dom.parsing import ParseDomTreePipe
from notte_browser.errors import (
    BrowserExpiredError,
    BrowserNotStartedError,
    EmptyPageContentError,
    InvalidURLError,
    PageLoadingError,
    RemoteDebuggingNotAvailableError,
    UnexpectedBrowserError,
)
from notte_browser.resource import (
    BrowserResource,
    BrowserResourceHandler,
    BrowserResourceHandlerConfig,
    BrowserResourceOptions,
    PlaywrightResourceHandler,
)


class BrowserWaitConfig(FrozenConfig):
    # need default values for frozen config
    # so copying them from short
    GOTO: ClassVar[int] = 10_000
    GOTO_RETRY: ClassVar[int] = 1_000
    RETRY: ClassVar[int] = 1_000
    STEP: ClassVar[int] = 1_000
    SHORT_WAIT: ClassVar[int] = 500
    ACTION_TIMEOUT: ClassVar[int] = 1_000

    goto: int = GOTO
    goto_retry: int = GOTO_RETRY
    retry: int = RETRY
    step: int = STEP
    short_wait: int = SHORT_WAIT
    action_timeout: int = ACTION_TIMEOUT

    @classmethod
    def short(cls):
        return cls(
            goto=cls.GOTO,
            goto_retry=cls.GOTO_RETRY,
            retry=cls.RETRY,
            step=cls.STEP,
            short_wait=cls.SHORT_WAIT,
            action_timeout=cls.ACTION_TIMEOUT,
        )

    @classmethod
    def long(cls):
        return cls(goto=10_000, goto_retry=1_000, retry=3_000, step=10_000, short_wait=500, action_timeout=5000)


class BrowserWindowConfig(FrozenConfig):
    # browser options
    headless: bool = False
    proxy: ProxySettings | None = None
    user_agent: str | None = None
    cdp_debug: bool = False
    cookies_path: str | None = None
    cdp_url: str | None = None
    browser_type: BrowserType = BrowserType.CHROMIUM
    # remaining options
    handler: BrowserResourceHandlerConfig = BrowserResourceHandlerConfig()
    wait: BrowserWaitConfig = BrowserWaitConfig.long()
    screenshot: bool | None = True
    empty_page_max_retry: int = 5
    chrome_args: list[str] | None = None

    def set_headless(self: Self, value: bool = True) -> Self:
        return self._copy_and_validate(headless=value)

    def set_proxy(self: Self, value: ProxySettings | None) -> Self:
        return self._copy_and_validate(proxy=value)

    def set_user_agent(self: Self, value: str | None) -> Self:
        return self._copy_and_validate(user_agent=value)

    def set_cdp_debug(self: Self, value: bool) -> Self:
        return self._copy_and_validate(cdp_debug=value)

    def set_cdp_url(self: Self, value: str) -> Self:
        return self._copy_and_validate(cdp_url=value)

    def set_web_security(self: Self, value: bool = True) -> Self:
        if value:
            return self._copy_and_validate(handler=self.handler.enable_web_security())
        else:
            return self._copy_and_validate(handler=self.handler.disable_web_security())

    def disable_web_security(self: Self) -> Self:
        return self.set_web_security(False)

    def enable_web_security(self: Self) -> Self:
        return self.set_web_security(True)

    def set_screenshot(self: Self, value: bool | None) -> Self:
        return self._copy_and_validate(screenshot=value)

    def set_empty_page_max_retry(self: Self, value: int) -> Self:
        return self._copy_and_validate(empty_page_max_retry=value)

    def set_wait(self: Self, value: BrowserWaitConfig) -> Self:
        return self._copy_and_validate(wait=value)

    def set_handler(self: Self, value: BrowserResourceHandlerConfig) -> Self:
        return self._copy_and_validate(handler=value)

    @override
    def set_verbose(self: Self) -> Self:
        return self.set_deep_verbose()

    def set_cookies_path(self: Self, value: str | None) -> Self:
        return self._copy_and_validate(cookies_path=value)

    def set_browser_type(self: Self, value: BrowserType) -> Self:
        return self._copy_and_validate(browser_type=value)

    @property
    def resource_options(self) -> BrowserResourceOptions:
        return BrowserResourceOptions(
            headless=self.headless,
            proxy=self.proxy,
            user_agent=self.user_agent,
            debug=self.cdp_debug,
            cdp_url=self.cdp_url,
            cookies=Cookie.from_json(self.cookies_path) if self.cookies_path is not None else None,
            browser_type=self.browser_type,
            chrome_args=self.chrome_args,
        )


class BrowserWindow(BaseModel):
    config: BrowserWindowConfig = Field(default_factory=BrowserWindowConfig)
    handler: PlaywrightResourceHandler | None = None
    resource: BrowserResource | None = None
    internal_handler: bool = False
    vault_replacement_fn: Callable[..., dict[str, str]] | None = None

    @override
    def model_post_init(cls, __context: Any) -> None:
        if cls.handler is None:
            cls.handler = BrowserResourceHandler(config=cls.config.handler)
            cls.internal_handler = True

    @property
    def browser_handler(self) -> PlaywrightResourceHandler:
        if self.handler is None:
            raise BrowserNotStartedError()
        return self.handler

    @property
    def page(self) -> Page:
        if self.resource is None:
            raise BrowserNotStartedError()
        return self.resource.page

    @property
    def port(self) -> int:
        if self.resource is None:
            raise BrowserNotStartedError()
        if self.resource.resource_options.debug_port is None:
            raise RemoteDebuggingNotAvailableError()
        return self.resource.resource_options.debug_port

    async def get_ws_url(self) -> str:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"http://localhost:{self.port}/json/version")
            data = response.json()
            return data["webSocketDebuggerUrl"]

    async def get_cdp_session(self, tab_idx: int | None = None) -> CDPSession:
        cdp_page = self.tabs[tab_idx] if tab_idx is not None else self.page
        return await cdp_page.context.new_cdp_session(cdp_page)

    async def page_id(self, tab_idx: int | None = None) -> str:
        session = await self.get_cdp_session(tab_idx)
        target_id: Any = await session.send("Target.getTargetInfo")  # pyright: ignore[reportUnknownMemberType]
        return target_id["targetInfo"]["targetId"]

    async def ws_page_url(self, tab_idx: int | None = None) -> str:
        page_id = await self.page_id(tab_idx)
        return f"ws://localhost:{self.port}/devtools/page/{page_id}"

    @page.setter
    def page(self, page: Page) -> None:
        if self.resource is None:
            raise BrowserNotStartedError()
        self.resource.page = page

    @property
    def tabs(self) -> list[Page]:
        return self.page.context.pages

    async def start(self) -> None:
        if self.resource is None:
            if self.internal_handler:
                await self.browser_handler.start()
            self.resource = await self.browser_handler.get_browser_resource(self.config.resource_options)
            # Create and track a new context
            self.resource.page.set_default_timeout(self.config.wait.step)

    async def close(self) -> None:
        if self.resource is not None:
            await self.browser_handler.release_browser_resource(self.resource)
            if self.internal_handler:
                await self.browser_handler.stop()
            self.resource = None

    async def long_wait(self) -> None:
        start_time = time.time()
        try:
            await self.page.wait_for_load_state("networkidle", timeout=self.config.wait.goto)
        except PlaywrightTimeoutError:
            if self.config.handler.verbose:
                logger.warning(f"Timeout while waiting for networkidle state for '{self.page.url}'")
        await self.short_wait()
        # await self.page.wait_for_timeout(self._playwright.config.step_timeout)
        if self.config.handler.verbose:
            logger.info(f"Waited for networkidle state for '{self.page.url}' in {time.time() - start_time:.2f}s")

    async def short_wait(self) -> None:
        await self.page.wait_for_timeout(self.config.wait.short_wait)

    async def tab_metadata(self, tab_idx: int | None = None) -> TabsData:
        page = self.tabs[tab_idx] if tab_idx is not None else self.page
        return TabsData(
            tab_id=tab_idx if tab_idx is not None else -1,
            title=await page.title(),
            url=page.url,
        )

    async def snapshot_metadata(self) -> SnapshotMetadata:
        return SnapshotMetadata(
            title=await self.page.title(),
            url=self.page.url,
            viewport=ViewportData(
                scroll_x=int(await self.page.evaluate("window.scrollX")),
                scroll_y=int(await self.page.evaluate("window.scrollY")),
                viewport_width=int(await self.page.evaluate("window.innerWidth")),
                viewport_height=int(await self.page.evaluate("window.innerHeight")),
                total_width=int(await self.page.evaluate("document.documentElement.scrollWidth")),
                total_height=int(await self.page.evaluate("document.documentElement.scrollHeight")),
            ),
            tabs=[await self.tab_metadata(i) for i, _ in enumerate(self.tabs)],
        )

    async def collect_hidden_locators(self) -> list[Locator]:
        hidden_values: set[str]
        if self.vault_replacement_fn is None:
            hidden_values = set()
        else:
            hidden_values = set(self.vault_replacement_fn().keys())

        hidden_locators: list[Locator] = []
        if len(hidden_values) > 0:
            # might be able to evaluate all locators, at once
            # fine for now
            for input_el in await self.page.locator("input").all():
                input_val = await input_el.evaluate("el => el.value")

                if input_val in hidden_values:
                    hidden_locators.append(input_el)
        return hidden_locators

    async def snapshot(self, screenshot: bool | None = None, retries: int | None = None) -> BrowserSnapshot:
        if retries is None:
            retries = self.config.empty_page_max_retry
        if retries <= 0:
            raise EmptyPageContentError(url=self.page.url, nb_retries=self.config.empty_page_max_retry)
        html_content: str = ""
        a11y_simple: A11yNode | None = None
        a11y_raw: A11yNode | None = None
        dom_node: DomNode | None = None
        try:
            html_content = await self.page.content()
            a11y_simple = await self.page.accessibility.snapshot()  # type: ignore[attr-defined]
            a11y_raw = await self.page.accessibility.snapshot(interesting_only=False)  # type: ignore[attr-defined]
            dom_node = await ParseDomTreePipe.forward(self.page)

        except SnapshotProcessingError:
            await self.long_wait()
            return await self.snapshot(screenshot=screenshot, retries=retries - 1)

        except Exception as e:
            if "has been closed" in str(e):
                raise BrowserExpiredError() from e
            if "Unable to retrieve content because the page is navigating and changing the content" in str(e):
                # Should retry after the page is loaded
                await self.short_wait()
            else:
                raise UnexpectedBrowserError(url=self.page.url) from e

        a11y_tree = None
        if a11y_simple is None or a11y_raw is None or len(a11y_simple.get("children", [])) == 0:
            logger.warning("A11y tree is empty, this might cause unforeseen issues")

        else:
            a11y_tree = A11yTree(
                simple=a11y_simple,
                raw=a11y_raw,
            )

        if dom_node is None:
            if self.config.handler.verbose:
                logger.warning(f"Empty page content for {self.page.url}. Retry in {self.config.wait.short_wait}ms")
            await self.page.wait_for_timeout(self.config.wait.short_wait)
            return await self.snapshot(screenshot=screenshot, retries=retries - 1)
        take_screenshot = screenshot if screenshot is not None else self.config.screenshot
        try:
            snapshot_screenshot = (
                await self.page.screenshot(mask=await self.collect_hidden_locators()) if take_screenshot else None
            )
        except PlaywrightTimeoutError:
            if self.config.handler.verbose:
                logger.warning(f"Timeout while taking screenshot for {self.page.url}. Retrying...")
            return await self.snapshot(screenshot=screenshot, retries=retries - 1)

        return BrowserSnapshot(
            metadata=await self.snapshot_metadata(),
            html_content=html_content,
            a11y_tree=a11y_tree,
            dom_node=dom_node,
            screenshot=snapshot_screenshot,
        )

    async def goto(
        self,
        url: str | None = None,
    ) -> BrowserSnapshot:
        if url is None or url == self.page.url:
            return await self.snapshot()
        if not is_valid_url(url, check_reachability=False):
            raise InvalidURLError(url=url)
        try:
            _ = await self.page.goto(url, timeout=self.config.wait.goto)
        except PlaywrightTimeoutError:
            await self.long_wait()
        except Exception as e:
            raise PageLoadingError(url=url) from e
        # extra wait to make sure that css animations can start
        # to make extra element visible
        await self.short_wait()
        return await self.snapshot()

================
File: packages/notte-browser/pyproject.toml
================
[project]
name = "notte-browser"
version = "1.3.3"
description = "The web browser for LLMs agents"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
  { include = "notte_browser", from = "src" },
]


requires-python = ">=3.11"
dependencies = [
    "notte_core>=1.3.3",
    "patchright==1.50.0",
    "maincontentextractor",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]

[tool.uv.sources]
maincontentextractor = { git = "https://github.com/HawkClaws/main_content_extractor", rev = "7c3ed7f6ed7f6c10223a3357d43ab741663bc812" }

================
File: packages/notte-browser/README.md
================
# Notte Processing Pipelines

Each pipeline is a set of steps that are used to preprocess either a browser snapshot or a LLM observation.

Each file in this directory is a separate but mandatory in the global workflow.

================
File: packages/notte-core/src/notte_core/actions/base.py
================
from pydantic import BaseModel, Field
from typing_extensions import override

from notte_core.browser.dom_tree import DomNode
from notte_core.common.credentials.types import ValueWithPlaceholder
from notte_core.controller.actions import ActionRole, ActionStatus, BaseAction, BrowserActionId, InteractionAction
from notte_core.controller.actions import BrowserAction as _BrowserAction
from notte_core.errors.actions import InvalidActionError, MoreThanOneParameterActionError


class ActionParameter(BaseModel):
    name: str
    type: str
    default: str | None = None
    values: list[str] = Field(default_factory=list)

    def description(self) -> str:
        base = f"{self.name}: {self.type}"
        if len(self.values) > 0:
            base += f" = [{', '.join(self.values)}]"
        return base


class ActionParameterValue(BaseModel):
    name: str
    value: str | ValueWithPlaceholder


class CachedAction(BaseModel):
    status: ActionStatus
    description: str
    category: str
    code: str | None
    params: list[ActionParameter] = Field(default_factory=list)


# generic action that can be parametrized
class PossibleAction(BaseModel):
    id: str
    description: str
    category: str
    params: list[ActionParameter] = Field(default_factory=list)

    def __post_init__(self) -> None:
        self.check_params()

    @property
    def role(self, raise_error: bool = False) -> ActionRole:
        match self.id[0]:
            case "L":
                return "link"
            case "B":
                return "button"
            case "I":
                return "input"
            case "O":
                return "option"
            case "M":
                return "misc"
            case "F":
                raise NotImplementedError("Image actions are not supported")
            case "S":
                return "special"
            case _:
                if raise_error:
                    raise InvalidActionError(
                        self.id, f"First ID character must be one of {ActionRole} but got {self.id[0]}"
                    )
                return "other"

    def check_params(self) -> None:
        if self.role == "input":
            if len(self.params) != 1:
                raise MoreThanOneParameterActionError(self.id, len(self.params))


class Action(BaseAction, PossibleAction):
    status: ActionStatus = "valid"
    params: list[ActionParameter] = Field(default_factory=list)

    def markdown(self) -> str:
        return self.description

    def embedding_description(self) -> str:
        return self.role + " " + self.description

    @override
    def execution_message(self) -> str:
        # TODO: think about a better message here
        return f"Sucessfully executed: '{self.description}'"


class ExecutableAction(Action, InteractionAction):
    """
    An action that can be executed by the proxy.
    """

    # description is not needed for the proxy
    category: str = "Executable Actions"
    description: str = "Executable action"
    params_values: list[ActionParameterValue] = Field(default_factory=list)
    node: DomNode | None = None

    @staticmethod
    def parse(
        action_id: str,
        params: dict[str, str] | str | None = None,
        enter: bool | None = None,
    ) -> "ExecutableAction":
        if isinstance(params, str):
            params = {"value": params}
        _param_values: list[ActionParameterValue] = []
        _params: list[ActionParameter] = []
        if params is not None:
            _param_values = [
                ActionParameterValue(
                    name=name,
                    value=value,
                )
                for name, value in params.items()
            ]
            _params = [
                ActionParameter(
                    name=name,
                    type=type(value).__name__,
                )
                for name, value in params.items()
            ]
        # TODO: reneble if needed
        # enter = enter if enter is not None else action_id.startswith("I")
        return ExecutableAction(
            id=action_id,
            description="ID only",
            category="",
            status="valid",
            params=_params,
            params_values=_param_values,
            press_enter=enter,
        )


class BrowserAction(Action, _BrowserAction):
    """
    Browser actions are actions that are always available and are not related to the current page.

    GOTO: Go to a specific URL
    SCRAPE: Extract Data page data
    SCREENSHOT: Take a screenshot of the current page
    BACK: Go to the previous page
    FORWARD: Go to the next page
    WAIT: Wait for a specific amount of time (in seconds)
    TERMINATE: Terminate the current session
    OPEN_NEW_TAB: Open a new tab
    PRESS_KEY: Press a specific key
    CLICK_ELEMENT: Click on a specific element
    TYPE_TEXT: Type text into a specific element
    SELECT_OPTION: Select an option from a dropdown
    SCROLL_TO_ELEMENT: Scroll to a specific element
    """

    id: BrowserActionId  # type: ignore[type-assignment]
    description: str = "Special action"
    category: str = "Special Browser Actions"

    @staticmethod
    def is_special(action_id: str) -> bool:
        return action_id in BrowserActionId.__members__.values()

    def __post_init__(self):
        if not BrowserAction.is_special(self.id):
            raise InvalidActionError(self.id, f"Special actions ID must be one of {BrowserActionId} but got {self.id}")

    @staticmethod
    def goto() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.GOTO,
            description="Go to a specific URL",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="url", type="string", default=None),
            ],
        )

    @staticmethod
    def scrape() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.SCRAPE,
            description="Scrape data from the current page",
            category="Special Browser Actions",
        )

    # @staticmethod
    # def screenshot() -> "BrowserAction":
    #     return BrowserAction(
    #         id=BrowserActionId.SCREENSHOT,
    #         description="Take a screenshot of the current page",
    #         category="Special Browser Actions",
    #     )

    @staticmethod
    def go_back() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.GO_BACK,
            description="Go to the previous page",
            category="Special Browser Actions",
        )

    @staticmethod
    def go_forward() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.GO_FORWARD,
            description="Go to the next page",
            category="Special Browser Actions",
        )

    @staticmethod
    def reload() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.RELOAD,
            description="Refresh the current page",
            category="Special Browser Actions",
        )

    @staticmethod
    def wait() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.WAIT,
            description="Wait for a specific amount of time (in ms)",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="time_ms", type="int", default=None),
            ],
        )

    @staticmethod
    def completion() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.COMPLETION,
            description="Terminate the current session",
            category="Special Browser Actions",
        )

    @staticmethod
    def press_key() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.PRESS_KEY,
            description="Press a specific key",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="key", type="string", default=None),
            ],
        )

    @staticmethod
    def scroll_up() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.SCROLL_UP,
            description="Scroll up",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="amount", type="int", default=None),
            ],
        )

    @staticmethod
    def scroll_down() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.SCROLL_DOWN,
            description="Scroll down",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="amount", type="int", default=None),
            ],
        )

    @staticmethod
    def goto_new_tab() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.GOTO_NEW_TAB,
            description="Go to a new tab",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="url", type="string"),
            ],
        )

    @staticmethod
    def switch_tab() -> "BrowserAction":
        return BrowserAction(
            id=BrowserActionId.SWITCH_TAB,
            description="Switch to a specific tab",
            category="Special Browser Actions",
            params=[
                ActionParameter(name="tab_index", type="int"),
            ],
        )

    @staticmethod
    def list() -> list["BrowserAction"]:
        return [
            BrowserAction.goto(),
            BrowserAction.scrape(),
            BrowserAction.go_back(),
            BrowserAction.go_forward(),
            BrowserAction.reload(),
            BrowserAction.wait(),
            BrowserAction.completion(),
            BrowserAction.press_key(),
            BrowserAction.scroll_up(),
            BrowserAction.scroll_down(),
            BrowserAction.goto_new_tab(),
            BrowserAction.switch_tab(),
            # BrowserAction.screenshot(),
        ]

================
File: packages/notte-core/src/notte_core/actions/space.py
================
from collections.abc import Sequence

from loguru import logger
from pydantic import BaseModel, Field
from typing_extensions import override

from notte_core.actions.base import Action, BrowserAction, PossibleAction
from notte_core.controller.actions import AllActionRole, AllActionStatus
from notte_core.controller.space import BaseActionSpace
from notte_core.errors.actions import InvalidActionError
from notte_core.errors.processing import InvalidInternalCheckError


class PossibleActionSpace(BaseModel):
    description: str
    actions: Sequence[PossibleAction]


class ActionSpace(BaseActionSpace):
    raw_actions: Sequence[Action] = Field(description="List of available actions in the current state", exclude=True)

    def __post_init__(self) -> None:
        # filter out special actions
        nb_original_actions = len(self.raw_actions)
        self.raw_actions = [action for action in self.raw_actions if not BrowserAction.is_special(action.id)]
        if len(self.raw_actions) != nb_original_actions:
            logger.warning(
                (
                    "Special actions are not allowed in the action space. "
                    f"Removed {nb_original_actions - len(self.raw_actions)} actions."
                )
            )

        for action in self.raw_actions:
            # check 1: check action id is valid
            if action.role == "other":
                raise InvalidActionError(
                    action.id,
                    f"actions listed in action space should have a valid role (L, B, I), got '{action.id[0]}' .",
                )
            # check 2: actions should have description
            if len(action.description) == 0:
                raise InvalidActionError(action.id, "actions listed in action space should have a description.")

    @override
    def actions(
        self,
        status: AllActionStatus = "valid",
        role: AllActionRole = "all",
        include_browser: bool = False,
    ) -> Sequence[Action]:
        match (status, role):
            case ("all", "all"):
                actions = list(self.raw_actions)
            case ("all", _):
                actions = [action for action in self.raw_actions if action.role == role]
            case (_, "all"):
                actions = [action for action in self.raw_actions if action.status == status]
            case (_, _):
                actions = [action for action in self.raw_actions if action.status == status and action.role == role]

        if include_browser:
            return actions + BrowserAction.list()
        return actions

    @override
    def browser_actions(self) -> Sequence[BrowserAction]:
        return BrowserAction.list()

    @override
    def markdown(self, status: AllActionStatus = "valid", include_browser: bool = True) -> str:
        # Get actions with requested status
        actions_to_format = self.actions(status, include_browser=include_browser)

        # Group actions by category
        grouped_actions: dict[str, list[Action]] = {}
        for action in actions_to_format:
            if len(action.category) == 0:
                # should not happen
                raise InvalidInternalCheckError(
                    check=f"action {action} has no category.",
                    url="unknown url",
                    dev_advice=(
                        "This should technically never happen due to post init checks in `notte.actions.space.py`."
                    ),
                )
            if action.category not in grouped_actions:
                grouped_actions[action.category] = []
            grouped_actions[action.category].append(action)

        # Build markdown output
        output: list[str] = []
        for category, actions in grouped_actions.items():
            if len(output) == 0:
                # no \n at the beginning
                output.append(f"# {category}")
            else:
                output.append(f"\n# {category}")
            # Sort actions by ID lexicographically
            sorted_actions = sorted(actions, key=lambda x: x.id)
            for action in sorted_actions:
                line = f"* {action.id}: {action.description}"
                if len(action.params) > 0:
                    line += f" ({action.params})"
                output.append(line)
        return "\n".join(output)

================
File: packages/notte-core/src/notte_core/browser/dom_tree.py
================
import time
from collections.abc import Sequence
from dataclasses import asdict, dataclass, field
from typing import Callable, ClassVar, Required, TypeAlias, TypeVar

from loguru import logger
from typing_extensions import TypedDict, override

from notte_core.browser.node_type import NodeCategory, NodeRole, NodeType
from notte_core.errors.processing import (
    InvalidInternalCheckError,
    NodeFilteringResultsInEmptyGraph,
)

T = TypeVar("T", bound="DomNode")  # T must be a subclass of DomNode


class A11yNode(TypedDict, total=False):
    # from the a11y tree
    role: Required[str]
    name: Required[str]
    children: list["A11yNode"]
    url: str
    # added by the tree processing
    only_text_roles: bool
    nb_pruned_children: int
    children_roles_count: dict[str, int]
    group_role: str
    group_roles: list[str]
    markdown: str
    # added by the notte processing
    id: str
    path: str  # url:parent-path:role:name
    # stuff for the action listing
    modal: bool
    required: bool
    description: str
    visible: bool
    selected: bool
    checked: bool
    enabled: bool

    is_interactive: bool


@dataclass
class A11yTree:
    raw: A11yNode
    simple: A11yNode


@dataclass(frozen=True)
class NodeSelectors:
    css_selector: str
    xpath_selector: str
    notte_selector: str
    in_iframe: bool
    in_shadow_root: bool
    iframe_parent_css_selectors: list[str]
    playwright_selector: str | None = None

    def selectors(self) -> list[str]:
        selector_list: list[str] = []
        if self.playwright_selector is not None:
            selector_list.append(self.playwright_selector)
        selector_list.append(self.css_selector)
        selector_list.append(self.xpath_selector)
        return selector_list


# Type alias for clarity
AttributeValue: TypeAlias = str | int | bool | None
AttributeValues: TypeAlias = list[AttributeValue]


class DomErrorBuffer:
    """Buffer for DOM attribute errors to avoid spam logging."""

    _buffer: ClassVar[dict[str, AttributeValues]] = {}
    _max_samples_per_key: ClassVar[int] = 5

    @staticmethod
    def add_error(extra_keys: set[str], values: dict[str, AttributeValue]) -> None:
        """
        Add an error to the buffer, consolidating the values.
        Each attribute will store up to _max_samples_per_key unique values.
        """

        for key in extra_keys:
            if key not in DomErrorBuffer._buffer.keys():
                DomErrorBuffer._buffer[key] = []
            str_v = str(values[key])[:50]
            if (
                len(DomErrorBuffer._buffer[key]) < DomErrorBuffer._max_samples_per_key
                and str_v not in DomErrorBuffer._buffer[key]
            ):
                DomErrorBuffer._buffer[key].append(str_v)

    @staticmethod
    def flush() -> None:
        """Flush all buffered error messages in a consolidated format."""
        if len(DomErrorBuffer._buffer) == 0:
            return

        logger.debug(
            f"""
Extra DOM attributes found: {list(DomErrorBuffer._buffer.keys())}.
Sample values:
{DomErrorBuffer._buffer}
These attributes should be added to the DomAttributes class. Fix this ASAP.
"""
        )
        # Clear the buffer
        DomErrorBuffer._buffer.clear()


@dataclass
class DomAttributes:
    # State attributes
    modal: bool | None
    required: bool | None
    visible: bool | None
    selected: bool | None
    checked: bool | None
    enabled: bool | None
    focused: bool | None
    disabled: bool | None
    pressed: bool | None
    type: str | None

    # Value attributes
    value: str | None
    valuemin: str | None
    valuemax: str | None
    description: str | None
    autocomplete: str | None
    haspopup: bool | None
    accesskey: str | None
    autofocus: bool | None
    tabindex: int | None
    multiselectable: bool | None

    # HTML element attributes
    tag_name: str
    class_name: str | None

    # Resource attributes
    href: str | None
    src: str | None
    srcset: str | None
    target: str | None
    ping: str | None
    data_src: str | None
    data_srcset: str | None

    # Text attributes
    placeholder: str | None
    title: str | None
    alt: str | None
    name: str | None
    autocorrect: str | None
    autocapitalize: str | None
    spellcheck: bool | None
    maxlength: int | None

    # Layout attributes
    width: int | None
    height: int | None
    size: int | None
    rows: int | None

    # Internationalization attributes
    lang: str | None
    dir: str | None

    # aria attributes
    action: str | None
    role: str | None
    aria_label: str | None
    aria_labelledby: str | None
    aria_describedby: str | None
    aria_hidden: bool | None
    aria_expanded: bool | None
    aria_controls: str | None
    aria_haspopup: bool | None
    aria_current: str | None
    aria_autocomplete: str | None
    aria_selected: bool | None
    aria_modal: bool | None
    aria_disabled: bool | None
    aria_valuenow: int | None
    aria_live: str | None
    aria_atomic: bool | None
    aria_valuemax: int | None
    aria_valuemin: int | None
    aria_level: int | None
    aria_owns: str | None
    aria_multiselectable: bool | None
    aria_colindex: int | None
    aria_colspan: int | None
    aria_rowindex: int | None
    aria_rowspan: int | None
    aria_description: str | None
    aria_activedescendant: str | None
    hidden: bool | None
    expanded: bool | None

    @staticmethod
    def safe_init(**kwargs: AttributeValue) -> "DomAttributes":
        # compute additional attributes
        if "class" in kwargs:
            kwargs["class_name"] = kwargs["class"]
            del kwargs["class"]

        # replace '-' with '_' in keys
        kwargs = {
            k.replace("-", "_"): v
            for k, v in kwargs.items()
            if (
                not k.startswith("data-")
                and not k.startswith("js")
                and not k.startswith("__")
                and not k.startswith("g-")
            )
        }

        keys = set(DomAttributes.__dataclass_fields__.keys())
        excluded_keys = set(
            [
                "browser_user_highlight_id",
                "class",
                "style",
                "id",
                "data_jsl10n",
                "keyshortcuts",
                "for",
                "rel",
                "ng_non_bindable",
                "c_wiz",
                "ssk",
                "soy_skip",
                "key",
                "method",
                "eid",
                "view",
                "pivot",
            ]
        )

        extra_keys = set(kwargs.keys()).difference(keys).difference(excluded_keys)
        if len(extra_keys) > 0:
            DomErrorBuffer.add_error(extra_keys, kwargs)

        return DomAttributes(**{key: kwargs.get(key, None) for key in keys})  # type: ignore[arg-type]

    def relevant_attrs(
        self,
        include_attributes: frozenset[str] | None = None,
        max_len_per_attribute: int | None = None,
    ) -> dict[str, str | bool | int]:
        disabled_attrs = set(
            [
                "tag_name",
                "class_name",
                "width",
                "height",
                "size",
                "lang",
                "dir",
                "action",
                "role",
                "aria_label",
                "name",
            ]
        ).difference(include_attributes or frozenset())
        dict_attrs = asdict(self)
        attrs: dict[str, str | bool | int] = {}
        for key, value in dict_attrs.items():
            if (
                key not in disabled_attrs
                and (include_attributes is None or key in include_attributes)
                and value is not None
            ):
                if max_len_per_attribute is not None and isinstance(value, str) and len(value) > max_len_per_attribute:
                    value = value[:max_len_per_attribute] + "..."
                attrs[key] = value
        return attrs

    @staticmethod
    def from_a11y_node(node: A11yNode) -> "DomAttributes":
        remaning_keys = set(node.keys()).difference(
            [
                "children",
                "children_roles_count",
                "nb_pruned_children",
                "group_role",
                "group_roles",
                "markdown",
                "id",
                "path",
                "role",
                "name",
                "level",
                "only_text_roles",
                # Add any other irrelevant keys here
                "orientation",
                "eid",
                "method",
            ]
        )
        return DomAttributes.safe_init(**{key: node[key] for key in remaning_keys})  # type: ignore

    @override
    def __repr__(self) -> str:
        # only display relevant attributes
        attrs = self.relevant_attrs()
        return f"{self.__class__.__name__}({attrs})"


@dataclass(frozen=True)
class ComputedDomAttributes:
    in_viewport: bool = False
    is_interactive: bool = False
    is_top_element: bool = False
    is_editable: bool = False
    shadow_root: bool = False
    highlight_index: int | None = None
    selectors: NodeSelectors | None = None

    def set_selectors(self, selectors: NodeSelectors) -> None:
        object.__setattr__(self, "selectors", selectors)


@dataclass(frozen=True)
class DomNode:
    id: str | None
    type: NodeType
    role: NodeRole | str
    text: str
    children: list["DomNode"]
    attributes: DomAttributes | None
    computed_attributes: ComputedDomAttributes
    subtree_ids: list[str] = field(init=False, default_factory=list)
    # parents cannot be set in the constructor because it is a recursive structure
    # we need to set it after the constructor
    parent: "DomNode | None" = None

    @override
    def __repr__(self) -> str:
        # only display relevant attributes
        # recursively display children + indent
        children_repr = "\n".join([f"  {child.__repr__()}" for child in self.children])
        return f"{self.__class__.__name__}(id={self.id}, role={self.get_role_str()}, text={self.text[:40]}...)\n{children_repr}"

    def __post_init__(self) -> None:
        subtree_ids: list[str] = [] if self.id is None else [self.id]
        for child in self.children:
            subtree_ids.extend(child.subtree_ids)
        object.__setattr__(self, "subtree_ids", subtree_ids)
        if isinstance(self.role, str):
            object.__setattr__(self, "role", NodeRole.from_value(self.role))

    def set_parent(self, parent: "DomNode | None") -> None:
        object.__setattr__(self, "parent", parent)

    def inner_text(self, depth: int = 3) -> str:
        if self.attributes is not None and self.attributes.tag_name.lower() == "input":
            return self.text or self.attributes.placeholder or ""

        if self.type == NodeType.TEXT:
            return self.text
        texts: list[str] = []
        for child in self.children:
            # inner text is not allowed to be hidden
            # or not visible
            # or disabled
            child_text = child.inner_text(depth=depth - 1)
            if len(child_text) == 0:
                continue
            elif child.attributes is None:
                texts.append(child_text)
            elif child.attributes.hidden is not None and not child.attributes.hidden:
                continue
            elif child.attributes.visible is not None and not child.attributes.visible:
                continue
            elif child.attributes.enabled is not None and not child.attributes.enabled:
                continue
            else:
                texts.append(child_text)
        return " ".join(texts)

    @staticmethod
    def from_a11y_node(node: A11yNode, notte_selector: str = "") -> "DomNode":
        children = [DomNode.from_a11y_node(child, notte_selector) for child in node.get("children", [])]
        node_id = node.get("id")
        node_role = NodeRole.from_value(node["role"])
        node_type = NodeType.INTERACTION if node_id is not None else NodeType.OTHER
        if not isinstance(node_role, str) and node_role.category().value == NodeCategory.TEXT.value:
            node_type = NodeType.TEXT
        highlight_index: int | None = node.get("highlight_index")
        return DomNode(
            id=node_id,
            type=node_type,
            role=node_role,
            text=node["name"],
            children=children,
            attributes=DomAttributes.from_a11y_node(node),
            computed_attributes=ComputedDomAttributes(
                in_viewport=bool(node.get("in_viewport", False)),
                is_interactive=bool(node.get("is_interactive", False)),
                is_top_element=bool(node.get("is_top_element", False)),
                shadow_root=bool(node.get("shadow_root", False)),
                highlight_index=highlight_index,
                # TODO: fix this and compute selectors directly from the a11y node
                selectors=None,
            ),
        )

    def get_role_str(self) -> str:
        if isinstance(self.role, str):
            return self.role
        return self.role.value

    def get_url(self) -> str | None:
        attr = self.computed_attributes.selectors
        if attr is None or len(attr.notte_selector or "") == 0:
            return None
        return attr.notte_selector.split(":")[0]

    def find(self, id: str) -> "InteractionDomNode | None":
        if self.id == id:
            return self.to_interaction_node()
        for child in self.children:
            found = child.find(id)
            if found:
                return found
        return None

    def is_interaction(self) -> bool:
        if isinstance(self.role, str):
            return False
        if self.id is None:
            return False
        if self.type.value == NodeType.INTERACTION.value:
            return True
        return self.role.category().value in [NodeCategory.INTERACTION.value]

    def is_image(self) -> bool:
        if isinstance(self.role, str):
            return False
        if self.id is None:
            return False
        return self.role.category().value == NodeCategory.IMAGE.value

    def flatten(self, only_interaction: bool = False) -> list["DomNode"]:
        def inner(node: DomNode, acc: list["DomNode"]) -> list["DomNode"]:
            if not only_interaction or node.is_interaction():
                acc.append(node)
            for child in node.children:
                _ = inner(child, acc)
            return acc

        return inner(self, [])

    @staticmethod
    def find_all_matching_subtrees_with_parents(
        node: "DomNode", predicate: Callable[["DomNode"], bool]
    ) -> Sequence["DomNode"]:
        """TODO: same implementation for A11yNode and DomNode"""

        if predicate(node):
            return [node]

        matches: list[DomNode] = []
        for child in node.children:
            matching_subtrees = DomNode.find_all_matching_subtrees_with_parents(child, predicate)
            matches.extend(matching_subtrees)

        return matches

    def prune_non_dialogs_if_present(self) -> Sequence["DomNode"]:
        """TODO: make it work with A11yNode and DomNode"""

        def is_dialog(node: DomNode) -> bool:
            return node.role == NodeRole.DIALOG and node.computed_attributes.in_viewport

        dialogs = DomNode.find_all_matching_subtrees_with_parents(self, is_dialog)

        if len(dialogs) == 0:
            # no dialogs found, return node
            return [self]

        return dialogs

    def interaction_nodes(self) -> Sequence["InteractionDomNode"]:
        inodes = self.flatten(only_interaction=True)
        return [inode.to_interaction_node() for inode in inodes]

    def image_nodes(self) -> list["DomNode"]:
        return [node for node in self.flatten() if node.is_image()]

    def subtree_filter(self, ft: Callable[["DomNode"], bool], verbose: bool = False) -> "DomNode | None":
        def inner(node: DomNode) -> DomNode | None:
            children = node.children
            if not ft(node):
                return None

            filtered_children: list[DomNode] = []
            for child in children:
                filtered_child = inner(child)
                if filtered_child is not None:
                    filtered_children.append(filtered_child)
                    # need copy the parent
            if node.id is None and len(filtered_children) == 0 and node.text.strip() == "":
                return None
            return DomNode(
                id=node.id,
                type=node.type,
                role=node.role,
                text=node.text,
                children=filtered_children,
                attributes=node.attributes,
                computed_attributes=node.computed_attributes,
                parent=node.parent,
            )

        start = time.time()
        snode = inner(self)
        end = time.time()
        if verbose:
            logger.info(f"🔍 Filtering subtree of full graph done in {end - start:.2f} seconds")
        return snode

    def subtree_without(self, roles: set[str]) -> "DomNode":
        def only_roles(node: DomNode) -> bool:
            if isinstance(node.role, str):
                return True
            return node.role.value not in roles

        filtered = self.subtree_filter(only_roles)
        if filtered is None:
            raise NodeFilteringResultsInEmptyGraph(
                url=self.get_url(),
                operation=f"subtree_without(roles={roles})",
            )
        return filtered

    def to_interaction_node(self) -> "InteractionDomNode":
        if self.type.value != NodeType.INTERACTION.value:
            raise InvalidInternalCheckError(
                check=(
                    "DomNode must be an interaction node to be converted to an interaction node. "
                    f"But is: {self.type} with id: {self.id}, role: {self.role}, text: {self.text}"
                ),
                url=self.get_url(),
                dev_advice="This should never happen.",
            )
        return InteractionDomNode(
            id=self.id,
            type=NodeType.INTERACTION,
            role=self.role,
            text=self.inner_text(),
            attributes=self.attributes,
            computed_attributes=self.computed_attributes,
            # children are not allowed in interaction nodes
            children=[],
            parent=self.parent,
        )


class InteractionDomNode(DomNode):
    id: str
    type: NodeType = NodeType.INTERACTION

    def __post_init__(self) -> None:
        if self.id is None:  # type: ignore[type-check]
            raise InvalidInternalCheckError(
                check="InteractionNode must have a valid non-None id",
                url=self.get_url(),
                dev_advice=(
                    "This should technically never happen since the id should always be set "
                    "when creating an interaction node."
                ),
            )
        if len(self.children) > 0:
            raise InvalidInternalCheckError(
                check="InteractionNode must have no children",
                url=self.get_url(),
                dev_advice=(
                    "This should technically never happen but you should check the `pruning.py` file "
                    "to diagnose this issue."
                ),
            )
        super().__post_init__()


@dataclass(frozen=True)
class ResolvedLocator:
    role: NodeRole | str
    is_editable: bool
    input_type: str | None
    selector: NodeSelectors

================
File: packages/notte-core/src/notte_core/browser/node_type.py
================
from enum import Enum

from loguru import logger


class NodeType(Enum):
    TEXT = "text"
    INTERACTION = "interaction"
    OTHER = "other"


class NodeCategory(Enum):
    STRUCTURAL = "structural"
    DATA_DISPLAY = "data_display"
    TEXT = "text"
    INTERACTION = "interaction"
    TABLE = "table"
    LIST = "list"
    OTHER = "other"
    CODE = "code"
    TREE = "tree"
    IMAGE = "image"

    def roles(self, add_group_role: bool = False) -> set[str]:
        roles: set[str] = set()
        match self.value:
            case NodeCategory.INTERACTION.value:
                roles = {
                    "button",
                    "link",
                    "combobox",
                    "listbox",
                    "textbox",
                    "checkbox",
                    "searchbox",
                    "radio",
                    "tab",
                    "menuitem",
                    "slider",
                    "switch",
                    "menuitem",
                    "menuitemcheckbox",
                    "menuitemradio",
                    "option",
                }
            case NodeCategory.TEXT.value:
                roles = {
                    "text",
                    "heading",
                    "paragraph",
                    "blockquote",
                    "caption",
                    "contentinfo",
                    "definition",
                    "emphasis",
                    "log",
                    "note",
                    "status",
                    "strong",
                    "subscript",
                    "superscript",
                    "term",
                    "time",
                    "LineBreak",
                    "DescriptionList",
                    "LabelText",
                }
            case NodeCategory.LIST.value:
                roles = {
                    "list",
                    "listitem",
                    "listmarker",
                }
            case NodeCategory.TABLE.value:
                roles = {
                    "table",
                    "row",
                    "column",
                    "cell",
                    "columnheader",
                    "grid",
                    "gridcell",
                    "rowgroup",
                    "rowheader",
                }
            case NodeCategory.OTHER.value:
                roles = {
                    "complementary",
                    "deletion",
                    "insertion",
                    "marquee",
                    "meter",
                    "presentation",
                    "progressbar",
                    "scrollbar",
                    "separator",
                    "spinbutton",
                    "timer",
                    "Iframe",
                }
            case NodeCategory.IMAGE.value:
                roles = {"image", "img", "figure"}
            case NodeCategory.STRUCTURAL.value:
                roles = {
                    "group",
                    "generic",
                    "none",
                    "application",
                    "main",
                    "WebArea",
                }
            case NodeCategory.DATA_DISPLAY.value:
                roles = {
                    "alert",
                    "alertdialog",
                    "article",
                    "banner",
                    "directory",
                    "document",
                    "dialog",
                    "feed",
                    "navigation",
                    "menubar",
                    "radiogroup",
                    "region",
                    "search",
                    "tablist",
                    "tabpanel",
                    "toolbar",
                    "tooltip",
                    "form",
                    "menu",
                    "MenuListPopup",
                }
            case NodeCategory.CODE.value:
                roles = {"code", "math"}
            case NodeCategory.TREE.value:
                roles = {"tree", "treegrid", "treeitem"}
        if add_group_role:
            roles.update(["group", "generic", "none"])
        return roles


class NodeRole(Enum):
    # structural
    APPLICATION = "application"
    GENERIC = "generic"
    GROUP = "group"
    MAIN = "main"
    NONE = "none"
    WEBAREA = "WebArea"

    # Data display
    ALERT = "alert"
    ALERTDIALOG = "alertdialog"
    ARTICLE = "article"
    BANNER = "banner"
    DIRECTORY = "directory"
    DOCUMENT = "document"
    DIALOG = "dialog"
    FEED = "feed"
    NAVIGATION = "navigation"
    MENUBAR = "menubar"
    RADIOGROUP = "radiogroup"
    REGION = "region"
    SEARCH = "search"
    TABLIST = "tablist"
    TABPANEL = "tabpanel"
    TOOLBAR = "toolbar"
    TOOLTIP = "tooltip"
    FORM = "form"
    MENU = "menu"
    MENULISTPOPUP = "MenuListPopup"

    # text
    TEXT = "text"
    LABELTEXT = "LabelText"
    HEADING = "heading"
    PARAGRAPH = "paragraph"
    BLOCKQUOTE = "blockquote"
    CAPTION = "caption"
    CONTENTINFO = "contentinfo"
    DEFINITION = "definition"
    EMPHASIS = "emphasis"
    LOG = "log"
    NOTE = "note"
    STATUS = "status"
    STRONG = "strong"
    SUBSCRIPT = "subscript"
    SUPERSCRIPT = "superscript"
    TERM = "term"
    TIME = "time"
    LINEBREAK = "LineBreak"
    DESCRIPTIONLIST = "DescriptionList"

    # interaction
    BUTTON = "button"
    LINK = "link"
    COMBOBOX = "combobox"
    LISTBOX = "listbox"
    TEXTBOX = "textbox"
    CHECKBOX = "checkbox"
    SEARCHBOX = "searchbox"
    RADIO = "radio"
    TAB = "tab"
    MENUITEM = "menuitem"
    MENUITEMCHECKBOX = "menuitemcheckbox"
    MENUITEMRADIO = "menuitemradio"
    SLIDER = "slider"
    SWITCH = "switch"
    OPTION = "option"

    # table
    TABLE = "table"
    ROW = "row"
    COLUMN = "column"
    CELL = "cell"
    COLUMNHEADER = "columnheader"
    GRID = "grid"
    GRIDCELL = "gridcell"
    ROWGROUP = "rowgroup"
    ROWHEADER = "rowheader"

    # list
    LIST = "list"
    LISTITEM = "listitem"
    LISTMARKER = "listmarker"

    # CODE
    CODE = "code"
    MATH = "math"

    # IMAGE
    FIGURE = "figure"
    IMG = "img"
    IMAGE = "image"

    # OTHER
    IFRAME = "Iframe"
    COMPLEMENTARY = "complementary"
    DELETION = "deletion"
    INSERTION = "insertion"
    MARQUEE = "marquee"
    METER = "meter"
    PRESENTATION = "presentation"
    PROGRESSBAR = "progressbar"
    SCROLLBAR = "scrollbar"
    SEPARATOR = "separator"
    SPINBUTTON = "spinbutton"
    TIMER = "timer"

    # TREE
    TREE = "tree"
    TREEGRID = "treegrid"
    TREEITEM = "treeitem"

    @staticmethod
    def from_value(value: str) -> "NodeRole | str":
        if value.upper() in NodeRole.__members__:
            return NodeRole[value.upper()]
        return value

    def short_id(self, force_id: bool = False) -> str | None:
        match self.value:
            case NodeRole.LINK.value:
                return "L"
            case (
                NodeRole.BUTTON.value
                | NodeRole.TAB.value
                | NodeRole.MENUITEM.value
                | NodeRole.RADIO.value
                | NodeRole.CHECKBOX.value
                | NodeRole.MENUITEMCHECKBOX.value
                | NodeRole.MENUITEMRADIO.value
                | NodeRole.SWITCH.value
            ):
                return "B"
            case (
                NodeRole.COMBOBOX.value
                | NodeRole.TEXTBOX.value
                | NodeRole.SEARCHBOX.value
                | NodeRole.LISTBOX.value
                | NodeRole.CHECKBOX.value
                | NodeRole.RADIO.value
                | NodeRole.SLIDER.value
            ):
                return "I"
            case NodeRole.IMAGE.value | NodeRole.IMG.value:
                return "F"
            case NodeRole.OPTION.value:
                return "O"
            case _:
                if force_id:
                    logger.debug(f"No short id for role {self}. Returning 'M' (forced).")
                    return "M"
                return None

    def category(self) -> NodeCategory:
        match self.value:
            case (
                NodeRole.TEXT.value
                | NodeRole.HEADING.value
                | NodeRole.PARAGRAPH.value
                | NodeRole.BLOCKQUOTE.value
                | NodeRole.CAPTION.value
                | NodeRole.CONTENTINFO.value
                | NodeRole.DEFINITION.value
                | NodeRole.EMPHASIS.value
                | NodeRole.LOG.value
                | NodeRole.NOTE.value
                | NodeRole.STATUS.value
                | NodeRole.STRONG.value
                | NodeRole.SUBSCRIPT.value
                | NodeRole.SUPERSCRIPT.value
                | NodeRole.TERM.value
                | NodeRole.TIME.value
                | NodeRole.LINEBREAK.value
                | NodeRole.DESCRIPTIONLIST.value
                | NodeRole.LABELTEXT.value
            ):
                return NodeCategory.TEXT
            case (
                NodeRole.WEBAREA.value
                | NodeRole.GROUP.value
                | NodeRole.GENERIC.value
                | NodeRole.NONE.value
                | NodeRole.APPLICATION.value
                | NodeRole.MAIN.value
            ):
                return NodeCategory.STRUCTURAL
            case (
                NodeRole.ALERT.value
                | NodeRole.ALERTDIALOG.value
                | NodeRole.ARTICLE.value
                | NodeRole.BANNER.value
                | NodeRole.DIRECTORY.value
                | NodeRole.DOCUMENT.value
                | NodeRole.DIALOG.value
                | NodeRole.FEED.value
                | NodeRole.NAVIGATION.value
                | NodeRole.MENUBAR.value
                | NodeRole.RADIOGROUP.value
                | NodeRole.REGION.value
                | NodeRole.SEARCH.value
                | NodeRole.TABLIST.value
                | NodeRole.TABPANEL.value
                | NodeRole.TOOLBAR.value
                | NodeRole.TOOLTIP.value
                | NodeRole.FORM.value
                | NodeRole.MENU.value
                | NodeRole.MENULISTPOPUP.value
            ):
                return NodeCategory.DATA_DISPLAY
            case NodeRole.LIST.value | NodeRole.LISTITEM.value | NodeRole.LISTMARKER.value:
                return NodeCategory.LIST
            case (
                NodeRole.TABLE.value
                | NodeRole.ROW.value
                | NodeRole.COLUMN.value
                | NodeRole.CELL.value
                | NodeRole.COLUMNHEADER.value
                | NodeRole.GRID.value
                | NodeRole.GRIDCELL.value
                | NodeRole.ROWGROUP.value
                | NodeRole.ROWHEADER.value
            ):
                return NodeCategory.TABLE
            case (
                NodeRole.BUTTON.value
                | NodeRole.LINK.value
                | NodeRole.COMBOBOX.value
                | NodeRole.TEXTBOX.value
                | NodeRole.CHECKBOX.value
                | NodeRole.SEARCHBOX.value
                | NodeRole.RADIO.value
                | NodeRole.TAB.value
                | NodeRole.LISTBOX.value
                | NodeRole.MENUITEM.value
                | NodeRole.MENUITEMCHECKBOX.value
                | NodeRole.MENUITEMRADIO.value
                | NodeRole.SLIDER.value
                | NodeRole.SWITCH.value
                | NodeRole.OPTION.value
            ):
                return NodeCategory.INTERACTION
            case NodeRole.CODE.value | NodeRole.MATH.value:
                return NodeCategory.CODE
            case NodeRole.TREE.value | NodeRole.TREEGRID.value | NodeRole.TREEITEM.value:
                return NodeCategory.TREE
            case NodeRole.IMAGE.value | NodeRole.FIGURE.value | NodeRole.IMG.value:
                return NodeCategory.IMAGE
            case _:
                return NodeCategory.OTHER

================
File: packages/notte-core/src/notte_core/browser/observation.py
================
from base64 import b64encode
from typing import Annotated

from PIL import Image
from pydantic import BaseModel, Field

from notte_core.browser.snapshot import BrowserSnapshot, SnapshotMetadata
from notte_core.controller.space import BaseActionSpace
from notte_core.data.space import DataSpace
from notte_core.utils.url import clean_url


class TrajectoryProgress(BaseModel):
    current_step: int
    max_steps: int


class Observation(BaseModel):
    metadata: Annotated[
        SnapshotMetadata, Field(description="Metadata of the current page, i.e url, page title, snapshot timestamp.")
    ]
    screenshot: Annotated[
        bytes | None, Field(description="Base64 encoded screenshot of the current page", repr=False)
    ] = None
    space: BaseActionSpace | None = None
    data: Annotated[DataSpace | None, Field(description="Scraped data from the page")] = None
    progress: Annotated[
        TrajectoryProgress | None, Field(description="Progress of the current trajectory (i.e number of steps)")
    ] = None

    model_config = {  # type: ignore[reportUnknownMemberType]
        "json_encoders": {
            bytes: lambda v: b64encode(v).decode("utf-8") if v else None,
        }
    }

    @property
    def clean_url(self) -> str:
        return clean_url(self.metadata.url)

    def has_space(self) -> bool:
        return self.space is not None

    def has_data(self) -> bool:
        return self.data is not None

    def display_screenshot(self) -> "Image.Image | None":
        from notte_core.utils.image import image_from_bytes

        if self.screenshot is None:
            return None
        return image_from_bytes(self.screenshot)

    @staticmethod
    def from_snapshot(
        snapshot: BrowserSnapshot,
        space: BaseActionSpace | None = None,
        data: DataSpace | None = None,
        progress: TrajectoryProgress | None = None,
    ) -> "Observation":
        return Observation(
            metadata=snapshot.metadata,
            screenshot=snapshot.screenshot,
            space=space,
            data=data,
            progress=progress,
        )

================
File: packages/notte-core/src/notte_core/browser/snapshot.py
================
import datetime as dt
from base64 import b64encode
from collections.abc import Sequence
from dataclasses import field

from loguru import logger
from pydantic import BaseModel, Field

from notte_core.actions.base import Action
from notte_core.browser.dom_tree import A11yTree, DomNode, InteractionDomNode
from notte_core.errors.base import AccessibilityTreeMissingError
from notte_core.utils.url import clean_url


class TabsData(BaseModel):
    tab_id: int
    title: str
    url: str


class ViewportData(BaseModel):
    scroll_x: int
    scroll_y: int
    viewport_width: int
    viewport_height: int
    total_width: int
    total_height: int

    @property
    def pixels_above(self) -> int:
        return self.scroll_y

    @property
    def pixels_below(self) -> int:
        return self.total_height - self.scroll_y - self.viewport_height


class SnapshotMetadata(BaseModel):
    title: str
    url: str
    viewport: ViewportData
    tabs: list[TabsData]
    timestamp: dt.datetime = field(default_factory=dt.datetime.now)


class BrowserSnapshot(BaseModel):
    metadata: SnapshotMetadata
    html_content: str
    a11y_tree: A11yTree | None
    dom_node: DomNode
    screenshot: bytes | None = Field(repr=False)

    model_config = {  # type: ignore[reportUnknownMemberType]
        "json_encoders": {
            bytes: lambda v: b64encode(v).decode("utf-8") if v else None,
        }
    }

    @property
    def clean_url(self) -> str:
        return clean_url(self.metadata.url)

    def compare_with(self, other: "BrowserSnapshot") -> bool:
        if self.a11y_tree is None or other.a11y_tree is None:
            raise AccessibilityTreeMissingError()

        inodes = {node.id for node in self.dom_node.interaction_nodes()}
        new_inodes = {node.id for node in other.dom_node.interaction_nodes()}
        identical = inodes == new_inodes
        if not identical:
            logger.warning(f"Interactive nodes changed: {new_inodes.difference(inodes)}")
        return identical

    def interaction_nodes(self) -> Sequence[InteractionDomNode]:
        return self.dom_node.interaction_nodes()

    def with_dom_node(self, dom_node: DomNode) -> "BrowserSnapshot":
        return BrowserSnapshot(
            metadata=self.metadata,
            html_content=self.html_content,
            a11y_tree=self.a11y_tree,
            dom_node=dom_node,
            screenshot=self.screenshot,
        )

    def subgraph_without(self, actions: Sequence[Action], roles: set[str] | None = None) -> "BrowserSnapshot | None":
        if len(actions) == 0 and roles is not None:
            subgraph = self.dom_node.subtree_without(roles)
            return self.with_dom_node(subgraph)
        id_existing_actions = set([action.id for action in actions])
        failed_actions = {node.id for node in self.interaction_nodes() if node.id not in id_existing_actions}

        def only_failed_actions(node: DomNode) -> bool:
            return len(set(node.subtree_ids).intersection(failed_actions)) > 0

        filtered_graph = self.dom_node.subtree_filter(only_failed_actions)
        if filtered_graph is None:
            return None

        return self.with_dom_node(filtered_graph)

================
File: packages/notte-core/src/notte_core/common/credentials/__init__.py
================
from __future__ import annotations

from typing import Any

from pydantic import SecretStr
from pydantic._internal import (
    _utils,
)
from pydantic.annotated_handlers import GetCoreSchemaHandler, GetJsonSchemaHandler
from pydantic.json_schema import JsonSchemaValue
from pydantic_core import CoreSchema, core_schema
from typing_extensions import override


class ValueWithPlaceholder(SecretStr):
    def __init__(self, secret_value: str, placeholder_value: str):
        super().__init__(secret_value)
        self.placeholder_value: str = placeholder_value

    @staticmethod
    def _serialize_secret_field(
        value: ValueWithPlaceholder, _: core_schema.SerializationInfo
    ) -> str | ValueWithPlaceholder:
        return value._display()

        # would rather differentiate it that way, so we don't lose the info
        # after a single dump, but it just doesnt work correctly for now
        # if info.mode == 'json':
        #     # we want the output to always be string without the `b'` prefix for bytes,
        #     # hence we just use `secret_display`
        #     return value._display()
        # else:
        #     return value

    @override
    def _display(self) -> str:
        return self.placeholder_value if self.get_secret_value() else ""

    @override
    def __eq__(self, other: Any) -> bool:
        return isinstance(other, self.__class__) and self.get_secret_value() == other.get_secret_value()

    @override
    def __hash__(self) -> int:
        return hash(self.get_secret_value())

    @override
    def __str__(self) -> str:
        return str(self._display())

    @override
    def __repr__(self) -> str:
        return f"{self.__class__.__name__}({self._display()!r})"

    @override
    @classmethod
    def __get_pydantic_core_schema__(cls, source: type[Any], handler: GetCoreSchemaHandler) -> core_schema.CoreSchema:
        def get_json_schema(_core_schema: core_schema.CoreSchema, handler: GetJsonSchemaHandler) -> JsonSchemaValue:
            json_schema = handler(cls._inner_schema)
            _utils.update_not_none(
                json_schema,
                type="string",
                writeOnly=True,
                format="password",
            )
            return json_schema

        def get_secret_schema(strict: bool) -> CoreSchema:
            inner_schema = {**cls._inner_schema, "strict": strict}
            json_schema = core_schema.no_info_after_validator_function(
                source,  # construct the type
                inner_schema,  # pyright: ignore[reportArgumentType]
            )
            return core_schema.json_or_python_schema(
                python_schema=core_schema.union_schema(
                    [
                        core_schema.is_instance_schema(source),
                        json_schema,
                    ],
                    custom_error_type=cls._error_kind,
                ),
                json_schema=json_schema,
                serialization=core_schema.plain_serializer_function_ser_schema(
                    ValueWithPlaceholder._serialize_secret_field,
                    info_arg=True,
                    when_used="always",
                ),
            )

        return core_schema.lax_or_strict_schema(
            lax_schema=get_secret_schema(strict=False),
            strict_schema=get_secret_schema(strict=True),
            metadata={"pydantic_js_functions": [get_json_schema]},
        )


def get_str_value(val: str | ValueWithPlaceholder) -> str:
    if isinstance(val, str):
        return val
    return val.get_secret_value()

================
File: packages/notte-core/src/notte_core/common/credentials/base.py
================
from __future__ import annotations

import json
import logging
import re
import uuid
from abc import ABC, abstractmethod
from typing import Any, Callable, ClassVar, Unpack

from patchright.async_api import Locator
from pydantic import BaseModel, Field, field_validator, model_serializer
from pyotp.totp import TOTP
from typing_extensions import TypedDict, override

from notte_core.actions.base import ActionParameterValue, ExecutableAction
from notte_core.browser.snapshot import BrowserSnapshot
from notte_core.common.credentials.types import ValueWithPlaceholder
from notte_core.controller.actions import BaseAction, FillAction
from notte_core.llms.engine import TResponseFormat


class CredentialField(BaseModel, ABC, frozen=True):  # type: ignore[reportUnsafeInheritance]
    value: str
    alias: ClassVar[str]
    singleton: ClassVar[bool] = False
    placeholder_value: ClassVar[str]
    registry: ClassVar[dict[str, type[CredentialField]]] = {}

    def __init_subclass__(cls, **kwargs: dict[Any, Any]):
        super().__init_subclass__(**kwargs)  # type: ignore

        if hasattr(cls, "alias"):
            CredentialField.registry[cls.alias] = cls

    @abstractmethod
    async def validate_element(self, locator: Locator) -> bool:
        raise NotImplementedError

    @staticmethod
    @abstractmethod
    def default_instructions(placeholder: str) -> str:
        raise NotImplementedError

    @classmethod
    def from_dict(cls, dic: dict[str, Any]):
        field_name = dic["field_name"]
        del dic["field_name"]
        return CredentialField.registry[field_name].model_validate(dic)

    @model_serializer
    def to_dict(self):
        dic = self.__dict__
        dic["field_name"] = self.alias
        return dic

    @staticmethod
    def all_placeholders() -> set[str]:
        placeholders: set[str] = set()
        for cred_type in CredentialField.registry.values():
            if hasattr(cred_type, "placeholder_value"):
                placeholders.add(cred_type.placeholder_value)
        return placeholders

    def instructions(self) -> str:
        if self.singleton:
            return self.default_instructions(self.value)
        return self.default_instructions(self.placeholder_value)


class EmailField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "email"
    placeholder_value: ClassVar[str] = "user@example.org"
    field_autocomplete: ClassVar[str] = "username"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in an email, use the value '{placeholder}'"


class PhoneNumberField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "phone_number"
    placeholder_value: ClassVar[str] = "8005550175"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return (
            f"To fill in a phone number, use the value '{placeholder}'. "
            + "Your country code is +1 (from the United States)."
        )


class FirstNameField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "first_name"
    placeholder_value: ClassVar[str] = "Johnny"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in your first name, use the value '{placeholder}'"


class LastNameField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "last_name"
    placeholder_value: ClassVar[str] = "Dough"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in your last name, use the value '{placeholder}'"


class UserNameField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "username"
    placeholder_value: ClassVar[str] = "cooljohnny1567"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in a username , use the value '{placeholder}'"


class MFAField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "mfa_secret"
    placeholder_value: ClassVar[str] = "999779"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in a 2FA code, use the value '{placeholder}'"


class DoBDayField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "day_of_birth"
    placeholder_value: ClassVar[str] = "01"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill the day from your date of birth, use the value '{placeholder}'."


class DoBMonthField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "month_of_birth"
    placeholder_value: ClassVar[str] = "01"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill the month from your date of birth, use the value '{placeholder}'."


class DoBYearField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "year_of_birth"
    placeholder_value: ClassVar[str] = "1990"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        return True

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill the year from your date of birth, use the value '{placeholder}'."


class PasswordField(CredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "password"
    placeholder_value: ClassVar[str] = "mycoolpassword"
    field_autocomplete: ClassVar[str] = "current-password"

    @override
    async def validate_element(self, locator: Locator) -> bool:
        attr_type = await locator.get_attribute("type")
        return attr_type == "password"

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        return f"To fill in a password, use the value '{placeholder}'"


class RegexCredentialField(CredentialField, ABC, frozen=True):
    singleton: ClassVar[bool] = False
    placeholder_value: ClassVar[str]
    field_autocomplete: ClassVar[str]
    field_regex: ClassVar[re.Pattern[str]]
    instruction_name: ClassVar[str]

    @override
    async def validate_element(self, locator: Locator) -> bool:
        autocomplete = await locator.get_attribute("autocomplete")
        outer_html = await locator.evaluate("el => el.outerHTML")
        match = re.search(self.field_regex, outer_html)
        return autocomplete == self.field_autocomplete or match is not None

    @override
    @staticmethod
    def default_instructions(placeholder: str) -> str:
        try:
            return f"To fill in {placeholder}, use the value '{placeholder}'"
        except AttributeError:
            return ""


class CardHolderField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "card_holder_name"
    placeholder_value: ClassVar[str] = "John Doe"
    field_autocomplete: ClassVar[str] = "cc-name"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(
        r'(cc|card).*-name|(cardholder)(?:name)?|autocomplete="name"', re.IGNORECASE
    )
    instruction_name: ClassVar[str] = "a payment form cardholder name"


class CardNumberField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = False
    alias: ClassVar[str] = "card_number"
    placeholder_value: ClassVar[str] = "4242 4242 4242 4242"
    field_autocomplete: ClassVar[str] = "cc-number"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(r"(cc|card).*-?(num|number|no)|number|card-no", re.IGNORECASE)
    instruction_name: ClassVar[str] = "a payment form card number"


class CardCVVField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "card_cvv"
    placeholder_value: ClassVar[str] = "444"
    field_autocomplete: ClassVar[str] = "cc-csc"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(
        r"(cc|card|security|verification).*-(code|cvv|cvc|csc)|cvv|cvc|csc",
        re.IGNORECASE,
    )
    instruction_name: ClassVar[str] = "a payment form card CVV"


class CardFullExpirationField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "card_full_expiration"
    placeholder_value: ClassVar[str] = "04/25"
    field_autocomplete: ClassVar[str] = "cc-exp"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(
        r"(cc|card).*-(exp|expiry|mm-yy|mm-yyyy)|expiration-date",
        re.IGNORECASE,
    )
    instruction_name: ClassVar[str] = "a payment form expiration date with month and year"


class CardMonthExpirationField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "card_month_expiration"
    placeholder_value: ClassVar[str] = "05"
    field_autocomplete: ClassVar[str] = "cc-exp-month"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(
        r'(cc-exp|card-exp|card-expiration|card-expire|expire|expiry).*-(month|mm|mo)|label="mm"',
        re.IGNORECASE,
    )
    instruction_name: ClassVar[str] = "a payment form expiration month (no year)"


class CardYearExpirationField(RegexCredentialField, frozen=True):
    singleton: ClassVar[bool] = True
    alias: ClassVar[str] = "card_year_expiration"
    placeholder_value: ClassVar[str] = "25"
    field_autocomplete: ClassVar[str] = "cc-exp-year"
    field_regex: ClassVar[re.Pattern[str]] = re.compile(
        r'(cc-exp|card-exp|card-expiration|card-expire|expire|expiry).*-(year|yr|yy|yyyy)|label="yy"',
        re.IGNORECASE,
    )
    instruction_name: ClassVar[str] = "a payment form expiration year (no month)"


class VaultCredentials(BaseModel):
    @staticmethod
    def generate_id() -> str:
        return str(uuid.uuid4())

    url: str
    creds: list[CredentialField]
    id: str = Field(default_factory=generate_id)

    @field_validator("creds", mode="after")
    @classmethod
    def ensure_one_per_type(cls, value: list[CredentialField]) -> list[CredentialField]:
        creds: set[str] = set()
        for cred in value:
            name = cred.__class__.__name__
            if name in creds:
                raise ValueError(f"Can't have two {name} fields for a single domain")
            creds.add(name)

        return value


recursive_data = list["recursive_data"] | dict[str, "recursive_data"] | str | Any


class CredentialsDict(TypedDict, total=False):
    email: str
    phone_number: str
    first_name: str
    last_name: str
    username: str
    mfa_secret: str
    day_of_birth: str
    month_of_birth: str
    year_of_birth: str
    password: str
    card_holder_name: str
    card_number: str
    card_cvv: str
    card_full_expiration: str
    card_month_expiration: str
    card_year_expiration: str


class BaseVault(ABC):
    """Base class for vault implementations that handle credential storage and retrieval."""

    _retrieved_credentials: dict[str, VaultCredentials] = {}

    @abstractmethod
    async def _add_credentials(self, creds: VaultCredentials) -> None:
        """Store credentials for a given URL"""
        pass

    async def add_credentials(self, url: str | None, **kwargs: Unpack[CredentialsDict]) -> None:
        """Store credentials for a given URL"""
        creds: list[CredentialField] = []

        for key, value in kwargs.items():
            cred_class = CredentialField.registry.get(key)

            if cred_class is None:
                raise ValueError(f"Invalid credential type {key}. Valid types are: {CredentialField.registry.keys()}")

            if not isinstance(value, str):
                raise ValueError("Invalid credential type {type(value)}, should be str")

            creds.append(cred_class(value=value))

        if url is None:
            return await self._set_singleton_credentials(creds=creds)
        return await self._add_credentials(VaultCredentials(url=url, creds=creds))

    async def set_singleton_credentials(self, **kwargs: Unpack[CredentialsDict]) -> None:
        return await self.add_credentials(url=None, **kwargs)

    @abstractmethod
    async def _set_singleton_credentials(self, creds: list[CredentialField]) -> None:
        """Set credentials which are shared across all urls, not hidden"""
        pass

    @abstractmethod
    async def remove_credentials(self, url: str) -> None:
        """Remove credentials for a given URL"""
        pass

    @abstractmethod
    async def get_singleton_credentials(self) -> list[CredentialField]:
        """Credentials which are shared across all urls, and aren't hidden"""
        pass

    async def get_credentials(self, url: str) -> VaultCredentials | None:
        credentials = await self._get_credentials_impl(url)

        if credentials is None:
            return credentials

        # replace the one time passwords by their actual value
        updated_creds: list[CredentialField] = []
        for cred in credentials.creds:
            if not isinstance(cred, MFAField):
                updated_creds.append(cred)
            else:
                actual_val = TOTP(cred.value).now()
                updated_creds.append(MFAField(value=actual_val))
        vault_creds = VaultCredentials(url=credentials.url, creds=updated_creds)

        # If credentials are found, track them
        self._retrieved_credentials[url] = vault_creds

        return vault_creds

    @abstractmethod
    async def _get_credentials_impl(self, url: str) -> VaultCredentials | None:
        """
        Abstract method to be implemented by child classes for actual credential retrieval.

        Child classes must implement the actual credential retrieval logic here.
        The base class's get_credentials method will handle tracking.
        """
        pass

    def past_credentials(self) -> dict[str, VaultCredentials]:
        return self._retrieved_credentials.copy()

    @staticmethod
    def patch_structured_completion(arg_index: int, replacement_map_fn: Callable[..., dict[str, str]]):
        def _patch_structured(
            func: Callable[..., TResponseFormat],
        ) -> Callable[..., TResponseFormat]:
            def patcher(*args: tuple[Any], **kwargs: dict[str, Any]):
                arglist = list(args)
                replacement_map = replacement_map_fn()

                original_string = json.dumps(arglist[arg_index], indent=2)
                og_dict = json.loads(original_string)

                arglist[arg_index] = BaseVault.recursive_replace_mapping(og_dict, replacement_map)  # type: ignore

                retval = func(*arglist, **kwargs)

                return retval

            return patcher

        return _patch_structured

    @staticmethod
    def recursive_replace_mapping(data: recursive_data, replacement_map: dict[str, str]) -> recursive_data:
        """
        Recursively replace strings using a mapping dictionary.

        Args:
            data: The input data to process (dict, list, str, or any other type)
            replacement_map: A dictionary mapping strings to their replacements

        Returns:
            The modified data structure with replacements
        """
        if isinstance(data, dict):
            # don't replace in base64
            if "type" in data and data["type"] == "image_url":
                return data  # type: ignore

            # For dictionaries, replace strings in keys and values
            return {
                key: BaseVault.recursive_replace_mapping(value, replacement_map)  # type: ignore
                for key, value in data.items()  # type: ignore
            }
        elif isinstance(data, list):
            # For lists, recursively replace in each element
            return [BaseVault.recursive_replace_mapping(item, replacement_map) for item in data]  # type: ignore
        elif isinstance(data, str):
            # For strings, perform replacements using the mapping
            for old_string, new_string in replacement_map.items():
                data = data.replace(old_string, new_string)

            return data
        else:
            # For other types (int, float, etc.), return as-is
            return data

    @staticmethod
    async def replace_placeholder_credentials(
        value: str | ValueWithPlaceholder, locator: Locator, creds: VaultCredentials
    ) -> ValueWithPlaceholder | str:
        # Handle string case (text_label)
        val: str | ValueWithPlaceholder | None = None
        for cred_value in creds.creds:
            if value == cred_value.placeholder_value:
                validate_element = await cred_value.validate_element(locator)
                if not validate_element:
                    logging.warning(f"Could not validate element: {locator} for {cred_value.__class__}")

                else:
                    if not cred_value.singleton:
                        val = ValueWithPlaceholder(cred_value.value, cred_value.placeholder_value)
                    else:
                        val = cred_value.value

        if val is None:
            logging.warning(f"Could not find any credential that matches with {value}")
            return value

        return val

    @staticmethod
    async def replace_placeholder_credentials_in_param_values(
        param_values: list[ActionParameterValue],
        locator: Locator,
        creds: VaultCredentials,
    ) -> list[ActionParameterValue]:
        """Replace placeholder credentials with actual credentials

        Args:
            url: The URL to get credentials for
            value:list of ActionParameterValue objects

        Returns:
            The value with credentials replaced, maintaining the same type as input
        """

        return [
            ActionParameterValue(
                name=param.name,
                value=await BaseVault.replace_placeholder_credentials(param.value, locator, creds),
            )
            for param in param_values
        ]

    def get_replacement_map(self) -> dict[str, str]:
        """Gets the current map to replace text from previously used credentials
        back to their placeholder value.
        """
        return {
            value.value: value.placeholder_value
            for creds in self.past_credentials().values()
            for value in creds.creds
            if not value.singleton
        }

    def contains_credentials(self, action: BaseAction) -> bool:
        """Check if the action contains credentials"""
        json_action = action.model_dump_json()
        initial = False

        for placeholder_val in CredentialField.all_placeholders():
            initial |= placeholder_val in json_action

        return initial

    async def replace_credentials(self, action: BaseAction, locator: Locator, snapshot: BrowserSnapshot) -> BaseAction:
        """Replace credentials in the action"""
        # Get credentials for current domain
        creds = await self.get_credentials(snapshot.metadata.url)
        if creds is None:
            raise ValueError(f"No credentials found in the Vault for the current domain: {snapshot.metadata.url}")

        # Handle ActionParameterValue list case
        match action:
            case ExecutableAction(params_values=params_values):
                action.params_values = await self.replace_placeholder_credentials_in_param_values(
                    params_values, locator, creds
                )
                return action
            case FillAction(value=value):
                action.value = await self.replace_placeholder_credentials(value, locator, creds)
                return action
            case _:
                return action

    def system_instructions(self) -> str:
        return """CRITICAL: In FillAction, write strictly the information provided, everything has to match exactly."""

    async def instructions(self) -> str:
        """Get the credentials system prompt."""
        website_instructs = """Sign-in & Sign-up instructions:
If you are asked for credentials for signing in or up:"""

        for cred in await self.get_singleton_credentials():
            website_instructs += cred.instructions()
            website_instructs += "\n"

        for cred_type in CredentialField.registry.values():
            if not cred_type.singleton and hasattr(cred_type, "placeholder_value"):
                website_instructs += cred_type.default_instructions(cred_type.placeholder_value)
                website_instructs += "\n"

        return website_instructs

================
File: packages/notte-core/src/notte_core/common/credentials/types.py
================
from __future__ import annotations

from typing import Any

from pydantic import SecretStr
from pydantic._internal import (
    _utils,
)
from pydantic.annotated_handlers import GetCoreSchemaHandler, GetJsonSchemaHandler
from pydantic.json_schema import JsonSchemaValue
from pydantic_core import CoreSchema, core_schema
from typing_extensions import override


class ValueWithPlaceholder(SecretStr):
    def __init__(self, secret_value: str, placeholder_value: str):
        super().__init__(secret_value)
        self.placeholder_value: str = placeholder_value

    @staticmethod
    def _serialize_secret_field(
        value: ValueWithPlaceholder, _: core_schema.SerializationInfo
    ) -> str | ValueWithPlaceholder:
        return value._display()

        # would rather differentiate it that way, so we don't lose the info
        # after a single dump, but it just doesnt work correctly for now
        # if info.mode == 'json':
        #     # we want the output to always be string without the `b'` prefix for bytes,
        #     # hence we just use `secret_display`
        #     return value._display()
        # else:
        #     return value

    @override
    def _display(self) -> str:
        return self.placeholder_value if self.get_secret_value() else ""

    @override
    def __eq__(self, other: Any) -> bool:
        return isinstance(other, self.__class__) and self.get_secret_value() == other.get_secret_value()

    @override
    def __hash__(self) -> int:
        return hash(self.get_secret_value())

    @override
    def __str__(self) -> str:
        return str(self._display())

    @override
    def __repr__(self) -> str:
        return f"{self.__class__.__name__}({self._display()!r})"

    @override
    @classmethod
    def __get_pydantic_core_schema__(cls, source: type[Any], handler: GetCoreSchemaHandler) -> core_schema.CoreSchema:
        def get_json_schema(_core_schema: core_schema.CoreSchema, handler: GetJsonSchemaHandler) -> JsonSchemaValue:
            json_schema = handler(cls._inner_schema)
            _utils.update_not_none(
                json_schema,
                type="string",
                writeOnly=True,
                format="password",
            )
            return json_schema

        def get_secret_schema(strict: bool) -> CoreSchema:
            inner_schema = {**cls._inner_schema, "strict": strict}
            json_schema = core_schema.no_info_after_validator_function(
                source,  # construct the type
                inner_schema,  # pyright: ignore[reportArgumentType]
            )
            return core_schema.json_or_python_schema(
                python_schema=core_schema.union_schema(
                    [
                        core_schema.is_instance_schema(source),
                        json_schema,
                    ],
                    custom_error_type=cls._error_kind,
                ),
                json_schema=json_schema,
                serialization=core_schema.plain_serializer_function_ser_schema(
                    ValueWithPlaceholder._serialize_secret_field,
                    info_arg=True,
                    when_used="always",
                ),
            )

        return core_schema.lax_or_strict_schema(
            lax_schema=get_secret_schema(strict=False),
            strict_schema=get_secret_schema(strict=True),
            metadata={"pydantic_js_functions": [get_json_schema]},
        )


def get_str_value(val: str | ValueWithPlaceholder) -> str:
    if isinstance(val, str):
        return val
    return val.get_secret_value()

================
File: packages/notte-core/src/notte_core/common/config.py
================
from typing import Any, Self

from pydantic import BaseModel


class FrozenConfig(BaseModel):
    verbose: bool = False

    class Config:
        frozen: bool = True
        extra: str = "forbid"

    def _copy_and_validate(self: Self, **kwargs: Any) -> Self:
        # kwargs should be validated before being passed to model_copy
        _ = self.model_validate(kwargs)
        config = self.model_copy(deep=True, update=kwargs)
        return config

    def set_verbose(self: Self) -> Self:
        return self._copy_and_validate(verbose=True)

    def set_deep_verbose(self: Self, value: bool = True) -> Self:
        updated_fields: dict[str, Any] = {
            field: config.set_deep_verbose(value=value)
            for field, config in self.__dict__.items()
            if isinstance(config, FrozenConfig)
        }
        if "env" in updated_fields:
            updated_fields["force_env"] = True
        return self._copy_and_validate(**updated_fields, verbose=value)

================
File: packages/notte-core/src/notte_core/common/logging.py
================
import time
from collections.abc import Callable
from typing import Any, TypeVar

from loguru import logger

F = TypeVar("F", bound=Callable[..., Any])


def timeit(name: str) -> Callable[[F], F]:
    def _timeit(func: F) -> F:
        async def wrapper(*args: Any, **kwargs: Any) -> Any:
            start_time = time.time()
            result = await func(*args, **kwargs)
            end_time = time.time()
            logger.debug(f"function {name} took {end_time - start_time:.4f} seconds")
            return result

        return wrapper  # type: ignore

    return _timeit

================
File: packages/notte-core/src/notte_core/common/resource.py
================
from typing import Protocol, Self, runtime_checkable


@runtime_checkable
class AsyncResourceProtocol(Protocol):
    async def start(self) -> None: ...
    async def close(self) -> None: ...


class AsyncResource:
    def __init__(self, resource: AsyncResourceProtocol) -> None:
        self._resource: AsyncResourceProtocol = resource
        self._started: bool = False

    async def start(self) -> None:
        await self._resource.start()
        self._started = True

    async def close(self) -> None:
        if not self._started:
            raise ValueError(f"{self._resource.__class__.__name__} not started")
        await self._resource.close()

    async def reset(self) -> None:
        await self.close()
        await self.start()

    async def __aenter__(self) -> Self:
        await self.start()
        return self

    async def __aexit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: type[BaseException] | None,
    ) -> None:
        await self.close()

================
File: packages/notte-core/src/notte_core/common/telemetry.py
================
import importlib.metadata as metadata
import logging
import os
import platform
import uuid
from functools import wraps
from pathlib import Path
from typing import Any, Callable, TypeVar

import posthog

logger = logging.getLogger("notte.telemetry")

try:
    __version__ = metadata.version("notte")
except Exception:
    __version__ = "unknown"

TELEMETRY_ENABLED: bool = os.environ.get("ANONYMIZED_TELEMETRY", "true").lower() == "true"

TELEMETRY_DIR = Path.home() / ".cache" / "notte"
USER_ID_PATH = TELEMETRY_DIR / "telemetry_user_id"


def get_or_create_installation_id() -> str:
    """Get existing installation ID or create and save a new one."""
    if USER_ID_PATH.exists():
        return USER_ID_PATH.read_text().strip()

    installation_id = str(uuid.uuid4())
    TELEMETRY_DIR.mkdir(parents=True, exist_ok=True)
    _ = USER_ID_PATH.write_text(installation_id)  # Assign to _ to acknowledge unused result
    return installation_id


INSTALLATION_ID: str = get_or_create_installation_id()
POSTHOG_API_KEY: str = "phc_xoTxeXSFaLC4jc3qmWrmnolLtTrcIkzf4m6zME1fvQC"  # pragma: allowlist secret
POSTHOG_HOST: str = "https://us.i.posthog.com"

F = TypeVar("F", bound=Callable[..., Any])

DEBUG_LOGGING = os.environ.get("NOTTE_LOGGING_LEVEL", "info").lower() == "debug"

POSTHOG_EVENT_SETTINGS = {
    "process_person_profile": True,
}


class BaseTelemetryEvent:
    """Base class for telemetry events"""

    name: str  # Add type annotation
    properties: dict[str, Any]  # Add type annotation

    def __init__(self, name: str, properties: dict[str, Any] | None = None):
        self.name = name
        self.properties = properties or {}


def setup_posthog() -> Any | None:
    """Set up the PostHog client if enabled."""
    if not TELEMETRY_ENABLED:
        return None

    try:
        client: Any = posthog.Posthog(
            api_key=POSTHOG_API_KEY,
            host=POSTHOG_HOST,
            disable_geoip=False,
        )

        if not DEBUG_LOGGING:
            posthog_logger = logging.getLogger("posthog")
            posthog_logger.disabled = True

        return client
    except Exception as e:
        logger.debug(f"Failed to initialize PostHog: {e}")
        return None


posthog_client = setup_posthog()


def get_system_info() -> dict[str, Any]:
    """Get anonymous system information."""
    return {
        "os": platform.system(),
        "python_version": platform.python_version(),
        "notte_version": __version__,
    }


def capture_event(event_name: str, properties: dict[str, Any] | None = None) -> None:
    """Capture an event if telemetry is enabled."""
    if not TELEMETRY_ENABLED or posthog_client is None:
        return

    try:
        event_properties = properties or {}
        event_properties.update(get_system_info())
        event_properties.update(POSTHOG_EVENT_SETTINGS)

        if DEBUG_LOGGING:
            logger.debug(f"Telemetry event: {event_name} {event_properties}")

        posthog_client.capture(distinct_id=INSTALLATION_ID, event=event_name, properties=event_properties)
    except Exception as e:
        logger.error(f"Failed to send telemetry event {event_name}: {e}")


def track_usage(method_name: str | None = None) -> Callable[[F], F]:
    """Decorator to track usage of a method."""

    def decorator(func: F) -> F:
        @wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -> Any:
            event_name = method_name if method_name is not None else f"{func.__module__}.{func.__name__}"
            capture_event(f"method.called.{event_name}", {"args": args, "kwargs": kwargs})
            result = func(*args, **kwargs)
            return result

        return wrapper  # type: ignore

    return decorator

================
File: packages/notte-core/src/notte_core/common/tracer.py
================
from __future__ import annotations

import datetime as dt
import json
import uuid
from pathlib import Path
from typing import Any, ClassVar, Generic, Protocol, TypeVar

from litellm import AllMessageValues
from pydantic import BaseModel, Field
from typing_extensions import override


class Tracer(Protocol):
    """Protocol for database clients that handle LLM usage logging."""

    def trace(self, *args: Any, **kwargs: Any) -> None:
        """Log some usage to a local file or external service."""
        pass


ROOT_DIR = Path(__file__).parent.parent.parent.parent / "traces"
ROOT_DIR.mkdir(parents=True, exist_ok=True)


class LlmTracer(Tracer):
    @override
    def trace(
        self,
        timestamp: str,
        model: str,
        messages: list[AllMessageValues],
        completion: str,
        usage: dict[str, int],
        metadata: dict[str, Any] | None = None,
    ) -> None:
        """Log LLM usage to the database."""
        raise NotImplementedError


class LlmUsageDictTracer(LlmTracer):
    class LlmUsage(BaseModel):
        timestamp: str
        model: str
        messages: list[AllMessageValues]
        completion: str
        usage: dict[str, int]
        metadata: dict[str, Any] | None = None

    def __init__(self) -> None:
        self.usage: list[LlmUsageDictTracer.LlmUsage] = []

    @override
    def trace(
        self,
        timestamp: str,
        model: str,
        messages: list[AllMessageValues],
        completion: str,
        usage: dict[str, int],
        metadata: dict[str, Any] | None = None,
    ) -> None:
        """Log LLM usage to a file."""
        self.usage.append(
            LlmUsageDictTracer.LlmUsage(
                timestamp=timestamp,
                model=model,
                messages=messages,
                completion=completion,
                usage=usage,
                metadata=metadata,
            )
        )


class LlmUsageFileTracer(LlmTracer):
    file_path: ClassVar[Path] = ROOT_DIR / "llm_usage.jsonl"

    class LlmUsage(BaseModel):
        timestamp: str
        model: str
        messages: list[AllMessageValues]
        completion: str
        usage: dict[str, int]
        metadata: dict[str, Any] | None = None

    @override
    def trace(
        self,
        timestamp: str,
        model: str,
        messages: list[AllMessageValues],
        completion: str,
        usage: dict[str, int],
        metadata: dict[str, Any] | None = None,
    ) -> None:
        """Log LLM usage to a file."""
        with open(self.file_path, "a") as f:
            json.dump(
                {
                    "timestamp": timestamp,
                    "model": model,
                    "messages": messages,
                    "completion": completion,
                    "usage": usage,
                },
                f,
            )
            _ = f.write("\n")


class LlmParsingErrorFileTracer(Tracer):
    file_path: ClassVar[Path] = ROOT_DIR / "llm_parsing_error.jsonl"

    class LLmParsingError(BaseModel):
        timestamp: str = Field(default_factory=lambda: dt.datetime.now().isoformat())
        status: str
        pipe_name: str
        nb_retries: int
        error_msgs: list[str]

    @override
    def trace(
        self,
        status: str,
        pipe_name: str,
        nb_retries: int,
        error_msgs: list[str],
    ) -> None:
        """Log LLM parsing errors to a file."""
        with open(self.file_path, "a") as f:
            json.dump(
                LlmParsingErrorFileTracer.LLmParsingError(
                    status=status,
                    pipe_name=pipe_name,
                    nb_retries=nb_retries,
                    error_msgs=error_msgs,
                ).model_dump(),
                f,
            )
            _ = f.write("\n")


TStepAgentOutput = TypeVar("TStepAgentOutput", bound=BaseModel)


class AgentStepTracer(Tracer, Generic[TStepAgentOutput]):
    @override
    def trace(
        self,
        task: str,
        result: TStepAgentOutput,
    ) -> None:
        raise NotImplementedError


class AgentStepFileTracer(AgentStepTracer[TStepAgentOutput]):
    default_file_path: ClassVar[Path] = ROOT_DIR / "agent_steps.jsonl"

    class AgentStep(BaseModel, Generic[TStepAgentOutput]):  # type: ignore[type-arg]
        agent_id: str
        task: str
        timestamp: str = Field(default_factory=lambda: dt.datetime.now().isoformat())
        result: TStepAgentOutput

    def __init__(
        self,
        agent_id: str | None = None,
        file_path: Path | None = None,
    ) -> None:
        self.agent_id: str = agent_id or str(uuid.uuid4())
        self.file_path: Path = file_path or self.default_file_path

    @staticmethod
    def load(file_path: Path) -> list[AgentStep[TStepAgentOutput]]:
        with open(file_path, "r") as f:
            return [AgentStepFileTracer.AgentStep.model_validate_json(line) for line in f]

    @override
    def trace(
        self,
        task: str,
        result: TStepAgentOutput,
    ) -> None:
        """Log agent step to a file."""
        step_data = self.AgentStep(agent_id=self.agent_id, task=task, result=result)

        with open(self.file_path, "a") as f:
            json.dump(step_data.model_dump(), f)
            _ = f.write("\n")

================
File: packages/notte-core/src/notte_core/controller/actions.py
================
import json
import re
from abc import ABCMeta, abstractmethod
from enum import StrEnum
from typing import Any, Literal

from pydantic import BaseModel, Field, field_validator
from typing_extensions import override

from notte_core.browser.dom_tree import NodeSelectors
from notte_core.common.credentials.types import ValueWithPlaceholder

# ############################################################
# Action enums
# ############################################################

ActionStatus = Literal["valid", "failed", "excluded"]
AllActionStatus = ActionStatus | Literal["all"]
ActionRole = Literal["link", "button", "input", "special", "image", "option", "misc", "other"]
AllActionRole = ActionRole | Literal["all"]


class BrowserActionId(StrEnum):
    # Base actions
    GOTO = "S1"
    SCRAPE = "S2"
    # Tab actions
    GO_BACK = "S3"
    GO_FORWARD = "S4"
    RELOAD = "S5"
    GOTO_NEW_TAB = "S6"
    SWITCH_TAB = "S7"
    # Press & Scroll actions
    PRESS_KEY = "S8"
    SCROLL_UP = "S9"
    SCROLL_DOWN = "S10"
    # Session actions
    WAIT = "S11"
    COMPLETION = "S12"
    # SCREENSHOT = "S13"


class InteractionActionId(StrEnum):
    CLICK = "A1"
    FILL = "A2"
    CHECK = "A3"
    SELECT = "A4"
    LIST_DROPDOWN_OPTIONS = "A5"


# ############################################################
# Browser actions models
# ############################################################


class BaseAction(BaseModel, metaclass=ABCMeta):
    """Base model for all actions."""

    id: str
    category: str
    description: str

    @classmethod
    def non_agent_fields(cls) -> set[str]:
        fields = {
            # Base action fields
            "id",
            "category",
            "description",
            # Interaction action fields
            "selector",
            "press_enter",
            "option_selector",
            "text_label",
            # executable action fields
            "params",
            "code",
            "status",
            "locator",
        }
        if "selector" in cls.model_fields or "locator" in cls.model_fields:
            fields.remove("id")
        return fields

    @classmethod
    def name(cls) -> str:
        """Convert a CamelCase string to snake_case"""
        pattern = re.compile(r"(?<!^)(?=[A-Z])")
        return pattern.sub("_", cls.__name__).lower().replace("_action", "")

    @abstractmethod
    def execution_message(self) -> str:
        """Return the message to be displayed when the action is executed."""
        return f"🚀 Successfully executed action: {self.description}"

    def dump_dict(self, name: bool = True) -> dict[str, dict[str, Any]]:
        body = self.model_dump(exclude=self.non_agent_fields())
        if name:
            return {self.name(): body}
        return body

    def dump_str(self, name: bool = True) -> str:
        params = json.dumps(self.model_dump(exclude=self.non_agent_fields()))
        if name:
            return "{" + f'"{self.name()}": {params}' + "}"
        return params


class BrowserAction(BaseAction, metaclass=ABCMeta):
    """Base model for special actions that are always available and not related to the current page."""

    id: BrowserActionId  # type: ignore
    category: str = "Special Browser Actions"


class GotoAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.GOTO
    description: str = "Goto to a URL (in current tab)"
    url: str

    # Allow 'id' to be a field name
    model_config = {"extra": "forbid", "protected_namespaces": ()}  # type: ignore[reportUnknownMemberType]

    __pydantic_fields_set__ = {"url"}  # type: ignore[reportUnknownMemberType]

    @override
    def execution_message(self) -> str:
        return f"Navigated to '{self.url}' in current tab"


class GotoNewTabAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.GOTO_NEW_TAB
    description: str = "Goto to a URL (in new tab)"
    url: str

    @override
    def execution_message(self) -> str:
        return f"Navigated to '{self.url}' in new tab"


class SwitchTabAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.SWITCH_TAB
    description: str = "Switch to a tab (identified by its index)"
    tab_index: int

    @override
    def execution_message(self) -> str:
        return f"Switched to tab {self.tab_index}"


class ScrapeAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.SCRAPE
    description: str = (
        "Scrape the current page data in text format. "
        "If `instructions` is null then the whole page will be scraped. "
        "Otherwise, only the data that matches the instructions will be scraped. "
        "Instructions should be given as natural language, e.g. 'Extract the title and the price of the product'"
    )
    instructions: str | None = None

    @override
    def execution_message(self) -> str:
        return "Scraped the current page data in text format"


# class ScreenshotAction(BrowserAction):
#     id: BrowserActionId = BrowserActionId.SCREENSHOT
#     description: str = "Take a screenshot of the current page"


class GoBackAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.GO_BACK
    description: str = "Go back to the previous page (in current tab)"

    @override
    def execution_message(self) -> str:
        return "Navigated back to the previous page"


class GoForwardAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.GO_FORWARD
    description: str = "Go forward to the next page (in current tab)"

    @override
    def execution_message(self) -> str:
        return "Navigated forward to the next page"


class ReloadAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.RELOAD
    description: str = "Reload the current page"

    @override
    def execution_message(self) -> str:
        return "Reloaded the current page"


class WaitAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.WAIT
    description: str = "Wait for a given amount of time (in milliseconds)"
    time_ms: int

    @override
    def execution_message(self) -> str:
        return f"Waited for {self.time_ms} milliseconds"


class PressKeyAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.PRESS_KEY
    description: str = "Press a keyboard key: e.g. 'Enter', 'Backspace', 'Insert', 'Delete', etc."
    key: str

    @override
    def execution_message(self) -> str:
        return f"Pressed the keyboard key: {self.key}"


class ScrollUpAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.SCROLL_UP
    description: str = "Scroll up by a given amount of pixels. Use `null` for scrolling up one page"
    # amount of pixels to scroll. None for scrolling up one page
    amount: int | None = None

    @override
    def execution_message(self) -> str:
        return f"Scrolled up by {str(self.amount) + ' pixels' if self.amount is not None else 'one page'}"


class ScrollDownAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.SCROLL_DOWN
    description: str = "Scroll down by a given amount of pixels. Use `null` for scrolling down one page"
    # amount of pixels to scroll. None for scrolling down one page
    amount: int | None = None

    @override
    def execution_message(self) -> str:
        return f"Scrolled down by {str(self.amount) + ' pixels' if self.amount is not None else 'one page'}"


# ############################################################
# Completion action models
# ############################################################


class CompletionAction(BrowserAction):
    id: BrowserActionId = BrowserActionId.COMPLETION
    description: str = "Complete the task by returning the answer and terminate the browser session"
    success: bool
    answer: str

    @override
    def execution_message(self) -> str:
        return f"Completed the task with success: {self.success} and answer: {self.answer}"


# ############################################################
# Interaction actions models
# ############################################################


class InteractionAction(BaseAction, metaclass=ABCMeta):
    id: str
    selector: NodeSelectors | None = Field(default=None, exclude=True)
    category: str = "Interaction Actions"
    press_enter: bool | None = Field(default=None, exclude=True)
    text_label: str | None = Field(default=None, exclude=True)


class ClickAction(InteractionAction):
    id: str
    description: str = "Click on an element of the current page"

    @override
    def execution_message(self) -> str:
        return f"Clicked on the element with text label: {self.text_label}"


class FallbackObserveAction(BaseAction):
    id: str = ""
    category: str = "Special Browser Actions"
    description: str = "Can't be picked: perform observation"

    @override
    def execution_message(self) -> str:
        return "Performed fallback observation"


class FillAction(InteractionAction):
    id: str
    description: str = "Fill an input field with a value"
    value: str | ValueWithPlaceholder
    clear_before_fill: bool = True

    @field_validator("value", mode="before")
    @classmethod
    def verify_value(cls, value: Any) -> Any:
        """Validator necessary to ignore typing issues with ValueWithPlaceholder"""
        return value

    @override
    def execution_message(self) -> str:
        return f"Filled the input field '{self.text_label}' with the value: '{self.value}'"


class CheckAction(InteractionAction):
    id: str
    description: str = "Check a checkbox. Use `True` to check, `False` to uncheck"
    value: bool

    @override
    def execution_message(self) -> str:
        return f"Checked the checkbox '{self.text_label}'" if self.text_label is not None else "Checked the checkbox"


class ListDropdownOptionsAction(InteractionAction):
    id: str
    description: str = "List all options of a dropdown"

    @override
    def execution_message(self) -> str:
        return (
            f"Listed all options of the dropdown '{self.text_label}'"
            if self.text_label is not None
            else "Listed all options of the dropdown"
        )


class SelectDropdownOptionAction(InteractionAction):
    id: str
    description: str = (
        "Select an option from a dropdown. The `id` field should be set to the select element's id. "
        "Then you can either set the `value` field to the option's text or the `option_id` field to the option's `id`."
    )
    option_id: str | None = None
    value: str | None = None
    option_selector: NodeSelectors | None = Field(exclude=True, default=None)

    @override
    def execution_message(self) -> str:
        return (
            f"Selected the option '{self.value}' from the dropdown '{self.text_label}'"
            if self.text_label is not None
            else "Selected the option from the dropdown"
        )

================
File: packages/notte-core/src/notte_core/controller/proxy.py
================
from notte_core.actions.base import ExecutableAction
from notte_core.common.credentials.types import get_str_value
from notte_core.controller.actions import (
    BrowserAction,
    BrowserActionId,
    CheckAction,
    ClickAction,
    CompletionAction,
    FillAction,
    GoBackAction,
    GoForwardAction,
    GotoAction,
    GotoNewTabAction,
    InteractionAction,
    PressKeyAction,
    ReloadAction,
    ScrapeAction,
    ScrollDownAction,
    ScrollUpAction,
    SelectDropdownOptionAction,
    SwitchTabAction,
    WaitAction,
)
from notte_core.errors.actions import InvalidActionError, MoreThanOneParameterActionError


class NotteActionProxy:
    @staticmethod
    def forward_special(action: ExecutableAction) -> BrowserAction:
        params = action.params_values
        match action.id:
            case BrowserActionId.GOTO.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return GotoAction(url=get_str_value(params[0].value))
            case BrowserActionId.SCRAPE.value:
                return ScrapeAction()
            # case BrowserActionId.SCREENSHOT:
            #     return ScreenshotAction()
            case BrowserActionId.GO_BACK.value:
                return GoBackAction()
            case BrowserActionId.GO_FORWARD.value:
                return GoForwardAction()
            case BrowserActionId.RELOAD.value:
                return ReloadAction()
            case BrowserActionId.COMPLETION.value:
                return CompletionAction(success=bool(params[0].value), answer=get_str_value(params[1].value))
            case BrowserActionId.PRESS_KEY.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return PressKeyAction(key=get_str_value(params[0].value))
            case BrowserActionId.SCROLL_UP.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return ScrollUpAction(amount=int(get_str_value(params[0].value)))
            case BrowserActionId.SCROLL_DOWN.value:
                return ScrollDownAction(amount=int(get_str_value(params[0].value)))
            case BrowserActionId.WAIT.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return WaitAction(time_ms=int(get_str_value(params[0].value)))
            case BrowserActionId.GOTO_NEW_TAB.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return GotoNewTabAction(url=get_str_value(params[0].value))
            case BrowserActionId.SWITCH_TAB.value:
                if len(params) != 1:
                    raise MoreThanOneParameterActionError(action.id, len(params))
                return SwitchTabAction(tab_index=int(get_str_value(params[0].value)))
            case _:
                raise InvalidActionError(
                    action_id=action.id,
                    reason=(
                        f"try executing a special action but '{action.id}' is not a special action. "
                        f"Special actions are {list(BrowserActionId)}"
                    ),
                )

    @staticmethod
    def forward_parameter_action(action: ExecutableAction) -> InteractionAction:
        if action.node is None:
            raise InvalidActionError(
                action.id, reason="action.node cannot be None to be able to execute an interaction action"
            )
        if len(action.params_values) != 1:
            raise MoreThanOneParameterActionError(action.id, len(action.params_values))
        value: str = get_str_value(action.params_values[0].value)
        match (action.role, action.node.get_role_str(), action.node.computed_attributes.is_editable):
            case ("input", "textbox", _) | (_, _, True):
                return FillAction(
                    id=action.id,
                    value=value,
                    press_enter=action.press_enter,
                    selector=action.selector,
                    text_label=action.node.inner_text(),
                )
            case ("input", "checkbox", _):
                return CheckAction(
                    id=action.id,
                    value=bool(value),
                    press_enter=action.press_enter,
                    selector=action.selector,
                    text_label=action.node.text,
                )
            case ("input", "combobox", _):
                return SelectDropdownOptionAction(
                    id=action.id,
                    value=value,
                    press_enter=action.press_enter,
                    selector=action.selector,
                    text_label=action.node.text,
                )
            case ("input", _, _):
                return FillAction(
                    id=action.id,
                    value=value,
                    press_enter=action.press_enter,
                    selector=action.selector,
                    text_label=action.node.inner_text(),
                )
            case _:
                raise InvalidActionError(action.id, f"unknown action type: {action.id[0]}")

    @staticmethod
    def forward(action: ExecutableAction) -> InteractionAction | BrowserAction:
        match action.role:
            case "button" | "link":
                if action.node is None:
                    raise InvalidActionError(
                        action.id, "action.node cannot be None to be able to execute an interaction action"
                    )
                return ClickAction(
                    id=action.id,
                    text_label=action.node.text,
                    selector=action.node.computed_attributes.selectors,
                    press_enter=action.press_enter,
                )
            case "option":
                if action.node is None:
                    raise InvalidActionError(
                        action.id, "action.node cannot be None to be able to execute an interaction action"
                    )
                return SelectDropdownOptionAction(
                    id=action.id,
                    option_id=action.node.id,
                    selector=action.node.computed_attributes.selectors,
                    option_selector=action.node.computed_attributes.selectors,
                    text_label=action.node.text,
                    press_enter=action.press_enter,
                )
            case "input":
                return NotteActionProxy.forward_parameter_action(action)
            case "special":
                return NotteActionProxy.forward_special(action)
            case _:
                raise InvalidActionError(action.id, f"unknown action role: {action.role} with id: {action.id}")

================
File: packages/notte-core/src/notte_core/controller/space.py
================
import json
import random
from abc import ABCMeta, abstractmethod
from collections.abc import Sequence
from enum import StrEnum
from typing import Annotated, Any

from pydantic import BaseModel, Field
from typing_extensions import override

from notte_core.controller.actions import (
    AllActionRole,
    AllActionStatus,
    BaseAction,
    BrowserAction,
)
from notte_core.errors.processing import InvalidInternalCheckError


class SpaceCategory(StrEnum):
    HOMEPAGE = "homepage"
    SEARCH_RESULTS = "search-results"
    DATA_FEED = "data-feed"
    ITEM = "item"
    AUTH = "auth"
    FORM = "form"
    MANAGE_COOKIES = "manage-cookies"
    OVERLAY = "overlay"
    PAYMENT = "payment"
    CAPTCHA = "captcha"
    OTHER = "other"

    def is_data(self) -> bool:
        return self.value in [
            SpaceCategory.DATA_FEED.value,
            SpaceCategory.SEARCH_RESULTS.value,
            SpaceCategory.ITEM.value,
        ]


class BaseActionSpace(BaseModel, metaclass=ABCMeta):
    description: Annotated[str, Field(description="Human-readable description of the current web page")]
    category: Annotated[
        SpaceCategory | None,
        Field(description="Category of the action space (e.g., 'homepage', 'search-results', 'item)"),
    ] = None

    @abstractmethod
    def actions(
        self, status: AllActionStatus = "valid", role: AllActionRole = "all", include_browser: bool = True
    ) -> Sequence[BaseAction]:
        raise NotImplementedError("actions should be implemented by the subclass")

    @abstractmethod
    def browser_actions(self) -> Sequence[BrowserAction]:
        raise NotImplementedError("browser_actions should be implemented by the subclass")

    @abstractmethod
    def markdown(self, status: AllActionStatus = "valid", include_browser: bool = True) -> str:
        pass

    def sample(
        self,
        status: AllActionStatus = "valid",
        role: AllActionRole = "all",
    ) -> BaseAction:
        return random.choice(self.actions(status, role))


class ActionSpace(BaseActionSpace):
    """Union of all possible actions"""

    description: str
    raw_actions: list[BaseAction] = Field(default_factory=list)
    action_map: dict[str, type[BaseAction]] = Field(default_factory=dict)
    exclude_actions: set[type[BaseAction]] = Field(default_factory=set)

    @override
    def model_post_init(self, __snapshot: Any) -> None:
        self.action_map = {
            action_cls.name(): action_cls for action_cls in ActionSpace.action_classes(exclude=self.exclude_actions)
        }
        disabled_actions = [
            "browser",
            "interaction",
            "executable",
            "action",
        ]
        for action in disabled_actions:
            if action in self.action_map:
                del self.action_map[action]

    @staticmethod
    def action_classes(exclude: set[type[BaseAction]] | None = None) -> list[type[BaseAction]]:
        if exclude is None:
            exclude = set()

        def get_all_subclasses(cls: type) -> list[type]:
            return list(
                set(
                    sub
                    for sub in cls.__subclasses__()
                    + [subsub for sub in cls.__subclasses__() for subsub in get_all_subclasses(sub)]
                )
            )

        return [claz for claz in get_all_subclasses(BaseAction) if claz not in exclude]

    @override
    def actions(
        self, status: AllActionStatus = "valid", role: AllActionRole = "all", include_browser: bool = True
    ) -> Sequence[BaseAction]:
        # this dose not work because we need actual paramters to create actions
        # action_cls() for action_cls in self.action_classes()
        actions = self.raw_actions
        if include_browser:
            actions.extend(self.browser_actions())
        return actions

    @override
    def browser_actions(self) -> list[BrowserAction]:
        return []

    @override
    def markdown(self, status: AllActionStatus = "valid", include_browser: bool = True) -> str:
        """Returns a markdown formatted description of all available actions."""
        descriptions: list[str] = []

        for action_name, action_cls in self.action_map.items():
            try:
                # Get schema and safely remove common fields
                skip_keys = action_cls.non_agent_fields().difference(set(["description"]))
                sub_skip_keys = ["title", "$ref"]
                schema = {
                    k: {sub_k: sub_v for sub_k, sub_v in v.items() if sub_k not in sub_skip_keys}
                    for k, v in action_cls.model_json_schema()["properties"].items()
                    if k not in skip_keys
                }
                # schema['id'] = schema['id']['default']
                __description: dict[str, str] = schema.pop("description", "No description available")  # type: ignore[type-arg]
                if "default" not in __description:
                    raise InvalidInternalCheckError(
                        check=f"description should have a default value for {action_cls.__name__}",
                        url="unknown url",
                        dev_advice="This should never happen.",
                    )
                _description: str = __description["default"]
                # Format as: ActionName: {param1: {type: str, description: ...}, ...}
                description = f"""
* "{action_name}" : {_description}. Format:
```json
{json.dumps({action_name: schema})}
```
"""
                descriptions.append(description)
            except Exception as e:
                descriptions.append(f"Error getting schema for {action_cls.__name__}: {str(e)}")

        return "".join(descriptions)

================
File: packages/notte-core/src/notte_core/data/space.py
================
from enum import Enum
from typing import Annotated, Any, Generic, Self, TypeVar

import requests
from pydantic import BaseModel, Field, RootModel, model_serializer, model_validator

from notte_core.errors.processing import InvalidInternalCheckError

TBaseModel = TypeVar("TBaseModel", bound=BaseModel, covariant=True)
DictBaseModel = RootModel[dict[str, Any] | list[dict[str, Any]]]


class NoStructuredData(BaseModel):
    """Placeholder model for when no structured data is present."""

    pass


class ImageCategory(Enum):
    ICON = "icon"
    CONTENT_IMAGE = "content_image"
    DECORATIVE = "decorative"
    SVG_ICON = "svg_icon"
    SVG_CONTENT = "svg_content"


class ImageData(BaseModel):
    id: Annotated[str, Field(description="Unique identifier for the image")]
    url: Annotated[str | None, Field(description="URL of the image")] = None
    category: Annotated[ImageCategory | None, Field(description="Category of the image (icon, svg, content, etc.)")] = (
        None
    )

    def bytes(self) -> bytes:
        if self.url is None:
            raise InvalidInternalCheckError(
                check="image URL is not available. Cannot retrieve image bytes.",
                url=self.url,
                dev_advice=(
                    "Check the `ImageData` construction process in the `DataScraping` pipeline to diagnose this issue."
                ),
            )
        return requests.get(self.url).content


class StructuredData(BaseModel, Generic[TBaseModel]):
    success: Annotated[bool, Field(description="Whether the data was extracted successfully")] = True
    error: Annotated[str | None, Field(description="Error message if the data was not extracted successfully")] = None
    data: Annotated[
        TBaseModel | DictBaseModel | None, Field(description="Structured data extracted from the page in JSON format")
    ] = None

    @model_validator(mode="before")
    def wrap_dict_in_root_model(cls, values: dict[str, Any]) -> dict[str, Any]:
        if isinstance(values, dict) and "data" in values and isinstance(values["data"], (dict, list)):  # type: ignore[arg-type]
            values["data"] = DictBaseModel(values["data"])  # type: ignore[arg-type]
        # if error and is not empty, set success to False
        error = values.get("error")
        if error is not None and len(error.strip()) > 0:
            values["success"] = False
        return values

    @model_validator(mode="after")
    def ensure_data_if_success(self) -> Self:
        if self.success and self.data is None:
            raise ValueError("Scraping was successful but data field is None")
        return self

    @model_validator(mode="after")
    def ensure_no_error_success(self) -> Self:
        if self.success and (self.error is not None and self.error != ""):
            raise ValueError("If error, make sure success is False. If success, make sure error is null.")
        return self

    @model_serializer
    def serialize_model(self):
        result: dict[str, Any] = {
            "success": self.success,
            "error": self.error,
        }
        if isinstance(self.data, RootModel):
            result["data"] = self.data.root  # type: ignore[attr-defined]
        elif isinstance(self.data, BaseModel):
            result["data"] = self.data.model_dump()
        else:
            result["data"] = self.data
        return result


class DataSpace(BaseModel):
    markdown: Annotated[str | None, Field(description="Markdown representation of the extracted data")] = None
    images: Annotated[
        list[ImageData] | None, Field(description="List of images extracted from the page (ID and download link)")
    ] = None
    structured: Annotated[
        StructuredData[BaseModel] | None, Field(description="Structured data extracted from the page in JSON format")
    ] = None

================
File: packages/notte-core/src/notte_core/errors/actions.py
================
from notte_core.errors.base import NotteBaseError


class ActionError(NotteBaseError):
    """Base class for Action related errors."""

    pass


class ActionExecutionError(ActionError):
    def __init__(self, action_id: str, url: str, reason: str | None = None) -> None:
        super().__init__(
            dev_message=f"Failed to execute action: {action_id} on {url}. Reason: {reason or 'unknown'}",
            user_message="Sorry, this action cannot be executed at the moment.",
            agent_message=(
                f"Failed to execute action: {action_id} on {url}. Reason: {reason or 'unknown'}. "
                "Hint: check if the action is valid and try again. Otherwise, try another action."
            ),
            should_retry_later=True,
            should_notify_team=True,
        )


class NotEnoughActionsListedError(ActionError):
    def __init__(self, n_trials: int, n_actions: int, threshold: float) -> None:
        super().__init__(
            dev_message=(
                f"Not enough actions listed after {n_trials} trials"
                f"(termination threshold: {threshold}, for {n_actions} to be listed). "
                "You can retry or reduce `min_nb_actions` or `max_nb_actions`"
            ),
            user_message="Notte failed to list enough actions. This often happens on large web pages.",
            agent_message=(
                "Notte failed to list enough actions. This often happens on large web pages. "
                "You should terminate the current session or try another URL."
            ),
            should_retry_later=True,
            should_notify_team=True,
        )


class InvalidActionError(ActionError):
    def __init__(self, action_id: str, reason: str) -> None:
        super().__init__(
            dev_message=f"Action with id '{action_id}' is invalid: {reason}.",
            user_message=f"Action with id '{action_id}' is invalid. Please provide a valid action and try again.",
            agent_message=(
                f"Action with id '{action_id}' is invalid. Hint: provide a valid action and try again. "
                "Otherwise, try another action."
            ),
        )


class MoreThanOneParameterActionError(InvalidActionError):
    def __init__(self, action_id: str, nb_params: int) -> None:
        super().__init__(
            action_id=action_id,
            reason=f"Input actions currently only support exactly one parameter but got {nb_params}",
        )

================
File: packages/notte-core/src/notte_core/errors/base.py
================
from enum import Enum
from typing import Literal


class ErrorMessageMode(Enum):
    DEVELOPER = "developer"
    USER = "user"
    AGENT = "agent"


ErrorMode = Literal["developer", "user", "agent"]


class ErrorConfig:
    _message_mode: ErrorMessageMode = ErrorMessageMode.DEVELOPER

    @classmethod
    def set_message_mode(cls, mode: ErrorMode) -> None:
        if mode not in [mode.value for mode in ErrorMessageMode]:
            raise ValueError(f"Invalid message mode: {mode}. Valid modes are: {list(ErrorMessageMode)}")
        cls._message_mode = ErrorMessageMode(mode)

    @classmethod
    def get_message_mode(cls) -> ErrorMessageMode:
        return cls._message_mode


class NotteBaseError(ValueError):
    """Base exception class for all package errors."""

    TRY_AGAIN_LATER_MESSAGE: str = " Please try again later."
    NOTTE_TEAM_NOTIFIED_MESSAGE: str = "Our team has been notified of the issue. We will fix it as soon as possible."

    def __init__(
        self,
        dev_message: str,
        user_message: str,
        agent_message: str | None,
        should_retry_later: bool = False,
        should_notify_team: bool = False,
    ) -> None:
        self.dev_message: str = dev_message
        self.user_message: str = user_message
        self.agent_message: str = agent_message or user_message
        self.should_retry_later: bool = should_retry_later
        self.should_notify_team: bool = should_notify_team
        # Use the appropriate message based on the mode

        match ErrorConfig.get_message_mode():
            case ErrorMessageMode.DEVELOPER:
                message = self.dev_message
            case ErrorMessageMode.USER:
                message = self.user_message
                if self.should_notify_team:
                    message += f" {self.NOTTE_TEAM_NOTIFIED_MESSAGE}"
                if self.should_retry_later:
                    message += f" {self.TRY_AGAIN_LATER_MESSAGE}"
            case ErrorMessageMode.AGENT:
                message = self.agent_message

        super().__init__(message)


class NotteTimeoutError(NotteBaseError):
    def __init__(self, message: str) -> None:
        super().__init__(dev_message=message, user_message=message, agent_message=message, should_retry_later=True)


class AccessibilityTreeMissingError(NotteBaseError):
    def __init__(self, message: str = "") -> None:
        error_message = f"Accessibility tree is missing. {message}"
        super().__init__(
            dev_message=error_message, user_message=error_message, agent_message=error_message, should_retry_later=True
        )


class UnexpectedBehaviorError(NotteBaseError):
    def __init__(self, message: str, advice: str) -> None:
        super().__init__(
            dev_message=f"Unexpected behavior: {message}. {advice}",
            user_message="Something unexpected happened.",
            agent_message=(
                "Something unexpected happened. There is likely an issue with this particular action or website."
            ),
            should_notify_team=True,
        )

================
File: packages/notte-core/src/notte_core/errors/llm.py
================
from notte_core.errors.base import NotteBaseError


class LLMnoOutputCompletionError(NotteBaseError):
    def __init__(self) -> None:
        super().__init__(
            dev_message="LLM completion failed. No content in response",
            user_message="Sorry, Notte failed to generate a valid response for your request this time.",
            agent_message="LLM completion failed to return a non-empty response. Hint: simply retry the same action.",
            should_retry_later=True,
        )


class LLMParsingError(NotteBaseError):
    def __init__(self, context: str) -> None:
        super().__init__(
            dev_message=f"Failed to parse LLM response. {context}",
            user_message="Sorry, Notte failed to generate a valid response for your request this time.",
            agent_message="Failed to parse LLM response. Hint: simply retry the same action.",
            should_retry_later=True,
        )


class ContextSizeTooLargeError(NotteBaseError):
    def __init__(self, size: int | None = None, max_size: int | None = None) -> None:
        super().__init__(
            dev_message=(
                f"The web page context size '{size or 'unknown'}' exceeds maximum allowed size of "
                f"'{max_size or 'unknown'}' of LLM provider. Please update processing pipeline to either "
                "reduce the context size for this particular webpage, use a LLM provider with a larger "
                "context size, or enable divide & conquer mode (currently in beta)."
            ),
            user_message=(
                "The web page content is currently too large to be processed by Notte. "
                "Our team is working on supporting this page."
            ),
            agent_message=(
                "The web page content is currently too large to be processed. There is nothing you can do this page is"
                " simply not available. You should terminate the current session or try another URL."
            ),
            should_retry_later=False,
        )


class InvalidPromptTemplateError(NotteBaseError):
    def __init__(self, prompt_id: str, message: str) -> None:
        super().__init__(
            dev_message=(
                f"Invalid prompt template: {prompt_id}. {message}. This should not happen in production environment."
            ),
            user_message="Sorry, Notte failed to generate a valid response for your request this time.",
            should_retry_later=False,
            # should not happen in production environment
            agent_message=None,
        )

================
File: packages/notte-core/src/notte_core/errors/processing.py
================
from notte_core.errors.base import NotteBaseError


class SnapshotProcessingError(NotteBaseError):
    """
    Error raised when there is an issue processing a snapshot.
    All of these issues should, in theory, not occur but, in practice,
    since Notte is still in development, they are likely to happen.

    Most of them should be fixed by updating the preprocessing pipeline.
    """

    def __init__(self, url: str | None, dev_message: str) -> None:
        url_str = f": {url}" if url else ""
        super().__init__(
            dev_message=dev_message,
            user_message=f"Sorry, Notte is not yet able to process this website{url_str}.",
            agent_message="Sorry, this action is not yet supported. Hint: try another action.",
            should_notify_team=True,
        )


class InvalidInternalCheckError(SnapshotProcessingError):
    """
    Multiple internal checks are performed when the snapshot is processed.
    This error is raised when one of the internal checks fails.

    To fix this error, developers should:
    - Undersand with the internal check failed
    - Decide wether the internal check is simply not relevant for the given snapshot
    - Or if custom processing need to be handled by the developer for the given snapshot
    """

    def __init__(self, url: str | None, check: str, dev_advice: str) -> None:
        super().__init__(
            dev_message=f"Internal check '{check}' failed during snapshot processing. Advice to resolve: {dev_advice}",
            url=url,
        )


class InconsistentInteractionsNodesInAxTrees(InvalidInternalCheckError):
    def __init__(self, check: str) -> None:
        super().__init__(
            check=check,
            dev_advice=(
                "There are inconsistencies between interaction nodes in two ax trees, this should not happen. "
                "You should investigate the reason why. You could first try to set `raise_error=False` to "
                "get more low level information. You should also try to print the ax trees to see where the "
                "issue is coming from."
            ),
            url=None,
        )


class NodeFilteringResultsInEmptyGraph(SnapshotProcessingError):
    """
    Error raised when node filtering results in an empty graph.
    """

    def __init__(self, url: str | None, operation: str = "filtering") -> None:
        super().__init__(
            dev_message=(
                f"Operation '{operation}' resulted in an empty graph. Notte always expect a non-empty graph. "
                "Please check the `pruning.py` file or `subtree_without` method for more information."
            ),
            url=url,
        )


class InvalidA11yTreeType(InvalidInternalCheckError):
    def __init__(self, type: str) -> None:
        super().__init__(
            check=f"Unknown a11y tree type {type}. Valid types are: 'processed', 'simple', 'raw'.",
            dev_advice="This should not happen. Someone proably added a new type without updating properly the code.",
            url=None,
        )


class InvalidA11yChildrenError(InvalidInternalCheckError):
    def __init__(self, check: str, nb_children: int) -> None:
        super().__init__(
            check=f"{check}. Note that the number of children is {nb_children}.",
            dev_advice="Some assupmtions are not met. You should check the code to see why this is happening.",
            url=None,
        )

================
File: packages/notte-core/src/notte_core/errors/provider.py
================
from notte_core.errors.base import NotteBaseError


class LLMProviderError(NotteBaseError):
    """Base class for LLM provider related errors."""

    pass


class RateLimitError(LLMProviderError):
    def __init__(self, provider: str) -> None:
        super().__init__(
            dev_message=f"Rate limit exceeded for provider {provider}",
            user_message="Service is temporarily unavailable due to high traffic.",
            should_retry_later=True,
            agent_message="Rate limit exceeded. Cannot proceed with the request. Please wait 30s before retrying.",
        )


class InvalidAPIKeyError(LLMProviderError):
    def __init__(self, provider: str) -> None:
        super().__init__(
            dev_message=f"Invalid API key for {provider}",
            user_message="Authentication failed. Please check your credentials or upgrade your plan.",
            should_retry_later=False,
            agent_message="Invalid API key. Hint: terminate the current session with a failure status immediately.",
        )


class ContextWindowExceededError(LLMProviderError):
    def __init__(self, provider: str, current_size: int | None = None, max_size: int | None = None) -> None:
        size_info = ""
        if current_size is not None and max_size is not None:
            size_info = f" Current size: {current_size}, Maximum size: {max_size}."
        super().__init__(
            dev_message=f"Context window exceeded for provider {provider}.{size_info}",
            user_message="The input is too long for this model to process. Please reduce the length of your input.",
            should_retry_later=False,
            agent_message=(
                "Context window exceeded, there is too much information to process. Go back or try another URL."
            ),
        )


class InsufficentCreditsError(LLMProviderError):
    def __init__(self) -> None:
        super().__init__(
            dev_message="Insufficient credits for LLM provider. Please check your account and top up your credits.",
            user_message="Sorry, Notte failed to generate a valid response for your request this time.",
            should_retry_later=True,
            agent_message=(
                "Insufficient credits. Hint: terminate the current session with a failure status immediately."
            ),
        )


class ModelDoesNotSupportImageError(LLMProviderError):
    def __init__(self, model: str) -> None:
        super().__init__(
            dev_message=(
                f"Model {model} does not support vision / image as input. "
                "Please set `include_screenshot=False` in the `Agent` constructor."
                " or use a model that supports vision (e.g. openai/gpt-4o)"
            ),
            user_message="The model does not support images.",
            agent_message=None,
        )


class MissingAPIKeyForModel(LLMProviderError):
    def __init__(self, model: str) -> None:
        super().__init__(
            dev_message=(
                f"The llm {model} does not have an associated API key"
                "If you think this is wrong, try to set both perception"
                "and reasoning models"
            ),
            user_message="The selected model does not have an associated API key",
            agent_message=None,
        )

================
File: packages/notte-core/src/notte_core/errors/validation.py
================
from pydantic import ValidationError

from notte_core.errors.base import NotteBaseError


class PydanticValidationError(NotteBaseError):
    """Base class for input/parameter validation errors."""

    def __init__(self, param_name: str, details: str) -> None:
        super().__init__(
            dev_message=f"Invalid parameter '{param_name}': {details}",
            user_message=f"Invalid input provided for '{param_name}'",
            should_retry_later=False,
            # agent message not relevant here
            agent_message="Invalid input provided. Please check the input and try again.",
        )


class ModelValidationError(PydanticValidationError):
    """Handles Pydantic model validation errors in a cleaner way."""

    @classmethod
    def from_pydantic_error(cls, error: ValidationError) -> "ModelValidationError":
        # Convert Pydantic's error format into a more readable structure
        errors: list[str] = []
        for err in error.errors():
            field = " -> ".join(str(loc) for loc in err["loc"])
            msg = err["msg"]
            errors.append(f"{field}: {msg}")

        return cls(param_name="model", details="\n".join(errors))

================
File: packages/notte-core/src/notte_core/llms/config/endpoints.csv
================
provider,model,rpm,tpm,rph,tph,rpd,tpd
cerebras,llama-3.3-70b,30,60000,900,1000000,14400,1000000
groq,llama-3.3-70b-versatile,30,6000,,,14400,
deepseek,deepseek-chat,50,40000,,,,
anthropic,claude-3-5-sonnet-20241022,50,40000,,,,
openai,gpt-4o,500,30000,,,,
openai,gpt-4-turbo,500,30000,,,,
gemini,gemini-2.0-flash,15,1000000,,,,
gemini,gemini-2.0-flash-lite,30,1000000,,,,

================
File: packages/notte-core/src/notte_core/llms/prompts/action-listing/anthropic/user.md
================
You are an expert in web accessibility tasked with analyzing a web document and identifying all possible actions on its terminal nodes. Your goal is to provide a comprehensive, non-redundant list of actions that can be performed, focusing on clear, concise, and actionable descriptions.

Here is the document you need to analyze:

<document>
{{{document}}}
</document>

Please follow these steps to complete your task:

1. Examine the provided document carefully.
2. Identify all terminal nodes in the tree.
3. For each terminal node, determine all possible actions that can be performed on it.

4. Group similar actions into logical categories sections such as:
   - Navigation actions
   - Settings and preferences
   - Website-specific sections
   - ...

5. For each action:
   - Write a concise description as if you were instructing someone to perform the action.
   - Keep the node's `ID` to reference it in the final list.
   - Classify it as either important (to be included) or excluded.

6. Some functions might be parametrizable. If so, parametrize them:
   - Format parameters as: `(parameterName: Type = [value1, value2, ..., valueN])`
   - Use types: `string`, `number`, `date`, or `boolean`.
   - List at least 1 possible example value for each parameter.

Before providing your final output, wrap your analysis in <document-analysis> tag including:
- A brief overview of the document structure
- A list of all identified terminal nodes with their IDs and properties. A terminal node has an ID.
- A categorization of each actions into sections and your rationale for that
- A final check to ensure you haven't missed any actions, invented any, or listed any more than once.

After your analysis, provide your final output in three sections:

1. <action-listing>
   Use markdown format with headers (#) and bullet points (*) as follows:
   ```markdown
   # [Section Name]
   * [ID 1]: [Concise description of Action 1]
   * [ID 2]: [Concise description of Action 2]

   # [Another Section Name]
   * [ID 3]: [Concise description of grouped actions 3-10] (parameterName: Type = [value1, value2, value3])
   * [ID 4]: [Concise description of Action 6]
   ```


Here is an example of a final output format on example.com:

<document>
WebArea "Notte.cc" {
  heading "Notte"
  link "Browse Now" L1
  text "© Notte.cc"
  group {
    text "The web browser for LLM agents"
    text "Notte transforms the internet into a space where each website becomes a structured, navigable map for intelligent agents. Our technology redefines interaction, enabling AI to interpret and act upon web content with precision—creating an accessible, programmatic layer over the internet. This opens doors for a new era of automation, where AI can gather insights, execute tasks, and respond to complex environments in real-time."
    group {
      textbox "Enter your email here { human@world.com }" I1
      button "Stay informed?" B1
    }
  }
}
</document>

<document-analysis>
Let me analyze this web document systematically.

# Document Overview:
The document appears to be a landing page for Notte.cc, a web browser designed for LLM agents. It contains a header, marketing copy, and an email signup section.

# Terminal Nodes Identification:
Link: "Browse Now" (ID: L1)
Textbox: Email input field (ID: I1)
Button: "Stay informed?" (ID: B1)

# Actions Categorization:

# Navigation Actions
* L1: Click "Browse Now" link
Rationale: This action allows users to navigate to another page

# Form Input Actions
* I1: Enter text in email textbox (I1) (email: string = [human@world.com])
* B1: Click "Stay informed?" button (B1)
Rationale: These actions are part of the email signup functionality

# Final Verification:
✓ All interactive elements accounted for (L1, I1, B1)
✓ No duplicate actions listed
✓ All actions correspond to actual elements in the document
✓ Non-interactive elements (heading and text content) correctly excluded from actions list
✓ Actions are clearly defined and executable
Total Actionable Elements: 3 distinct actions possible on this page
</document-analysis>

<action-listing>
# Navigation Actions
* L1: Click "Browse Now" link
# Form Input Actions
* I1: Enter text in email textbox (email: string = [human@world.com])
* B1: Click "Stay informed?" button
</action-listing>

Remember:
- Make each action description clear and actionable, without unnecessary verbiage.
- Ensure all parameterized actions follow the specified format.
- Don't invent actions or IDs not present in the document.
- Each action ID should appear only once in the final output.
- Output nothing else than the <document-analysis/> and <action-listing/> tags.
- Each actions and ID should appear in the final output and be unique. (No duplicates)
- Except very rare cases, buttons don't have parameters!

Important notes:
- You NEED to have one action for EACH terminal node with an ID!
- You are NOT allowed to group actions together eg L10-20! They should be separate.
- You need to respect the formatting instructions given above. Specially for parameterized actions.

Be wise and careful as my grandmother life depends on your success.
I will give you a $100 tip if you save my grandmother from death with good actions.

Please proceed with your analysis and list of actions.

================
File: packages/notte-core/src/notte_core/llms/prompts/action-listing/optim/user.md
================
You are an expert in analyzing web documents to create comprehensive documentation of user interactions.

Given a web document, you must provide your output in EXACTLY 3 sections. YOUR OUTPUT MUST CONTAIN EXACTLY 3 SECTIONS, NOTHING MORE:

1. <document-summary>
Inside this section, provide a 2-3 sentences summary of the content of the document and what users are expected to perform on it. Focus on the main content and intent. Avoid navbar and footer elements.
Use descriptive and concise language.

2. <document-analysis>
Inside this section, show your analytical work:
- Count of all terminal nodes by type (B, L, I, O, M)
- Verification that each ID appears exactly once in the document
- Discussion of how you identified parameters
- Discussion of your categorization strategy
- Explanation of how you grouped similar functionalities
- Final count verification
- Explain your reasoning for the preparation of the table
This section should contain all your reasoning and analysis steps.
For each sections above, start with a new line and a new paragraph with #.

3. <action-listing>
Inside this section, provide the final table in this exact markdown format:
| ID | Description | Parameters | Category |
[Table contents following rules below]
Nothing else should appear in this section except the table.

# Rules for creating the table:

1. ID Column:
- Each ID must appear exactly once
- NO GROUPING OF IDs (e.g., "L8-L27" is FORBIDDEN)
- IDs must match exactly as they appear in document (B1, L1, I1, O1, M1, etc.)

2. Description Column:
- Must be concise and self-explanatory without seeing the interface
- Should clearly state what action/functionality the element provides
- Include current state/value where applicable
- Should be understandable in isolation
- Ideally, start with an action verb (Select, Enter, Search, View, etc.)
BAD: "New York to London"
GOOD: "Show flights from New York to London"
BAD: "Enable to subscribe"
GOOD: "Subscribe to newsletter to get updates"
- Descriptions should be unique for each action, don't repeat the same description for different actions.
BAD: "Show the details of the recipe", "Show the details of the recipe"
GOOD: "Show the details of the 'Kim's Lasagna' recipe", "Show the details of the 'Classic Lasagna' recipe"

3. Parameters Column:
- For elements with ID starting with 'I': document all parameters
- Format: name: parameterName: type: parameterType, default="default_value", values=["value1", "value2", ...]
- Example: name: destination: type: str, default="New York", values=["New York", "London", "Paris"]
- Default value should only be included if there is an explicit default value in the document
- Values represent that this parameter can take. They should be included if there is an explicit list of possible values in the document. Let this empty if there is no list of possible values.
- Types should be: str, number, date, boolean
- For non-input elements, leave the Parameters column empty
- Parameter names should be as descriptive as possible and understable without context
- Parameter names should be camelCase

4. Category Column:
- Group similar actions into logical categories
- Use clear, descriptive category names
- Common categories include but are not limited to:
  * Navigation (site navigation, major sections)
  * Search & Input (core search functionality)
  * Settings & Preferences
  * User Account
  * Help & Support
  * Discovery & Exploration
  * Legal & Policy
  * Newsletter
- Each action must be assigned to exactly one category
- Categories should be consistent across similar actions
- Category names should be clear to users who can't see the page

# Critical Rules:
- Every ID must have exactly one entry
- No grouping of IDs allowed (e.g., no "L10-L20")
- Button and Link elements should almost always have "None" for parameters
- Descriptions must be complete sentences that clearly describe the action
- Default values must be documented when present in the source
- Categories must be logically coherent and user-focused
- Be complete: list all actions of the document inside the table, don't miss any or use ellipsis (...)

Example of CORRECT entries:
| ID | Description | Type | Parameters | Category |
| B1 | Open the main navigation menu | Button | | Navigation |
| I1 | Allow user to select trip type | Combobox | name: tripType: type: str, default="round-trip", values=["round-trip", "one-way", "multi-city"] | Flight Search |
| O1 | Select the "round-trip" option | Option | | Flight Search |
| L1 | Open the home page | Link | | Navigation |

Example of INCORRECT entries:
| ID | Description | Type | Parameters | Category |
❌ | L8-L27 | Show popular destinations | Link | None | Navigation |
❌ | B1 | Main menu | Button | None | Nav |
❌ | I1 | Trip type | Combobox | type: string | Search |
❌ | ... | ... | ... | ... |

# Example output:

<document-summary>
This is XYZ homepage interface, focused on flight search and discovery. Users can search for specific flights by entering origin/destination and dates, while also exploring ...
[More description...]
</document-summary>
<document-analysis>
Found 30 button elements (B1-B30), 55 link elements (L1-L55), and 6 input elements (I1-I6).
Verified each ID appears exactly once.
Identified parameters for input elements I1-I6.
Grouped actions into 8 main categories based on functionality...
[Additional analysis...]
</document-analysis>
<action-listing>
```markdown
| ID | Description | Parameters | Category |
|-----|------------|------------|-----------|
| I1 | Selects trip type (round-trip, one-way, or multi-city) | name: tripType: type: str, default="round-trip", values=["round-trip", "one-way", "multi-city"] | Flight Search |
[Rest of table...]
```
</action-listing>

Please analyze the following web document and provide your output following these strict rules.
CRITICAL: DO NOT USE "# Step 1: Document Summary.... # Step 2: Document Analysis.... # Step 3: Action Listing..."
CRITICAL: structure your output as: <document-summary>...</document-summary>, <document-analysis>...</document-analysis> and <action-listing>...</action-listing> tags:

Your turn:

<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/action-listing/simple/user.md
================
Create a flat list of each actions you find in this webpage accessibility tree. For each action, describe it a short natural language description, keep it's identifier, and group them in different categories that make sense. The objective is that someone could read your list and immediately get what actions are possibly executable on that webpage.

{{{context}}}

The format should instead be a sort of markdown like:

# category-section-title
* ID: Short description

This could be something like:

# Cookie Consent Actions
* L1: Reveal cookie settings details (show cookies details link)
* B1: Reject all cookies (deny button)

Your final answer should be inserted into a <action-listing/> tag:

<action-listing>
your-answer-here
</action-listing>

Important notes:
- Output nothing else than the <action-listing/> tag with your answer inside.
- Every single interaction node should be listed in your output (All of them!)
- The actions should be ordered by relevance of category.
- You should avoid any duplicates at all costs.

================
File: packages/notte-core/src/notte_core/llms/prompts/action-listing-incr/user.md
================
You are an expert in analyzing web documents to create comprehensive documentation of user interactions based on previously identified actions. Your goal is to extend the list of actions to cover all possible user interactions, without duplicating any actions.

Given a web document, and list of previously identified actions, you must provide your output in EXACTLY 3 sections. YOUR OUTPUT MUST CONTAIN EXACTLY 3 SECTIONS, NOTHING MORE:


1. <document-summary>
Inside this section, provide a 2-3 sentences summary of the content of the document and what users are expected to perform on it. Focus on the main content and intent. Avoid navbar and footer elements.
Use descriptive and concise language.

2. <document-analysis>
Inside this section, show your analytical work:
- Compare the provided previous action list against the document to identify new or modified actions.
- Count of all terminal nodes by type (B, L, I, O, M) that have not been previously identified
- Verification that each ID appears exactly once in the document
- Discussion of how you identified parameters
- Discussion of your categorization strategy
- Explanation of how you grouped similar functionalities
- Final count verification
- Explain your reasoning for the preparation of the table
This section should contain all your reasoning and analysis steps.
For each sections above, start with a new line and a new paragraph with #.

3. <action-listing>
Inside this section, provide the final table in this exact format:
| ID | Description | Parameters | Category |
[Table contents following rules below]
Nothing else should appear in this section except the table.

# Rules for creating the table:

1. ID Column:
- Each ID must appear exactly once
- NO GROUPING OF IDs (e.g., "L8-L27" is FORBIDDEN)
- IDs must match exactly as they appear in document (B1, L1, I1, O1, M1, etc.)

2. Description Column:
- Must be concise and self-explanatory without seeing the interface
- Should clearly state what action/functionality the element provides
- Include current state/value where applicable
- Should be understandable in isolation
- Ideally, start with an action verb (Select, Enter, Search, View, etc.)
BAD: "New York to London"
GOOD: "Show flights from New York to London"
BAD: "Enable to subscribe"
GOOD: "Subscribe to newsletter to get updates"

3. Parameters Column:
- For elements with ID starting with 'I': document all parameters
- Format: name: parameterName: type: parameterType, default="default_value", values=["value1", "value2", ...]
- Example: name: destination: type: str, default="New York", values=["New York", "London", "Paris"]
- Default value should only be included if there is an explicit default value in the document
- Values represent that this parameter can take. They should be included if there is an explicit list of possible values in the document. Let this empty if there is no list of possible values.
- Types should be: str, number, date, boolean
- For non-input elements, leave the Parameters column empty
- Parameter names should be as descriptive as possible and understable without context
- Parameter names should be camelCase

4. Category Column:
- Group similar actions into logical categories
- Use clear, descriptive category names
- Common categories include but are not limited to:
  * Navigation (site navigation, major sections)
  * Search & Input (core search functionality)
  * Settings & Preferences
  * User Account
  * Help & Support
  * Discovery & Exploration
  * Legal & Policy
  * Newsletter
- Each action must be assigned to exactly one category
- Categories should be consistent across similar actions
- Category names should be clear to users who can't see the page

# Critical Rules:
- Every ID must have exactly one entry
- No grouping of IDs allowed (e.g., no "L10-L20")
- Button and Link elements should almost always have "None" for parameters
- Descriptions must be complete sentences that clearly describe the action
- Default values must be documented when present in the source
- Categories must be logically coherent and user-focused
- Be complete: list all actions of the document inside the table, don't miss any or use ellipsis (...)

Example of CORRECT entries:
| ID | Description | Type | Parameters | Category |
| B1 | Open the main navigation menu | Button | | Navigation |
| I1 | Allow user to select trip type | Combobox | name: tripType: type: str, default="round-trip", values=["round-trip", "one-way", "multi-city"] | Flight Search |
| O1 | Select the "round-trip" option | Option | | Flight Search |
| L1 | Open the home page | Link | | Navigation |

Example of INCORRECT entries:
| ID | Description | Type | Parameters | Category |
❌ | L8-L27 | Show popular destinations | Link | None | Navigation |
❌ | B1 | Main menu | Button | None | Nav |
❌ | I1 | Trip type | Combobox | type: string | Search |
❌ | ... | ... | ... | ... |

# ACTION EXTENSION CRITICAL RULES:
- Remember that your objective is to extend the list of actions to cover all possible user interactions, without duplicating any actions.
- Don't try to change the previous actions too much. Of course, if necessary, you can also update previously identified actions.

# Example output:

<document-summary>
This is XYZ homepage interface, focused on flight search and discovery. Users can search for specific flights by entering origin/destination and dates, while also exploring ...
[More description...]
</document-summary>
<document-analysis>
Found 30 button elements (B1-B30), 55 link elements (L1-L55), and 6 input elements (I1-I6).
Verified each ID appears exactly once.
Identified parameters for input elements I1-I6.
Grouped actions into 8 main categories based on functionality...
[Additional analysis...]
</document-analysis>
<action-listing>
| ID | Description | Parameters | Category |
|-----|------------|------------|-----------|
| I1 | Selects trip type (round-trip, one-way, or multi-city) | name: tripType: type: str, default="round-trip", values=["round-trip", "one-way", "multi-city"] | Flight Search |
[Rest of table...]
</action-listing>

Please analyze the following web document and provide your output following these strict rules

Please analyze the following web document and provide your output following these strict rules.
CRITICAL: DO NOT USE "# Step 1: Document Summary.... # Step 2: Document Analysis.... # Step 3: Action Listing..."
CRITICAL: structure your output as: <document-summary>...</document-summary>, <document-analysis>...</document-analysis> and <action-listing>...</action-listing> tags:

Your turn:


<previous-action-list>
{{{previous_action_list}}}
</previous-action-list>
<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/data-extraction/all_data/user.md
================
You are an expert web content analyzer tasked with extracting and organizing information from web documents.

Your task is to extract text-based content from the provided web document and present it in a structured Markdown format, while preserving all text elements exactly as they appear in the original document.

Given a web document, you must provide your output in EXACTLY 3 sections. YOUR OUTPUT MUST CONTAIN EXACTLY 3 SECTIONS, NOTHING MORE:

1. `<document-category>`:
Your task is to classify this web document into one of the following categories (by priority):
(a). "search-results": Document displaying multiple items as results of a previous search query.
(b). "data-feed": Document displaying data in a grid/sequence (e.g., blog posts, news articles, social media feeds).
(c). "data-item": Information document about a particular item, typically accessed from search results or data feeds (e.g., product page, news article, social media post, recipe, api documentation).
(d). "other": Use this if the document doesn't fit any of the above categories.

Instructions:
- Carefully analyze the web document information provided.
- Consider the primary function and content of the document .
- If you're hesitating between two categories because the document fits both categories, return the first category in the list
- Include arguments for and against each potentially applicable category, backup up by quotes from the document information. This anlysis should be consise.
- Provide your final classification in <document-category-answer> tags.

2. `<document-analysis>`:
Instructions for ALL document categories:
- Step 1: Identify the sections of the document. Analyze the entire web document and identify all global sections and menus (e.g., navbars, menus, sidebars, form sections, data arears, contact information,footer, etc.).
- Step 2: For each identified section, list ALL elements EXHAUSTIVELY (e.g. header, paragraph, text, form input values, embedded code blocks, images, rows, colums and cell elements etc). DO NOT be lazy, list ALL elements EXHAUSTIVELY.
* Example:
```Step 2 - Elements for section "XYZ"
- header1: "some text..."
- paragraph1: "some text..."
- text1: "some text..."
- text2: "some text..."
- text3: "some text..."
- combobox1: "label1" with value "value1"
- image1: "some alt text...", link: "some link..."
...
```
- Step 3: For each element, process it following these rules:
- Concatenate following text elements to make the output more readable.
- Remove duplicate text fields that occur multiple times across the same section.
- Critical rules: it is forbidden to summarize/modify ANY text element. Preserve these exactly as they appear in the original document. DO NOT DROP ANY TEXT ELEMENT.


Specific instructions for `search-results` and `data-feed` categories:
- Identify repetitive patterns or structured data you've noticed (e.g., search results, or list of items etc.).
- List out ALL unique fields found in any repetitive data, even if they don't appear in every instance.
- Remember to carry around ALL fields (numbers, text, dates, addresses, etc.) for each identified structured data.
- If paginated, include the pagination information in the final output.

3. `<data-extraction>`:
Instructions for ALL document categories:
- Present the `elements` in Markdown format.
- Use appropriate Markdown elements such as headings, lists, tables, code blocks, and images elements.
- If code elements are present, include them in code blocks with the appropriate language specified.
- If images are present, include them in the output as `![alt text](image_id)` format (e.g. `image_id='F1'`). if `no alt text` is present, use `image 'F1'` as alt text.
- Ensure that all text elements, including those in tables, are preserved exactly as they appear in the original document.

Specific instructions for `search-results` and `data-feed` categories:
- Structure repetitive data you identified using Markdown tables with ALL relevant fields as columns. This is crucial:
- Include EVERY field present in the repetitive data, even if it seems unimportant.
- Create a column for each unique field found in any item of the repetitive data.
- If a field is not available for a particular item, fill the column with "none".
- Include ALL number fields in tables, each with its own column.

# Critical Rules:
- Use descriptive language to document the web content. Avoid actionable text such as "Select," "Enter," "Search," "Click", "View."
- Format the output as a markdown document, with sections and subsections, do not simply describe the elements one by one, i.e
BAD: `* Heading: "Some heading \n Text: "some text"...`
GOOD: `# Some heading \n some text"...`
- If the document contains form elements, include each field names and any pre-filled values explicitly in the description (e.g. search filters, contact form fields, etc.)
- Avoid generic section names. E.g. DO NOT use `main content`, `search results`, `form fields`. USE specific names based on the ACTUAL document context

# Example outputs:

Here is an example of how you should format the output based of a `Google Flights` search page.
Remember that the output is different for all websites, don't use this as a reference for other websites, e.g.
not not all websites have a search results section.
<document-category>
[... Your detailed analysis of the document to justify the category, including quotes, arguments, ...]
<document-category-answer>search-results</document-category-answer>
</document-category>
<document-analysis>
[... Your detailed analysis of the document ...]
</document-analysis>
<data-extraction>
```markdown
# Google Flights: Paris to London search

## Navbar
- Home
- Travel
- Explore
- Flights: current page
- ...

## Sidebar menu
...

## User search parameters
- Where from?: Paris
- Where to?: London
- Departure: Tue, Jan 14
- [... other inputs ...]

### Flights search results
20 of 284 results returned.
They are ranked based on price and convenience

| Airline       | Departure  | Arrival  | Duration   | Stops     | Price |
|---------------|------------|----------|------------|-----------|-------|
| easyJet       | 10:15 AM   | 10:35 AM | 1 hr 20 min| Nonstop   | $62   |
| Air France    | 4:10 PM    | 4:35 PM  | 1 hr 25 min| Nonstop   | $120  |
[... rest of table ...]

### Pagination information
20 of 284 results returned, organized in 15 pages.
- Previous page: None
- Current page: 1
- Next page: 2

## Footer
...
``
</data-extraction>

Alternitavely, here it was the data extraction could look like for a news article (i.e `data-item` category):
<data-extraction>
```markdown
# News article: "New Faculty Profiles: Awa Ambra Seck"

## Navbar
...

## Sidebar articles
| Title | Author | Date |
|-------|--------|------|
| .... | .... | .... |


## Article metadata
- Title: New Faculty Profiles: Awa Ambra Seck
- Author: Harvard Business School ("unknown author")
- Date: 2024-01-01
- [... other metadata ...]

## Article content
# Interview with Awa Ambra Seck
## Role and Focus
Awa Ambra Seck, assistant professor, Business, Government & the International Economy

![image F1](F1)

## Questions and Answers
### What is your educational background?

I completed my bachelor's degree in economics and business from the University of Torino in 2014. [... rest of the answer ...]

### What’s your area of research and what led you to it?

My research is at the intersection of development economics, economic history, and political economy, with a regional focus on Africa. [... rest of the answer ...]

[... rest of the article ...]

## Footer
...
``
</data-extraction>

# Final Reminders:
- ALL textual content in the output MUST be included in the output
- Do not present the elements as a simple list of attributes, but as a structured markdown document (i.e `Text: "some text..."` should be `some text...`, `Button: "some button text..."` should be `some button text...`)
- ALL images must be included in the output, even if they don't have alt text.
- When dealing with repetitive data, include ALL fields in your tables, creating a column for each unique field found in any item. Use "none" for missing values. Do not omit any data, regardless of perceived importance.


Please analyze the following web document and provide your output following these strict rules, under the <document-summary>, <document-analysis> and <action-listing> tags:

<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/data-extraction/only_main_content/user.md
================
You are an expert web content analyzer tasked with extracting and organizing information from web documents.

Your task is to extract text-based content from the provided web document and present it in a structured Markdown format, while preserving all text elements exactly as they appear in the original document.

Given a web document, you must provide your output in EXACTLY 3 sections. YOUR OUTPUT MUST CONTAIN EXACTLY 3 SECTIONS, NOTHING MORE:

1. `<document-category>`:
Your task is to classify this web document into one of the following categories (by priority):
(a). "search-results": Document displaying multiple items as results of a previous search query.
(b). "data-feed": Document displaying data in a grid/sequence (e.g., blog posts, news articles, social media feeds).
(c). "data-item": Information document about a particular item, typically accessed from search results or data feeds (e.g., product page, news article, social media post, recipe, api documentation).
(d). "other": Use this if the document doesn't fit any of the above categories.

Instructions:
- Carefully analyze the web document information provided.
- Consider the primary function and content of the document .
- If you're hesitating between two categories because the document fits both categories, return the first category in the list
- Include arguments for and against each potentially applicable category, backup up by quotes from the document information. This anlysis should be consise.
- Provide your final classification in <document-category-answer> tags.

2. `<document-analysis>`:
Instructions for ALL document categories:
- Step 1: Identify the sections of the document. Analyze the entire web document and identify all global sections and menus (e.g., navbars, menus, sidebars, form sections, data arears, contact information,footer, etc.).
- Step 2: Decide Section Relevance. For each identified section, decide if the section is relevant to the document's purpose based on its main content.
* Relevant: Includes sections containing the document's key information.
* Not Relevant: Exclude elements like login areas, navigation menus, or contact information or social media links unless essential to the main purpose.
- Step 3: Capture relevant elements. For each relevant section, list ALL relevant elements EXHAUSTIVELY (e.g. header, paragraph, text, form input values, embedded code blocks, images, rows, colums and cell elements etc). DO NOT be lazy, list ALL elements EXHAUSTIVELY.
* Example:
```Step 3 - Relevant elements for section "XYZ"
- header1: "some text..."
- paragraph1: "some text..."
- text1: "some text..."
- text2: "some text..."
- text3: "some text..."
- combobox1: "label1" with value "value1"
- image1: "some alt text...", link: "some link..."
...
```
- Step 4: process relevant elements. For each captured element, process it following these rules:
- Concatenate following text elements to make the output more readable.
- Remove duplicate text fields that occur multiple times across the same section.
- Critical rules: it is forbidden to summarize/modify ANY text element. Preserve these exactly as they appear in the original document. DO NOT DROP ANY TEXT ELEMENT.


Specific instructions for `search-results` and `data-feed` categories:
- Identify repetitive patterns or structured data you've noticed (e.g., search results, or list of items etc.).
- List out ALL unique fields found in any repetitive data, even if they don't appear in every instance.
- Remember to carry around ALL fields (numbers, text, dates, addresses, etc.) for each identified structured data.
- If paginated, include the pagination information in the final output.

3. `<data-extraction>`:
Instructions for ALL document categories:
- Present the `captured relevant elements` in Markdown format.
- Use appropriate Markdown elements such as headings, lists, tables, code blocks, and images elements.
- If code elements are present, include them in code blocks with the appropriate language specified.
- If images are present, include them in the output as `![alt text](image_id)` format (e.g. `image_id='F1'`). if `no alt text` is present, use `image 'F1'` as alt text.
- Ensure that all text elements, including those in tables, are preserved exactly as they appear in the original document.

Specific instructions for `search-results` and `data-feed` categories:
- Structure repetitive data you identified using Markdown tables with ALL relevant fields as columns. This is crucial:
- Include EVERY field present in the repetitive data, even if it seems unimportant.
- Create a column for each unique field found in any item of the repetitive data.
- If a field is not available for a particular item, fill the column with "none".
- Include ALL number fields in tables, each with its own column.

# Critical Rules:
- Use descriptive language to document the web content. Avoid actionable text such as "Select," "Enter," "Search," "Click", "View."
- Format the output as a markdown document, with sections and subsections, do not simply describe the elements one by one, i.e
BAD: `* Heading: "Some heading \n Text: "some text"...`
GOOD: `# Some heading \n some text"...`
- If the document contains form elements, include each field names and any pre-filled values explicitly in the description (e.g. search filters, contact form fields, etc.)
- Avoid generic section names. E.g. DO NOT use `main content`, `search results`, `form fields`. USE specific names based on the ACTUAL document context

# Example outputs:

Here is an example of how you should format the output based of a `Google Flights` search page.
Remember that the output is different for all websites, don't use this as a reference for other websites, e.g.
not not all websites have a search results section.
<document-category>
[... Your detailed analysis of the document to justify the category, including quotes, arguments, ...]
<document-category-answer>search-results</document-category-answer>
</document-category>
<document-analysis>
[... Your detailed analysis of the document ...]
</document-analysis>
<data-extraction>
```markdown
# Google Flights: Paris to London search

## User search parameters
- Where from?: Paris
- Where to?: London
- Departure: Tue, Jan 14
- [... other inputs ...]

### Flights search results
20 of 284 results returned.
They are ranked based on price and convenience

| Airline       | Departure  | Arrival  | Duration   | Stops     | Price |
|---------------|------------|----------|------------|-----------|-------|
| easyJet       | 10:15 AM   | 10:35 AM | 1 hr 20 min| Nonstop   | $62   |
| Air France    | 4:10 PM    | 4:35 PM  | 1 hr 25 min| Nonstop   | $120  |
[... rest of table ...]

### Pagination information
20 of 284 results returned, organized in 15 pages.
- Previous page: None
- Current page: 1
- Next page: 2
``
</data-extraction>

Alternitavely, here it was the data extraction could look like for a news article (i.e `data-item` category):
<data-extraction>
```markdown
# News article: "New Faculty Profiles: Awa Ambra Seck"

## Article metadata
- Title: New Faculty Profiles: Awa Ambra Seck
- Author: Harvard Business School ("unknown author")
- Date: 2024-01-01
- [... other metadata ...]

## Article content
# Interview with Awa Ambra Seck
## Role and Focus
Awa Ambra Seck, assistant professor, Business, Government & the International Economy

![image F1](F1)

## Questions and Answers
### What is your educational background?

I completed my bachelor's degree in economics and business from the University of Torino in 2014. [... rest of the answer ...]

### What’s your area of research and what led you to it?

My research is at the intersection of development economics, economic history, and political economy, with a regional focus on Africa. [... rest of the answer ...]

[... rest of the article ...]
``
</data-extraction>

# Final Reminders:
- DO NOT include unrelevant elements in the output, such as login areas, navigation menus, or contact information or social media links unless essential to the main purpose.
- ALL remaining textual content in the output MUST be included in the output
- Do not present the elements as a simple list of attributes, but as a structured markdown document (i.e `Text: "some text..."` should be `some text...`, `Button: "some button text..."` should be `some button text...`)
- ALL images must be included in the output, even if they don't have alt text.
- When dealing with repetitive data, include ALL fields in your tables, creating a column for each unique field found in any item. Use "none" for missing values. Do not omit any data, regardless of perceived importance.


Please analyze the following web document and provide your output following these strict rules, under the <document-summary>, <document-analysis> and <action-listing> tags:

<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/data-extraction/two_sections/user.md
================
You are an expert in analyzing web documents to create comprehensive textual documentation of these documents.

Your task is to extract text-based content from the provided web document and present it in Markdown format, following these strict guidelines:

### Critical Format Rules:

1. **Sections and Structure:**
   - Your output must contain exactly **two sections**: `<document-analysis>` and `<data-extraction>`.
   - No text is allowed outside these two sections.
   - The tags must not be nested within each other.

2. **Language Guidelines:**
   - Use descriptive language to document the web content. Do not include actionable text such as "Select," "Enter," "Search," or "View." These terms must be avoided.

### Output Specification:

#### `<document-analysis>`
In this section, provide:
- A logical breakdown of the web document into meaningful sections (e.g., Navigation, Main Content, Relevant menus, Footer, etc.).
- Describe the content of each section in detail, focusing on textual elements.
- Include subsections for any repetitive or structured data (e.g., search results, filters).

#### `<data-extraction>`
In this section, extract and present the structured data as plain Markdown text, using headings, tables, list, code blocks, etc. as needed.

- Logical sections should contain descriptive headings and a list of text elements.
- Repetitive or tabular data (e.g., search results, lists of items) must be organized in Markdown tables. Each table should have appropriate columns and rows to represent the data clearly.
- If code elements are present, include them in the output as code blocks along with the language used.

Example Table for Repetitive Data:
```markdown
| Airline       | Departure  | Arrival  | Duration   | Stops     | Price |
|---------------|------------|----------|------------|-----------|-------|
| easyJet       | 10:15 AM   | 10:35 AM | 1 hr 20 min| Nonstop   | $62   |
| Air France    | 4:10 PM    | 4:35 PM  | 1 hr 25 min| Nonstop   | $120  |
```

### Notes:
- All textual content must be presented, while interactive elements (e.g., buttons, links) should only have their labels extracted.
- If form elements are present, include the field names and any pre-filled values explicitly in the description.

**Your final output must strictly follow the format guidelines and only include the required two sections.**

Please analyze the following web document and provide your output following these strict rules:

<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/data-extraction/user.md
================
You are an expert in analyzing web documents to create comprehensive textual documentation of these documents.

Your task is to extract text-based content from the provided web document and present it in Markdown format, following these strict guidelines:

### Critical Format Rules:

1. **Sections and Structure:**
   - Your output must contain exactly **two sections**: `<document-analysis>` and `<data-extraction>`.
   - No text is allowed outside these two sections.
   - The tags must not be nested within each other.

2. **Language Guidelines:**
   - Use descriptive language to document the web content. Do not include actionable text such as "Select," "Enter," "Search," or "View." These terms must be avoided.

### Output Specification:

#### `<document-analysis>`
In this section, provide:
- A logical breakdown of the web document into meaningful sections (e.g., Main Content, Relevant menus etc.).
- Don't include navbars or footers in the analysis, focus on the main content of the page.
- Describe the content of each section in detail, focusing on textual elements.
- Include subsections for any repetitive or structured data (e.g., search results, filters, pagination, etc.).
- Remember to carry around ALL fields (numbers, text, dates, addresses, etc.) for each identified structured data.

#### `<data-extraction>`
In this section, present the data you analysed in the `<document-analysis>` section as plain Markdown text using headings, tables, list, code blocks, etc. as needed.

- Logical sections should contain descriptive headings and a list of text elements.
- Repetitive or tabular data (e.g., search results, lists of items) must be organized in Markdown tables. Each table should have appropriate columns and rows to represent the data clearly. For each row, ALL fields originially present in the document MUST be included in the table.
- ALL number fields MUST be included in the table and have their own column.
- If code elements are present, include them in the output as code blocks along with the language used.


# Example output:

Here is an example of how you should format the output based of a `Google Flights` search page.
Remember that the output is different for all websites, don't use this as a reference for other websites, e.g.
not not all websites have a search results section.

<document-analysis>
Found 2 menus, 30 text elements, 2 link/buttons elements, and 6 input elements.
Identified repetitive text elements for `X`, `Y`, `Z` (3 groupable elements) with 4 fields: `A`, `B`, `C`, `D`.
Grouped text elements into 8 main categories based on ...
[Additional analysis...]
</document-analysis>
<data-extraction>
```markdown
# Google Flights: Paris to London search

## Search content

### Search inputs
- Where from?: Paris
- Where to?: London
- Departure: Tue, Jan 14
- [... other inputs ...]

### Search Results
20 of 284 results returned.
They are ranked based on price and convenience

| Airline       | Departure  | Arrival  | Duration   | Stops     | Price |
|---------------|------------|----------|------------|-----------|-------|
| easyJet       | 10:15 AM   | 10:35 AM | 1 hr 20 min| Nonstop   | $62   |
| Air France    | 4:10 PM    | 4:35 PM  | 1 hr 25 min| Nonstop   | $120  |
[... rest of table ...]

### Pagination information
20 of 284 results returned, organized in 15 pages.
- Previous page: None
- Current page: 1
- Next page: 2
```
</data-extraction>

### Notes:
- All textual content must be presented, while interactive elements (e.g., buttons, links) should only have their labels extracted.
- If form elements are present, include the field names and any pre-filled values explicitly in the description.

**Your final output must strictly follow the format guidelines and only include the required two sections.**

Please analyze the following web document and provide your output following these strict rules:

<document>
{{{document}}}
</document>

================
File: packages/notte-core/src/notte_core/llms/prompts/debug-failing-action-exec/user.md
================
You are an expert in the playwright python library.
You are given a html code of an element that failed to be interacted with
and some information about the action that was executed.
along with the error message encountered.

1. I want you to provide me with a report of why the current action failed to be executed.
Put your report inside <failure_report> tags, i.e
<failure_report>
...
</failure_report>

2. Then provide me with some suggestions on how to fix the action.
Put your suggestions inside <failure_suggestions> tags, i.e
<failure_suggestions>
...
</failure_suggestions>

FYI, I already tried the following suggestions and they didn't work:
- Wait for the element to be visible before attempting to click it. This can be done using the `wait_for` method provided by Playwright.
- Use a different selectors (cf code below)
- Try on different frames (cf code below)
- Increase the timeout for the click action to give the element more time to become visible.
I want you to provide alternative detailed suggestions that might work.
I.e. Don't simply say "- Check if there are any overlapping elements that could be preventing the click action from succeeding." but actually check for overalapping elements in the metadata I provide you.

3. If you believe you can generate some code to fix the action execution, provide it inside <playwright_retry_code> tags, i.e
<playwright_retry_code>
...
</playwright_retry_code>

4. If you believe, there is nothing that can be done to fix the action execution, provide a short 1-2 sentence high level explanation of why the action failed to be executed
inside <failure_explanation> tags, i.e
<failure_explanation>
...
</failure_explanation>

Here is some contextual information to help you solve your task:

<info_failed_action>
{{info_failed_action}}
</info_failed_action>

<info_failed_action_playwright_code>
{{info_failed_action_playwright_code}}
</info_failed_action_playwright_code>

<info_error_message>
{{info_error_message}}
</info_error_message>

<info_metadata_about_html_element>
{{info_metadata_about_html_element}}
</info_metadata_about_html_element>

Please proceed with your task:

================
File: packages/notte-core/src/notte_core/llms/prompts/document-category/base/user.md
================
Based on a textual description of a webpage, I want to classifiy the page in one of the following categories:
- “manage-cookies”: manage cookies page, i.e accept/reject cookies, usually in a modal / dialog that ask for user action
- “auth”: sign-in, sign-up pages (also valid if there is a modal that asks you to sign up to continue using the website)
- "homepage": the homepage of the website
- "search-results": multiple item displayed which are a results of a previous search query
- “data-feed”: data display in a grid/sequence such as blog posts, news articles, social media feeds (instagram, linked-in, etc.)
- "item": information page about one particular item, usually displayed after clicking on a link in a previous "search-result" or "data-feed" webpage. This is relevant for product pages on shopping websites, a news/blog article, social media post, a recipe etc. This is mainly a data display page.
- "captcha": CAPTCHA page that ask the user to resolve a captcha before continuing
- "payment": payment page where users need to input their credit-card / delivery information
- “form”: asks for user input of some sorts, form, modal, etc. also valid for contact forms (not auth though since this is already covered by the "auth" category)

if the page is not one of these categories use : "other"

If you are hesitate between 2 categories because you think it's both : return both categories.

Here are some examples:

```
Webpage information:
- URL: https://www.allrecipes.com/search?q=vegetarian+lasagna
- Title: [vegetarian lasagna] Results from Allrecipes
- Description: This is the Allrecipes website's search results page with the query "vegetarian lasagna". Users can search for specific recipes, browse through the search results, navigate to different sections of the website, and access various links related to recipes, meals, and kitchen tips. The page also provides links to social media, editorial process, privacy policy, and other related information.
```
should result in <document-category>search-results</document-category>


```
Webpage information:
- URL: https://www.allrecipes.com/
- Title: Allrecipes | Recipes, How-Tos, Videos and More
- Description: This web page is the cookie consent modal for Allrecipes, focused on user interactions with personalized advertising and data processing. Users can manage their choices for personalized advertising and content by clicking on various buttons or accessing the privacy policy page.
```
should result in <document-category>"manage-cookies"</document-category>


```
Webpage information:
- URL: https://www.allrecipes.com/
- Title: Allrecipes | Recipes, How-Tos, Videos and More
- Description: This is the Allrecipes website interface, focused on providing various recipes and cooking-related content. Users can explore different types of recipes, save their favorite recipes, and visit various social media pages. The interface is organized into different sections, including a main content area, a footer with navigation links, and a section for saving recipes.
```
should result in <document-category>"other"</document-category>


```
Webpage information:
- URL: https://www.allrecipes.com/recipe/278027/worlds-best-now-vegetarian-lasagna/
- Title: World's Best (Now Vegetarian!) Lasagna Recipe
- Description: This is a recipe page for a vegetarian lasagna on Allrecipes.com. The main content displays a detailed recipe including ingredients, directions, nutrition facts, and cooking times. Users can interact with the recipe through various actions like saving, rating, printing, adjusting serving sizes, and viewing related recipes.
```

should result in <document-category>"item"</document-category>

Here is the document I want you to analyse:

<document> {{document}} </document>

Please return the category inside <document-category> tags.

================
File: packages/notte-core/src/notte_core/llms/prompts/document-category/optim/user.md
================
You are an expert web content analyst tasked with classifying webpages into specific categories based on their content and functionality. Your goal is to accurately categorize each webpage using the information provided.

Here is the webpage information you need to analyze:

<webpage_info>
{{document}}
</webpage_info>

Your task is to classify this webpage into one of the following categories (by priority):

1. "manage-cookies": Pages for managing cookies, usually in a modal/dialog asking for user action.
2. "overlay": Pages with a modal/dialog that is not a cookie management dialog.
3. "auth": Sign-in or sign-up pages, including modals asking users to sign up to continue.
4. "search-results": Pages displaying multiple items as results of a previous search query.
5. "data-feed": Pages displaying data in a grid/sequence (e.g., blog posts, news articles, social media feeds).
6. "item": Information pages about a particular item, typically accessed from search results or data feeds (e.g., product pages, news articles, social media posts, recipes).
7. "captcha": Pages asking users to resolve a CAPTCHA before continuing.
8. "payment": Pages where users input credit card or delivery information.
9. "form": Pages asking for user input, including contact forms (excluding auth forms).
10. "homepage": the homepage of the website (if it is not one of the other categories)
11. "other": Use this if the page doesn't fit any of the above categories.

Instructions:
1. Carefully analyze the webpage information provided.
2. Consider the primary function and content of the page.
3. If you're hesitating between two categories because the page fits both categories, return the first category in the list (i.e. "manage-cookies" has the highest priority and "other" has the lowest priority)
4. Wrap your analysis in <webpage_classification_analysis> tags, including arguments for and against each potentially applicable category, backup up by quotes from the webpage information. This anlysis should be consise.
5. Provide your final classification in <document-category> tags.

Here's an example of how your response should be structured:

<webpage_classification_analysis>
[Your detailed analysis of the webpage, including quotes, arguments, and summary]
</webpage_classification_analysis>

<document-category>[Your final classification]</document-category>

Please proceed with your analysis and classification of the given webpage.

================
File: packages/notte-core/src/notte_core/llms/prompts/extract-json-schema/multi-entity/system.md
================
You are extracting content on behalf of a user.
If a user asks you to extract a 'list' of information, or 'all' information,
YOU MUST EXTRACT ALL OF THE INFORMATION THAT THE USER REQUESTS.

Always prioritize using the provided content to answer the question.
Do not miss any important information.
Do not make up an answer.
Do not hallucinate.
In case you you can't find the information requested, or the information is not present in the content, DO NOT return 'N/A', 'Not specified', or an empty string. Instead, format you answer as follows:
```json
{{& failure_example}}
```
ALWAYS RETURN A VALID JSON OUTPUT, even if you cannot answer the user request.
In case of a failure, be very explicit in the error message about what is missing or what is wrong.

Example of a valid JSON response for a user request related to hotels search:
```json
{{& success_example}}
```


Be concise and follow the schema provided.
Here are the urls the user provided of which he wants to extract information from:
{{url}}


Here is the user schema you should follow for your output:
```json
{{& schema}}
```
CRITICAL: You should store the extracted information inside the `data` property of your final JSON output.

Today is: {{timestamp}}

Additional instructions:
{{& instructions}}

Transform the following content into structured JSON output based on the provided schema if any and the following user request:

```markdown
{{& content}}
```

================
File: packages/notte-core/src/notte_core/llms/prompts/extract-json-schema/multi-entity/user.md
================
Your turn, provide me the transformed content:

================
File: packages/notte-core/src/notte_core/llms/prompts/extract-without-json-schema/system.md
================
You are extracting content on behalf of a user.
If a user asks you to extract a 'list' of information, or 'all' information,
YOU MUST EXTRACT ALL OF THE INFORMATION THAT THE USER REQUESTS.

Always prioritize using the provided content to answer the question.
Do not miss any important information.
Do not make up an answer.
Do not hallucinate.
In case you can't find the information and the string is required, instead of 'N/A' or 'Not speficied', return an empty string: '', if it's not a string and you can't find the information, return null.
Be concise and follow the schema always if provided.
If the document provided is not relevant to the prompt nor to the final user schema, return null.

Generate a JSON output that extracts ONLY the relevant information from the following user request:
{{instructions}}

Additional rules:
- The JSON schema has to be simple. No crazy properties.
- The output must contain the 3 keys "success, "error" (null in case of success), and "data"
- Don't create too many properties, just the ones that are needed.
- Don't invent properties.
- Return a valid JSON response object with properties that would capture the information requested in the prompt.

Example of a valid JSON response for a user request related to hotels search:
```json
{{& success_example}}
```

Example of an valid output if you cannot answer the user request:
```json
{{& failure_example}}
```
In case of a failure, be very explicit in the error message about what is missing or what is wrong.

Today is: {{timestamp}}

Transform the following document into structured JSON output based on the provided user request:

```markdown
{{& document}}
```

================
File: packages/notte-core/src/notte_core/llms/prompts/extract-without-json-schema/user.md
================
Your turn, provide me the transformed content:

================
File: packages/notte-core/src/notte_core/llms/prompts/generate-json-schema/system.md
================
You are a schema generator for a web scraping system. Generate a JSON schema based on the user's prompt.
Consider:
1. The type of data being requested
2. Required fields vs optional fields
3. Appropriate data types for each field
4. Nested objects and arrays where appropriate

Valid JSON schema, has to be simple. No crazy properties. OpenAI has to support it.
Supported types
The following types are supported for Structured Outputs:

String
Number
Boolean
Integer
Object
Array
Enum
anyOf

Formats are not supported. Min/max are not supported. Anything beyond the above is not supported. Keep it simple with types and descriptions.
Optionals are not supported.
DO NOT USE FORMATS.
Keep it simple. Don't create too many properties, just the ones that are needed. Don't invent properties.
Return a valid JSON schema object with properties that would capture the information requested in the prompt.

================
File: packages/notte-core/src/notte_core/llms/prompts/generate-json-schema/user.md
================
Generate a JSON schema for extracting the following information: {{prompt}}

================
File: packages/notte-core/src/notte_core/llms/engine.py
================
import re
from dataclasses import dataclass
from enum import StrEnum
from typing import TypeVar, cast

import litellm
from litellm import (
    AllMessageValues,
    ChatCompletionUserMessage,
)
from litellm.exceptions import (
    APIError,
    AuthenticationError,
    BadRequestError,
    RateLimitError,
)
from litellm.exceptions import (
    ContextWindowExceededError as LiteLLMContextWindowExceededError,
)
from litellm.files.main import ModelResponse  # type: ignore
from loguru import logger
from pydantic import BaseModel, ValidationError

from notte_core.common.tracer import LlmTracer, LlmUsageFileTracer
from notte_core.errors.llm import LLMParsingError
from notte_core.errors.provider import (
    ContextWindowExceededError,
    InsufficentCreditsError,
    InvalidAPIKeyError,
    LLMProviderError,
    MissingAPIKeyForModel,
    ModelDoesNotSupportImageError,
)
from notte_core.errors.provider import RateLimitError as NotteRateLimitError
from notte_core.llms.logging import trace_llm_usage


class LlmModel(StrEnum):
    openai = "openai/gpt-4o"
    gemini = "gemini/gemini-2.0-flash"
    gemma = "openrouter/google/gemma-3-27b-it"
    cerebras = "cerebras/llama-3.3-70b"
    groq = "groq/llama-3.3-70b-versatile"

    @staticmethod
    def context_length(model: str) -> int:
        if "cerebras" in model.lower():
            return 16_000
        elif "groq" in model.lower():
            return 8_000
        return 128_000

    @staticmethod
    def default() -> str:
        return LlmModel.gemini


TResponseFormat = TypeVar("TResponseFormat", bound=BaseModel)


class LLMEngine:
    def __init__(
        self,
        model: str | None = None,
        tracer: LlmTracer | None = None,
        structured_output_retries: int = 0,
        verbose: bool = False,
    ):
        self.model: str = model or LlmModel.default()
        self.sc: StructuredContent = StructuredContent(inner_tag="json", fail_if_inner_tag=False)

        if tracer is None:
            tracer = LlmUsageFileTracer()

        self.tracer: LlmTracer = tracer
        self.completion = trace_llm_usage(tracer=self.tracer)(self.completion)
        self.structured_output_retries: int = structured_output_retries
        self.verbose: bool = verbose

    def structured_completion(
        self,
        messages: list[AllMessageValues],
        response_format: type[TResponseFormat],
        model: str | None = None,
    ) -> TResponseFormat:
        tries = self.structured_output_retries + 1
        content = None
        while tries > 0:
            tries -= 1
            content = self.single_completion(messages, model, response_format=dict(type="json_object")).strip()
            content = self.sc.extract(content).strip()

            if self.verbose:
                logger.info(f"LLM response: \n{content}")

            if "```json" in content:
                # extract content from JSON code blocks
                content = self.sc.extract(content).strip()
            elif not content.startswith("{") or not content.endswith("}"):
                messages.append(
                    ChatCompletionUserMessage(
                        role="user",
                        content=f"Invalid LLM response. JSON code blocks or JSON object expected, got: {content}. Retrying",
                    )
                )
                continue
            try:
                return response_format.model_validate_json(content)
            except ValidationError as e:
                messages.append(
                    ChatCompletionUserMessage(
                        role="user",
                        content=f"Error parsing LLM response: {e}, retrying",
                    )
                )
                continue

        raise LLMParsingError(f"Error parsing LLM response: \n\n{content}\n\n")

    def single_completion(
        self,
        messages: list[AllMessageValues],
        model: str | None = None,
        temperature: float = 0.0,
        response_format: dict[str, str] | None = None,
    ) -> str:
        model = model or self.model
        response = self.completion(
            messages,
            model=model,
            temperature=temperature,
            n=1,
            response_format=response_format,
        )
        return response.choices[0].message.content  # type: ignore

    def completion(
        self,
        messages: list[AllMessageValues],
        model: str | None = None,
        temperature: float = 0.0,
        response_format: dict[str, str] | None = None,
        n: int = 1,
    ) -> ModelResponse:
        model = model or self.model
        try:
            response = litellm.completion(  # type: ignore[arg-type]
                model,
                messages,
                temperature=temperature,
                n=n,
                response_format=response_format,
            )
            # Cast to ModelResponse since we know it's not streaming in this case
            return cast(ModelResponse, response)

        except RateLimitError:
            raise NotteRateLimitError(provider=model)
        except AuthenticationError:
            raise InvalidAPIKeyError(provider=model)
        except LiteLLMContextWindowExceededError as e:
            # Try to extract size information from error message
            current_size = None
            max_size = None
            pattern = r"Current length is (\d+) while limit is (\d+)"
            match = re.search(pattern, str(e))
            if match:
                current_size = int(match.group(1))
                max_size = int(match.group(2))
            raise ContextWindowExceededError(
                provider=model,
                current_size=current_size,
                max_size=max_size,
            ) from e
        except BadRequestError as e:
            if "Missing API Key" in str(e):
                raise MissingAPIKeyForModel(model) from e
            if "Input should be a valid string" in str(e):
                raise ModelDoesNotSupportImageError(model) from e
            raise LLMProviderError(
                dev_message=f"Bad request to provider {model}. {str(e)}",
                user_message="Invalid request parameters to LLM provider.",
                agent_message=None,
                should_retry_later=False,
            ) from e
        except APIError as e:
            raise LLMProviderError(
                dev_message=f"API error from provider {model}. {str(e)}",
                user_message="An unexpected error occurred while processing your request.",
                agent_message=None,
                should_retry_later=True,
            ) from e
        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            logger.exception("Full traceback:")
            if "credit balance is too low" in str(e):
                raise InsufficentCreditsError() from e
            raise LLMProviderError(
                dev_message=f"Unexpected error from LLM provider: {str(e)}",
                user_message="An unexpected error occurred while processing your request.",
                should_retry_later=True,
                agent_message=None,
            ) from e


@dataclass
class StructuredContent:
    """Defines how to extract structured content from LLM responses"""

    outer_tag: str | None = None
    inner_tag: str | None = None
    next_outer_tag: str | None = None
    # If True, raise an error if the final tag is not found
    fail_if_final_tag: bool = True
    # If True, raise an error if the inner tag is not found
    fail_if_inner_tag: bool = True
    # If True, raise an error if the next outer tag is not found
    fail_if_next_outer_tag: bool = True

    def extract(
        self,
        text: str,
    ) -> str:
        """Extract content from text based on defined tags

        Parameters:
                text: The text to extract content from

        """
        content = text

        if self.outer_tag:
            pattern = f"<{self.outer_tag}>(.*?)</{self.outer_tag}>"
            match = re.search(pattern, content, re.DOTALL)
            if match:
                # perfect case, we have <outer_tag>...</outer_tag>
                content = match.group(1).strip()
            else:
                splits = text.split(f"<{self.outer_tag}>")
                # In this case, we want to fail if <outer_tag> is not found at least once
                if self.fail_if_final_tag or len(splits) == 1:
                    raise LLMParsingError(f"No content found within <{self.outer_tag}> tags in the response: {text}")
                possible_match = splits[1]
                if (
                    self.next_outer_tag is not None
                    and not self.fail_if_next_outer_tag
                    and f"<{self.next_outer_tag}>" in possible_match
                ):
                    # retry to split by next outer tag
                    splits = possible_match.split(f"<{self.next_outer_tag}>")
                    if len(splits) == 1:
                        raise LLMParsingError(
                            f"Unexpected error <{self.outer_tag}> should be present in the response: {splits}"
                        )
                    possible_match = splits[0].strip()
                # if there is not html tag in `possible_match` then we can safely return it
                if re.search(r"<[^>]*>", possible_match):
                    raise LLMParsingError(f"No content found within <{self.outer_tag}> tags in the response: {text}")
                content = possible_match

        if self.inner_tag:
            pattern = f"```{self.inner_tag}(.*?)```"
            match = re.search(pattern, content, re.DOTALL)
            if match:
                return match.group(1).strip()
            if self.fail_if_inner_tag:
                raise LLMParsingError(f"No content found within ```{self.inner_tag}``` blocks in the response: {text}")
            return content

        return content

================
File: packages/notte-core/src/notte_core/llms/logging.py
================
import inspect
import typing
from datetime import datetime
from functools import wraps
from typing import TYPE_CHECKING, Any, Callable

from litellm import ModelResponse  # type: ignore[import]
from loguru import logger

from notte_core.common.tracer import LlmTracer

if TYPE_CHECKING:
    pass


def recover_args(func: Callable[..., Any], args: tuple[Any, ...], kwargs: dict[str, Any]) -> dict[str, Any]:
    sig = inspect.signature(func)
    params = list(sig.parameters.keys())

    # Map positional args to parameter names
    named_args = {}
    for param_name, arg_value in zip(params, args):
        named_args[param_name] = arg_value

    # Combine with kwargs
    all_params: dict[str, Any] = {**named_args, **kwargs}
    return all_params


def trace_llm_usage(
    tracer: LlmTracer | None = None,
) -> Callable[[Callable[..., ModelResponse]], Callable[..., ModelResponse]]:
    def decorator(func: Callable[..., ModelResponse]) -> Callable[..., ModelResponse]:
        @wraps(func)
        def wrapper(
            *args: Any,
            **kwargs: Any,
        ) -> ModelResponse:
            # Call the original function

            recovered_args = recover_args(func, args, kwargs)
            model = typing.cast(str, recovered_args.get("model"))

            messages = typing.cast(list[Any], recovered_args.get("messages"))
            response: ModelResponse = func(*args, **kwargs)

            # Only trace if tracer is provided
            if tracer is not None:
                try:
                    _completion: str | None = response.choices[0].message.content  # type: ignore[attr-defined]
                    completion: str = _completion or ""  # type: ignore[attr-defined]

                    usage = getattr(response, "usage", None)
                    usage_dict = (
                        {
                            "prompt_tokens": getattr(usage, "prompt_tokens", 0),
                            "completion_tokens": getattr(usage, "completion_tokens", 0),
                            "total_tokens": getattr(usage, "total_tokens", 0),
                        }
                        if usage
                        else {"prompt_tokens": 0, "completion_tokens": 0, "total_tokens": 0}
                    )

                    tracer.trace(
                        timestamp=datetime.now().isoformat(),
                        model=model,
                        messages=messages,
                        completion=completion,  # type: ignore[arg-type]
                        usage=usage_dict,
                        metadata=kwargs.get("metadata"),
                    )
                except Exception as e:
                    logger.error(f"Error logging LLM usage: {str(e)}")

            return response

        return wrapper

    return decorator

================
File: packages/notte-core/src/notte_core/llms/prompt.py
================
from pathlib import Path

import chevron
from litellm import Message

from notte_core.errors.llm import InvalidPromptTemplateError


class PromptLibrary:
    def __init__(self, prompts_dir: str | Path) -> None:
        self.prompts_dir: Path = Path(prompts_dir)
        if not self.prompts_dir.exists():
            raise NotADirectoryError(f"Prompts directory not found: {prompts_dir}")

    def get(self, prompt_id: str) -> list[Message]:
        prompt_path: Path = self.prompts_dir / prompt_id
        prompt_files: list[Path] = list(prompt_path.glob("*.md"))
        if len(prompt_files) == 0:
            raise FileNotFoundError(f"Prompt template not found: {prompt_id}")
        messages: list[Message] = []
        for prompt_file in prompt_files:
            with open(prompt_file, "r") as file:
                content: str = file.read()
                role: str = prompt_file.name.split(".")[0]
                if role not in ["assistant", "user", "system", "tool", "function"]:
                    raise InvalidPromptTemplateError(
                        prompt_id=prompt_id,
                        message=(
                            f"invalid role: {role} in prompt template. "
                            "Valid roles are: assistant, user, system, tool, function"
                        ),
                    )
                messages.append(Message(role=role, content=content))  # type: ignore
        return messages

    def materialize(self, prompt_id: str, variables: dict[str, str] | None = None) -> list[dict[str, str]]:
        # TODO. You cant pass variables that are not in the prompt template
        # But you can fewer variables than in the prompt template
        _messages: list[Message] = self.get(prompt_id)
        messages: list[dict[str, str]] = []
        for message in _messages:
            if message.content is None:
                raise InvalidPromptTemplateError(
                    prompt_id=prompt_id,
                    message=f"Message content is none: {message.role}",
                )
            messages.append({"role": message.role, "content": message.content})

        if variables is None:
            return messages

        try:
            materialized_messages: list[dict[str, str]] = []
            for message in messages:
                formatted_content: str = chevron.render(message["content"], variables, warn=True)
                materialized_messages.append({"role": message["role"], "content": formatted_content})
            return materialized_messages
        except KeyError as e:
            raise InvalidPromptTemplateError(
                prompt_id=prompt_id,
                message=f"Missing required variable in prompt template: {str(e)}",
            ) from e
        except Exception as e:
            raise InvalidPromptTemplateError(
                prompt_id=prompt_id,
                message=f"Error formatting prompt: {str(e)}",
            ) from e

================
File: packages/notte-core/src/notte_core/llms/service.py
================
import os
from pathlib import Path
from typing import Any, ClassVar

import tiktoken
from litellm import ModelResponse  # type: ignore[import]
from llamux import Router  # type: ignore[import]
from loguru import logger

from notte_core.errors.llm import InvalidPromptTemplateError
from notte_core.llms.engine import LLMEngine, TResponseFormat
from notte_core.llms.prompt import PromptLibrary

PROMPT_DIR = Path(__file__).parent.parent / "llms" / "prompts"
LLAMUX_CONFIG = Path(__file__).parent.parent / "llms" / "config" / "endpoints.csv"


def get_llamux_config(verbose: bool = False) -> str:
    if "LLAMUX_CONFIG_PATH" in os.environ:
        if verbose:
            logger.info(f"Using custom LLAMUX config path: {os.environ['LLAMUX_CONFIG_PATH']}")
    else:
        if verbose:
            logger.info(f"Using default LLAMUX config path: {LLAMUX_CONFIG}")
    return os.getenv("LLAMUX_CONFIG_PATH", str(LLAMUX_CONFIG))


class LLMService:
    """
    LLM service for Notte.
    """

    DEFAULT_MODEL: ClassVar[str] = "groq/llama-3.3-70b-versatile"

    def __init__(
        self, base_model: str | None = None, verbose: bool = False, structured_output_retries: int = 0
    ) -> None:
        self.lib: PromptLibrary = PromptLibrary(str(PROMPT_DIR))
        llamux_config = get_llamux_config(verbose)
        path = Path(llamux_config)
        if not path.exists():
            raise FileNotFoundError(f"LLAMUX config file not found at {path}")
        self.router: Router = Router.from_csv(llamux_config)
        self.base_model: str | None = base_model or self.DEFAULT_MODEL
        self.tokenizer: tiktoken.Encoding = tiktoken.get_encoding("cl100k_base")
        self.verbose: bool = verbose
        self.structured_output_retries: int = structured_output_retries

    def get_base_model(self, messages: list[dict[str, Any]]) -> tuple[str, str | None]:
        eid: str | None = None
        router = "fixed"
        if self.base_model is None:
            router = "llamux"
            provider, model, eid, _ = self.router.query(messages=messages)
            base_model = f"{provider}/{model}"
        else:
            base_model = self.base_model
        token_len = self.estimate_tokens(text="\n".join([m["content"] for m in messages]))
        if self.verbose:
            logger.debug(f"llm router '{router}' selected '{base_model}' for approx {token_len} tokens")
        return base_model, eid

    def clip_tokens(self, document: str, max_tokens: int) -> str:
        tokens = self.tokenizer.encode(document)
        if len(tokens) > max_tokens:
            logger.info(f"Cannot process document, exceeds max tokens: {len(tokens)} > {max_tokens}. Clipping...")
            return self.tokenizer.decode(tokens[:max_tokens])
        return document

    def estimate_tokens(
        self, text: str | None = None, prompt_id: str | None = None, variables: dict[str, Any] | None = None
    ) -> int:
        if text is None:
            if prompt_id is None or variables is None:
                raise InvalidPromptTemplateError(
                    prompt_id=prompt_id or "unknown",
                    message="for token estimation, prompt_id and variables must be provided if text is not provided",
                )
            messages = self.lib.materialize(prompt_id, variables)
            text = "\n".join([m["content"] for m in messages])
        return len(self.tokenizer.encode(text))

    def structured_completion(
        self,
        prompt_id: str,
        response_format: type[TResponseFormat],
        variables: dict[str, Any] | None = None,
    ) -> TResponseFormat:
        messages = self.lib.materialize(prompt_id, variables)
        base_model, _ = self.get_base_model(messages)
        return LLMEngine(
            structured_output_retries=self.structured_output_retries, verbose=self.verbose
        ).structured_completion(
            messages=messages,  # type: ignore[arg-type]
            response_format=response_format,
            model=base_model,
        )

    def completion(
        self,
        prompt_id: str,
        variables: dict[str, Any] | None = None,
    ) -> ModelResponse:
        messages = self.lib.materialize(prompt_id, variables)
        base_model, eid = self.get_base_model(messages)
        response = LLMEngine(verbose=self.verbose).completion(
            messages=messages,  # type: ignore[arg-type]
            model=base_model,
        )
        if eid is not None:
            # log usage to LLAMUX router if eid is provided
            tokens: int = response.usage.total_tokens  # type: ignore[attr-defined]
            self.router.log(tokens=tokens, endpoint_id=eid)  # type: ignore[arg-type]
        return response

================
File: packages/notte-core/src/notte_core/utils/code.py
================
def text_contains_tabs(text: str) -> bool:
    """
    Determine if a given text has significant indentation patterns.

    Args:
        text (str): The text to analyze

    Returns:
        bool: True if the text has significant indentation patterns, False otherwise
    """
    if not text or text.isspace():
        return False

    # Split into lines and remove empty lines
    lines = [line for line in text.split("\n") if line.strip()]
    if not lines:
        return False

    # Count lines with leading whitespace or tabs
    indented_lines: int = sum(1 for line in lines if line.startswith((" ", "\t")))

    return indented_lines >= 1

================
File: packages/notte-core/src/notte_core/utils/image.py
================
import io
from base64 import b64encode
from pathlib import Path
from typing import Any
from urllib.parse import urljoin, urlparse

import aiohttp
import requests
from PIL import Image


def image_from_bytes(image_bytes: bytes) -> Image.Image | None:
    try:
        image = Image.open(io.BytesIO(image_bytes))
    except Image.UnidentifiedImageError:
        return None
    return image


def construct_image_url(base_page_url: str, image_src: str) -> str:
    """
    Constructs absolute URL for image source, handling relative and absolute paths.

    Args:
        base_page_url: The URL of the page containing the image
        image_src: The src attribute value from the img tag

    Returns:
        str: Absolute URL for the image
    """
    # If image_src is already absolute URL, return as is
    if image_src.startswith(("http://", "https://", "//")):
        return image_src.replace("//", "https://", 1) if image_src.startswith("//") else image_src

    # For relative paths, use urljoin which handles path resolution
    return urljoin(base_page_url, image_src)


def img_down(link: str, output_dir: str | None = None) -> Path | None:
    """
    Downloads and saves an image from a URL, handling different formats.

    Args:
        link: URL of the image to download
        output_dir: Optional directory to save images (defaults to current directory)
    """
    try:
        # Get file extension from URL
        parsed_url = urlparse(link)
        extension = Path(parsed_url.path).suffix.lower()

        # Generate output filename
        filename = Path(parsed_url.path).name
        if not extension:
            filename += ".jpg"  # Default extension

        # Setup output directory
        output_path = Path(output_dir) if output_dir else Path.cwd()
        output_path.mkdir(parents=True, exist_ok=True)

        # Handle SVG files differently
        if extension == ".svg":
            response = requests.get(link)
            if response.status_code == 200:
                _ = (output_path / filename).write_bytes(response.content)
                print(f"Successfully saved SVG: {filename}")
                return output_path / filename

        # For other image formats
        response = requests.get(link)
        if response.status_code == 200:
            image_file = io.BytesIO(response.content)
            try:
                image = Image.open(image_file)
                output_path = Path(output_dir) if output_dir else Path.cwd()
                output_path.mkdir(parents=True, exist_ok=True)
                image_output_path = output_path / filename
                image.save(image_output_path)
                print(f"Successfully saved: {filename}")
                return image_output_path
            except Exception as e:
                print(f"Error processing image {filename}: {str(e)}")
                return None
        else:
            print(f"Failed to download {link}: HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"Error downloading {link}: {str(e)}")
        return None


def get_images_as_files(image_urls: list[str]) -> list[Path | None]:
    # Usage:
    return [img_down(image, output_dir="downloaded_images") for image in image_urls]


async def get_images_as_base64(images_urls: list[str]) -> dict[str, Any]:
    """Returns images as base64 strings with metadata"""
    img_lst: list[dict[str, Any]] = []

    async with aiohttp.ClientSession() as session:
        for url in images_urls:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        content = await response.read()
                        img_lst.append(
                            {
                                "url": url,
                                "content_type": response.headers.get("content-type"),
                                "size": len(content),
                                "data": b64encode(content).decode("utf-8"),
                            }
                        )
            except Exception as e:
                print(f"Error downloading {url}: {str(e)}")

    return {"total_images": len(img_lst), "images": img_lst}

================
File: packages/notte-core/src/notte_core/utils/platform.py
================
from typing import Literal


def platform_control_key() -> Literal["Meta", "Control"]:
    """
    Returns the platform-specific control key modifier.

    Returns:
        Literal["Meta", "Control"]: "Meta" for macOS (Darwin), "Control" for other platforms
    """
    import platform

    return "Meta" if platform.system() == "Darwin" else "Control"

================
File: packages/notte-core/src/notte_core/utils/singleton.py
================
from typing import Any

from typing_extensions import override


class Singleton(type):
    _instances: dict[type, Any] = {}

    @override
    def __call__(cls, *args: Any, **kwargs: Any) -> Any:
        if cls not in cls._instances:  # pyright: ignore[reportUnnecessaryContains]
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

================
File: packages/notte-core/src/notte_core/utils/url.py
================
import socket
from urllib.parse import urlparse

import requests


def clean_url(url: str) -> str:
    # remove anything after ? i.. ?tfs=CBwQARooEgoyMDI0LTEyLTAzagwIAh
    # remove trailing slash
    # remove https://, http://, www.
    base = url.split("?")[0]
    if base.endswith("/"):
        base = base[:-1]
    base = base.replace("https://", "").replace("http://", "")
    base = base.replace("www.", "")
    return base


def resolve_domain_to_url(domain: str) -> str | None:
    """Resolve a domain to its corresponding URL.

    Args:
        domain (str): The domain to resolve.

    Returns:
        str | None: The corresponding URL if resolved, None otherwise.
    """
    try:
        # Get the IP address of the domain
        _ = socket.gethostbyname(domain)

        # Construct the URL
        url = f"https://{domain}/"
        return url
    except socket.gaierror:
        return None


def is_valid_url(url: str, check_reachability: bool = True) -> bool:
    """Check if the given URL is valid and points to a website.

    Args:
        url (str): The URL to check.

    Returns:
        bool: True if the URL is valid and reachable, False otherwise.
    """
    try:
        # Parse the URL to ensure it has a valid scheme
        parsed_url = urlparse(url)
        if parsed_url.scheme not in ["http", "https"]:
            return False

        if not check_reachability:
            return True
        # Send a HEAD request to the URL
        response = requests.head(url, allow_redirects=True)
        return response.status_code < 400  # Valid if status code is less than 400
    except requests.RequestException:
        return False

================
File: packages/notte-core/src/notte_core/utils/webp_replay.py
================
import base64
import io
import textwrap

from PIL import Image, ImageDraw, ImageFont
from pydantic import BaseModel


class ScreenshotReplay(BaseModel):
    class Config:
        frozen: bool = True

    b64_screenshots: list[str]

    @property
    def pillow_images(self) -> list[Image.Image]:
        return [ScreenshotReplay.base64_to_pillow_image(screen) for screen in self.b64_screenshots]

    @classmethod
    def from_base64(cls, screenshots: list[str]):
        return cls(b64_screenshots=screenshots)

    @classmethod
    def from_bytes(cls, screenshots: list[bytes]):
        as_base64 = [base64.b64encode(screen).decode() for screen in screenshots]
        return cls(b64_screenshots=as_base64)

    @staticmethod
    def base64_to_pillow_image(screenshot: str) -> Image.Image:
        image_data = base64.b64decode(screenshot)
        return Image.open(io.BytesIO(image_data))

    def summary_webp(
        self,
        scale_factor: float = 0.7,
        quality: int = 25,
        frametime_in_ms: int = 1000,
        start_text: str = "Start",
        ignore_incorrect_size: bool = False,
    ) -> bytes:
        if len(self.b64_screenshots) == 0:
            return b""

        # resize images with scale factor
        resized_screenshots: list[Image.Image] = []
        prev_size = None
        for im in self.pillow_images:
            if prev_size is None:
                prev_size = im.size
            else:
                # if next images are of incorrect size, either ignore or reshape them
                if prev_size != im.size and ignore_incorrect_size:
                    continue

            (width, height) = (int(prev_size[0] * scale_factor), int(prev_size[1] * scale_factor))
            resized_screenshots.append(im.resize((width, height)))

        width, height = resized_screenshots[0].size

        # fonts
        min_len = min(width, height)
        medium_font = ImageFont.load_default(size=min_len // 20)
        big_font = ImageFont.load_default(size=min_len // 15)

        # first frame with start
        start_image = Image.new("RGB", (width, height), color="white")
        draw = ImageDraw.Draw(start_image)
        draw.text(
            (width // 2, height // 2),
            "\n".join(textwrap.wrap(start_text, width=30)),
            fill="black",
            anchor="mm",
            font=medium_font,
        )
        resized_screenshots.insert(0, start_image)

        # Add frame numbers to each screenshot
        for i, img in enumerate(resized_screenshots):
            draw = ImageDraw.Draw(img)
            frame_text = f"{i}"
            draw.text(
                (width - 10, height - 10),
                frame_text,
                fill="white",
                anchor="rb",
                font=big_font,
                stroke_width=4,
                stroke_fill="black",
            )

        # Save as animated WebP to bytes buffer
        buffer = io.BytesIO()
        resized_screenshots[0].save(
            buffer,
            "WEBP",
            save_all=True,
            append_images=resized_screenshots[1:],
            duration=frametime_in_ms,
            quality=quality,
            loop=0,
        )
        _ = buffer.seek(0)
        return buffer.getvalue()

================
File: packages/notte-core/src/notte_core/__init__.py
================
from importlib import metadata

from notte_core.errors.base import ErrorConfig, ErrorMessageMode, ErrorMode

__version__ = metadata.version("notte")


def set_error_mode(mode: ErrorMode) -> None:
    """Set the error message mode for the package.

    Args:
        mode: Either 'developer', 'user' or 'agent'
    """
    ErrorConfig.set_message_mode(mode)


# Default to user mode
ErrorConfig.set_message_mode(ErrorMessageMode.DEVELOPER.value)

# Initialize telemetry
# This import only initializes the module, actual tracking will be disabled
# if ANONYMIZED_TELEMETRY=false is set or if PostHog is not installed
from notte_core.common import telemetry  # type: ignore # noqa

================
File: packages/notte-core/pyproject.toml
================
[project]
name = "notte-core"
version = "1.3.3"
description = "The web browser for LLMs agents"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
  { include = "notte_core", from = "src" },
]

requires-python = ">=3.11"
dependencies = [
    "chevron>=0.14.0",
    "litellm>=1.61.16",
    "llamux>=0.1.9",
    "loguru>=0.7.3",
    "patchright==1.50.0",
    "pillow>=11.1.0",
    "posthog>=3.0.1",
    "pydantic>=2.10.6",
    "pyotp>=2.9.0",
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
    "tldextract>=5.2.0",
]

[project.optional-dependencies]
server = [
    "litellm[proxy]>=1.61.16",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv.sources]
maincontentextractor = { git = "https://github.com/HawkClaws/main_content_extractor", rev = "7c3ed7f6ed7f6c10223a3357d43ab741663bc812" }

================
File: packages/notte-integrations/src/notte_integrations/api/fastapi.py
================
from __future__ import annotations

from typing import Annotated

from fastapi import APIRouter, HTTPException
from notte_agent.common.base import BaseAgent
from notte_agent.common.types import AgentResponse
from notte_sdk.types import AgentRequest


def create_agent_router(agent: BaseAgent, prefix: str = "agent") -> APIRouter:
    """
    Creates a FastAPI router that serves the given agent.

    Args:
        agent: The BaseAgent implementation to serve
        prefix: Optional URL prefix for the API endpoints

    Returns:
        APIRouter instance with agent endpoints
    """
    router = APIRouter(
        prefix=prefix,
        tags=[agent.__class__.__name__],
    )

    @router.post("/run", response_model=AgentResponse)
    async def run_agent(request: Annotated[AgentRequest, "Agent request parameters"]) -> AgentResponse:  # pyright: ignore[reportUnusedFunction]
        try:
            return await agent.run(task=request.task, url=request.url)
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    return router

================
File: packages/notte-integrations/src/notte_integrations/credentials/hashicorp/docker-compose.yml
================
version: '3.8'
services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: server -dev

# run it using docker-compose --env-file /path/to/.env up

================
File: packages/notte-integrations/src/notte_integrations/credentials/hashicorp/vault.py
================
import os
from dataclasses import dataclass
from typing import Any, Protocol, final

import tldextract
from hvac.exceptions import InvalidPath
from notte_core.common.credentials.base import (
    BaseVault,
    CredentialField,
    VaultCredentials,
)
from typing_extensions import override


class SysProtocol(Protocol):
    def list_mounted_secrets_engines(self) -> Any: ...
    def enable_secrets_engine(self, backend_type: str, path: str, options: dict[str, Any]) -> Any: ...


class SecretsProtocol(Protocol):
    def read_secret_version(self, path: str, mount_point: str) -> Any: ...
    def create_or_update_secret(self, path: str, secret: dict[str, Any], mount_point: str) -> Any: ...
    def delete_metadata_and_all_versions(self, path: str, mount_point: str) -> Any: ...


@dataclass
class HashiCorpVaultClientProtocol:
    url: str
    token: str
    sys: SysProtocol


try:
    from hvac import Client as HashiCorpVaultClient

    VAULT_AVAILABLE = True
except ImportError:
    VAULT_AVAILABLE = False  # type: ignore


def check_vault_imports():
    if not VAULT_AVAILABLE:
        raise ImportError(
            (
                "The 'hvac' package is required for HashiCorp Vault integration."
                " Install 'vault' optional dependencies with 'uv sync --extra vault'"
            )
        )


@final
class HashiCorpVault(BaseVault):
    """HashiCorp Vault implementation of the BaseVault interface."""

    def __init__(self, url: str, token: str):
        check_vault_imports()
        self.client: HashiCorpVaultClientProtocol = HashiCorpVaultClient(url=url, token=token)  # type: ignore
        self.secrets: SecretsProtocol = self.client.secrets.kv.v2  # type: ignore
        self._mount_path: str = "secret"
        self._init_vault()

    def _init_vault(self) -> None:
        try:
            mounts = self.client.sys.list_mounted_secrets_engines()
            if self._mount_path not in mounts["data"]:
                self.client.sys.enable_secrets_engine(
                    backend_type="kv", path=self._mount_path, options={"version": "2"}
                )
            else:
                mount_info = mounts["data"][f"{self._mount_path}/"]["options"]
                if mount_info.get("version") != "2":
                    raise ValueError(f"Existing {self._mount_path} mount is not a KV v2 secrets engine")
        except Exception as e:
            if "path is already in use" not in str(e):
                raise e

    @staticmethod
    def get_root_domain(url: str) -> str:
        return tldextract.extract(url).domain or url

    @override
    async def _set_singleton_credentials(self, creds: list[CredentialField]) -> None:
        for cred in creds:
            if not cred.singleton:
                raise ValueError(f"{cred.__class__} can't be set as singleton credential: url-specific only")

        self.secrets.create_or_update_secret(
            path="singleton_credentials",
            secret=dict(
                **{cred.__class__.__qualname__: cred.value for cred in creds},
            ),
            mount_point=self._mount_path,
        )

    @override
    async def get_singleton_credentials(self) -> list[CredentialField]:
        try:
            secret = self.secrets.read_secret_version(path="singleton_credentials", mount_point=self._mount_path)
        except InvalidPath:
            return []

        data = secret["data"]["data"]

        return [CredentialField.registry[key](value=value) for key, value in data.items()]

    @override
    async def _add_credentials(self, creds: VaultCredentials) -> None:
        for cred in creds.creds:
            if cred.singleton:
                raise ValueError(f"{cred.__class__} can't be set as url specific credential: singleton only")
        domain = HashiCorpVault.get_root_domain(creds.url)
        self.secrets.create_or_update_secret(
            path=f"credentials/{domain}",
            secret=dict(
                url=creds.url,
                **{cred.__class__.__qualname__: cred.value for cred in creds.creds},
            ),
            mount_point=self._mount_path,
        )

    @override
    async def _get_credentials_impl(self, url: str) -> VaultCredentials | None:
        domain = HashiCorpVault.get_root_domain(url)
        try:
            secret = self.secrets.read_secret_version(path=f"credentials/{domain}", mount_point=self._mount_path)
            data = secret["data"]["data"]
            url = data["url"]
            del data["url"]

            return VaultCredentials(
                url=url,
                creds=[CredentialField.registry[key](value=value) for key, value in data.items()],
            )

        except Exception:
            return None

    @override
    async def remove_credentials(self, url: str) -> None:
        domain = HashiCorpVault.get_root_domain(url)
        self.secrets.delete_metadata_and_all_versions(path=f"credentials/{domain}", mount_point=self._mount_path)

    @classmethod
    def create_from_env(cls) -> "HashiCorpVault":
        """Create a HashiCorpVault instance from environment variables.

        Requires VAULT_URL and VAULT_DEV_ROOT_TOKEN_ID to be set in environment variables.
        Automatically loads from .env file if present.

        Returns:
            HashiCorpVault: Initialized vault instance

        Raises:
            ValueError: If required environment variables are missing or vault server is not running
        """
        vault_url = os.getenv("VAULT_URL")
        vault_token = os.getenv("VAULT_DEV_ROOT_TOKEN_ID")

        if not vault_url or not vault_token:
            raise ValueError(
                """"
VAULT_URL and VAULT_DEV_ROOT_TOKEN_ID must be set in the .env file.
For example if you are running the vault locally:
VAULT_URL=http://0.0.0.0:8200
VAULT_DEV_ROOT_TOKEN_ID=<your-vault-dev-root-token-id>
"""
            )

        try:
            return cls(url=vault_url, token=vault_token)
        except ConnectionError as e:
            vault_not_running_instructions = """
Make sure to start the vault server before running the agent.
Instructions to start the vault server:
> cd packages/notte-integrations/src/notte_integrations/credentials/hashicorp
> docker-compose --env-file ../../../../../.env up
"""
            raise ValueError(f"Vault server is not running. {vault_not_running_instructions}") from e

================
File: packages/notte-integrations/src/notte_integrations/credentials/README.md
================
## Basic example code

```python
from notte_agent.main import Agent
from notte_integrations.credentials.hashicorp.vault import HashiCorpVault
import os
from dotenv import load_dotenv


# CRITICAL: make sure to start the vault server before running the agent
# > cd packages/notte-integrations/src/notte_integrations/credentials/hashicorp
# > docker-compose --env-file ../../../../../.env up

# Then, set the VAULT_URL environment variable either to .env file or

# VAULT_URL=http://0.0.0.0:8200
# VAULT_DEV_ROOT_TOKEN_ID=<your-vault-dev-root-token-id>

# Load environment variables
load_dotenv()

# Initialize vault with environment variables
vault = HashiCorpVault(
    url=os.getenv("VAULT_URL"),
    token=os.getenv("VAULT_DEV_ROOT_TOKEN_ID")
)

# Add credentials from environment variables
vault.add_credentials(
    url="https://x.com",
    username=os.getenv("TWITTER_USERNAME"),
    password=os.getenv("TWITTER_PASSWORD")
)

# Configure and initialize agent with vault
agent = Agent(vault=vault)
```

================
File: packages/notte-integrations/src/notte_integrations/notifiers/discord.py
================
from typing import Any

import discord
from notte_agent.common.notifier import BaseNotifier
from pydantic import BaseModel
from typing_extensions import override


class DiscordConfig(BaseModel):
    """Configuration for Discord sending functionality."""

    token: str
    channel_id: int


class DiscordNotifier(BaseNotifier):
    """Discord notification implementation."""

    def __init__(self, config: DiscordConfig) -> None:
        super().__init__()
        self.config: DiscordConfig = config
        self._client: discord.Client = discord.Client(intents=discord.Intents.default())

    @override
    async def send_message(self, text: str) -> None:
        """Send a message to the configured Discord channel."""
        try:

            @self._client.event
            async def on_ready():  # pyright: ignore[reportUnusedFunction]
                try:
                    channel = self._client.get_channel(self.config.channel_id)
                    if channel is None:
                        raise ValueError(f"Could not find channel with ID: {self.config.channel_id}")
                    _: Any = await channel.send(text)  # pyright: ignore[reportUnknownMemberType,reportAttributeAccessIssue]
                finally:
                    await self._client.close()

            await self._client.start(self.config.token)
        except Exception as e:
            raise ValueError(f"Failed to send Discord message: {str(e)}")

================
File: packages/notte-integrations/src/notte_integrations/notifiers/mail.py
================
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from notte_agent.common.notifier import BaseNotifier
from pydantic import BaseModel
from typing_extensions import override


class EmailConfig(BaseModel):
    """Configuration for email sending functionality."""

    smtp_server: str
    smtp_port: int = 587
    sender_email: str
    sender_password: str
    receiver_email: str
    subject: str = "Notte Agent Task Report"


class EmailNotifier(BaseNotifier):
    """Email notification implementation."""

    def __init__(self, config: EmailConfig) -> None:
        super().__init__()  # Call parent class constructor
        self.config: EmailConfig = config
        self._server: smtplib.SMTP | None = None

    async def connect(self) -> None:
        """Connect to the SMTP server."""
        if self._server is not None:
            return

        self._server = smtplib.SMTP(host=self.config.smtp_server, port=self.config.smtp_port)
        _ = self._server.starttls()
        _ = self._server.login(user=self.config.sender_email, password=self.config.sender_password)

    async def disconnect(self) -> None:
        """Disconnect from the SMTP server."""
        if self._server is not None:
            _ = self._server.quit()
            self._server = None

    @override
    async def send_message(self, text: str) -> None:
        """Send an email with the given subject and body."""
        await self.connect()
        try:
            if self._server is None:
                await self.connect()

            msg = MIMEMultipart()
            msg["From"] = self.config.sender_email
            msg["To"] = self.config.receiver_email
            msg["Subject"] = self.config.subject

            msg.attach(MIMEText(text, "plain"))

            if self._server:
                _ = self._server.send_message(msg)
        finally:
            await self.disconnect()

    def __del__(self):
        """Ensure SMTP connection is closed on deletion."""
        if self._server is not None:
            _ = self._server.quit()

================
File: packages/notte-integrations/src/notte_integrations/notifiers/slack.py
================
from notte_agent.common.notifier import BaseNotifier
from pydantic import BaseModel
from slack_sdk.web.client import WebClient
from typing_extensions import override


class SlackConfig(BaseModel):
    """Configuration for Slack sending functionality."""

    token: str
    channel_id: str


class SlackNotifier(BaseNotifier):
    """Slack notification implementation."""

    def __init__(self, config: SlackConfig) -> None:
        super().__init__()
        self.config: SlackConfig = config
        self._client: WebClient = WebClient(token=self.config.token)

    @override
    async def send_message(self, text: str) -> None:
        """Send a message to the configured Slack channel."""
        _ = self._client.chat_postMessage(channel=self.config.channel_id, text=text)  # type: ignore[type_unknown]

================
File: packages/notte-integrations/src/notte_integrations/sessions/anchor_pool.py
================
import os
from typing import Any

import requests
from loguru import logger
from notte_browser.resource import BrowserResourceOptions
from notte_pools.base import BrowserWithContexts
from notte_pools.cdp_pool import CDPBrowserPool, CDPSession
from notte_sdk.types import BrowserType
from pydantic import Field
from typing_extensions import override


def get_anchor_api_key() -> str:
    anchor_api_key: str | None = os.getenv("ANCHOR_API_KEY")
    if anchor_api_key is None:
        raise ValueError("ANCHOR_API_KEY is not set")
    return anchor_api_key


class AnchorBrowserPool(CDPBrowserPool):
    anchor_base_url: str = "https://api.anchorbrowser.io"
    use_proxy: bool = True
    solve_captcha: bool = True
    anchor_api_key: str = Field(default_factory=get_anchor_api_key)

    @property
    @override
    def browser_type(self) -> BrowserType:
        return BrowserType.CHROMIUM

    @override
    def create_session_cdp(self, resource_options: BrowserResourceOptions | None = None) -> CDPSession:
        if self.config.verbose:
            logger.info("Creating Anchor session...")

        browser_configuration: dict[str, Any] = {}

        if self.use_proxy:
            browser_configuration["proxy_config"] = {"type": "anchor-residential", "active": True}

        if self.solve_captcha:
            browser_configuration["captcha_config"] = {"active": True}

        response = requests.post(
            f"{self.anchor_base_url}/api/sessions",
            headers={
                "anchor-api-key": self.anchor_api_key,
                "Content-Type": "application/json",
            },
            json=browser_configuration,
        )
        response.raise_for_status()
        session_id: str = response.json()["id"]
        return CDPSession(
            session_id=session_id,
            cdp_url=f"wss://connect.anchorbrowser.io?apiKey={self.anchor_api_key}&sessionId={session_id}",
        )

    @override
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        if self.config.verbose:
            logger.info(f"Closing CDP session for URL {browser.cdp_url}")
        await browser.browser.close()
        del self.sessions[browser.browser_id]
        return True

================
File: packages/notte-integrations/src/notte_integrations/sessions/browserbase_pool.py
================
import os

from loguru import logger
from notte_browser.resource import BrowserResourceOptions
from notte_pools.base import BrowserWithContexts
from notte_pools.cdp_pool import CDPBrowserPool, CDPSession
from notte_sdk.types import BrowserType
from typing_extensions import override

try:
    from browserbase import Browserbase
except ImportError:
    raise ImportError("Install with notte[browserbase] to include browserbase integration")


# TODO: use api with requests instead of sdk so we don't have the added dependency
class BrowserBasePool(CDPBrowserPool):
    def __init__(
        self,
        verbose: bool = False,
        stealth: bool = True,
    ):
        super().__init__()

        bb_api_key: str | None = os.getenv("BROWSERBASE_API_KEY")
        bb_project_id: str | None = os.getenv("BROWSERBASE_PROJECT_ID")

        if bb_api_key is None:
            raise ValueError("BROWSERBASE_API_KEY env variable is not set")

        if bb_project_id is None:
            raise ValueError("BROWSERBASE_PROJECT_ID env variable is not set")

        self.bb_api_key: str = bb_api_key
        self.bb_project_id: str = bb_project_id

        self.bb: Browserbase = Browserbase(api_key=self.bb_api_key)
        self.stealth: bool = stealth
        self.verbose: bool = verbose

    @property
    @override
    def browser_type(self) -> BrowserType:
        return BrowserType.CHROMIUM

    @override
    def create_session_cdp(self, resource_options: BrowserResourceOptions | None = None) -> CDPSession:
        if self.verbose:
            logger.info("Creating BrowserBase session...")

        stealth_args = dict(
            browser_settings={
                "fingerprint": {
                    "browsers": ["chrome", "firefox", "edge", "safari"],
                    "devices": ["mobile", "desktop"],
                    "locales": ["en-US", "en-GB"],
                    "operatingSystems": ["android", "ios", "linux", "macos", "windows"],
                    "screen": {
                        "maxHeight": 1080,
                        "maxWidth": 1920,
                        "minHeight": 1080,
                        "minWidth": 1920,
                    },
                    "viewport": {
                        "width": 1920,
                        "height": 1080,
                    },
                },
                "solveCaptchas": True,
            },
            proxies=True,
        )

        args = stealth_args if self.stealth else {}
        session = self.bb.sessions.create(project_id=self.bb_project_id, **args)  # type: ignore

        if self.verbose:
            logger.info(f"Got BrowserBase session {session}")

        return CDPSession(
            session_id=session.id,
            cdp_url=session.connect_url,
        )

    @override
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        if self.verbose:
            logger.info(f"Closing CDP session for URL {browser.cdp_url}")
        await browser.browser.close()
        del self.sessions[browser.browser_id]
        return True

================
File: packages/notte-integrations/src/notte_integrations/sessions/steel_pool.py
================
import os

import requests
from loguru import logger
from notte_browser.resource import BrowserResourceOptions
from notte_pools.base import BrowserWithContexts
from notte_pools.cdp_pool import CDPBrowserPool, CDPSession
from notte_sdk.types import BrowserType
from pydantic import Field
from typing_extensions import override


def get_steel_api_key() -> str:
    steel_api_key: str | None = os.getenv("STEEL_API_KEY")
    if steel_api_key is None:
        raise ValueError("STEEL_API_KEY is not set")
    return steel_api_key


class SteelBrowserPool(CDPBrowserPool):
    steel_base_url: str = "api.steel.dev"  # localhost:3000"
    steel_api_key: str = Field(default_factory=get_steel_api_key)

    @property
    @override
    def browser_type(self) -> BrowserType:
        return BrowserType.CHROMIUM

    @override
    def create_session_cdp(self, resource_options: BrowserResourceOptions | None = None) -> CDPSession:
        logger.info("Creating Steel session...")

        url = f"https://{self.steel_base_url}/v1/sessions"

        headers = {"Steel-Api-Key": self.steel_api_key}

        response = requests.post(url, headers=headers)
        response.raise_for_status()
        data: dict[str, str] = response.json()
        if "localhost" in self.steel_base_url:
            cdp_url = f"ws://{self.steel_base_url}/v1/devtools/browser/{data['id']}"
        else:
            cdp_url = f"wss://connect.steel.dev?apiKey={self.steel_api_key}&sessionId={data['id']}"
        return CDPSession(session_id=data["id"], cdp_url=cdp_url)

    @override
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        if self.config.verbose:
            logger.info(f"Closing CDP session for URL {browser.cdp_url}")
        steel_session = self.sessions[browser.browser_id]

        url = f"https://{self.steel_base_url}/v1/sessions/{steel_session.session_id}/release"

        headers = {"Steel-Api-Key": self.steel_api_key}

        response = requests.post(url, headers=headers)
        if response.status_code != 200:
            if self.config.verbose:
                logger.error(f"Failed to release Steel session {steel_session.session_id}: {response.json()}")
            return False
        del self.sessions[browser.browser_id]
        return True

================
File: packages/notte-integrations/pyproject.toml
================
[project]
name = "notte-integrations"
version = "1.3.3"
description = "The integrations for Notte"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
    { include = "notte_integrations", from = "src" },
]


requires-python = ">=3.11"
dependencies = [
    "notte_core>=1.3.3",
    "notte_browser>=1.3.3",
    "notte_agent>=1.3.3",
    "discord-py>=2.3.0,<2.5.0",
    "fastapi>=0.115.8",
    "uvicorn>=0.29.0",
    "hvac>=2.3.0",
    "browserbase>=1.2.0",
    "camoufox[geoip]>=0.4.11",
    "browser-use>=0.1.40",
    "langchain-google-genai>=2.1.1",
    "slack-sdk>=3.34.0",
]



[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

================
File: packages/notte-pools/src/notte_pools/base.py
================
import asyncio
import datetime as dt
import uuid
from abc import ABC, abstractmethod
from typing import ClassVar

from loguru import logger
from notte_browser.errors import (
    BrowserPoolNotStartedError,
    BrowserResourceNotFoundError,
)
from notte_browser.resource import BrowserResource, BrowserResourceOptions, PlaywrightResourceHandler
from notte_core.common.config import FrozenConfig
from openai import BaseModel
from patchright.async_api import (
    Browser as PlaywrightBrowser,
)
from patchright.async_api import (
    BrowserContext as PlaywrightBrowserContext,
)
from pydantic import Field
from typing_extensions import override

from notte_pools.ports import get_port_manager


class TimeContext(BaseModel):
    model_config = {  # pyright: ignore[reportUnannotatedClassAttribute]
        "arbitrary_types_allowed": True
    }
    context_id: str
    context: PlaywrightBrowserContext = Field(exclude=True)
    timestamp: dt.datetime = Field(default_factory=lambda: dt.datetime.now())


class BrowserWithContexts(BaseModel):
    model_config = {  # pyright: ignore[reportUnannotatedClassAttribute]
        "arbitrary_types_allowed": True
    }

    browser_id: str
    browser: PlaywrightBrowser = Field(exclude=True)
    contexts: dict[str, TimeContext]
    resource_options: BrowserResourceOptions
    timestamp: dt.datetime = Field(default_factory=lambda: dt.datetime.now())
    cdp_url: str | None = None


class BaseBrowserPoolConfig(FrozenConfig):
    contexts_per_browser: int = 4
    viewport_width: int = 1280
    viewport_height: int = 1020
    verbose: bool = False


class BaseBrowserPool(PlaywrightResourceHandler, ABC):
    BROWSER_CREATION_TIMEOUT_SECONDS: ClassVar[int] = 30
    BROWSER_OPERATION_TIMEOUT_SECONDS: ClassVar[int] = 30

    config: BaseBrowserPoolConfig = BaseBrowserPoolConfig()
    browsers: dict[str, BrowserWithContexts] = Field(default_factory=dict)
    headless_browsers: dict[str, BrowserWithContexts] = Field(default_factory=dict)

    def available_browsers(self, headless: bool | None = None) -> dict[str, BrowserWithContexts]:
        if headless is None:
            return {**self.headless_browsers, **self.browsers}
        elif headless:
            return self.headless_browsers
        else:
            return self.browsers

    @override
    async def stop(self) -> None:
        """Stop the playwright instance"""
        await super().stop()
        self.browsers = {}
        self.headless_browsers = {}

    @abstractmethod
    async def create_playwright_browser(self, resource_options: BrowserResourceOptions) -> PlaywrightBrowser:
        pass

    @abstractmethod
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        pass

    async def create_browser(self, resource_options: BrowserResourceOptions) -> BrowserWithContexts:
        """Get an existing browser or create a new one if needed"""

        if resource_options.debug:
            port_manager = get_port_manager()

            # set port if nothing was set until now
            if resource_options.debug_port is None and port_manager is not None:
                debug_port = port_manager.acquire_port()
                if debug_port is None:
                    raise BrowserPoolNotStartedError()
                resource_options = resource_options.set_port(debug_port)

        browser = await self.create_playwright_browser(resource_options)
        browser_id = str(uuid.uuid4())
        _browser = BrowserWithContexts(
            browser_id=browser_id,
            browser=browser,
            contexts={},
            resource_options=resource_options,
        )
        # Store browser reference
        self.available_browsers(resource_options.headless)[browser_id] = _browser
        return _browser

    async def get_or_create_browser(self, resource_options: BrowserResourceOptions) -> BrowserWithContexts:
        """Find a browser with available space for a new context"""
        browsers = self.available_browsers(resource_options.headless)
        for browser in browsers.values():
            if len(browser.contexts) < self.config.contexts_per_browser:
                return browser
        # Create a new browser
        if self.config.verbose:
            logger.info(
                f"Maximum contexts per browser reached ({self.config.contexts_per_browser}). Creating new browser..."
            )
        browser = await self.create_browser(resource_options)
        return browser

    def create_context(self, browser: BrowserWithContexts, context: PlaywrightBrowserContext) -> str:
        context_id = str(uuid.uuid4())
        browser.contexts[context_id] = TimeContext(context_id=context_id, context=context)
        return context_id

    @override
    async def get_browser_resource(self, resource_options: BrowserResourceOptions) -> BrowserResource:
        browser = await self.get_or_create_browser(resource_options)

        try:
            async with asyncio.timeout(self.BROWSER_OPERATION_TIMEOUT_SECONDS):
                context = await browser.browser.new_context(
                    no_viewport=False,
                    viewport={
                        "width": self.config.viewport_width,
                        "height": self.config.viewport_height,
                    },
                    permissions=[
                        "clipboard-read",
                        "clipboard-write",
                    ],  # Needed for clipboard copy/paste to respect tabs / new lines
                    proxy=resource_options.proxy.to_playwright()
                    if resource_options.proxy is not None
                    else None,  # already specified at browser level, but might as well
                    user_agent=resource_options.user_agent,
                )
                if resource_options.cookies is not None:
                    if self.config.verbose:
                        logger.info(f"Adding cookies to browser {browser.browser_id}...")
                    for cookie in resource_options.cookies:
                        await context.add_cookies([cookie.model_dump()])  # type: ignore
                context_id = self.create_context(browser, context)
                if len(context.pages) == 0:
                    page = await context.new_page()
                else:
                    page = context.pages[-1]
                if browser.resource_options.debug_port is not None:
                    resource_options = resource_options.set_port(browser.resource_options.debug_port)
                return BrowserResource(
                    page=page,
                    context_id=context_id,
                    browser_id=browser.browser_id,
                    resource_options=resource_options,
                )
        except Exception as e:
            logger.error(f"Failed to create browser resource: {e}")
            # Cleanup on failure
            for context_id, context in browser.contexts.items():
                try:
                    await context.context.close()
                    del browser.contexts[context_id]
                except Exception:
                    pass
            raise

    async def release_browser(self, browser: BrowserWithContexts) -> None:
        if self.config.verbose:
            logger.info(f"Releasing browser {browser.browser_id}...")
        browsers = self.available_browsers(headless=browser.resource_options.headless)
        if browser.browser_id not in browsers:
            raise BrowserResourceNotFoundError(
                f"Browser '{browser.browser_id}' not found in available browsers (i.e {list(browsers.keys())})"
            )
        status = await self.close_playwright_browser(browser)
        if not status:
            logger.error(f"/!\\ VERY BAD THING HAPPENED: Failed to close browser {browser.browser_id}")
        port_manager = get_port_manager()
        if port_manager is not None and browser.resource_options.debug_port is not None:
            port_manager.release_port(browser.resource_options.debug_port)
        del browsers[browser.browser_id]

    @override
    async def release_browser_resource(self, resource: BrowserResource) -> None:
        browsers = self.available_browsers(resource.resource_options.headless)
        if resource.browser_id not in browsers:
            raise BrowserResourceNotFoundError(
                f"Browser '{resource.browser_id}' not found in available browsers (i.e {list(browsers.keys())})"
            )
        resource_browser = browsers[resource.browser_id]
        if resource.context_id not in resource_browser.contexts:
            raise BrowserResourceNotFoundError(
                (
                    f"Context '{resource.context_id}' not found in available "
                    f"contexts (i.e {list(resource_browser.contexts.keys())})"
                )
            )
        try:
            async with asyncio.timeout(self.BROWSER_OPERATION_TIMEOUT_SECONDS):
                await resource_browser.contexts[resource.context_id].context.close()
        except Exception as e:
            logger.error(f"Failed to close playright context: {e}")
            return
        del resource_browser.contexts[resource.context_id]
        if len(resource_browser.contexts) == 0:
            await self.release_browser(resource_browser)

================
File: packages/notte-pools/src/notte_pools/cdp_pool.py
================
from abc import ABC, abstractmethod

from loguru import logger
from notte_browser.resource import BrowserResource, BrowserResourceOptions
from notte_sdk.types import BrowserType
from patchright.async_api import Browser as PatchrightBrowser
from pydantic import BaseModel, Field
from typing_extensions import override

from notte_pools.base import (
    BaseBrowserPool,
    BrowserWithContexts,
)


class CDPSession(BaseModel):
    session_id: str
    cdp_url: str


class CDPBrowserPool(BaseBrowserPool, ABC):
    sessions: dict[str, CDPSession] = Field(default_factory=dict)
    last_session: CDPSession | None = Field(default=None)

    @property
    @abstractmethod
    def browser_type(self) -> BrowserType:
        pass

    @abstractmethod
    def create_session_cdp(self, resource_options: BrowserResourceOptions | None = None) -> CDPSession:
        pass

    @override
    async def create_playwright_browser(self, resource_options: BrowserResourceOptions) -> PatchrightBrowser:
        cdp_session = self.create_session_cdp(resource_options)
        self.last_session = cdp_session

        match self.browser_type:
            case BrowserType.CHROMIUM:
                return await self.playwright.chromium.connect_over_cdp(cdp_session.cdp_url)
            case BrowserType.FIREFOX:
                return await self.playwright.firefox.connect(cdp_session.cdp_url)

    @override
    async def create_browser(self, resource_options: BrowserResourceOptions) -> BrowserWithContexts:
        browser = await super().create_browser(resource_options)
        if self.last_session is None:
            raise ValueError("Last session is not set")
        self.sessions[browser.browser_id] = self.last_session
        return browser


class SingleCDPBrowserPool(CDPBrowserPool):
    cdp_url: str | None = None

    @property
    @override
    def browser_type(self) -> BrowserType:
        return BrowserType.CHROMIUM

    @override
    def create_session_cdp(self, resource_options: BrowserResourceOptions | None = None) -> CDPSession:
        if self.cdp_url is None:
            raise ValueError("CDP URL is not set")
        return CDPSession(session_id=self.cdp_url, cdp_url=self.cdp_url)

    @override
    async def get_browser_resource(self, resource_options: BrowserResourceOptions) -> BrowserResource:
        # start the pool automatically for single browser pool
        await self.start()
        return await super().get_browser_resource(resource_options)

    @override
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        if self.config.verbose:
            logger.info(f"Closing CDP session for URL {browser.cdp_url}")
        self.cdp_url = None
        del self.sessions[browser.browser_id]
        await self.stop()
        return True

================
File: packages/notte-pools/src/notte_pools/local_pool.py
================
import asyncio
import datetime as dt
import os
from typing import Any, Self

from loguru import logger
from notte_browser.errors import (
    BrowserResourceLimitError,
)
from notte_browser.resource import BrowserResource, BrowserResourceHandlerConfig, BrowserResourceOptions
from notte_core.common.config import FrozenConfig
from patchright.async_api import Browser as PatchrightBrowser
from pydantic import Field
from typing_extensions import override

from notte_pools.base import (
    BaseBrowserPool,
    BaseBrowserPoolConfig,
    BrowserWithContexts,
)
from notte_pools.ports import PortManager


class MemoryBrowserPoolConfig(FrozenConfig):
    # Memory allocations in MB
    container_memory: int = Field(default_factory=lambda: int(os.getenv("CONTAINER_MEMORY_MB", "4096")))  # Default 4GB
    system_reserved: int = Field(
        default_factory=lambda: int(os.getenv("SYSTEM_RESERVED_MB", "1024"))
    )  # Default 1GB reserved

    # Base memory requirements (headless mode)
    base_browser_memory: int = Field(default_factory=lambda: int(os.getenv("BASE_BROWSER_MEMORY_MB", "150")))
    context_memory: int = Field(default_factory=lambda: int(os.getenv("CONTEXT_MEMORY_MB", "35")))
    page_memory: int = Field(default_factory=lambda: int(os.getenv("PAGE_MEMORY_MB", "40")))

    # Safety margin (percentage of total memory to keep free)
    safety_margin: float = Field(
        default_factory=lambda: float(os.getenv("MEMORY_SAFETY_MARGIN", "0.2"))
    )  # Default 20% safety margin

    def set_container_memory(self: Self, value: int) -> Self:
        return self._copy_and_validate(container_memory=value)

    def set_system_reserved(self: Self, value: int) -> Self:
        return self._copy_and_validate(system_reserved=value)

    def set_base_browser_memory(self: Self, value: int) -> Self:
        return self._copy_and_validate(base_browser_memory=value)

    def set_context_memory(self: Self, value: int) -> Self:
        return self._copy_and_validate(context_memory=value)

    def set_page_memory(self: Self, value: int) -> Self:
        return self._copy_and_validate(page_memory=value)

    def set_safety_margin(self: Self, value: float) -> Self:
        return self._copy_and_validate(safety_margin=value)

    def get_available_memory(self) -> int:
        """Calculate total available memory for Playwright"""
        return self.container_memory - self.system_reserved

    def calculate_max_contexts(self) -> int:
        """Calculate maximum number of contexts based on available memory"""
        available_memory = self.get_available_memory() * (1 - self.safety_margin)
        memory_per_context = self.context_memory + self.page_memory
        return int(available_memory / memory_per_context)

    def calculate_max_browsers(self) -> int:
        """Calculate optimal number of browser instances"""
        max_contexts = self.calculate_max_contexts()
        contexts_per_browser = int(os.getenv("CONTEXTS_PER_BROWSER", "4"))
        return max(1, max_contexts // contexts_per_browser)

    def calculate_contexts_per_browser(self) -> int:
        return int(self.calculate_max_contexts() / self.calculate_max_browsers())


class BrowserPoolConfig(BrowserResourceHandlerConfig):
    memory: MemoryBrowserPoolConfig = MemoryBrowserPoolConfig()

    def set_memory(self: Self, value: MemoryBrowserPoolConfig) -> Self:
        return self._copy_and_validate(memory=value)

    def set_max_browsers(self: Self, value: int | None) -> Self:
        return self._copy_and_validate(max_browsers=value)

    def set_max_total_contexts(self: Self, value: int | None) -> Self:
        return self._copy_and_validate(max_total_contexts=value)

    def get_max_contexts(self) -> int:
        if self.max_total_contexts is not None:
            return self.max_total_contexts
        return self.memory.calculate_max_contexts()

    def get_max_browsers(self) -> int:
        if self.max_browsers is not None:
            return self.max_browsers
        return self.memory.calculate_max_browsers()

    def get_contexts_per_browser(self) -> int:
        if self.max_total_contexts is not None:
            return self.max_total_contexts // self.get_max_browsers()
        return self.memory.calculate_contexts_per_browser()

    def estimate_memory_usage(self, n_contexts: int, n_browsers: int) -> int:
        return (
            (n_contexts * self.memory.context_memory)
            + (n_contexts * self.memory.page_memory)
            + (n_browsers * self.memory.base_browser_memory)
        )


class LocalBrowserPool(BaseBrowserPool):
    local_config: BrowserPoolConfig = Field(default_factory=BrowserPoolConfig)

    @override
    def model_post_init(self, __context: Any):
        PortManager().reset(
            start=self.local_config.base_debug_port,
            nb=self.local_config.get_max_browsers(),
        )
        self.config: BaseBrowserPoolConfig = BaseBrowserPoolConfig(
            contexts_per_browser=self.local_config.get_contexts_per_browser(),
            viewport_width=self.local_config.viewport_width,
            viewport_height=self.local_config.viewport_height,
            verbose=self.local_config.verbose,
        )
        if self.local_config.verbose:
            logger.info(
                (
                    "Initializing BrowserPool with:"
                    f"\n - Container Memory: {self.local_config.memory.container_memory}MB"
                    f"\n - Available Memory: {self.local_config.memory.get_available_memory()}MB"
                    f"\n - Max Contexts: {self.local_config.get_max_contexts()}"
                    f"\n - Max Browsers: {self.local_config.get_max_browsers()}"
                    f"\n - Contexts per Browser: {self.local_config.get_contexts_per_browser()}"
                )
            )
        self.base_offset: int = 0

    def check_sessions(self) -> dict[str, int]:
        """Check actual number of open browser instances and contexts."""

        return {
            "open_browsers": len(self.available_browsers()),
            "open_contexts": sum(len(browser.contexts) for browser in self.available_browsers().values()),
        }

    def check_memory_usage(self) -> dict[str, float]:
        """Monitor memory usage of browser contexts"""
        stats = self.check_sessions()

        estimated_memory = self.local_config.estimate_memory_usage(
            n_contexts=stats["open_contexts"],
            n_browsers=len(self.available_browsers()),
        )

        available_memory = self.local_config.memory.get_available_memory()

        return {
            **stats,
            "container_memory_mb": self.local_config.memory.container_memory,
            "available_memory_mb": available_memory,
            "estimated_memory_mb": estimated_memory,
            "memory_usage_percentage": (estimated_memory / available_memory) * 100,
            "contexts_remaining": self.local_config.get_max_contexts() - stats["open_contexts"],
        }

    @override
    async def create_playwright_browser(self, resource_options: BrowserResourceOptions) -> PatchrightBrowser:
        """Get an existing browser or create a new one if needed"""
        # Check if we can create more browsers
        if len(self.available_browsers()) >= self.local_config.get_max_browsers():
            # Could implement browser reuse strategy here
            raise BrowserResourceLimitError(
                f"Maximum number of browsers ({self.local_config.get_max_browsers()}) reached"
            )

        if resource_options.debug_port is None and resource_options.debug:
            raise ValueError("Port is required in LocalBrowserPool")

        browser_args = self.local_config.get_chromium_args(cdp_port=resource_options.debug_port)

        if resource_options.headless and resource_options.user_agent is None:
            logger.warning(
                "Launching browser in headless without providing a user-agent"
                + ", for better odds at evading bot detection, set a user-agent or run in headful mode"
            )

        browser = await self.playwright.chromium.launch(
            headless=resource_options.headless,
            proxy=resource_options.proxy.to_playwright() if resource_options.proxy is not None else None,
            timeout=self.BROWSER_CREATION_TIMEOUT_SECONDS * 1000,
            args=browser_args,
        )

        return browser

    @override
    async def close_playwright_browser(self, browser: BrowserWithContexts, force: bool = True) -> bool:
        if not force and (dt.datetime.now() - browser.timestamp) < dt.timedelta(
            seconds=self.BROWSER_CREATION_TIMEOUT_SECONDS
        ):
            if self.config.verbose:
                logger.info(
                    (
                        f"Browser {browser.browser_id} has been open for less than "
                        f"{self.BROWSER_CREATION_TIMEOUT_SECONDS} seconds. Skipping..."
                    )
                )
            return True
        try:
            async with asyncio.timeout(self.BROWSER_OPERATION_TIMEOUT_SECONDS):
                await browser.browser.close()
                return True
        except Exception as e:
            logger.error(f"Failed to close window: {e}")
        return False

    async def cleanup(self, except_resources: list[BrowserResource] | None = None, force: bool = True) -> None:
        """Cleanup all browser instances"""

        except_resources_ids: dict[str, set[str]] = {
            resource.browser_id: set() for resource in (except_resources or []) if resource.browser_id is not None
        }
        for resource in except_resources or []:
            if resource.browser_id is not None and resource.context_id is not None:
                except_resources_ids[resource.browser_id].add(resource.context_id)
        nb_browsers = len(self.available_browsers())
        for browser in self.available_browsers().values():
            if browser.browser_id not in except_resources_ids or len(except_resources_ids[browser.browser_id]) == 0:
                if except_resources is not None:
                    logger.info(f"Closing browser {browser.browser_id} because it is not in except_resources")
                await self.release_browser(browser)
            else:
                # close all contexts except the ones in except_resources_ids[browser.browser_id]
                context_ids = list(browser.contexts.keys())
                for context_id in context_ids:
                    if context_id not in except_resources_ids[browser.browser_id]:
                        context = browser.contexts[context_id]
                        should_skip = not force and (dt.datetime.now() - context.timestamp) < dt.timedelta(
                            seconds=self.BROWSER_CREATION_TIMEOUT_SECONDS
                        )
                        if should_skip:
                            if self.config.verbose:
                                logger.info(
                                    (
                                        f"Skipping context {context_id} of browser {browser.browser_id} "
                                        "because it has been open for "
                                        f"less than {self.BROWSER_CREATION_TIMEOUT_SECONDS} s"
                                    )
                                )
                            continue
                        if self.config.verbose:
                            logger.info(
                                (
                                    f"Closing context {context_id} of browser {browser.browser_id} "
                                    "because it is not in except_resources"
                                )
                            )

                        await self.release_browser_resource(
                            BrowserResource(
                                page=context.context.pages[0],
                                browser_id=browser.browser_id,
                                context_id=context_id,
                                resource_options=browser.resource_options,
                            )
                        )
                if len(browser.contexts) == 0:
                    await self.release_browser(browser)
        if len(self.available_browsers()) == 0 and nb_browsers > 0:
            # manually resart the pool to kill any dangling processes
            # we can do that because we know that the pool is empty
            await self.stop()
            await self.start()

================
File: packages/notte-pools/src/notte_pools/ports.py
================
import threading
from collections import deque
from dataclasses import dataclass
from typing import final

from notte_core.utils.singleton import Singleton


@dataclass(frozen=True)
class PortRange:
    start: int
    end: int


@final
class PortManager(metaclass=Singleton):
    def reset(self, start: int, nb: int) -> None:
        if nb <= 0:
            raise ValueError("Number of ports must be greater than 0")
        if start < 0:
            raise ValueError("Start port must be greater than 0")
        port_range = PortRange(start, start + nb - 1)
        if self.port_range is not None and self.port_range != port_range:
            raise ValueError("Port range already set. PortManager is already initialized.")
        self.port_range = port_range
        self._available_ports = deque(range(self.port_range.start, self.port_range.end + 1))

    def __init__(self) -> None:
        """Initialize the port manager with a range of ports.

        Args:
            port_range: The range of ports to manage (inclusive start, inclusive end)
        """
        self._used_ports: set[int] = set()
        self._available_ports: deque[int] = deque()
        self._lock: threading.Lock = threading.Lock()
        self.port_range: PortRange | None = None

    def acquire_port(self) -> int | None:
        """Get next available port from the pool.

        Returns:
            An available port number or None if no ports are available
        """
        if self.port_range is None:
            raise ValueError("PortManager is not initialized. Call reset() first.")
        with self._lock:
            if not self._available_ports:
                return None

            port = self._available_ports.popleft()
            self._used_ports.add(port)
            return port

    def release_port(self, port: int) -> None:
        """Release a port back to the pool.

        Args:
            port: The port number to release

        Raises:
            ValueError: If the port is not in use or outside the valid range
        """
        if self.port_range is None:
            raise ValueError("PortManager is not initialized. Call reset() first.")
        if not (self.port_range.start <= port <= self.port_range.end):
            raise ValueError(f"Port {port} is outside valid range {self.port_range}")

        if port not in self._used_ports:
            raise ValueError(f"Port {port} is not currently in use")

        self._used_ports.remove(port)
        self._available_ports.append(port)

    def is_initialized(self) -> bool:
        return self.port_range is not None

    @property
    def available_ports(self) -> list[int]:
        """Get list of currently available ports."""
        return list(self._available_ports)

    @property
    def used_ports(self) -> list[int]:
        """Get list of currently used ports."""
        return list(self._used_ports)

    def is_port_available(self, port: int) -> bool:
        """Check if a specific port is available.

        Args:
            port: The port number to check

        Returns:
            True if the port is available, False otherwise
        """
        return port in self._available_ports


def get_port_manager() -> PortManager | None:
    manager = PortManager()
    if not manager.is_initialized():
        return None
    return manager

================
File: packages/notte-pools/pyproject.toml
================
[project]
name = "notte-pools"
version = "1.3.3"
description = "The pools for Notte"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
    { include = "notte_pools", from = "src" },
]


requires-python = ">=3.11"
dependencies = [
    "discord-py>=2.3.0,<2.5.0",
    "fastapi>=0.115.8",
    "uvicorn>=0.29.0",
    "hvac>=2.3.0",
    "browserbase>=1.2.0",
    "camoufox[geoip]>=0.4.11",
    "browser-use>=0.1.40",
    "langchain-google-genai>=2.1.1",
    "slack-sdk>=3.34.0",
    "proxy-lite",
]



[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]

dev = [
    "aiomultiprocess>=0.9.1",
    "basedpyright>=1.27.1",
    "cloudpickle>=3.1.1",
    "joblib>=1.4.2",
    "jupyter>=1.1.1",
    "pandas",
    "pebble>=5.1.1",
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.14.0",
]
lint = [
    "ruff>=0.9.7",
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
timeout = 60
asyncio_mode = "strict"
log_cli = true
log_cli_level = "INFO"
filterwarnings = [
    "ignore::DeprecationWarning:sklearn.utils.fixes:",
    "ignore::DeprecationWarning:pandas.core.common:",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20:",
    "ignore::DeprecationWarning:importlib.resources._legacy:",
    "ignore::DeprecationWarning:litellm.utils:",
    "ignore:open_text is deprecated*:DeprecationWarning",
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.*:DeprecationWarning",
    'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
    "ignore:Valid config keys have changed in V2*:UserWarning"
]

[tool.ruff]
line-length = 120
indent-width = 4
exclude = [".venv"]

[tool.ruff.lint]
extend-select = ["I"]

[tool.basedpyright]
exclude = [".venv", "uv-cache", "**/site-packages/**", "**/dist-packages/**", "tests", "old", "notebook", "dist"]
enableTypeIgnoreComments = true
reportIgnoreCommentWithoutRule = false
failOnWarnings = true
reportAny = false
reportExplicitAny = false

[tool.uv.sources]
maincontentextractor = { git = "https://github.com/HawkClaws/main_content_extractor", rev = "7c3ed7f6ed7f6c10223a3357d43ab741663bc812" }
proxy-lite = { git = "https://github.com/leo-notte/proxy-lite" }

================
File: packages/notte-sdk/src/notte_sdk/endpoints/agents.py
================
import time
from collections.abc import Sequence
from typing import Unpack

import requests
from loguru import logger
from pydantic import BaseModel
from typing_extensions import final, override

from notte_sdk.endpoints.base import BaseClient, NotteEndpoint
from notte_sdk.types import (
    AgentListRequest,
    AgentResponse,
    AgentRunRequest,
    AgentRunRequestDict,
    AgentStatus,
    ListRequestDict,
)
from notte_sdk.types import AgentStatusResponse as _AgentStatusResponse


# proxy for: StepAgentOutput
class _AgentResponse(BaseModel):
    state: BaseModel
    actions: list[BaseModel]


AgentStatusResponse = _AgentStatusResponse[_AgentResponse]


@final
class AgentsClient(BaseClient):
    """
    Client for the Notte API.

    Note: this client is only able to handle one session at a time.
    If you need to handle multiple sessions, you need to create a new client for each session.
    """

    # Session
    AGENT_RUN = "run"
    AGENT_STOP = "{agent_id}/stop"
    AGENT_STATUS = "{agent_id}"
    AGENT_LIST = ""
    # The following endpoints downloads a .webp file
    AGENT_REPLAY = "{agent_id}/replay"

    def __init__(
        self,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """
        Initialize an AgentsClient instance.

        Configures the client to use the "agents" endpoint path and sets optional API key and server URL for authentication and server configuration. The initial state has no recorded agent response.

        Args:
            api_key: Optional API key for authenticating requests.
        """
        super().__init__(base_endpoint_path="agents", api_key=api_key, verbose=verbose)
        self._last_agent_response: AgentResponse | None = None

    @staticmethod
    def agent_run_endpoint() -> NotteEndpoint[AgentResponse]:
        """
        Returns an endpoint for running an agent.

        Creates a NotteEndpoint configured with the AGENT_RUN path, a POST method, and an expected AgentResponse.
        """
        return NotteEndpoint(path=AgentsClient.AGENT_RUN, response=AgentResponse, method="POST")

    @staticmethod
    def agent_stop_endpoint(agent_id: str | None = None) -> NotteEndpoint[AgentResponse]:
        """
        Constructs a DELETE endpoint for stopping an agent.

        If an agent ID is provided, it is inserted into the endpoint URL. The returned
        endpoint is configured with the DELETE HTTP method and expects an AgentStatusResponse.

        Args:
            agent_id (str, optional): The identifier of the agent to stop. If omitted,
                the URL template will remain unformatted.

        Returns:
            NotteEndpoint[AgentResponse]: The endpoint object for stopping the agent.
        """
        path = AgentsClient.AGENT_STOP
        if agent_id is not None:
            path = path.format(agent_id=agent_id)
        return NotteEndpoint(path=path, response=AgentStatusResponse, method="DELETE")

    @staticmethod
    def agent_status_endpoint(agent_id: str | None = None) -> NotteEndpoint[AgentStatusResponse]:
        """
        Creates an endpoint for retrieving an agent's status.

        If an agent ID is provided, formats the endpoint path to target that specific agent.

        Args:
            agent_id: Optional identifier of the agent; if specified, the endpoint path will include this ID.

        Returns:
            NotteEndpoint configured with the GET method and AgentStatusResponse as the expected response.
        """
        path = AgentsClient.AGENT_STATUS
        if agent_id is not None:
            path = path.format(agent_id=agent_id)
        return NotteEndpoint(path=path, response=AgentStatusResponse, method="GET")

    @staticmethod
    def agent_replay_endpoint(agent_id: str | None = None) -> NotteEndpoint[BaseModel]:
        """
        Creates an endpoint for downloading an agent's replay.
        """
        path = AgentsClient.AGENT_REPLAY
        if agent_id is not None:
            path = path.format(agent_id=agent_id)
        return NotteEndpoint(path=path, response=BaseModel, method="GET")

    @staticmethod
    def agent_list_endpoint(params: AgentListRequest | None = None) -> NotteEndpoint[AgentResponse]:
        """
        Creates a NotteEndpoint for listing agents.

        Returns an endpoint configured with the agent listing path and a GET method.
        The optional params argument provides filtering or pagination details for the request.
        """
        return NotteEndpoint(
            path=AgentsClient.AGENT_LIST,
            response=AgentResponse,
            method="GET",
            request=None,
            params=params,
        )

    @override
    @staticmethod
    def endpoints() -> Sequence[NotteEndpoint[BaseModel]]:
        """
        Returns a list of endpoints for agent operations.

        Aggregates endpoints for running, stopping, checking status, and listing agents.
        """
        return [
            AgentsClient.agent_run_endpoint(),
            AgentsClient.agent_stop_endpoint(),
            AgentsClient.agent_status_endpoint(),
            AgentsClient.agent_list_endpoint(),
            AgentsClient.agent_replay_endpoint(),
        ]

    @property
    def agent_id(self) -> str | None:
        """
        Returns the agent ID from the last agent response, or None if no response exists.

        This property retrieves the identifier from the most recent agent operation response.
        If no agent has been run or if the response is missing, it returns None.
        """
        return self._last_agent_response.agent_id if self._last_agent_response is not None else None

    def get_agent_id(self, agent_id: str | None = None) -> str:
        """
        Retrieves the agent ID to be used for agent operations.

        If an `agent_id` is provided, it is returned directly. Otherwise, the method attempts to obtain the agent ID from the client's last agent response. Raises a ValueError if no agent ID is available.

        Args:
            agent_id (Optional[str]): An agent identifier. If omitted, the ID from the last agent response is used.

        Raises:
            ValueError: If no agent ID is provided and the client has no recorded agent response.

        Returns:
            str: The determined agent identifier.
        """
        if agent_id is None:
            if self._last_agent_response is None:
                raise ValueError("No agent to get agent id from")
            agent_id = self._last_agent_response.agent_id
        return agent_id

    def run(self, **data: Unpack[AgentRunRequestDict]) -> AgentResponse:
        """
        Run an agent with the specified request parameters.

        Validates the provided data using the AgentRunRequest model, sends a run request through the
        designated endpoint, updates the last agent response, and returns the resulting AgentResponse.

        Args:
            **data: Keyword arguments representing the fields of an AgentRunRequest.

        Returns:
            AgentResponse: The response obtained from the agent run request.
        """
        request = AgentRunRequest.model_validate(data)
        response = self.request(AgentsClient.agent_run_endpoint().with_request(request))
        self._last_agent_response = response
        return response

    def wait_for_completion(
        self,
        agent_id: str | None = None,
        polling_interval_seconds: int = 10,
        max_attempts: int = 30,
    ) -> AgentStatusResponse:
        """
        Waits for the specified agent to complete.

        Args:
            agent_id: The identifier of the agent to wait for.
            polling_interval_seconds: The interval between status checks.
            max_attempts: The maximum number of attempts to check the agent's status.

        Returns:
            AgentStatusResponse: The response from the agent status check.
        """
        agent_id = self.get_agent_id(agent_id)
        last_step = 0
        for _ in range(max_attempts):
            response = self.status(agent_id)
            if response.status == AgentStatus.closed:
                return response
            if len(response.steps) >= last_step:
                for step in response.steps[last_step:]:
                    for action in step.actions:
                        logger.info(action.to_action().execution_message())  # pyright: ignore[reportUnknownMemberType, reportUnknownArgumentType, reportAttributeAccessIssue]
                last_step = len(response.steps)
            logger.info(
                f"Waiting {polling_interval_seconds} seconds for agent to complete (current step: {last_step})..."
            )
            time.sleep(polling_interval_seconds)
        raise TimeoutError("Agent did not complete in time")

    def close(self, agent_id: str) -> AgentResponse:
        """
        Stops the specified agent and clears the last agent response.

        Retrieves a valid agent identifier using the provided value or the last stored
        response, sends a stop request to the API, resets the internal agent response,
        and returns the resulting AgentResponse.

        Args:
            agent_id: The identifier of the agent to stop.

        Returns:
            AgentResponse: The response from the stop operation.

        Raises:
            ValueError: If a valid agent identifier cannot be determined.
        """
        agent_id = self.get_agent_id(agent_id)
        endpoint = AgentsClient.agent_stop_endpoint(agent_id=agent_id)
        response = self.request(endpoint)
        self._last_agent_response = None
        return response

    def status(self, agent_id: str) -> AgentStatusResponse:
        """
        Retrieves the status of the specified agent.

        Queries the API for the current status of an agent using a validated agent ID.
        The provided ID is confirmed (or obtained from the last response if needed), and the
        resulting status is stored internally before being returned.

        Args:
            agent_id: Unique identifier of the agent to check.

        Returns:
            AgentResponse: The current status information of the specified agent.

        Raises:
            ValueError: If no valid agent ID can be determined.
        """
        agent_id = self.get_agent_id(agent_id)
        endpoint = AgentsClient.agent_status_endpoint(agent_id=agent_id)
        response = self.request(endpoint)
        self._last_agent_response = response
        return response

    def list(self, **data: Unpack[ListRequestDict]) -> Sequence[AgentResponse]:
        """
        Lists agents matching specified criteria.

        Validates the keyword arguments using the AgentListRequest model, constructs
        the corresponding endpoint for listing agents, and returns a sequence of agent
        responses.

        Args:
            data: Arbitrary keyword arguments representing filter criteria for agents.

        Returns:
            A sequence of AgentResponse objects.
        """
        params = AgentListRequest.model_validate(data)
        endpoint = AgentsClient.agent_list_endpoint(params=params)
        return self.request_list(endpoint)

    def replay(
        self,
        agent_id: str | None = None,
        output_file: str | None = None,
    ) -> bytes:
        """
        Downloads the replay for the specified agent in webp format.
        """
        agent_id = self.get_agent_id(agent_id)
        endpoint = self.request_path(AgentsClient.agent_replay_endpoint(agent_id=agent_id))
        response = requests.get(
            url=endpoint,
            headers=self.headers(),
            timeout=self.DEFAULT_REQUEST_TIMEOUT_SECONDS,
        )
        if b"not found" in response.content:
            raise ValueError(f"Replay for agent {agent_id} is not available.")
        if output_file is not None:
            with open(output_file, "wb") as f:
                _ = f.write(response.content)
        return response.content

================
File: packages/notte-sdk/src/notte_sdk/endpoints/base.py
================
import os
from abc import ABC, abstractmethod
from collections.abc import Sequence
from typing import Any, ClassVar, Generic, Literal, Self, TypeVar

import requests
from loguru import logger
from pydantic import BaseModel

from notte_sdk.errors import AuthenticationError, NotteAPIError

TResponse = TypeVar("TResponse", bound=BaseModel, covariant=True)


class NotteEndpoint(BaseModel, Generic[TResponse]):
    path: str
    response: type[TResponse]
    request: BaseModel | None = None
    method: Literal["GET", "POST", "DELETE"]
    params: BaseModel | None = None

    def with_request(self, request: BaseModel) -> Self:
        # return deep copy of self with the request set
        """
        Return a deep copy of the endpoint with the specified request.

        Creates a new instance of the endpoint with its request attribute updated to the provided model.
        The original instance remains unmodified.

        Args:
            request: A Pydantic model instance carrying the request data.

        Returns:
            A new endpoint instance with the updated request.
        """
        return self.model_copy(update={"request": request})

    def with_params(self, params: BaseModel) -> Self:
        # return deep copy of self with the params set
        """
        Return a new endpoint instance with updated parameters.

        Creates a copy of the current endpoint with its "params" attribute set to the provided
        Pydantic model.

        Args:
            params: A Pydantic model instance containing the new parameters.
        """
        return self.model_copy(update={"params": params})


class BaseClient(ABC):
    DEFAULT_NOTTE_API_URL: ClassVar[str] = "https://staging.notte.cc"
    DEFAULT_REQUEST_TIMEOUT_SECONDS: ClassVar[int] = 60

    def __init__(
        self,
        base_endpoint_path: str | None,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """
        Initialize a new API client instance.

        Sets up the client by resolving an API key from the provided parameter or the
        NOTTE_API_KEY environment variable. Selects the server URL (defaulting to a
        preconfigured server if none is provided), initializes a mapping of endpoints
        using the implemented 'endpoints' method, and stores an optional base endpoint
        path for constructing request URLs.

        Args:
            base_endpoint_path: Optional base path to be prefixed to endpoint URLs.
            api_key: Optional API key for authentication; if not supplied, retrieved from
                the NOTTE_API_KEY environment variable.

        Raises:
            AuthenticationError: If an API key is neither provided nor available in the environment.
        """
        token = api_key or os.getenv("NOTTE_API_KEY")
        if token is None:
            raise AuthenticationError("NOTTE_API_KEY needs to be provided")
        self.token: str = token
        self.server_url: str = os.getenv("NOTTE_API_URL") or self.DEFAULT_NOTTE_API_URL
        self._endpoints: dict[str, NotteEndpoint[BaseModel]] = {
            endpoint.path: endpoint for endpoint in self.endpoints()
        }
        self.base_endpoint_path: str | None = base_endpoint_path
        self.verbose: bool = verbose

    @staticmethod
    @abstractmethod
    def endpoints() -> Sequence[NotteEndpoint[BaseModel]]:
        """
        Return API endpoints for the client.

        This abstract method should be implemented by subclasses to supply the list of available
        NotteEndpoint instances for the client.

        Returns:
            Sequence[NotteEndpoint[BaseModel]]: A list of endpoints for the client.
        """
        pass

    def headers(self) -> dict[str, str]:
        """
        Return HTTP headers for authenticated API requests.

        Constructs and returns a dictionary containing the 'Authorization' header,
        which is formatted as a Bearer token using the API key stored in self.token.
        """
        return {"Authorization": f"Bearer {self.token}"}

    def request_path(self, endpoint: NotteEndpoint[TResponse]) -> str:
        """
        Constructs the full request URL for the given API endpoint.

        If a base endpoint path is defined, the URL is formed by concatenating the server URL,
        the base endpoint path, and the endpoint's path. Otherwise, the endpoint's path is appended
        directly to the server URL.
        """
        if self.base_endpoint_path is None:
            return f"{self.server_url}/{endpoint.path}"
        return f"{self.server_url}/{self.base_endpoint_path}/{endpoint.path}"

    def _request(self, endpoint: NotteEndpoint[TResponse]) -> requests.Response:
        """
        Executes an HTTP request for the given API endpoint.

        Constructs the full URL and headers from the endpoint's configuration and issues an HTTP
        request using the specified method (GET, POST, or DELETE). For POST requests, a request model
        must be provided; otherwise, a ValueError is raised. If the response status code is not 200 or
        the JSON response contains an error detail, a NotteAPIError is raised.

        Args:
            endpoint: An API endpoint instance containing the HTTP method, path, optional request model,
                and query parameters.

        Returns:
            The JSON-decoded response from the API.

        Raises:
            ValueError: If a POST request is attempted without a request model.
            NotteAPIError: If the API response indicates a failure.
        """
        headers = self.headers()
        url = self.request_path(endpoint)
        params = endpoint.params.model_dump() if endpoint.params is not None else None
        if self.verbose:
            logger.info(f"Making `{endpoint.method}` request to `{endpoint.path} (i.e `{url}`) with params `{params}`.")
        match endpoint.method:
            case "GET":
                response = requests.get(
                    url=url,
                    headers=headers,
                    params=params,
                    timeout=self.DEFAULT_REQUEST_TIMEOUT_SECONDS,
                )
            case "POST":
                if endpoint.request is None:
                    raise ValueError("Request model is required for POST requests")
                response = requests.post(
                    url=url,
                    headers=headers,
                    json=endpoint.request.model_dump(),
                    params=params,
                    timeout=self.DEFAULT_REQUEST_TIMEOUT_SECONDS,
                )
            case "DELETE":
                response = requests.delete(
                    url=url,
                    headers=headers,
                    params=params,
                    timeout=self.DEFAULT_REQUEST_TIMEOUT_SECONDS,
                )
        if response.status_code != 200:
            raise NotteAPIError(path=endpoint.path, response=response)
        response_dict: Any = response.json()
        if "detail" in response_dict:
            raise NotteAPIError(path=endpoint.path, response=response)
        return response_dict

    def request(self, endpoint: NotteEndpoint[TResponse]) -> TResponse:
        """
        Requests the specified API endpoint and returns the validated response.

        This method sends an HTTP request according to the endpoint configuration and
        validates that the response is a dictionary. It then parses the response using the
        endpoint's associated response model. If the response is not a dictionary, a
        NotteAPIError is raised.

        Args:
            endpoint: The API endpoint configuration containing request details and the
                      expected response model.

        Returns:
            The validated response parsed using the endpoint's response model.

        Raises:
            NotteAPIError: If the API response is not a dictionary.
        """
        response: Any = self._request(endpoint)
        if not isinstance(response, dict):
            raise NotteAPIError(path=endpoint.path, response=response)
        return endpoint.response.model_validate(response)

    def request_list(self, endpoint: NotteEndpoint[TResponse]) -> Sequence[TResponse]:
        # Handle the case where TResponse is a list of BaseModel
        """
        Retrieves and validates a list of responses from the API.

        This method sends a request using the provided endpoint and expects the response to be a list. Each item is validated
        against the model defined in the endpoint. A NotteAPIError is raised if the response is not a list.

        Parameters:
            endpoint: The API endpoint containing the path and the expected response model.

        Returns:
            A list of validated response items.

        Raises:
            NotteAPIError: If the response is not a list.
        """
        response_list: Any = self._request(endpoint)
        if not isinstance(response_list, list):
            raise NotteAPIError(path=endpoint.path, response=response_list)
        return [endpoint.response.model_validate(item) for item in response_list]  # pyright: ignore[reportUnknownVariableType]

================
File: packages/notte-sdk/src/notte_sdk/endpoints/env.py
================
from collections.abc import Sequence
from typing import TypeVar, Unpack

from notte_core.actions.space import ActionSpace
from notte_core.browser.observation import Observation
from notte_core.controller.space import SpaceCategory
from notte_core.data.space import DataSpace
from pydantic import BaseModel
from typing_extensions import final, override

from notte_sdk.endpoints.base import BaseClient, NotteEndpoint
from notte_sdk.errors import InvalidRequestError
from notte_sdk.types import (
    ObserveRequest,
    ObserveRequestDict,
    ObserveResponse,
    ScrapeRequest,
    ScrapeRequestDict,
    SessionRequest,
    SessionResponse,
    StepRequest,
    StepRequestDict,
)

TSessionRequestDict = TypeVar("TSessionRequestDict", bound=SessionRequest)


@final
class EnvClient(BaseClient):
    """
    Client for the Notte API.

    Note: this client is only able to handle one session at a time.
    If you need to handle multiple sessions, you need to create a new client for each session.
    """

    # Session
    ENV_SCRAPE = "scrape"
    ENV_OBSERVE = "observe"
    ENV_STEP = "step"

    def __init__(
        self,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """
        Initialize the EnvClient instance.

        Configures the client with the environment base endpoint for interacting with the Notte API and initializes session tracking for subsequent requests.

        Args:
            api_key: Optional API key used for authenticating API requests.
        """
        super().__init__(base_endpoint_path="env", api_key=api_key, verbose=verbose)
        self._last_session_response: SessionResponse | None = None

    @staticmethod
    def env_scrape_endpoint() -> NotteEndpoint[ObserveResponse]:
        """
        Creates a NotteEndpoint for the scrape action.

        Returns:
            NotteEndpoint[ObserveResponse]: An endpoint configured with the scrape path,
            POST method, and an expected ObserveResponse.
        """
        return NotteEndpoint(path=EnvClient.ENV_SCRAPE, response=ObserveResponse, method="POST")

    @staticmethod
    def env_observe_endpoint() -> NotteEndpoint[ObserveResponse]:
        """
        Creates a NotteEndpoint for observe operations.

        Returns:
            NotteEndpoint[ObserveResponse]: An endpoint configured with the observe path,
            using the HTTP POST method and expecting an ObserveResponse.
        """
        return NotteEndpoint(path=EnvClient.ENV_OBSERVE, response=ObserveResponse, method="POST")

    @staticmethod
    def env_step_endpoint() -> NotteEndpoint[ObserveResponse]:
        """
        Creates a NotteEndpoint for initiating a step action.

        Returns a NotteEndpoint configured with the 'POST' method using the ENV_STEP path and expecting an ObserveResponse.
        """
        return NotteEndpoint(path=EnvClient.ENV_STEP, response=ObserveResponse, method="POST")

    @override
    @staticmethod
    def endpoints() -> Sequence[NotteEndpoint[BaseModel]]:
        """
        Returns the API endpoints for scraping, observing, and stepping actions.

        This function aggregates and returns the endpoints used by the client to perform
        scrape, observe, and step operations with the Notte API.
        """
        return [
            EnvClient.env_scrape_endpoint(),
            EnvClient.env_observe_endpoint(),
            EnvClient.env_step_endpoint(),
        ]

    @property
    def session_id(self) -> str | None:
        """
        Returns the session ID from the last session response.

        If no session response exists, returns None.
        """
        return self._last_session_response.session_id if self._last_session_response is not None else None

    def get_session_id(self, session_id: str | None = None) -> str:
        """
        Retrieves the session ID for the current session.

        If an explicit session ID is provided, it is returned. Otherwise, the method extracts
        the session ID from the most recent session response. A ValueError is raised if no
        session ID is available.

        Args:
            session_id: Optional explicit session identifier. If None, the last session's ID is used.

        Returns:
            The session identifier.

        Raises:
            ValueError: If no session ID can be retrieved.
        """
        if session_id is None:
            if self._last_session_response is None:
                raise InvalidRequestError("No session to get session id from")
            session_id = self._last_session_response.session_id
        return session_id

    def scrape(self, **data: Unpack[ScrapeRequestDict]) -> Observation:
        """
        Scrapes a page using provided parameters via the Notte API.

        Validates the scraped request data to ensure that either a URL or session ID is provided.
        If both are omitted, raises an InvalidRequestError. The request is sent to the configured
        scrape endpoint and the resulting response is formatted into an Observation object.

        Args:
            **data: Arbitrary keyword arguments validated against ScrapeRequestDict,
                   expecting at least one of 'url' or 'session_id'.

        Returns:
            An Observation object containing metadata, screenshot, action space, and data space.

        Raises:
            InvalidRequestError: If neither 'url' nor 'session_id' is supplied.
        """
        request = ScrapeRequest.model_validate(data)
        if request.session_id is None and request.url is None:
            raise InvalidRequestError(
                (
                    "Either url or session_id needs to be provided to scrape a page, "
                    "e.g `await client.scrape(url='https://www.google.com')`"
                )
            )
        endpoint = EnvClient.env_scrape_endpoint()
        obs_response = self.request(endpoint.with_request(request))
        return self._format_observe_response(obs_response)

    def observe(self, **data: Unpack[ObserveRequestDict]) -> Observation:
        """
        Observes a page via the Notte API.

        Constructs and validates an observation request from the provided keyword arguments.
        Either a 'url' or a 'session_id' must be supplied; otherwise, an InvalidRequestError is raised.
        The request is sent to the observe endpoint, and the response is formatted into an Observation object.

        Parameters:
            **data: Arbitrary keyword arguments corresponding to observation request fields.
                    At least one of 'url' or 'session_id' must be provided.

        Returns:
            Observation: The formatted observation result from the API response.
        """
        request = ObserveRequest.model_validate(data)
        if request.session_id is None and request.url is None:
            raise InvalidRequestError(
                (
                    "Either url or session_id needs to be provided to scrape a page, "
                    "e.g `await client.scrape(url='https://www.google.com')`"
                )
            )
        endpoint = EnvClient.env_observe_endpoint()
        obs_response = self.request(endpoint.with_request(request))
        return self._format_observe_response(obs_response)

    def step(self, **data: Unpack[StepRequestDict]) -> Observation:
        """
        Sends a step action request and returns an Observation.

        Validates the provided keyword arguments to ensure they conform to the step
        request schema, retrieves the step endpoint, submits the request, and transforms
        the API response into an Observation.

        Args:
            **data: Arbitrary keyword arguments matching the expected structure for a
                step request.

        Returns:
            An Observation object constructed from the API response.
        """
        request = StepRequest.model_validate(data)
        endpoint = EnvClient.env_step_endpoint()
        obs_response = self.request(endpoint.with_request(request))
        return self._format_observe_response(obs_response)

    def _format_observe_response(self, response: ObserveResponse) -> Observation:
        """
        Formats an observe response into an Observation object.

        Extracts session information from the provided response to update the client's last session state
        and constructs an Observation using response metadata and screenshot. If the response does not include
        space or data details, those Observation attributes are set to None; otherwise, they are converted into
        an ActionSpace or DataSpace instance respectively.

        Args:
            response: An ObserveResponse object containing session, metadata, screenshot, space, and data.

        Returns:
            An Observation object representing the formatted response.
        """
        self._last_session_response = response.session
        return Observation(
            metadata=response.metadata,
            screenshot=response.screenshot,
            space=(
                None
                if response.space is None
                else ActionSpace(
                    description=response.space.description,
                    raw_actions=response.space.actions,
                    category=None if response.space.category is None else SpaceCategory(response.space.category),
                )
            ),
            data=(
                None
                if response.data is None
                else DataSpace(
                    markdown=response.data.markdown,
                    images=(None if response.data.images is None else response.data.images),
                    structured=None if response.data.structured is None else response.data.structured,
                )
            ),
        )

================
File: packages/notte-sdk/src/notte_sdk/endpoints/persona.py
================
from collections.abc import Sequence
from typing import Any, Unpack

from notte_core.common.credentials.base import CredentialField
from pydantic import BaseModel
from typing_extensions import final, override

from notte_sdk.endpoints.base import BaseClient, NotteEndpoint
from notte_sdk.errors import NotteAPIError
from notte_sdk.types import (
    AddCredentialsRequest,
    AddCredentialsRequestDict,
    AddCredentialsResponse,
    DeleteCredentialsRequest,
    DeleteCredentialsRequestDict,
    DeleteCredentialsResponse,
    EmailResponse,
    EmailsReadRequest,
    EmailsReadRequestDict,
    GetCredentialsRequest,
    GetCredentialsRequestDict,
    GetCredentialsResponse,
    PersonaCreateRequest,
    PersonaCreateRequestDict,
    PersonaCreateResponse,
    SMSReadRequest,
    SMSReadRequestDict,
    SMSResponse,
    VirtualNumberRequest,
    VirtualNumberRequestDict,
    VirtualNumberResponse,
)


@final
class PersonaClient(BaseClient):
    """
    Client for the Notte API.

    Note: this client is only able to handle one session at a time.
    If you need to handle multiple sessions, you need to create a new client for each session.
    """

    # Session
    EMAILS_READ = "{persona_id}/email/read"
    SMS_READ = "{persona_id}/sms/read"
    CREATE_NUMBER = "{persona_id}/create-number"
    CREATE_PERSONA = "create"
    ADD_CREDENTIALS = "{persona_id}/credentials"
    GET_CREDENTIALS = "{persona_id}/credentials"
    DELETE_CREDENTIALS = "{persona_id}/credentials"

    def __init__(
        self,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """
        Initialize a PersonaClient instance.

        Initializes the client with an optional API key for persona management.
        """
        super().__init__(base_endpoint_path="personas", api_key=api_key, verbose=verbose)

    @override
    @staticmethod
    def endpoints() -> Sequence[NotteEndpoint[BaseModel]]:
        """Returns the available persona endpoints.

        Aggregates endpoints from PersonaClient for creating personas, reading messages, etc..."""
        return [
            PersonaClient.email_read_endpoint(""),
            PersonaClient.sms_read_endpoint(""),
            PersonaClient.create_number_endpoint(""),
            PersonaClient.create_persona_endpoint(),
            PersonaClient.add_credentials_endpoint(""),
            PersonaClient.get_credentials_endpoint(""),
            PersonaClient.delete_credentials_endpoint(""),
        ]

    @staticmethod
    def email_read_endpoint(persona_id: str) -> NotteEndpoint[EmailResponse]:
        """
        Returns a NotteEndpoint configured for reading persona emails.

        The returned endpoint uses the email_read path from PersonaClient with the GET method
        and expects a sequence of EmailResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.EMAILS_READ.format(persona_id=persona_id),
            response=EmailResponse,
            method="GET",
        )

    @staticmethod
    def sms_read_endpoint(persona_id: str) -> NotteEndpoint[SMSResponse]:
        """
        Returns a NotteEndpoint configured for reading persona sms messages.

        The returned endpoint uses the sms_read path from PersonaClient with the GET method
        and expects a sequence of SMSResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.SMS_READ.format(persona_id=persona_id),
            response=SMSResponse,
            method="GET",
        )

    @staticmethod
    def create_number_endpoint(persona_id: str) -> NotteEndpoint[VirtualNumberResponse]:
        """
        Returns a NotteEndpoint configured for creating a virtual phone number.

        The returned endpoint uses the create number path from PersonaClient with the POST method and expects a VirtualNumberResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.CREATE_NUMBER.format(persona_id=persona_id),
            response=VirtualNumberResponse,
            method="POST",
        )

    @staticmethod
    def create_persona_endpoint() -> NotteEndpoint[PersonaCreateResponse]:
        """
        Returns a NotteEndpoint configured for creating a persona.

        The returned endpoint uses the credentials from PersonaClient with the POST method and expects a PersonaCreateResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.CREATE_PERSONA,
            response=PersonaCreateResponse,
            method="POST",
        )

    @staticmethod
    def add_credentials_endpoint(persona_id: str) -> NotteEndpoint[AddCredentialsResponse]:
        """
        Returns a NotteEndpoint configured for adding credentials.

        The returned endpoint uses the credentials from PersonaClient with the POST method and expects an AddCredentialsResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.ADD_CREDENTIALS.format(persona_id=persona_id),
            response=AddCredentialsResponse,
            method="POST",
        )

    @staticmethod
    def get_credentials_endpoint(persona_id: str) -> NotteEndpoint[GetCredentialsResponse]:
        """
        Returns a NotteEndpoint configured for getting credentials.

        The returned endpoint uses the credentials from PersonaClient with the GET method and expects a GetCredentialsResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.GET_CREDENTIALS.format(persona_id=persona_id),
            response=GetCredentialsResponse,
            method="GET",
        )

    @staticmethod
    def delete_credentials_endpoint(persona_id: str) -> NotteEndpoint[DeleteCredentialsResponse]:
        """
        Returns a NotteEndpoint configured for deleting credentials.

        The returned endpoint uses the create persona path from PersonaClient with the DELETE method and expects a DeleteCredentialsResponse.
        """
        return NotteEndpoint(
            path=PersonaClient.DELETE_CREDENTIALS.format(persona_id=persona_id),
            response=DeleteCredentialsResponse,
            method="DELETE",
        )

    def add_credentials(self, persona_id: str, **data: Unpack[AddCredentialsRequestDict]) -> AddCredentialsResponse:
        """
        Add credentials

        Args:
            persona_id: The ID of the persona to add credentials to
            **data: Query parameters including:
                url: Website url for which to add credentials (if None, singleton credentials)
                credentials: The credentials to add

        Returns:
            AddCredentialsResponse: status for added credentials
        """
        params = AddCredentialsRequest.model_validate(data)
        response = self.request(PersonaClient.add_credentials_endpoint(persona_id).with_request(params))
        return response

    def get_credentials(self, persona_id: str, **data: Unpack[GetCredentialsRequestDict]) -> GetCredentialsResponse:
        """
        Get credentials

        Args:
            persona_id: The ID of the persona to get credentials from
            **data: Query parameters including:
                url: Website url for which to get credentials (if None, return singleton credentials)

        Returns:
            GetCredentialsResponse: returned credentials
        """
        params = GetCredentialsRequest.model_validate(data)
        endpoint = PersonaClient.get_credentials_endpoint(persona_id).with_params(params)

        # need to do some trickery to build Creds
        response: Any = self._request(endpoint)
        if not isinstance(response, dict):
            raise NotteAPIError(path=endpoint.path, response=response)

        creds = [CredentialField.from_dict(field) for field in response["credentials"]]  # type: ignore

        return GetCredentialsResponse(credentials=creds)

    def delete_credentials(
        self, persona_id: str, **data: Unpack[DeleteCredentialsRequestDict]
    ) -> DeleteCredentialsResponse:
        """
        Delete credentials

        Args:
            persona_id: The ID of the persona for which we remove credentials
            **data: Query parameters including:
                url: Website url for which we remove credentials (if None, delete singleton credentials)

        Returns:
            DeleteCredentialsResponse: status for deleted credentials
        """
        params = DeleteCredentialsRequest.model_validate(data)
        response = self.request(PersonaClient.delete_credentials_endpoint(persona_id).with_params(params))
        return response

    def create_persona(self, **data: Unpack[PersonaCreateRequestDict]) -> PersonaCreateResponse:
        """
        Create persona

        Args:

        Returns:
            PersonaCreateResponse: The persona created
        """
        params = PersonaCreateRequest.model_validate(data)
        response = self.request(PersonaClient.create_persona_endpoint().with_request(params))
        return response

    def create_number(self, persona_id: str, **data: Unpack[VirtualNumberRequestDict]) -> VirtualNumberResponse:
        """
        Create phone number for persona (if one didn't exist before)

        Args:

        Returns:
            VirtualNumberResponse: The status
        """
        params = VirtualNumberRequest.model_validate(data)
        response = self.request(PersonaClient.create_number_endpoint(persona_id).with_request(params))
        return response

    def email_read(self, persona_id: str, **data: Unpack[EmailsReadRequestDict]) -> Sequence[EmailResponse]:
        """
        Reads recent emails sent to the persona

        Args:
            **data: Keyword arguments representing details for querying emails.

        Returns:
            Sequence[EmailResponse]: The list of emails found
        """
        request = EmailsReadRequest.model_validate(data)
        response = self.request_list(PersonaClient.email_read_endpoint(persona_id).with_params(request))
        return response

    def sms_read(self, persona_id: str, **data: Unpack[SMSReadRequestDict]) -> Sequence[SMSResponse]:
        """
        Reads recent sms messages sent to the persona

        Args:
            **data: Keyword arguments representing details for querying sms messages.

        Returns:
            Sequence[SMSResponse]: The list of sms messages found
        """
        request = SMSReadRequest.model_validate(data)
        response = self.request_list(PersonaClient.sms_read_endpoint(persona_id).with_params(request))
        return response

================
File: packages/notte-sdk/src/notte_sdk/endpoints/sessions.py
================
from collections.abc import Sequence
from pathlib import Path
from types import TracebackType
from typing import Self, Unpack
from webbrowser import open as open_browser

from loguru import logger
from pydantic import BaseModel
from typing_extensions import final, override

from notte_sdk.endpoints.base import BaseClient, NotteEndpoint
from notte_sdk.errors import InvalidRequestError
from notte_sdk.types import (
    ListRequestDict,
    SessionDebugResponse,
    SessionListRequest,
    SessionResponse,
    SessionStartRequest,
    SessionStartRequestDict,
    TabSessionDebugRequest,
    TabSessionDebugResponse,
    UploadCookiesRequest,
    UploadCookiesResponse,
)


@final
class SessionsClient(BaseClient):
    """
    Client for the Notte API.

    Note: this client is only able to handle one session at a time.
    If you need to handle multiple sessions, you need to create a new client for each session.
    """

    # Session
    SESSION_START = "start"
    SESSION_CLOSE = "{session_id}/close"
    SESSION_STATUS = "{session_id}"
    SESSION_LIST = ""
    SESSION_DEBUG = "debug/{session_id}"
    SESSION_DEBUG_TAB = "debug/{session_id}/tab"
    # upload files
    SESSION_UPLOAD_FILES_COOKIES = "files/cookies"

    def __init__(
        self,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """
        Initialize a SessionsClient instance.

        Initializes the client with an optional API key and server URL for session management,
        setting the base endpoint to "sessions". Also initializes the last session response to None.
        """
        super().__init__(base_endpoint_path="sessions", api_key=api_key, verbose=verbose)
        self._last_session_response: SessionResponse | None = None
        self._next_session_request: SessionStartRequest | None = None

    @staticmethod
    def session_start_endpoint() -> NotteEndpoint[SessionResponse]:
        """
        Returns a NotteEndpoint configured for starting a session.

        The returned endpoint uses the session start path from SessionsClient with the POST method and expects a SessionResponse.
        """
        return NotteEndpoint(path=SessionsClient.SESSION_START, response=SessionResponse, method="POST")

    @staticmethod
    def session_close_endpoint(session_id: str | None = None) -> NotteEndpoint[SessionResponse]:
        """
        Constructs a DELETE endpoint for closing a session.

        If a session ID is provided, it is inserted into the endpoint path. Returns a NotteEndpoint configured
        with the DELETE method and expecting a SessionResponse.

        Args:
            session_id: Optional session identifier; if provided, it is formatted into the endpoint path.

        Returns:
            A NotteEndpoint instance for closing a session.
        """
        path = SessionsClient.SESSION_CLOSE
        if session_id is not None:
            path = path.format(session_id=session_id)
        return NotteEndpoint(path=path, response=SessionResponse, method="DELETE")

    @staticmethod
    def session_status_endpoint(session_id: str | None = None) -> NotteEndpoint[SessionResponse]:
        """
        Returns a NotteEndpoint for retrieving the status of a session.

        If a session_id is provided, it is interpolated into the endpoint path.
        The endpoint uses the GET method and expects a SessionResponse.
        """
        path = SessionsClient.SESSION_STATUS
        if session_id is not None:
            path = path.format(session_id=session_id)
        return NotteEndpoint(path=path, response=SessionResponse, method="GET")

    @staticmethod
    def session_list_endpoint(params: SessionListRequest | None = None) -> NotteEndpoint[SessionResponse]:
        """
        Constructs a NotteEndpoint for listing sessions.

        Args:
            params (SessionListRequest, optional): Additional filter parameters for the session list request.

        Returns:
            NotteEndpoint[SessionResponse]: An endpoint configured with the session list path and a GET method.
        """
        return NotteEndpoint(
            path=SessionsClient.SESSION_LIST,
            response=SessionResponse,
            method="GET",
            request=None,
            params=params,
        )

    @staticmethod
    def session_debug_endpoint(session_id: str | None = None) -> NotteEndpoint[SessionDebugResponse]:
        """
        Creates a NotteEndpoint for retrieving session debug information.

        If a session ID is provided, it is interpolated into the endpoint path.
        The returned endpoint uses the GET method and expects a SessionDebugResponse.
        """
        path = SessionsClient.SESSION_DEBUG
        if session_id is not None:
            path = path.format(session_id=session_id)
        return NotteEndpoint(path=path, response=SessionDebugResponse, method="GET")

    @staticmethod
    def session_debug_tab_endpoint(
        session_id: str | None = None, params: TabSessionDebugRequest | None = None
    ) -> NotteEndpoint[TabSessionDebugResponse]:
        """
        Returns an endpoint for retrieving debug information for a session tab.

        If a session ID is provided, it is substituted in the URL path.
        Additional query parameters can be specified via the params argument.

        Returns:
            NotteEndpoint[TabSessionDebugResponse]: The configured endpoint for a GET request.
        """
        path = SessionsClient.SESSION_DEBUG_TAB
        if session_id is not None:
            path = path.format(session_id=session_id)
        return NotteEndpoint(
            path=path,
            response=TabSessionDebugResponse,
            method="GET",
            params=params,
        )

    @staticmethod
    def session_upload_cookies_endpoint() -> NotteEndpoint[UploadCookiesResponse]:
        """
        Returns a NotteEndpoint for uploading cookies to a session.
        """
        return NotteEndpoint(
            path=SessionsClient.SESSION_UPLOAD_FILES_COOKIES, response=UploadCookiesResponse, method="POST"
        )

    @override
    @staticmethod
    def endpoints() -> Sequence[NotteEndpoint[BaseModel]]:
        """Returns a sequence of available session endpoints.

        Aggregates endpoints from SessionsClient for starting, closing, status checking, listing,
        and debugging sessions (including tab-specific debugging)."""
        return [
            SessionsClient.session_start_endpoint(),
            SessionsClient.session_close_endpoint(),
            SessionsClient.session_status_endpoint(),
            SessionsClient.session_list_endpoint(),
            SessionsClient.session_debug_endpoint(),
            SessionsClient.session_debug_tab_endpoint(),
            SessionsClient.session_upload_cookies_endpoint(),
        ]

    @property
    def _session_id(self) -> str | None:
        """
        Return the session ID from the last session response, or None if no session exists.

        Returns:
            str or None: The active session ID, or None when no session has been started.
        """
        return self._last_session_response.session_id if self._last_session_response is not None else None

    @property
    def session_id(self) -> str:
        """
        Return the session ID from the last session response, or None if no session exists.
        """
        return self.get_session_id()

    def get_session_id(self, session_id: str | None = None) -> str:
        """
        Retrieves the session ID for session operations.

        If a session ID is provided as an argument, it is returned directly. Otherwise,
        the session ID is extracted from the last session response. Raises a ValueError
        if neither a provided session ID nor a prior session response is available.

        Args:
            session_id: Optional; an explicit session ID to use.

        Returns:
            The session ID as a string.

        Raises:
            ValueError: If no session ID is available.
        """
        if session_id is None:
            if self._last_session_response is None:
                raise InvalidRequestError("No session to get session id from. Please start a session first.")
            session_id = self._last_session_response.session_id
        return session_id

    def start(self, **data: Unpack[SessionStartRequestDict]) -> SessionResponse:
        """
        Starts a new session using the provided keyword arguments.

        Validates the input data against the session start model, sends a session start
        request to the API, updates the last session response, and returns the response.

        Args:
            **data: Keyword arguments representing details for starting the session.

        Returns:
            SessionResponse: The response received from the session start endpoint.
        """
        if len(data) == 0 and self._next_session_request is not None:
            request = self._next_session_request
        else:
            request = SessionStartRequest.model_validate(data)
        logger.info(f"Starting session with request: {request}")
        response = self.request(SessionsClient.session_start_endpoint().with_request(request))
        self._last_session_response = response
        self._next_session_request = None
        return response

    def start_with(self, **data: Unpack[SessionStartRequestDict]) -> Self:
        self._last_session_response = None
        self._next_session_request = SessionStartRequest.model_validate(data)
        return self

    def close(self, session_id: str | None = None) -> SessionResponse:
        """
        Closes an active session.

        This method sends a request to the session close endpoint using the specified
        session ID or the currently active session. It validates the server response,
        clears the internal session state, and returns the validated response.

        Parameters:
            session_id (str, optional): The identifier of the session to close. If not
                provided, the active session ID is used. Raises ValueError if no active
                session exists.

        Returns:
            SessionResponse: The validated response from the session close request.
        """
        session_id = self.get_session_id(session_id)
        endpoint = SessionsClient.session_close_endpoint(session_id=session_id)
        response = self.request(endpoint)
        self._last_session_response = None
        return response

    def status(self, session_id: str | None = None) -> SessionResponse:
        """
        Retrieves the current status of a session.

        If no session_id is provided, the session ID from the last response is used. This method constructs
        the status endpoint, validates the response against the SessionResponse model, updates the stored
        session response, and returns the validated status.
        """
        session_id = self.get_session_id(session_id)
        endpoint = SessionsClient.session_status_endpoint(session_id=session_id)
        response = self.request(endpoint)
        self._last_session_response = response
        return response

    def list(self, **data: Unpack[ListRequestDict]) -> Sequence[SessionResponse]:
        """
        Retrieves a list of sessions from the API.

        Validates keyword arguments as session listing criteria and requests the available
        sessions. Returns a sequence of session response objects.
        """
        params = SessionListRequest.model_validate(data)
        endpoint = SessionsClient.session_list_endpoint(params=params)
        return self.request_list(endpoint)

    def debug_info(self, session_id: str | None = None) -> SessionDebugResponse:
        """
        Retrieves debug information for a session.

        If a session ID is provided, it is used; otherwise, the current session ID is retrieved.
        Raises a ValueError if no valid session ID is available.

        Args:
            session_id (Optional[str]): An optional session identifier to use.

        Returns:
            SessionDebugResponse: The debug information response for the session.
        """
        session_id = self.get_session_id(session_id)
        endpoint = SessionsClient.session_debug_endpoint(session_id=session_id)
        return self.request(endpoint)

    def debug_tab_info(self, session_id: str | None = None, tab_idx: int | None = None) -> TabSessionDebugResponse:
        """
        Retrieves debug information for a specific tab in the current session.

        If no session ID is provided, the active session is used. If a tab index is provided, the
        debug request is scoped to that tab.

        Parameters:
            session_id (str, optional): The session identifier to use.
            tab_idx (int, optional): The index of the tab for which to retrieve debug info.

        Returns:
            TabSessionDebugResponse: The response containing debug information for the specified tab.
        """
        session_id = self.get_session_id(session_id)
        params = TabSessionDebugRequest(tab_idx=tab_idx) if tab_idx is not None else None
        endpoint = SessionsClient.session_debug_tab_endpoint(session_id=session_id, params=params)
        return self.request(endpoint)

    def upload_cookies(self, cookie_file: str | Path) -> UploadCookiesResponse:
        """
        Uploads cookies to the session.

        Args:
            cookie_file: The path to the cookie file (json format)
        """
        request = UploadCookiesRequest.from_json(cookie_file)
        endpoint = SessionsClient.session_upload_cookies_endpoint()
        return self.request(endpoint.with_request(request))

    def viewer(self, session_id: str | None = None) -> None:
        """
        Opens a browser tab with the debug URL for visualizing the session.

        Retrieves debug information for the specified session and opens
        its debug URL in the default web browser.

        Args:
            session_id (str, optional): The session identifier to use.
                If not provided, the current session ID is used.

        Returns:
            None
        """
        debug_info = self.debug_info(session_id=session_id)
        # open browser tab with debug_url
        _ = open_browser(debug_info.debug_url)

    def __enter__(self, **data: Unpack[SessionStartRequestDict]) -> Self:
        _ = self.start(**data)
        logger.info(f"Starting session {self._session_id}")
        return self

    def __exit__(
        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None
    ) -> None:
        logger.info(f"Closing session {self._session_id}")
        _ = self.close()

================
File: packages/notte-sdk/src/notte_sdk/__init__.py
================
from notte_sdk.client import NotteClient

__all__ = ["NotteClient"]

================
File: packages/notte-sdk/src/notte_sdk/client.py
================
from typing_extensions import final

from notte_sdk.endpoints.agents import AgentsClient
from notte_sdk.endpoints.env import EnvClient
from notte_sdk.endpoints.persona import PersonaClient
from notte_sdk.endpoints.sessions import SessionsClient
from notte_sdk.vault import NotteVault


@final
class NotteClient:
    """
    Client for the Notte API.

    Note: this client is only able to handle one session at a time.
    If you need to handle multiple sessions, you need to create a new client for each session.
    """

    def __init__(
        self,
        api_key: str | None = None,
        verbose: bool = False,
    ):
        """Initialize a NotteClient instance.

        Initializes the NotteClient with the specified API key and server URL, creating instances
        of SessionsClient, AgentsClient, and EnvClient.

        Args:
            api_key: Optional API key for authentication.
        """
        self.sessions: SessionsClient = SessionsClient(api_key=api_key, verbose=verbose)
        self.agents: AgentsClient = AgentsClient(api_key=api_key, verbose=verbose)
        self.env: EnvClient = EnvClient(api_key=api_key, verbose=verbose)
        self.persona: PersonaClient = PersonaClient(api_key=api_key, verbose=verbose)

    def vault(self, persona_id: str) -> NotteVault:
        return NotteVault(persona_client=self.persona, persona_id=persona_id)

================
File: packages/notte-sdk/src/notte_sdk/errors.py
================
from notte_core.errors.base import NotteBaseError
from requests import Response


class NotteAPIError(NotteBaseError):
    def __init__(self, path: str, response: Response) -> None:
        try:
            error = response.json()
        except Exception:
            error = response.text

        super().__init__(
            dev_message=f"Request to `{path}` failed with status code {response.status_code}: {error}",
            user_message="An unexpected error occurred during the request to the Notte API.",
            should_notify_team=True,
            # agent message not relevant here
            agent_message=None,
        )


class AuthenticationError(NotteBaseError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=f"Authentication failed. {message}",
            user_message="Authentication failed. Please check your credentials or upgrade your plan.",
            should_retry_later=False,
            # agent message not relevant here
            agent_message=None,
        )


class InvalidRequestError(NotteBaseError):
    def __init__(self, message: str) -> None:
        super().__init__(
            dev_message=f"Invalid request. {message}",
            user_message="Invalid request. Please check your request parameters.",
            should_retry_later=False,
            # agent message not relevant here
            agent_message=None,
        )

================
File: packages/notte-sdk/src/notte_sdk/types.py
================
import datetime as dt
import json
from base64 import b64decode, b64encode
from collections.abc import Sequence
from enum import StrEnum
from pathlib import Path
from typing import Annotated, Any, Generic, Literal, Required, TypeVar

from notte_core.actions.base import Action, BrowserAction
from notte_core.browser.observation import Observation, TrajectoryProgress
from notte_core.browser.snapshot import SnapshotMetadata, TabsData
from notte_core.common.credentials.base import CredentialField
from notte_core.controller.actions import BaseAction
from notte_core.controller.space import BaseActionSpace
from notte_core.data.space import DataSpace
from notte_core.llms.engine import LlmModel
from patchright.async_api import ProxySettings as PlaywrightProxySettings
from pydantic import BaseModel, Field, create_model, field_validator, model_validator
from typing_extensions import TypedDict, override

# ############################################################
# Session Management
# ############################################################


DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES = 3
DEFAULT_GLOBAL_SESSION_TIMEOUT_IN_MINUTES = 30
DEFAULT_MAX_NB_ACTIONS = 100
DEFAULT_MAX_NB_STEPS = 20


class BrowserType(StrEnum):
    CHROMIUM = "chromium"
    FIREFOX = "firefox"


class ProxyGeolocation(BaseModel):
    """
    Geolocation settings for the proxy.
    E.g. "New York, NY, US"
    """

    city: str
    state: str
    country: str


class ProxyType(StrEnum):
    NOTTE = "notte"
    EXTERNAL = "external"


class ProxySettings(BaseModel):
    type: ProxyType
    server: str | None
    bypass: str | None
    username: str | None
    password: str | None
    # TODO: enable geolocation later on
    # geolocation: ProxyGeolocation | None

    @field_validator("server")
    @classmethod
    def validate_server(cls, v: str | None, info: Any) -> str | None:
        if info.data.get("type") == ProxyType.EXTERNAL and v is None:
            raise ValueError("Server is required for external proxy type")
        return v

    def to_playwright(self) -> PlaywrightProxySettings:
        if self.server is None:
            raise ValueError("Proxy server is required")
        return PlaywrightProxySettings(
            server=self.server,
            bypass=self.bypass,
            username=self.username,
            password=self.password,
        )


class Cookie(BaseModel):
    name: str
    domain: str
    path: str
    httpOnly: bool
    expirationDate: float | None = None
    hostOnly: bool | None = None
    sameSite: str | None = None
    secure: bool | None = None
    session: bool | None = None
    storeId: str | None = None
    value: str
    expires: float | None = Field(default=None)

    @model_validator(mode="before")
    @classmethod
    def validate_expiration(cls, data: dict[str, Any]) -> dict[str, Any]:
        # Handle either expirationDate or expires being provided
        if data.get("expirationDate") is None and data.get("expires") is not None:
            data["expirationDate"] = float(data["expires"])
        elif data.get("expires") is None and data.get("expirationDate") is not None:
            data["expires"] = float(data["expirationDate"])
        return data

    @override
    def model_post_init(self, __context: Any) -> None:
        # Set expires if expirationDate is provided but expires is not
        if self.expirationDate is not None and self.expires is None:
            self.expires = float(self.expirationDate)
        # Set expirationDate if expires is provided but expirationDate is not
        elif self.expires is not None and self.expirationDate is None:
            self.expirationDate = float(self.expires)

        if self.sameSite is not None:
            self.sameSite = self.sameSite.lower()
            self.sameSite = self.sameSite[0].upper() + self.sameSite[1:]

    @staticmethod
    def from_json(path: str | Path) -> list["Cookie"]:
        path = Path(path)
        if not path.exists():
            raise FileNotFoundError(f"Cookies file not found at {path}")
        with open(path, "r") as f:
            cookies_json = json.load(f)
        cookies = [Cookie.model_validate(cookie) for cookie in cookies_json]
        return cookies


class UploadCookiesRequest(BaseModel):
    cookies: list[Cookie]

    @staticmethod
    def from_json(path: str | Path) -> "UploadCookiesRequest":
        cookies = Cookie.from_json(path)
        return UploadCookiesRequest(cookies=cookies)


class UploadCookiesResponse(BaseModel):
    success: bool
    message: str


class ReplayResponse(BaseModel):
    replay: Annotated[bytes | None, Field(description="The session replay in `.webp` format", repr=False)] = None

    model_config = {  # type: ignore[reportUnknownMemberType]
        "json_encoders": {
            bytes: lambda v: b64encode(v).decode("utf-8") if v else None,
        }
    }

    @field_validator("replay", mode="before")
    @classmethod
    def decode_replay(cls, value: str | None) -> bytes | None:
        if value is None:
            return None
        if isinstance(value, bytes):
            return value
        if not isinstance(value, str):  # pyright: ignore[reportUnnecessaryIsInstance]
            raise ValueError("replay must be a bytes or a base64 encoded string")  # pyright: ignore[reportUnreachable]
        return b64decode(value.encode("utf-8"))


class SessionStartRequestDict(TypedDict, total=False):
    timeout_minutes: int
    screenshot: bool | None
    max_steps: int
    proxies: list[ProxySettings] | bool
    browser_type: BrowserType
    chrome_args: list[str] | None


class SessionRequestDict(TypedDict, total=False):
    session_id: Required[str]


class SessionStartRequest(BaseModel):
    timeout_minutes: Annotated[
        int,
        Field(
            description="Session timeout in minutes. Cannot exceed the global timeout.",
            gt=0,
            le=DEFAULT_GLOBAL_SESSION_TIMEOUT_IN_MINUTES,
        ),
    ] = DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES

    screenshot: Annotated[
        bool | None,
        Field(description="Whether to include a screenshot in the response."),
    ] = None

    max_steps: Annotated[
        int | None,
        Field(
            gt=0,
            description="Maximum number of steps in the trajectory. An error will be raised if this limit is reached.",
        ),
    ] = DEFAULT_MAX_NB_STEPS

    proxies: Annotated[
        list[ProxySettings] | bool,
        Field(
            description="List of custom proxies to use for the session. If True, the default proxies will be used.",
        ),
    ] = False
    browser_type: BrowserType = BrowserType.CHROMIUM
    chrome_args: Annotated[list[str] | None, Field(description="Override the chrome instance arguments")] = None

    def __post_init__(self):
        """
        Validate that the session timeout does not exceed the allowed global limit.

        Raises:
            ValueError: If the session's timeout_minutes exceeds DEFAULT_GLOBAL_SESSION_TIMEOUT_IN_MINUTES.
        """
        if self.timeout_minutes > DEFAULT_GLOBAL_SESSION_TIMEOUT_IN_MINUTES:
            raise ValueError(
                (
                    "Session timeout cannot be greater than global timeout: "
                    f"{self.timeout_minutes} > {DEFAULT_GLOBAL_SESSION_TIMEOUT_IN_MINUTES}"
                )
            )


class SessionRequest(BaseModel):
    session_id: Annotated[
        str | None,
        Field(description="The ID of the session. A new session is created when not provided."),
    ] = None


class SessionStatusRequest(BaseModel):
    session_id: Annotated[
        str | None,
        Field(description="The ID of the session. A new session is created when not provided."),
    ] = None

    replay: Annotated[
        bool,
        Field(description="Whether to include the video replay in the response (`.webp` format)."),
    ] = False


class ListRequestDict(TypedDict, total=False):
    only_active: bool
    limit: int


class SessionListRequest(BaseModel):
    only_active: bool = True
    limit: int = 10


class SessionResponse(BaseModel):
    session_id: Annotated[
        str,
        Field(
            description=(
                "The ID of the session (created or existing). "
                "Use this ID to interact with the session for the next operation."
            )
        ),
    ]
    timeout_minutes: Annotated[
        int,
        Field(description="Session timeout in minutes. Will timeout if now() > last access time + timeout_minutes"),
    ]
    created_at: Annotated[dt.datetime, Field(description="Session creation time")]
    closed_at: Annotated[dt.datetime | None, Field(description="Session closing time")] = None
    last_accessed_at: Annotated[dt.datetime, Field(description="Last access time")]
    duration: Annotated[dt.timedelta, Field(description="Session duration")] = Field(
        default_factory=lambda: dt.timedelta(0)
    )
    status: Annotated[
        Literal["active", "closed", "error", "timed_out"],
        Field(description="Session status"),
    ]
    # TODO: discuss if this is the best way to handle errors
    error: Annotated[str | None, Field(description="Error message if the operation failed to complete")] = None
    proxies: Annotated[
        bool,
        Field(
            description="Whether proxies were used for the session. True if any proxy was applied during session creation."
        ),
    ] = False
    browser_type: BrowserType = BrowserType.CHROMIUM

    @field_validator("closed_at", mode="before")
    @classmethod
    def validate_closed_at(cls, value: dt.datetime | None, info: Any) -> dt.datetime | None:
        data = info.data
        if data.get("status") == "closed" and value is None:
            raise ValueError("closed_at must be provided if status is closed")
        return value

    @field_validator("duration", mode="before")
    @classmethod
    def compute_duration(cls, value: dt.timedelta | None, info: Any) -> dt.timedelta:
        data = info.data
        if value is not None:
            return value
        if data.get("status") == "closed" and data.get("closed_at") is not None:
            return data["closed_at"] - data["created_at"]
        return dt.datetime.now() - data["created_at"]


class SessionStatusResponse(SessionResponse, ReplayResponse):
    pass


class SessionResponseDict(TypedDict, total=False):
    session_id: str
    timeout_minutes: int
    created_at: dt.datetime
    last_accessed_at: dt.datetime
    duration: dt.timedelta
    status: Literal["active", "closed", "error", "timed_out"]
    error: str | None


# ############################################################
# Session debug endpoints
# ############################################################


class TabSessionDebugRequest(BaseModel):
    tab_idx: int


class TabSessionDebugResponse(BaseModel):
    metadata: TabsData
    debug_url: str
    ws_url: str


class SessionDebugResponse(BaseModel):
    debug_url: str
    ws_url: str
    recording_ws_url: str
    tabs: list[TabSessionDebugResponse]


class SessionDebugRecordingEvent(BaseModel):
    """Model for events that can be sent over the recording WebSocket"""

    type: Literal["action", "observation", "error"]
    data: BaseAction | Observation | str
    timestamp: dt.datetime = Field(default_factory=dt.datetime.now)

    @staticmethod
    def session_closed() -> "SessionDebugRecordingEvent":
        return SessionDebugRecordingEvent(
            type="error",
            data="Session closed by user. No more actions will be recorded.",
        )


# ############################################################
# Persona
# ############################################################


class EmailsReadRequestDict(TypedDict, total=False):
    limit: int
    timedelta: dt.timedelta | None
    unread_only: bool


class EmailsReadRequest(BaseModel):
    limit: Annotated[int, Field(description="Max number of emails to return")] = 10
    timedelta: Annotated[
        dt.timedelta | None, Field(description="Return only emails that are not older than <timedelta>")
    ] = None
    unread_only: Annotated[bool, Field(description="Return only previously unread emails")] = False


class EmailResponse(BaseModel):
    subject: Annotated[str, Field(description="Subject of the email")]
    email_id: Annotated[str, Field(description="Email UUID")]
    created_at: Annotated[dt.datetime, Field(description="Creation date")]
    sender_email: Annotated[str | None, Field(description="Email address of the sender")]
    sender_name: Annotated[str | None, Field(description="Name (if available) of the sender")]
    text_content: Annotated[
        str | None, Field(description="Raw textual body, can be uncorrelated with html content")
    ] = None
    html_content: Annotated[str | None, Field(description="HTML body, can be uncorrelated with raw content")] = None


class SMSReadRequestDict(TypedDict, total=False):
    limit: int
    timedelta: dt.timedelta | None
    unread_only: bool


class SMSReadRequest(BaseModel):
    limit: Annotated[int, Field(description="Max number of messages to return")] = 10
    timedelta: Annotated[
        dt.timedelta | None, Field(description="Return only messages that are not older than <timedelta>")
    ] = None
    unread_only: Annotated[bool, Field(description="Return only previously unread messages")] = False


class SMSResponse(BaseModel):
    body: Annotated[str, Field(description="SMS message body")]
    sms_id: Annotated[str, Field(description="SMS UUID")]
    created_at: Annotated[dt.datetime, Field(description="Creation date")]
    sender: Annotated[str | None, Field(description="SMS sender phone number")]


class PersonaCreateRequestDict(TypedDict, total=False):
    pass


class PersonaCreateRequest(BaseModel):
    pass


class PersonaCreateResponse(BaseModel):
    persona_id: Annotated[str, Field(description="ID of the created persona")]


class VirtualNumberRequestDict(TypedDict, total=False):
    pass


class VirtualNumberRequest(BaseModel):
    pass


class VirtualNumberResponse(BaseModel):
    status: Annotated[str, Field(description="Status of the created virtual number")]


class AddCredentialsRequestDict(TypedDict, total=False):
    url: str | None
    credentials: list[CredentialField]


class AddCredentialsRequest(BaseModel):
    url: str | None
    credentials: Annotated[list[CredentialField], Field(description="Credentials to add")]

    @staticmethod
    def load(body: dict[str, Any]) -> "AddCredentialsRequest":
        url = body.get("url")
        creds = [CredentialField.from_dict(field) for field in body["credentials"]]
        return AddCredentialsRequest(url=url, credentials=creds)


class AddCredentialsResponse(BaseModel):
    status: Annotated[str, Field(description="Status of the created credentials")]


class GetCredentialsRequestDict(TypedDict, total=False):
    url: str | None


class GetCredentialsRequest(BaseModel):
    url: str | None


class GetCredentialsResponse(BaseModel):
    credentials: Annotated[list[CredentialField], Field(description="Retrieved credentials")]


class DeleteCredentialsRequestDict(TypedDict, total=False):
    url: str | None


class DeleteCredentialsRequest(BaseModel):
    url: str | None


class DeleteCredentialsResponse(BaseModel):
    status: Annotated[str, Field(description="Status of the deletion")]


# ############################################################
# Environment endpoints
# ############################################################


class PaginationParamsDict(TypedDict, total=False):
    min_nb_actions: int | None
    max_nb_actions: int


class PaginationParams(BaseModel):
    min_nb_actions: Annotated[
        int | None,
        Field(
            description=(
                "The minimum number of actions to list before stopping. "
                "If not provided, the listing will continue until the maximum number of actions is reached."
            ),
        ),
    ] = None
    max_nb_actions: Annotated[
        int,
        Field(
            description=(
                "The maximum number of actions to list after which the listing will stop. "
                "Used when min_nb_actions is not provided."
            ),
        ),
    ] = DEFAULT_MAX_NB_ACTIONS


class ObserveRequest(SessionRequest, PaginationParams):
    url: Annotated[
        str | None,
        Field(description="The URL to observe. If not provided, uses the current page URL."),
    ] = None


class ObserveRequestDict(SessionRequestDict, PaginationParamsDict, total=False):
    url: str | None


class ScrapeParamsDict(TypedDict, total=False):
    scrape_links: bool
    only_main_content: bool
    response_format: type[BaseModel] | None
    instructions: str | None
    use_llm: bool | None


class ScrapeRequestDict(ObserveRequestDict, ScrapeParamsDict, total=False):
    pass


class ScrapeParams(BaseModel):
    scrape_links: Annotated[
        bool,
        Field(description="Whether to scrape links from the page. Links are scraped by default."),
    ] = True

    only_main_content: Annotated[
        bool,
        Field(
            description=(
                "Whether to only scrape the main content of the page. If True, navbars, footers, etc. are excluded."
            ),
        ),
    ] = True

    response_format: Annotated[
        type[BaseModel] | None,
        Field(description="The response format to use for the scrape."),
    ] = None
    instructions: Annotated[str | None, Field(description="The instructions to use for the scrape.")] = None

    use_llm: Annotated[
        bool | None,
        Field(
            description=(
                "Whether to use an LLM for the extraction process. This will result in a longer response time but a"
                " better accuracy. If not provided, the default value is the same as the NotteEnv config."
            )
        ),
    ] = None

    def requires_schema(self) -> bool:
        return self.response_format is not None or self.instructions is not None

    def scrape_params_dict(self) -> ScrapeParamsDict:
        return ScrapeParamsDict(
            scrape_links=self.scrape_links,
            only_main_content=self.only_main_content,
            response_format=self.response_format,
            instructions=self.instructions,
            use_llm=self.use_llm,
        )

    @field_validator("response_format", mode="before")
    @classmethod
    def convert_response_format(cls, value: dict[str, Any] | type[BaseModel] | None) -> type[BaseModel] | None:
        """
        Creates a Pydantic model from a given JSON Schema.

        Args:
            schema_name: The name of the model to be created.
            schema_json: The JSON Schema definition.

        Returns:
            The dynamically created Pydantic model class.
        """
        if value is None:
            return None
        if isinstance(value, type) and issubclass(value, BaseModel):  # type: ignore[arg-type]
            return value
        if not isinstance(value, dict):  # type: ignore[arg-type]
            raise ValueError(f"response_format must be a BaseModel or a dict but got: {type(value)} : {value}")  # type: ignore[unreachable]
        if len(value.keys()) == 0:
            return None

        # Map JSON Schema types to Pydantic types
        type_mapping = {
            "string": str,
            "integer": int,
            "number": float,
            "boolean": bool,
            "array": list,
            "object": dict,
            "null": None,
        }
        if "properties" not in value:
            raise ValueError("response_format must contain a 'properties' key")

        if "$defs" in value:
            raise ValueError("response_format currently does not support $defs")

        # Extract field definitions with type annotations
        field_definitions = {}
        for field_name, field_schema in value["properties"].items():
            field_type = field_schema.get("type")
            if field_type:
                python_type = type_mapping.get(field_type)
                if python_type:
                    field_definitions[field_name] = (python_type, ...)

        model_name = str(value.get("title", "__DynamicResponseFormat"))

        return create_model(model_name, **field_definitions)  # type: ignore[arg-type]


class ScrapeRequest(ObserveRequest, ScrapeParams):
    pass


class StepRequest(SessionRequest, PaginationParams):
    action_id: Annotated[str, Field(description="The ID of the action to execute")]

    value: Annotated[str | None, Field(description="The value to input for form actions")] = None

    enter: Annotated[
        bool | None,
        Field(description="Whether to press enter after inputting the value"),
    ] = None


class StepRequestDict(SessionRequestDict, PaginationParamsDict, total=False):
    action_id: str
    value: str | None
    enter: bool | None


class ActionSpaceResponse(BaseModel):
    markdown: Annotated[str | None, Field(description="Markdown representation of the action space")] = None
    actions: Annotated[
        Sequence[Action],
        Field(description="List of available actions in the current state"),
    ]
    browser_actions: Annotated[
        Sequence[BrowserAction],
        Field(description="List of special actions, i.e browser actions"),
    ]
    # TODO: ActionSpaceResponse should be a subclass of ActionSpace
    description: str
    category: str | None = None

    @staticmethod
    def from_space(space: BaseActionSpace | None) -> "ActionSpaceResponse | None":
        if space is None:
            return None

        return ActionSpaceResponse(
            markdown=space.markdown(),
            description=space.description,
            category=space.category,
            actions=space.actions(),  # type: ignore[arg-type]
            browser_actions=space.browser_actions(),  # type: ignore[arg-type]
        )


class ObserveResponse(BaseModel):
    session: Annotated[SessionResponse, Field(description="Browser session information")]
    space: Annotated[
        ActionSpaceResponse | None,
        Field(description="Available actions in the current state"),
    ] = None
    metadata: SnapshotMetadata
    screenshot: bytes | None = Field(repr=False)
    data: DataSpace | None
    progress: TrajectoryProgress | None

    model_config = {  # type: ignore[attr-defined]
        "json_encoders": {
            bytes: lambda v: b64encode(v).decode("utf-8") if v else None,
        }
    }

    @staticmethod
    def from_obs(
        obs: Observation,
        session: SessionResponse,
    ) -> "ObserveResponse":
        return ObserveResponse(
            session=session,
            metadata=obs.metadata,
            screenshot=obs.screenshot,
            data=obs.data,
            space=ActionSpaceResponse.from_space(obs.space),
            progress=obs.progress,
        )


# ############################################################
# Agent endpoints
# ############################################################


class AgentRequestDict(TypedDict, total=False):
    task: Required[str]
    url: str | None
    reasoning_model: LlmModel


class AgentRequest(BaseModel):
    task: str
    url: str | None = None


class AgentStatus(StrEnum):
    active = "active"
    closed = "closed"


class AgentSessionRequest(SessionRequest):
    agent_id: Annotated[str | None, Field(description="The ID of the agent to run")] = None


class AgentRunRequestDict(AgentRequestDict, SessionRequestDict, total=False):
    use_vision: bool
    persona_id: str | None


class AgentRunRequest(AgentRequest, SessionRequest):
    reasoning_model: LlmModel = LlmModel.default()  # type: ignore[reportCallInDefaultInitializer]
    use_vision: bool = True
    persona_id: str | None = None


class AgentStatusRequest(AgentSessionRequest):
    replay: Annotated[bool, Field(description="Whether to include the replay in the response")] = False

    @field_validator("agent_id", mode="before")
    @classmethod
    def validate_agent_id(cls, value: str | None) -> str | None:
        if value is None:
            raise ValueError("agent_id is required")
        return value


class AgentListRequest(SessionListRequest):
    pass


class AgentStopRequest(AgentSessionRequest, ReplayResponse):
    success: Annotated[bool, Field(description="Whether the agent task was successful")] = False
    answer: Annotated[str, Field(description="The answer to the agent task")] = "Agent manually stopped by user"


class AgentResponse(BaseModel):
    agent_id: Annotated[str, Field(description="The ID of the agent")]
    created_at: Annotated[dt.datetime, Field(description="The creation time of the agent")]
    session_id: Annotated[str, Field(description="The ID of the session")]
    status: Annotated[AgentStatus, Field(description="The status of the agent (active or closed)")]
    closed_at: Annotated[dt.datetime | None, Field(description="The closing time of the agent")] = None


TStepOutput = TypeVar("TStepOutput", bound=BaseModel)


class AgentStatusResponse(AgentResponse, ReplayResponse, Generic[TStepOutput]):
    task: Annotated[str, Field(description="The task that the agent is currently running")]
    url: Annotated[str | None, Field(description="The URL that the agent started on")] = None

    success: Annotated[
        bool | None,
        Field(description="Whether the agent task was successful. None if the agent is still running"),
    ] = None
    answer: Annotated[
        str | None,
        Field(description="The answer to the agent task. None if the agent is still running"),
    ] = None
    steps: Annotated[
        list[TStepOutput],
        Field(description="The steps that the agent has currently taken"),
    ] = Field(default_factory=lambda: [])

================
File: packages/notte-sdk/src/notte_sdk/vault.py
================
from __future__ import annotations

import traceback
from typing import final

import tldextract
from loguru import logger
from notte_core.common.credentials.base import (
    BaseVault,
    CredentialField,
    VaultCredentials,
)
from typing_extensions import override

from notte_sdk.endpoints.persona import PersonaClient


@final
class NotteVault(BaseVault):
    """Vault that fetches credentials stored using the sdk"""

    def __init__(self, persona_client: PersonaClient, persona_id: str):
        self.persona_client = persona_client
        self.persona_id = persona_id

    @staticmethod
    def get_root_domain(url: str) -> str:
        extracted = tldextract.extract(url)
        return ".".join((extracted.domain, extracted.suffix)) or url

    @override
    async def _set_singleton_credentials(self, creds: list[CredentialField]) -> None:
        for cred in creds:
            if not cred.singleton:
                raise ValueError(f"{cred.__class__} can't be set as singleton credential: url-specific only")

        _ = self.persona_client.add_credentials(self.persona_id, url=None, credentials=list(creds))

    @override
    async def get_singleton_credentials(self) -> list[CredentialField]:
        try:
            return self.persona_client.get_credentials(self.persona_id, url=None).credentials
        except Exception as e:
            logger.warning(f"Could not get singleton credentials: {e} {traceback.format_exc()}")
            return []

    @override
    async def _add_credentials(self, creds: VaultCredentials) -> None:
        for cred in creds.creds:
            if cred.singleton:
                raise ValueError(f"{cred.__class__} can't be set as url specific credential: singleton only")

        domain = NotteVault.get_root_domain(creds.url)
        _ = self.persona_client.add_credentials(self.persona_id, url=domain, credentials=list(creds.creds))

    @override
    async def _get_credentials_impl(self, url: str) -> VaultCredentials | None:
        try:
            domain = NotteVault.get_root_domain(url)
            creds = self.persona_client.get_credentials(self.persona_id, url=domain).credentials
            return VaultCredentials(url=url, creds=creds)
        except Exception:
            logger.warning(f"Failed to get creds: {traceback.format_exc()}")

    @override
    async def remove_credentials(self, url: str | None) -> None:
        _ = self.persona_client.delete_credentials(self.persona_id, url=url)

================
File: packages/notte-sdk/pyproject.toml
================
[project]
name = "notte-sdk"
version = "1.3.3"
description = "The SDK for Notte"
readme = "README.md"
authors = [
    { name = "Notte Team ", email = "hello@notte.cc" }
]
packages = [
  { include = "notte_sdk", from = "src" },
]

requires-python = ">=3.11"
dependencies = [
    "loguru>=0.7.3",
    "pydantic>=2.11.3",
    "requests>=2.32.3",
    "notte-core>=1.3.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

================
File: src/notte/__init__.py
================
from notte_agent.main import Agent
from notte_browser.env import NotteEnv
from notte_core import set_error_mode
from notte_sdk.client import NotteClient

__all__ = ["NotteClient", "NotteEnv", "Agent", "set_error_mode"]

================
File: tests/actions/test_execution.py
================
import asyncio
from dataclasses import dataclass

import pytest
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_browser.window import BrowserWindowConfig

from tests.mock.mock_service import MockLLMService


@pytest.fixture
def headless() -> bool:
    return True


@dataclass
class StepArgs:
    action_id: str
    value: str | None
    enter: bool = False


@dataclass
class ExecutionTest:
    url: str
    steps: list[StepArgs]


@pytest.fixture
def phantombuster_login() -> ExecutionTest:
    return ExecutionTest(
        url="https://phantombuster.com/login",
        steps=[
            StepArgs(action_id="B4", value=None, enter=False),
            StepArgs(action_id="I1", value="lucasgiordano@gmail.com", enter=False),
            StepArgs(action_id="I2", value="lucasgiordano", enter=False),
            StepArgs(action_id="B2", value=None, enter=False),
        ],
    )


async def _test_execution(test: ExecutionTest, headless: bool) -> None:
    async with NotteEnv(
        NotteEnvConfig(window=BrowserWindowConfig(headless=headless)),
        llmserve=MockLLMService(mock_response=""),
    ) as env:
        _ = await env.goto(test.url)
        for step in test.steps:
            if not env.snapshot.dom_node.find(step.action_id):
                inodes = [(n.id, n.text) for n in env.snapshot.interaction_nodes()]
                raise ValueError(f"Action {step.action_id} not found in context with interactions {inodes}")
            _ = await env.execute(step.action_id, step.value, enter=step.enter)


def test_execution(phantombuster_login: ExecutionTest, headless: bool) -> None:
    asyncio.run(_test_execution(phantombuster_login, headless))

================
File: tests/actions/test_parsing.py
================
import pytest
from notte_browser.tagging.action.llm_taging.parser import (
    parse_action_ids,
    parse_action_parameters,
    parse_table,
    parse_table_parameter,
)
from notte_core.actions.base import ActionParameter


def test_parse_parameter_no_defaults_values():
    param = parse_table_parameter("name: paramA, type: int")
    assert param.name == "paramA"
    assert param.type == "int"
    assert param.default is None
    assert param.values == []


def test_parse_parameter_empty_values_list():
    param = parse_table_parameter("name: paramB, type: float, values=[]")
    assert param.name == "paramB"
    assert param.type == "float"
    assert param.values == [""]


def test_parse_parameter_quoted_values():
    param = parse_table_parameter('name: paramC, type: string, values=["val1","val2","val3"]')
    assert param.name == "paramC"
    assert param.type == "string"
    assert param.values == ["val1", "val2", "val3"]


def test_parse_parameter_single_value():
    param = parse_table_parameter("name: paramD, type: boolean, default=true")
    assert param.name == "paramD"
    assert param.type == "boolean"
    assert param.default == "true"
    assert param.values == []


def test_parse_table_empty_table():
    table = ""
    with pytest.raises(ValueError) as e:
        _ = parse_table(table)
    assert "Empty table" in str(e.value)


def test_parse_table_invalid_headers():
    table = """
    | Wrong | Headers | For | Table |
    | --- | --- | --- | --- |
    | action_1 | Desc | name: p1, type: int | cat1 |
    """
    with pytest.raises(ValueError) as e:
        _ = parse_table(table)
    assert "Invalid table headers" in str(e.value)


def test_parse_table_invalid_params():
    table = """
    | ID | Description | Parameters | Category |
    | --- | --- | --- | --- |
    | action_1 | Desc | invalid_param_format | cat1 |
    """
    with pytest.raises(ValueError) as e:
        _ = parse_table(table)
        assert "invalid_param_format" in str(e.value)


def action_parameters() -> list[str]:
    return [
        # Settings and Preferences
        " B3: Open accessibility feedback dialog",
        # Search Actions
        " I1: Select ticket type (ticketType: string = [Round trip, One way, Multi-city])",
        " I2: Select seating class (seatingClass: string = [Economy, Premium economy, Business, First])",
        " I3: Enter origin (origin: string = [Boston, New York, Los Angeles, ...])",
        " I6: Enter return date (returnDate: date = [2023-12-01, 2023-12-02, ...])",
        # Flight Search and Booking Actions
        " B8: Explore destinations",
        (
            " B9-17: View more information on suggested flights (suggestion: string "
            "= [New York, Providence, Hartford, Boston, "
            "Paris, Reykjavík, Miami, Barcelona])"
        ),
        " [L1]: Access source page",
        (
            " [L2, L3]: View route (source: string = "
            "[Boston, New York, Los Angeles, ...], "
            "destination: string = [Boston, New York, Los Angeles, ...])"
        ),
        "B26: Change language to English (United States)",
    ]


def action_ids() -> list[list[str]]:
    return [
        ["B3"],
        ["I1"],
        ["I2"],
        ["I3"],
        ["I6"],
        ["B8"],
        ["B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17"],
        ["L1"],
        ["L2", "L3"],
        ["B26"],
    ]


@pytest.mark.parametrize(
    "action_str, expected_ids",
    zip(action_parameters(), action_ids()),
)
def test_parse_action_ids(action_str: str, expected_ids: list[str]) -> None:
    parsed_id = parse_action_ids(action_str)
    assert parsed_id == expected_ids  # nosec: B101


def action_parameters_with_values() -> list[list[ActionParameter]]:
    return [
        [],
        [
            ActionParameter(
                name="ticketType",
                type="string",
                values=["Round trip", "One way", "Multi-city"],
            ),
        ],
        [
            ActionParameter(
                name="seatingClass",
                type="string",
                values=["Economy", "Premium economy", "Business", "First"],
            ),
        ],
        [
            ActionParameter(
                name="origin",
                type="string",
                values=["Boston", "New York", "Los Angeles", "..."],
            ),
        ],
        [
            ActionParameter(
                name="returnDate",
                type="date",
                values=["2023-12-01", "2023-12-02", "..."],
            ),
        ],
        [],
        [
            ActionParameter(
                name="suggestion",
                type="string",
                values=[
                    "New York",
                    "Providence",
                    "Hartford",
                    "Boston",
                    "Paris",
                    "Reykjavík",
                    "Miami",
                    "Barcelona",
                ],
            ),
        ],
        [],
        [
            ActionParameter(
                name="source",
                type="string",
                values=["Boston", "New York", "Los Angeles", "..."],
            ),
            ActionParameter(
                name="destination",
                type="string",
                values=["Boston", "New York", "Los Angeles", "..."],
            ),
        ],
        [],
    ]


@pytest.mark.parametrize(
    "action_str, expected_parameters",
    zip(action_parameters(), action_parameters_with_values()),
)
def test_parse_action_parameters(action_str: str, expected_parameters: list[ActionParameter]) -> None:
    parsed_parameters = parse_action_parameters(action_str)
    assert parsed_parameters == expected_parameters  # nosec: B101

================
File: tests/browser/test_clipboard_isolation.py
================
import asyncio

import pytest
from notte_browser.env import NotteEnv, NotteEnvConfig

from tests.mock.mock_service import MockLLMService


async def simulate_paste(env: NotteEnv, text: str) -> None:
    """Helper function to simulate paste operation in a page."""
    await env._window.page.evaluate(
        """
    (text) => {
        // Store in isolated clipboard
        window.__isolatedClipboard = text;

        // Create new DataTransfer object
        const dataTransfer = new DataTransfer();
        dataTransfer.setData('text/plain', window.__isolatedClipboard);

        // Make sure element is focused
        if (document.activeElement) {
            // Create and dispatch the paste event
            const pasteEvent = new ClipboardEvent('paste', {
                clipboardData: dataTransfer,
                bubbles: true,
                cancelable: true
            });

            // Dispatch event on the focused element
            document.activeElement.dispatchEvent(pasteEvent);

            // If the event was not cancelled, manually insert the text
            if (!pasteEvent.defaultPrevented) {
                const selection = document.getSelection();
                const range = selection.getRangeAt(0);
                range.deleteContents();
                range.insertNode(document.createTextNode(text));
            }
        }
    }
    """,
        text,
    )


async def try_access_clipboard(env: NotteEnv) -> str:
    """Helper function to attempt accessing clipboard data."""
    await env._window.page.evaluate("""
    () => {
        try {
            const dataTransfer = new DataTransfer();

            // Try to access any potentially leaked clipboard data
            if (window.__isolatedClipboard) {
                console.log("Found leaked clipboard: " + window.__isolatedClipboard);
                dataTransfer.setData('text/plain', window.__isolatedClipboard);
            } else {
                console.log("No clipboard data found in this context");
                return;
            }

            document.activeElement.dispatchEvent(new ClipboardEvent('paste', {
                clipboardData: dataTransfer,
                bubbles: true,
                cancelable: true
            }));
        } catch (e) {
            console.error("Error during paste attempt:", e);
        }
    }
    """)

    return await env._window.page.evaluate("() => document.querySelector(\"textarea[name='q']\").value")


@pytest.mark.skip(reason="Skip on CICD because it's failing to often")
@pytest.mark.asyncio
async def test_clipboard_isolation():
    """Test that clipboard data doesn't leak between browser contexts."""
    # Create two separate Notte environments
    env1 = NotteEnv(
        config=NotteEnvConfig().disable_perception().headless().disable_web_security(),
        llmserve=MockLLMService(mock_response=""),
    )
    env2 = NotteEnv(
        config=NotteEnvConfig().disable_perception().headless().disable_web_security(),
        llmserve=MockLLMService(mock_response=""),
    )

    test_text = "I love banana"
    url = "https://www.google.com"
    selector = 'textarea[name="q"]'

    async with env1 as e1, env2 as e2:
        # Set up test pages
        await e1.goto(url)
        await e2.goto(url)

        for env in [e1, e2]:
            print(env.snapshot.dom_node.interaction_nodes())
            cookie_node = env.snapshot.dom_node.find("B2")
            if cookie_node is not None:
                _ = await env.execute("B2", enter=False)  # reject cookies

        # Wait for search box and click it in both contexts
        await e1._window.page.wait_for_selector(selector)
        await e1._window.page.click(selector)
        await e2._window.page.wait_for_selector(selector)
        await e2._window.page.click(selector)

        # Simulate paste in first context
        await simulate_paste(e1, test_text)
        await asyncio.sleep(2)

        # Try to access clipboard in second context multiple times
        for attempt in range(5):
            # Navigate to fresh page each time to ensure clean state
            await e2.goto(url)
            await e2._window.page.wait_for_selector(selector)
            await e2._window.page.click(selector)

            # Try to access clipboard
            search_value = await try_access_clipboard(e2)

            # Assert no clipboard leakage
            assert search_value == "", f"Clipboard leakage detected on attempt {attempt + 1}: '{search_value}'"

            # Small delay between attempts
            await asyncio.sleep(0.5)

================
File: tests/browser/test_context.py
================
import pytest
from notte_core.actions.base import Action
from notte_core.browser.dom_tree import A11yNode, A11yTree, ComputedDomAttributes, DomNode
from notte_core.browser.node_type import NodeRole, NodeType
from notte_core.browser.snapshot import BrowserSnapshot, SnapshotMetadata, ViewportData


@pytest.fixture
def nested_graph() -> DomNode:
    return DomNode(
        id=None,
        role=NodeRole.GROUP,
        text="root",
        type=NodeType.OTHER,
        computed_attributes=ComputedDomAttributes(),
        attributes=None,
        children=[
            DomNode(
                id="A1",
                role=NodeRole.BUTTON,
                text="A1",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id="A2",
                role=NodeRole.BUTTON,
                text="A2",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id="A3",
                role=NodeRole.BUTTON,
                text="A3",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.TEXT,
                text="text",
                type=NodeType.TEXT,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.GROUP,
                text="yo",
                type=NodeType.OTHER,
                computed_attributes=ComputedDomAttributes(),
                attributes=None,
                children=[
                    DomNode(
                        id="B1",
                        role=NodeRole.BUTTON,
                        text="B1",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id="B2",
                        role=NodeRole.BUTTON,
                        text="B2",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id=None,
                        role=NodeRole.TEXT,
                        text="text",
                        type=NodeType.TEXT,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                ],
            ),
            DomNode(
                id="A4",
                role=NodeRole.BUTTON,
                text="A4",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.GROUP,
                text="B2",
                type=NodeType.OTHER,
                computed_attributes=ComputedDomAttributes(),
                attributes=None,
                children=[
                    DomNode(
                        id="B3",
                        role=NodeRole.BUTTON,
                        text="B3",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id="B4",
                        role=NodeRole.BUTTON,
                        text="B4",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id=None,
                        role=NodeRole.TEXT,
                        text="text",
                        type=NodeType.TEXT,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id=None,
                        role=NodeRole.GROUP,
                        text="C",
                        type=NodeType.OTHER,
                        computed_attributes=ComputedDomAttributes(),
                        attributes=None,
                        children=[
                            DomNode(
                                id="C1",
                                role=NodeRole.BUTTON,
                                text="C1",
                                type=NodeType.INTERACTION,
                                children=[],
                                attributes=None,
                                computed_attributes=ComputedDomAttributes(),
                            ),
                            DomNode(
                                id="C2",
                                role=NodeRole.BUTTON,
                                text="C2",
                                type=NodeType.INTERACTION,
                                children=[],
                                attributes=None,
                                computed_attributes=ComputedDomAttributes(),
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )


@pytest.fixture
def browser_snapshot() -> BrowserSnapshot:
    empty_a11y_tree = A11yNode(
        role="root",
        name="root",
        children=[],
    )
    return BrowserSnapshot(
        metadata=SnapshotMetadata(
            url="https://example.com",
            title="example",
            viewport=ViewportData(
                scroll_x=0,
                scroll_y=0,
                viewport_width=1000,
                viewport_height=1000,
                total_width=1000,
                total_height=1000,
            ),
            tabs=[],
        ),
        html_content="my html content",
        a11y_tree=A11yTree(empty_a11y_tree, empty_a11y_tree),
        screenshot=None,
        dom_node=DomNode(
            id="B2",
            role="button",
            text="user-text",
            type=NodeType.INTERACTION,
            children=[],
            attributes=None,
            computed_attributes=ComputedDomAttributes(),
        ),
    )


def test_subgraph_without_existing_actions(
    nested_graph: DomNode,
    browser_snapshot: BrowserSnapshot,
) -> None:
    context = browser_snapshot.with_dom_node(nested_graph)
    assert len(context.interaction_nodes()) == 10, [inode.id for inode in context.interaction_nodes()]
    # test with A1
    subgraph = context.subgraph_without([Action(id="A1", description="A1", category="A1")])
    assert subgraph is not None
    assert subgraph.dom_node.find("A1") is None
    assert len(subgraph.interaction_nodes()) == 9, [inode.id for inode in subgraph.interaction_nodes()]
    # test with A1, A2, A3
    subgraph = context.subgraph_without(
        [
            Action(id="A1", description="A1", category="A1"),
            Action(id="A2", description="A2", category="A2"),
            Action(id="A3", description="A3", category="A3"),
        ]
    )
    assert subgraph is not None
    assert subgraph.dom_node.find("A1") is None
    assert subgraph.dom_node.find("A2") is None
    assert subgraph.dom_node.find("A3") is None
    assert len(subgraph.interaction_nodes()) == 7
    # test with B1, B2, C2
    subgraph = context.subgraph_without(
        [
            Action(id="A1", description="A1", category="A1"),
            Action(id="A2", description="A2", category="A2"),
            Action(id="A3", description="A3", category="A3"),
            Action(id="B1", description="B1", category="B1"),
            Action(id="B2", description="B2", category="B2"),
            Action(id="C2", description="C2", category="C2"),
        ]
    )
    assert subgraph is not None
    assert subgraph.dom_node.find("B1") is None
    assert subgraph.dom_node.find("B2") is None
    assert subgraph.dom_node.find("C2") is None
    assert len(subgraph.interaction_nodes()) == 4
    # exclude all
    subgraph = context.subgraph_without(
        [
            Action(id="A1", description="A1", category="A1"),
            Action(id="A2", description="A2", category="A2"),
            Action(id="A3", description="A3", category="A3"),
            Action(id="A4", description="A4", category="A4"),
            Action(id="B1", description="B1", category="B1"),
            Action(id="B2", description="B2", category="B2"),
            Action(id="B3", description="B3", category="B3"),
            Action(id="B4", description="B4", category="B4"),
            Action(id="C1", description="C1", category="C1"),
            Action(id="C2", description="C2", category="C2"),
        ]
    )
    assert subgraph is None

================
File: tests/browser/test_node_type.py
================
import pytest
from notte_core.browser.dom_tree import ComputedDomAttributes, DomAttributes, DomNode, NodeSelectors
from notte_core.browser.node_type import NodeCategory, NodeRole, NodeType


def test_node_category_roles():
    # Test INTERACTION roles
    interaction_roles = NodeCategory.INTERACTION.roles()
    assert "button" in interaction_roles
    assert "link" in interaction_roles
    assert "textbox" in interaction_roles

    # Test with group role
    interaction_roles_with_group = NodeCategory.INTERACTION.roles(add_group_role=True)
    assert "group" in interaction_roles_with_group
    assert "generic" in interaction_roles_with_group
    assert "none" in interaction_roles_with_group

    # Test TEXT roles
    text_roles = NodeCategory.TEXT.roles()
    assert "text" in text_roles
    assert "heading" in text_roles
    assert "paragraph" in text_roles


def test_node_role_from_value():
    # Test valid role conversion
    assert NodeRole.from_value("BUTTON") == NodeRole.BUTTON
    assert NodeRole.from_value("TEXT") == NodeRole.TEXT

    # Test invalid role returns string
    assert NodeRole.from_value("invalid_role") == "invalid_role"


def test_node_role_category():
    # Test structural roles
    assert NodeRole.WEBAREA.category() == NodeCategory.STRUCTURAL
    assert NodeRole.GROUP.category() == NodeCategory.STRUCTURAL

    # Test text roles
    assert NodeRole.TEXT.category() == NodeCategory.TEXT
    assert NodeRole.HEADING.category() == NodeCategory.TEXT

    # Test interaction roles
    assert NodeRole.BUTTON.category() == NodeCategory.INTERACTION
    assert NodeRole.LINK.category() == NodeCategory.INTERACTION

    # Test table roles
    assert NodeRole.TABLE.category() == NodeCategory.TABLE
    assert NodeRole.ROW.category() == NodeCategory.TABLE

    # Test list roles
    assert NodeRole.LIST.category() == NodeCategory.LIST
    assert NodeRole.LISTITEM.category() == NodeCategory.LIST


def test_notte_node():
    # Create a simple node hierarchy
    child_node = DomNode(
        id="child1",
        role=NodeRole.BUTTON,
        text="Click me",
        type=NodeType.INTERACTION,
        children=[],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )

    parent_node = DomNode(
        id="parent1",
        role=NodeRole.GROUP,
        text="Parent Group",
        type=NodeType.OTHER,
        children=[child_node],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )

    # Test find method
    assert parent_node.find("child1") == child_node.to_interaction_node()
    assert parent_node.find("nonexistent") is None

    # Test is_interaction method
    assert child_node.is_interaction() is True
    assert parent_node.is_interaction() is False

    # Test get_role_str method
    assert child_node.get_role_str() == "button"
    assert parent_node.get_role_str() == "group"

    # Test string role
    string_role_node = DomNode(
        id="str1",
        role="custom_role",
        text="Custom",
        type=NodeType.OTHER,
        children=[],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )
    assert string_role_node.get_role_str() == "custom_role"
    assert string_role_node.is_interaction() is False


def test_notte_node_flatten():
    # Create a nested structure

    button1 = DomNode(
        id="btn1",
        role=NodeRole.BUTTON,
        text="Button 1",
        type=NodeType.INTERACTION,
        children=[],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )

    button2 = DomNode(
        id="btn2",
        role=NodeRole.BUTTON,
        text="Button 2",
        type=NodeType.INTERACTION,
        children=[],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )

    text_node = DomNode(
        id="txt1",
        role=NodeRole.TEXT,
        text="Some text",
        type=NodeType.TEXT,
        children=[],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )

    group = DomNode(
        id="group1",
        role=NodeRole.GROUP,
        text="Group",
        type=NodeType.OTHER,
        children=[button1, text_node, button2],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )
    # Test flatten with all nodes
    flattened = group.flatten(only_interaction=False)
    assert len(flattened) == 4  # group + 3 children
    assert group in flattened
    assert button1 in flattened
    assert button2 in flattened
    assert text_node in flattened

    # Test flatten with only interaction nodes
    interaction_nodes = group.flatten(only_interaction=True)
    assert len(interaction_nodes) == 2  # only buttons
    assert button1 in interaction_nodes
    assert button2 in interaction_nodes
    assert text_node not in interaction_nodes
    assert group not in interaction_nodes


def test_html_selector():
    selector = NodeSelectors(
        playwright_selector="button[name='Submit']",
        css_selector="form > button.submit",
        xpath_selector="//form/button[@name='Submit']",
        notte_selector="button[name='Submit']",
        in_iframe=False,
        in_shadow_root=False,
        iframe_parent_css_selectors=[],
    )
    assert selector.playwright_selector == "button[name='Submit']"
    assert selector.css_selector == "form > button.submit"
    assert selector.xpath_selector == "//form/button[@name='Submit']"


def test_node_attributes():
    pre_attrs = DomAttributes.safe_init(
        modal=True,
        required=True,
        description="Test description",
        visible=True,
        selected=False,
        checked=True,
        enabled=True,
        value="test",
        focused=True,
        autocomplete="test",
        haspopup=True,
        disabled=False,
        valuemin="1",
        valuemax="10",
        pressed=True,
        type="text",
        tag_name="button",
        class_name="btn",
        href="https://example.com",
        src="https://example.com/image.jpg",
        srcset="https://example.com/image.jpg 1x, https://example.com/image.jpg 2x",
        target="_blank",
        placeholder="Enter text",
        title="Example",
        alt="Example image",
        name="Example",
        width=100,
        height=100,
        size=100,
        lang="en",
        dir="ltr",
        accesskey="a",
        autofocus=True,
        aria_label="aria_label",
        aria_labelledby="aria_labelledby",
        aria_describedby="aria_describedby",
        aria_hidden=True,
        aria_expanded=True,
        aria_controls="aria_controls",
        aria_haspopup=True,
        action="click",
        role="button",
    )
    assert pre_attrs.modal is True
    assert pre_attrs.required is True
    assert pre_attrs.description == "Test description"

    # Test NotteAttributesPost
    selector = NodeSelectors(
        "test",
        "test",
        "test",
        in_iframe=False,
        in_shadow_root=False,
        iframe_parent_css_selectors=[],
    )
    post_attrs = ComputedDomAttributes(selectors=selector)
    assert post_attrs.selectors == selector


def test_consistency_node_role_and_category():
    for role in NodeRole:
        assert role.value in role.category().roles(), f"Role {role.value} is not in category {role.category()}"

    for category in NodeCategory:
        for role_str in category.roles():
            role = NodeRole.from_value(role_str)
            assert not isinstance(role, str), f"Role {role_str} is a string"
            assert role.category() == category, f"Role {role_str} has wrong category: {role.category()}"


@pytest.fixture
def nested_graph() -> DomNode:
    return DomNode(
        id=None,
        role=NodeRole.WEBAREA,
        type=NodeType.OTHER,
        text="Root",
        children=[
            DomNode(
                id="B1",
                role=NodeRole.BUTTON,
                text="Button 1",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id="B2",
                role=NodeRole.BUTTON,
                text="Button 2",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.TEXT,
                text="Some text",
                type=NodeType.TEXT,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.GROUP,
                text="Group",
                type=NodeType.OTHER,
                children=[
                    DomNode(
                        id="B3",
                        role=NodeRole.BUTTON,
                        text="Button 3",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id=None,
                        role=NodeRole.TEXT,
                        text="Some other text",
                        type=NodeType.TEXT,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                ],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id="B4",
                role=NodeRole.BUTTON,
                text="Button 4",
                type=NodeType.INTERACTION,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.TEXT,
                text="Some text 3",
                type=NodeType.TEXT,
                children=[],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
            DomNode(
                id=None,
                role=NodeRole.GROUP,
                text="Group 2",
                type=NodeType.OTHER,
                children=[
                    DomNode(
                        id="L1",
                        role=NodeRole.LINK,
                        text="Link 1",
                        type=NodeType.INTERACTION,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                    DomNode(
                        id=None,
                        role=NodeRole.TEXT,
                        text="Some text 4",
                        type=NodeType.TEXT,
                        children=[],
                        attributes=None,
                        computed_attributes=ComputedDomAttributes(),
                    ),
                ],
                attributes=None,
                computed_attributes=ComputedDomAttributes(),
            ),
        ],
        attributes=None,
        computed_attributes=ComputedDomAttributes(),
    )


def test_subtree_exclude_all_nodes(nested_graph: DomNode):
    def exclude_all_nodes(node: DomNode) -> bool:
        return False

    filtered_graph = nested_graph.subtree_filter(exclude_all_nodes)
    assert filtered_graph is None


def test_subtree_keep_all_nodes(nested_graph: DomNode):
    def keep_all_nodes(node: DomNode) -> bool:
        return True

    filtered_graph = nested_graph.subtree_filter(keep_all_nodes)
    assert filtered_graph == nested_graph


def test_subtree_keep_one_node(nested_graph: DomNode):
    def exclude_some_nodes(node: DomNode) -> bool:
        return len(node.children) > 0 or node.id == "B2"

    filtered_graph = nested_graph.subtree_filter(exclude_some_nodes)
    assert filtered_graph is not None
    assert filtered_graph.id is None
    assert len(filtered_graph.children) == 3, f"Expected 3 children, got {len(filtered_graph.children)}"
    assert filtered_graph.children[0].id == "B2"
    assert filtered_graph.children[1].role == NodeRole.GROUP
    assert filtered_graph.children[2].role == NodeRole.GROUP


def test_subtree_keep_one_node_2(nested_graph: DomNode):
    def exclude_all_except_B2(node: DomNode) -> bool:
        return "B2" in node.subtree_ids

    filtered_graph = nested_graph.subtree_filter(exclude_all_except_B2)
    assert filtered_graph is not None
    assert filtered_graph.id is None
    assert len(filtered_graph.children) == 1
    assert filtered_graph.children[0].id == "B2"


def test_subtree_keep_some_nodes(nested_graph: DomNode):
    def keep_some_nodes(node: DomNode) -> bool:
        return len(set(["B1", "B2", "B3"]).intersection(node.subtree_ids)) > 0

    filtered_graph = nested_graph.subtree_filter(keep_some_nodes)
    assert filtered_graph is not None
    assert len(filtered_graph.children) == 3
    assert filtered_graph.children[0].id == "B1"
    assert filtered_graph.children[1].id == "B2"
    assert filtered_graph.children[2].role == NodeRole.GROUP
    assert filtered_graph.children[2].children[0].id == "B3"
    assert filtered_graph.find("L1") is None
    assert filtered_graph.find("B4") is None
    assert filtered_graph.find("B5") is None


def test_all_interaction_roles_have_short_id():
    for role in NodeRole:
        if role.category() == NodeCategory.INTERACTION:
            assert role.short_id() is not None, f"Role {role.value} has no short id"


def test_non_intersecting_category_roles():
    def all_except(category: NodeCategory) -> set[str]:
        return set([role for cat in NodeCategory if cat.value != category.value for role in cat.roles()])

    for category in NodeCategory:
        _all = all_except(category)
        cat_roles = category.roles()
        assert len(cat_roles.intersection(_all)) == 0, f"Category {category.value} has intersecting roles"

================
File: tests/browser/test_pool.py
================
from collections.abc import AsyncGenerator

import pytest
import pytest_asyncio
from notte_browser.resource import BrowserResource, BrowserResourceOptions
from notte_pools.base import BaseBrowserPool
from notte_pools.local_pool import LocalBrowserPool
from notte_pools.ports import PortManager

# Add this configuration at the top of the file
pytestmark = pytest.mark.asyncio


@pytest.fixture
async def pool_generator():
    """Create a fresh pool for each test"""
    pool = LocalBrowserPool()
    try:
        await pool.start()
        yield pool
    finally:
        await pool.cleanup()
        await pool.stop()


@pytest_asyncio.fixture
async def pool(pool_generator: AsyncGenerator[BaseBrowserPool, None]) -> BaseBrowserPool:
    """Helper fixture that returns the NotteEnv instance directly"""
    return await anext(pool_generator)


@pytest.mark.asyncio
async def test_pool_initialization(pool: LocalBrowserPool):
    """Test initial pool state"""
    stats = pool.check_sessions()
    assert stats == {"open_browsers": 0, "open_contexts": 0}
    assert len(pool.available_browsers()) == 0


@pytest.mark.asyncio
async def test_resource_creation_and_tracking(pool: LocalBrowserPool):
    """Test creating resources and tracking their counts"""

    resources: list[BrowserResource] = []

    # Create resources one by one and verify counts
    for i in range(5):
        resource = await pool.get_browser_resource(BrowserResourceOptions(headless=True))
        resources.append(resource)

        stats = pool.check_sessions()
        assert stats["open_contexts"] == i + 1
        # Browser count should increase every 4 contexts (contexts_per_browser)
        assert stats["open_browsers"] == (i // 4) + 1


@pytest.mark.asyncio
async def test_resource_cleanup(pool: LocalBrowserPool):
    """Test cleaning up resources one by one"""

    # Create 6 resources
    resources = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(6)]

    initial_stats = pool.check_sessions()
    assert initial_stats["open_contexts"] == 6
    assert initial_stats["open_browsers"] == 2  # With 4 contexts per browser

    # Release resources one by one
    for i, resource in enumerate(resources):
        await pool.release_browser_resource(resource)
        stats = pool.check_sessions()
        assert stats["open_contexts"] == 5 - i
        # Browser count should decrease when all its contexts are closed
        remaining_contexts = 5 - i
        if remaining_contexts == 0:
            assert stats["open_browsers"] == 0, (
                f"Expected 0 open browsers for {remaining_contexts} contexts, got {stats['open_browsers']}"
            )
        else:
            assert stats["open_browsers"] in [
                1,
                2,
            ], f"Expected 1 or 2 open browsers for {remaining_contexts} contexts, got {stats['open_browsers']}"


@pytest.mark.asyncio
async def test_cleanup_with_exceptions(pool: LocalBrowserPool):
    """Test cleanup with different except_resources configurations"""

    # Create 8 resources
    resources = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(8)]

    # Test cleanup with no exceptions (should close everything)
    await pool.cleanup(except_resources=None)
    stats = pool.check_sessions()
    assert stats == {"open_browsers": 0, "open_contexts": 0}

    # Create new resources
    resources = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(8)]

    # Test cleanup with all resources excepted (should close nothing)
    await pool.cleanup(except_resources=resources)
    stats = pool.check_sessions()
    assert stats["open_contexts"] == 8
    assert stats["open_browsers"] == 2

    # Test cleanup with partial exceptions
    await pool.cleanup(except_resources=resources[:4])
    stats = pool.check_sessions()
    assert stats["open_contexts"] == 4
    assert stats["open_browsers"] == 1


@pytest.mark.asyncio
async def test_resource_creation_after_cleanup(pool: LocalBrowserPool):
    """Test that resources can be created after cleanup"""

    # Create and cleanup resources
    _ = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(4)]
    await pool.cleanup()

    # Verify cleanup
    stats = pool.check_sessions()
    assert stats == {"open_browsers": 0, "open_contexts": 0}

    # Create new resources
    new_resources = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(4)]
    stats = pool.check_sessions()
    assert stats["open_contexts"] == 4
    assert stats["open_browsers"] == 1

    await pool.cleanup(except_resources=new_resources)
    new_stats = pool.check_sessions()
    assert new_stats["open_contexts"] == 4
    assert new_stats["open_browsers"] == 1


@pytest.mark.asyncio
async def test_create_max_contexts_after_cleanup(pool: LocalBrowserPool):
    """Test that we can create max contexts after cleanup"""
    # simulate some resources being created and cleanup
    _ = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(4)]
    await pool.cleanup()
    assert pool.check_sessions()["open_contexts"] == 0

    # Try to create max contexts
    _ = [
        await pool.get_browser_resource(BrowserResourceOptions(headless=True))
        for _ in range(pool.local_config.get_max_contexts())
    ]
    assert pool.check_sessions()["open_contexts"] == pool.local_config.get_max_contexts()
    await pool.cleanup()
    assert pool.check_sessions()["open_contexts"] == 0


@pytest.mark.skip(reason="Skip on CICD because head mode is not supported")
@pytest.mark.asyncio
async def test_mixed_headless_modes(pool: LocalBrowserPool):
    """Test managing resources with different headless modes"""

    # Create mix of headless and non-headless resources
    _ = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(3)]
    _ = [await pool.get_browser_resource(BrowserResourceOptions(headless=False)) for _ in range(3)]

    stats = pool.check_sessions()
    assert stats["open_contexts"] == 6
    assert stats["open_browsers"] == 2

    # Verify browser tracking by headless mode
    assert len(pool.available_browsers(headless=True)) == 1
    assert len(pool.available_browsers(headless=False)) == 1

    await pool.cleanup()
    stats = pool.check_sessions()
    assert stats["open_contexts"] == 0
    assert stats["open_browsers"] == 0


@pytest.mark.asyncio
async def test_resource_limits(pool: LocalBrowserPool):
    """Test behavior when approaching resource limits"""

    max_contexts = pool.local_config.get_max_contexts()
    resources: list[BrowserResource] = []

    # Try to create more than max_contexts
    with pytest.raises(ValueError, match="Maximum number of browsers"):
        for _ in range(max_contexts + 1):
            resources.append(await pool.get_browser_resource(BrowserResourceOptions(headless=True)))

    # Verify we can still create resources after hitting the limit
    await pool.cleanup()
    new_resource = await pool.get_browser_resource(BrowserResourceOptions(headless=True))
    assert new_resource is not None

    await pool.cleanup()
    stats = pool.check_sessions()
    assert stats["open_contexts"] == 0
    assert stats["open_browsers"] == 0


@pytest.mark.asyncio
async def test_browser_reuse(pool: LocalBrowserPool):
    """Test that browsers are reused efficiently"""

    # Create 3 resources (should use single browser)
    resources = [await pool.get_browser_resource(BrowserResourceOptions(headless=True)) for _ in range(3)]
    stats = pool.check_sessions()
    assert stats["open_browsers"] == 1

    # Release middle resource
    await pool.release_browser_resource(resources[1])

    # Create new resource (should reuse existing browser)
    _ = await pool.get_browser_resource(BrowserResourceOptions(headless=True))
    stats = pool.check_sessions()
    assert stats["open_browsers"] == 1
    assert stats["open_contexts"] == 3


@pytest.mark.asyncio
async def test_error_handling(pool: LocalBrowserPool):
    """Test error handling scenarios"""
    resource = await pool.get_browser_resource(BrowserResourceOptions(headless=True))
    # Try to release non-existent resource
    with pytest.raises(ValueError, match="Browser 'fake' not found in available browsers"):
        await pool.release_browser_resource(
            BrowserResource(
                page=resource.page,
                browser_id="fake",
                context_id="fake",
                resource_options=resource.resource_options,
            )
        )
    # Create and release same resource twice
    resource = await pool.get_browser_resource(BrowserResourceOptions(headless=True))
    await pool.release_browser_resource(resource)
    with pytest.raises(ValueError, match="not found in available contexts "):
        await pool.release_browser_resource(resource)


@pytest.mark.asyncio
async def test_new_resource_with_port(pool: LocalBrowserPool):
    """Test that we can create max contexts after cleanup"""
    # simulate some resources being created and cleanup
    port = PortManager().acquire_port()
    resource = await pool.get_browser_resource(BrowserResourceOptions(headless=True, debug_port=port))
    assert resource.resource_options.debug_port == port

    await pool.cleanup()
    assert pool.check_sessions()["open_contexts"] == 0

================
File: tests/code/test_code.py
================
from notte_core.utils.code import text_contains_tabs


def test_positive_indentation_examples():
    # Simple indented text
    assert text_contains_tabs("""
    This line is indented
        This one even more
    Back to first level
""")

    # Mixed indentation levels
    assert text_contains_tabs("""
    First level
        Second level
            Third level
        Back to second
    First again
""")

    # Single indented line
    assert text_contains_tabs("""
Normal line
    This one is indented
Another normal line
""")


def test_negative_examples():
    # Empty string
    assert not text_contains_tabs("")

    # Simple text without indentation
    assert not text_contains_tabs("Hello World!")

    # Multi-line text without indentation
    assert not text_contains_tabs("""
This text has multiple lines
But none of them are indented
They just flow normally
Without any special spacing
""")


def test_mixed_content():
    # Text with one indented line
    assert text_contains_tabs("""
Here is some text
    This line is special because it's indented
But the rest is normal
""")

    # List-like text with indentation
    assert text_contains_tabs("""
Items in a list:
    1. First item
    2. Second item
    3. Third item
""")

    # Quoted text with indentation
    assert text_contains_tabs("""
Someone said:
    This is a famous quote
    That spans multiple lines
    With consistent indentation
""")


def test_edge_cases():
    # Whitespace only
    assert not text_contains_tabs("   \n   \t   ")

    # Single line with spaces but no newlines
    assert text_contains_tabs("    just spaces")

    # Numbers only
    assert not text_contains_tabs("12345 67890")

================
File: tests/config/test_agent_config.py
================
from argparse import Namespace

from notte_agent.common.config import AgentConfig
from notte_browser.env import NotteEnvConfig
from notte_browser.scraping.pipe import ScrapingType
from notte_browser.tagging.action.pipe import ActionSpaceType
from notte_core.llms.engine import LlmModel
from typing_extensions import override


class TestAgentConfig(AgentConfig):
    @classmethod
    @override
    def default_env(cls) -> NotteEnvConfig:
        return (
            NotteEnvConfig(
                perception_model="test_model",
                max_steps=1,
            )
            .not_headless()
            .disable_perception()
        )


def test_agent_config_initialization():
    config = TestAgentConfig()
    assert config.reasoning_model == LlmModel.default()
    assert config.env.perception_model == "test_model"
    assert config.env.max_steps == 1
    assert config.include_screenshot is False
    assert config.max_history_tokens is None
    assert config.max_error_length == 500
    assert config.raise_condition == "retry"
    assert config.max_consecutive_failures == 3
    assert config.force_env is None
    assert config.env.window.headless is False


def test_groq_method():
    config = TestAgentConfig()
    updated_config = config.groq()
    assert updated_config.reasoning_model == "groq/llama-3.3-70b-versatile"


def test_openai_method():
    config = TestAgentConfig()
    updated_config = config.openai()
    assert updated_config.reasoning_model == "openai/gpt-4o"


def test_cerebras_method():
    config = TestAgentConfig()
    updated_config = config.cerebras()
    assert updated_config.reasoning_model == "cerebras/llama-3.3-70b"


def test_use_vision_method():
    config = TestAgentConfig()
    updated_config = config.use_vision()
    assert updated_config.include_screenshot is True


def test_dev_mode_method():
    config = TestAgentConfig()
    updated_config = config.dev_mode()
    assert updated_config.raise_condition == "immediately"
    assert updated_config.max_error_length == 1000


def test_map_env_method():
    config = TestAgentConfig()
    updated_config = config.map_env(lambda env: env.steps(30))
    assert updated_config.env.max_steps == 30


def test_from_args():
    args = Namespace(
        **{
            # "env.headless": True,
            "env.perception-model": "test_model_other",
            "env.max_steps": 100,
            "reasoning_model": "reasoning_model",
        }
    )
    config = TestAgentConfig.from_args(args)
    assert config.reasoning_model == "reasoning_model"
    assert config.env.window.headless is False
    assert config.env.perception_model == "test_model_other"
    assert config.env.max_steps == 100
    assert config.env.action.type is ActionSpaceType.SIMPLE
    assert config.env.scraping.type is ScrapingType.SIMPLE
    assert config.env.auto_scrape is False

================
File: tests/config/test_cli_config.py
================
import pytest
from notte_agent.common.config import DefaultAgentArgs, RaiseCondition
from notte_agent.falco.agent import (
    FalcoAgentConfig as AgentConfig,
)


@pytest.fixture
def cli_args():
    return [
        f"--{DefaultAgentArgs.ENV_HEADLESS.with_prefix()}",
        f"--{DefaultAgentArgs.ENV_DISABLE_WEB_SECURITY.with_prefix()}",
        f"--{DefaultAgentArgs.ENV_PERCEPTION_MODEL.with_prefix()}",
        "model_x",
        f"--{DefaultAgentArgs.ENV_MAX_STEPS.with_prefix()}",
        "99",
    ]


def test_cli_config():
    parser = AgentConfig.create_parser()
    _ = parser.add_argument("--task", type=str, required=True, help="The task to run the agent on.")
    args = parser.parse_args(["--task", "open gflight and book cheapest flight from nyc"])
    config = AgentConfig.from_args(args).map_env(lambda env: env.enable_auto_scrape())
    assert config.env.auto_scrape is True
    assert config.env.window.handler.web_security is True
    assert config.env.window.headless is False


def test_agent_config_with_cli_args(cli_args: list[str]) -> None:
    parser = AgentConfig.create_parser()
    parsed_args = parser.parse_args(cli_args)
    config = AgentConfig.from_args(parsed_args)

    # Assertions to check if the configuration is as expected
    assert config.env.window.headless is True
    assert config.env.window.handler.web_security is False
    assert config.env.perception_model == "model_x"
    assert config.max_history_tokens is None  # Default value
    assert config.max_consecutive_failures == 3  # Default value
    assert config.raise_condition == RaiseCondition.RETRY  # Default value
    assert config.env.max_steps == 99  # Default value

================
File: tests/config/test_config.py
================
from notte_core.common.config import FrozenConfig


class SubConfig(FrozenConfig):
    max_steps: int = 10


class SubSubConfig(FrozenConfig):
    hello: str = "world"
    config: SubConfig = SubConfig()


def test_frozen_config_initialization():
    config = FrozenConfig()
    assert config.verbose is False


def test_set_verbose():
    config = FrozenConfig()
    updated_config = config.set_verbose()
    assert updated_config.verbose is True


def test_set_deep_verbose():
    subclass_config = SubConfig()
    assert subclass_config.verbose is False
    updated_config = subclass_config.set_deep_verbose()
    assert updated_config.verbose is True
    assert updated_config.max_steps == 10


def test_set_deep_verbose_subclass():
    config = SubSubConfig()
    assert config.config.verbose is False
    assert config.verbose is False
    updated_config = config.set_deep_verbose()
    assert updated_config.verbose is True
    assert updated_config.config.verbose is True

================
File: tests/config/test_env_config.py
================
from notte_browser.env import NotteEnvConfig
from notte_browser.scraping.pipe import ScrapingType
from notte_browser.tagging.action.pipe import ActionSpaceType
from notte_sdk.types import DEFAULT_MAX_NB_STEPS


def test_notte_env_config_initialization():
    config = NotteEnvConfig()
    assert config.verbose is False
    assert config.max_steps == DEFAULT_MAX_NB_STEPS


def test_dev_mode():
    config = NotteEnvConfig()
    updated_config = config.dev_mode()
    assert updated_config.verbose is True


def test_user_mode():
    config = NotteEnvConfig()
    updated_config = config.user_mode()
    assert updated_config.verbose is True
    assert updated_config.window.verbose is True
    assert updated_config.action.verbose is True


def test_groq():
    config = NotteEnvConfig()
    updated_config = config.groq()
    assert updated_config.perception_model == "groq/llama-3.3-70b-versatile"


def test_openai():
    config = NotteEnvConfig()
    updated_config = config.openai()
    assert updated_config.perception_model == "openai/gpt-4o"


def test_cerebras():
    config = NotteEnvConfig()
    updated_config = config.cerebras()
    assert updated_config.perception_model == "cerebras/llama-3.3-70b"


def test_steps():
    config = NotteEnvConfig()
    updated_config = config.steps(20)
    assert updated_config.max_steps == 20


def test_headless():
    config = NotteEnvConfig()
    updated_config = config.headless(True)
    assert updated_config.window.headless is True


def test_not_headless():
    config = NotteEnvConfig()
    updated_config = config.not_headless()
    assert updated_config.window.headless is False


def test_cdp():
    config = NotteEnvConfig()
    updated_config = config.cdp("ws://example.com")
    assert updated_config.window.cdp_url == "ws://example.com"


def test_llm_action_tagging():
    config = NotteEnvConfig().disable_perception()
    updated_config = config.llm_action_tagging()
    assert config.action.type is ActionSpaceType.SIMPLE
    assert updated_config.action.type is ActionSpaceType.LLM_TAGGING


def test_llm_data_extract():
    config = NotteEnvConfig().disable_perception()
    updated_config = config.llm_data_extract()
    assert config.scraping.type is ScrapingType.SIMPLE
    assert updated_config.scraping.type == ScrapingType.LLM_EXTRACT


def test_disable_web_security():
    config = NotteEnvConfig()
    updated_config = config.disable_web_security()
    assert config.window.handler.web_security is False
    assert updated_config.window.handler.web_security is False


def test_enable_web_security():
    config = NotteEnvConfig().disable_web_security()
    updated_config = config.enable_web_security()
    assert config.window.handler.web_security is False
    assert updated_config.window.handler.web_security is True

================
File: tests/integration/test_basic_scripts.py
================
import pytest
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_core.controller.actions import ClickAction, FillAction, GotoAction

from tests.mock.mock_service import MockLLMService


@pytest.mark.asyncio
async def test_google_flights() -> None:
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=MockLLMService(mock_response="")) as env:
        _ = await env.goto("https://www.google.com/travel/flights")
        cookie_node = env.snapshot.dom_node.find("B2")
        if cookie_node is not None and "reject" in cookie_node.text.lower():
            _ = await env.execute("B2", enter=False)  # reject cookies
        _ = await env.execute("I3", "Paris", enter=True)
        _ = await env.execute("I4", "London", enter=True)
        _ = await env.execute("I5", "14/06/2025", enter=True)
        _ = await env.execute("I6", "02/07/2025", enter=True)
        _ = await env.execute("B7", None)


@pytest.mark.asyncio
async def test_google_flights_with_agent() -> None:
    config = NotteEnvConfig().disable_perception().headless()

    env = NotteEnv(config=config, llmserve=MockLLMService(mock_response=""))
    await env.start()
    # observe a webpage, and take a random action
    _ = await env.act(GotoAction(url="https://www.google.com/travel/flights"))
    cookie_node = env.snapshot.dom_node.find("B2")
    if cookie_node is not None:
        _ = await env.act(ClickAction(id="B2"))
    _ = await env.act(FillAction(id="I3", value="Paris", press_enter=True))
    _ = await env.act(FillAction(id="I4", value="London", press_enter=True))
    _ = await env.act(FillAction(id="I5", value="14/06/2025"))
    _ = await env.act(FillAction(id="I6", value="02/07/2025"))
    _ = await env.act(ClickAction(id="B7"))

================
File: tests/integration/test_e2e.py
================
import json
import os
from glob import glob
from io import StringIO
from pathlib import Path
from typing import Any

import pandas as pd
import pytest
from notte_eval.run import load_data, run_tasks


@pytest.mark.use_cli_args
@pytest.mark.timeout(60 * 60)  # fail after 1 hour
def test_benchmark_webvoyager(
    config: str,
) -> None:
    os.makedirs("dist", exist_ok=True)

    with open(config, "r") as f:
        s = f.read().replace("\\n", "\n")

    data = load_data(StringIO(s))

    exp_path = run_tasks(data, dir="dist")

    paths = glob(str(exp_path / "*" / "*" / "results_no_screenshot.json"))
    full_data: list[dict[str, Any]] = []
    for path in paths:
        with open(path, "r") as f:
            full_data.append(json.load(f))

    DISPLAY_HTML_COLUMNS = [
        "task_website",
        "task_id",
        "success",
        "duration_in_s",
        "num_steps",
        "total_input_tokens",
        "total_output_tokens",
        "replay_code",
        "run_id",
    ]
    INDEX_COLS = ["task_website", "task_id", "run_id"]

    df = pd.DataFrame(full_data)

    def format_html_code(code: str) -> str:
        """Styler function to format code blocks in Pandas to_html()."""
        return (
            "<details>\n"
            "    <summary>Click to expand</summary>\n"
            '    <pre style="white-space: pre-wrap;"><code class="language-python">\n'
            f"{code}\n"
            "    </code></pre>\n"
            "</details>"
        )

    df["num_steps"] = df["steps"].apply(len)
    df = df[DISPLAY_HTML_COLUMNS].sort_values(by=INDEX_COLS).set_index(INDEX_COLS)

    avg_index = ("Average", "", "")
    df.loc[avg_index] = df.mean(numeric_only=True)
    mask = df.index != avg_index, "success"
    df.loc[mask] = df.loc[mask].apply(lambda val: "✅" if val > 0.5 else "❌")

    with open(Path("dist") / "results.html", "w") as f:
        _ = f.write("# Parameters\n\n```\n")
        json.dump(json.loads((exp_path / "params.json").read_text()), f, indent=2)
        _ = f.write("\n```\n# Results\n\n")
        _ = f.write(
            df.to_html(
                formatters={"replay_code": format_html_code},
                escape=False,
                render_links=True,
                float_format="{:.1f}".format,
            )
        )

    assert df.success.all()

================
File: tests/integration/test_resolution.py
================
import pytest
from loguru import logger
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_browser.resolution.complex_resolution import ComplexActionNodeResolutionPipe
from notte_core.actions.base import ExecutableAction
from notte_core.browser.dom_tree import InteractionDomNode
from notte_core.controller.actions import GotoAction
from patchright.async_api import Page

# Mark all tests in this module as async
pytestmark = pytest.mark.asyncio


async def _test_action_node_resolution_pipe(url: str) -> None:
    errors: list[str] = []
    total_count = 0
    async with NotteEnv(NotteEnvConfig().headless()) as env:
        _ = await env.goto(url)

        action_node_resolution_pipe = ComplexActionNodeResolutionPipe(window=env._window)

        for node in env.snapshot.interaction_nodes():
            total_count += 1
            param_values = None if not node.id.startswith("I") else "some_value"
            try:
                action = ExecutableAction.parse(node.id, param_values)
                action = await action_node_resolution_pipe.forward(action, env.snapshot)
            except Exception as e:
                errors.append(f"Error for node {node.id}: {e}")

    assert total_count > 0, "No nodes found"
    error_text = "\n".join(errors)
    assert len(error_text) == 0, f"Percentage of errors: {len(errors) / total_count * 100:.2f}%\n Errors:\n{error_text}"


async def check_xpath_resolution_v2(page: Page, inodes: list[InteractionDomNode]) -> tuple[list[str], int]:
    from notte_browser.dom.locate import locale_element_in_iframes, selectors_through_shadow_dom

    smap = {inode.id: inode for inode in inodes}
    empty_xpath: list[str] = []
    resolution_errors: list[str] = []
    total_count = 0
    for id, node in smap.items():
        selectors = node.computed_attributes.selectors
        if selectors is None:
            raise ValueError(f"Selectors for node {id} are None")
        xpath = selectors.xpath_selector
        total_count += 1
        if len(xpath) == 0:
            logger.error(f"[Xpath Error] for element id {id}. Xpath is empty")
            empty_xpath.append(id)
            continue
        locator = page.locator(f"xpath={xpath}")
        if await locator.count() != 1:
            if selectors.in_shadow_root:
                selectors = selectors_through_shadow_dom(node)
                logger.info(f"Node {id} is in shadow root. Retry with new xpath: {selectors.xpath_selector}")
                locator = page.locator(f"xpath={selectors.xpath_selector}")
                if await locator.count() == 1:
                    continue
            if selectors.in_iframe:
                logger.info(f"Node {id} is in iframe. Retry with new xpath: {selectors.xpath_selector}")
                frame = await locale_element_in_iframes(page, selectors)
                locator = frame.locator(f"xpath={xpath}")
                if await locator.count() == 1:
                    continue
            resolution_errors.append(
                (
                    f"Node Id {id} has {await locator.count()} "
                    f"inShadowRoot={selectors.in_shadow_root} elements and xpath {xpath}"
                )
            )
            logger.error(
                (
                    f"[Xpath Resolution Error] Cannot resolve node Id {id} with "
                    f"inShadowRoot={selectors.in_shadow_root} elements and xpath {xpath} "
                )
            )
    logger.error(f"Total count: {total_count}")
    logger.error(f"Empty xpath: {empty_xpath}")
    logger.error(f"Resolution errors: {resolution_errors}")
    return resolution_errors, total_count


async def _test_action_node_resolution_pipe_v2(url: str, headless: bool = True) -> None:
    async with NotteEnv(config=NotteEnvConfig().disable_perception().headless()) as env:
        _ = await env.act(GotoAction(url="https://www.reddit.com"))
        page = env._window.page
        inodes = env.snapshot.interaction_nodes()
        resolution_errors, total_count = await check_xpath_resolution_v2(page, inodes)
        if len(resolution_errors) > 0:
            raise ValueError(
                (
                    f"Resolution % of errors: {len(resolution_errors) / total_count * 100:.2f}%"
                    f"\nErrors:\n{resolution_errors}"
                )
            )


async def test_phantombuster() -> None:
    """Test resolution pipe with Phantombuster login page"""
    await _test_action_node_resolution_pipe("https://phantombuster.com/login")


# Add more test cases as needed
async def test_google() -> None:
    """Test resolution pipe with Google homepage"""
    await _test_action_node_resolution_pipe("https://www.google.com")


async def test_google_flights() -> None:
    """Test resolution pipe with Google Flights homepage"""
    await _test_action_node_resolution_pipe("https://www.google.com/flights")


async def test_google_maps() -> None:
    """Test resolution pipe with Google Maps homepage"""
    await _test_action_node_resolution_pipe("https://www.google.com/maps")


async def test_google_news() -> None:
    """Test resolution pipe with Google News homepage"""
    await _test_action_node_resolution_pipe("https://news.google.com")


async def test_google_translate() -> None:
    """Test resolution pipe with Google Translate homepage"""
    await _test_action_node_resolution_pipe("https://translate.google.com")


async def test_linkedin() -> None:
    """Test resolution pipe with LinkedIn homepage"""
    await _test_action_node_resolution_pipe("https://www.linkedin.com")


async def test_instagram() -> None:
    """Test resolution pipe with Instagram homepage"""
    await _test_action_node_resolution_pipe("https://www.instagram.com")


async def test_notte() -> None:
    """Test resolution pipe with Notte homepage"""
    await _test_action_node_resolution_pipe("https://notte.cc")


@pytest.mark.skip(reason="BBC is not too slow and faulty due to timeouts")
async def test_bbc() -> None:
    """Test resolution pipe with BBC homepage"""
    await _test_action_node_resolution_pipe("https://www.bbc.com")


async def test_allrecipes() -> None:
    """Test resolution pipe with Allrecipes homepage"""
    await _test_action_node_resolution_pipe("https://www.allrecipes.com")


@pytest.mark.skip(reason="Amazon is too slow and faulty due to timeouts")
async def test_amazon():
    """Test resolution pipe with Amazon homepage"""
    await _test_action_node_resolution_pipe("https://www.amazon.com")


async def test_apple() -> None:
    """Test resolution pipe with Apple homepage"""
    await _test_action_node_resolution_pipe("https://www.apple.com")


async def test_arxiv() -> None:
    """Test resolution pipe with Arxiv homepage"""
    await _test_action_node_resolution_pipe("https://arxiv.org")


async def test_booking() -> None:
    """Test resolution pipe with Booking.com homepage"""
    await _test_action_node_resolution_pipe("https://www.booking.com")


async def test_coursera() -> None:
    """Test resolution pipe with Coursera homepage"""
    await _test_action_node_resolution_pipe("https://www.coursera.org")


async def test_cambridge_dictionary() -> None:
    """Test resolution pipe with Cambridge Dictionary homepage"""
    await _test_action_node_resolution_pipe("https://dictionary.cambridge.org")


async def test_espn() -> None:
    """Test resolution pipe with ESPN homepage"""
    await _test_action_node_resolution_pipe("https://www.espn.com")


async def test_github() -> None:
    """Test resolution pipe with Github homepage"""
    await _test_action_node_resolution_pipe("https://www.github.com")


async def test_huggingface() -> None:
    """Test resolution pipe with HuggingFace homepage"""
    await _test_action_node_resolution_pipe("https://www.huggingface.co")


async def test_wolframalpha() -> None:
    """Test resolution pipe with WolframAlpha homepage"""
    await _test_action_node_resolution_pipe("https://www.wolframalpha.com")

================
File: tests/integration/test_special_actions.py
================
import pytest
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_core.actions.base import BrowserAction
from notte_core.controller.actions import BrowserActionId

from tests.mock.mock_service import MockLLMService


@pytest.fixture
def llm_service():
    return MockLLMService(mock_response="<data-extraction> # Hello World </data-extraction>")


def test_browser_actions_list():
    """Test that all special actions are properly defined"""
    browser_actions = BrowserAction.list()

    # Test we have all 8 special actions
    assert len(browser_actions) == len(BrowserActionId)

    # Test each special action ID exists
    action_ids = set([action.id for action in browser_actions])
    expected_ids = set(BrowserActionId)
    assert action_ids == expected_ids

    # Test special action detection
    for action_id in expected_ids:
        assert BrowserAction.is_special(action_id)

    # Test non-special action detection
    assert not BrowserAction.is_special("B1")
    assert not BrowserAction.is_special("I1")
    assert not BrowserAction.is_special("L1")


@pytest.mark.asyncio
async def test_goto_and_scrape(llm_service: MockLLMService):
    """Test the execution of various special actions"""
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=llm_service) as env:
        # Test S1: Go to URL
        obs = await env.execute(action_id=BrowserActionId.GOTO, params={"url": "https://github.com/"})
        assert obs.clean_url == "github.com"

        # Test S2: Scrape data
        obs = await env.execute(action_id=BrowserActionId.SCRAPE)
        assert obs.data is not None
        assert obs.data.markdown == "# Hello World"


@pytest.mark.asyncio
async def test_go_back_and_forward(llm_service: MockLLMService):
    """Test the execution of various special actions"""
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=llm_service) as env:
        # Test S4: Go to notte
        obs = await env.execute(action_id=BrowserActionId.GOTO, params={"url": "https://github.com/"})
        assert obs.clean_url == "github.com"
        # Test S4: Go back
        obs = await env.execute(action_id=BrowserActionId.GOTO, params={"url": "https://google.com/"})
        assert obs.clean_url == "google.com"
        obs = await env.execute(action_id=BrowserActionId.GO_BACK)
        assert obs.clean_url == "github.com"

        # Test S5: Go forward
        obs = await env.execute(action_id=BrowserActionId.GO_FORWARD)
        assert obs.clean_url == "google.com"


@pytest.mark.asyncio
async def test_wait_and_complete(llm_service: MockLLMService):
    """Test the execution of various special actions"""
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=llm_service) as env:
        # Test S4: Go goto goole
        obs = await env.execute(action_id=BrowserActionId.GOTO, params={"url": "https://google.com/"})
        assert obs.clean_url == "google.com"

        # Test S7: Wait
        _ = await env.execute(action_id=BrowserActionId.WAIT, params={"value": "1"})

        # Test S8: Terminate session (cannot execute any actions after this)
        _ = await env.execute(
            action_id=BrowserActionId.COMPLETION,
            params={"success": "true", "answer": "Hello World"},
        )
        with pytest.raises(ValueError, match="Browser not started"):
            _ = await env.goto("https://github.com/")


@pytest.mark.asyncio
async def test_special_action_validation(llm_service: MockLLMService):
    """Test validation of special action parameters"""
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=llm_service) as env:
        _ = await env.goto("https://github.com/")
        # Test S1 requires URL parameter
        with pytest.raises(ValueError, match=f"Action with id '{BrowserActionId.GOTO}' is invalid"):
            _ = await env.execute(action_id=BrowserActionId.GOTO)

        # Test S7 requires wait time parameter
        with pytest.raises(ValueError, match=f"Action with id '{BrowserActionId.WAIT}' is invalid"):
            _ = await env.execute(action_id=BrowserActionId.WAIT)

        # Test invalid special action
        with pytest.raises(ValueError, match="Action with id 'X1' is invalid"):
            _ = await env.execute("X1")


@pytest.mark.asyncio
async def test_switch_tab(llm_service: MockLLMService):
    """Test the execution of the switch tab action"""
    async with NotteEnv(NotteEnvConfig().headless(), llmserve=llm_service) as env:
        obs = await env.goto("https://github.com/")
        assert len(obs.metadata.tabs) == 1
        assert obs.clean_url == "github.com"
        obs = await env.execute(
            action_id=BrowserActionId.GOTO_NEW_TAB,
            params={"url": "https://google.com/"},
        )
        assert len(obs.metadata.tabs) == 2
        assert obs.clean_url == "google.com"
        obs = await env.execute(action_id=BrowserActionId.SWITCH_TAB, params={"tab_index": "0"})
        assert obs.clean_url == "github.com"
        obs = await env.execute(action_id=BrowserActionId.SWITCH_TAB, params={"tab_index": "1"})
        assert obs.clean_url == "google.com"

================
File: tests/integration/test_webvoyager_resolution.py
================
import pytest
from notte_eval.data.load_data import WebVoyagerTask

from tests.integration.test_resolution import _test_action_node_resolution_pipe


def get_webvoyager_urls() -> list[str]:
    tasks = WebVoyagerTask.read_tasks()
    return list(set([task.url for task in tasks]))


@pytest.mark.asyncio
@pytest.mark.parametrize("url", get_webvoyager_urls())
async def test_webvoyager_resolution(url: str) -> None:
    await _test_action_node_resolution_pipe(url)

================
File: tests/integration/test_webvoyager_scripts.py
================
import pytest
from notte_browser.env import NotteEnv, NotteEnvConfig
from notte_core.controller.actions import (
    ClickAction,
    FillAction,
    GotoAction,
    ScrapeAction,
    ScrollDownAction,
    ScrollUpAction,
    SelectDropdownOptionAction,
    WaitAction,
)


@pytest.fixture
def notte_env():
    return NotteEnv(config=NotteEnvConfig().disable_perception().headless().disable_web_security())


@pytest.mark.asyncio
async def test_huggingface_model_search(notte_env: NotteEnv):
    async with notte_env as env:
        _ = await env.act(GotoAction(url="https://huggingface.co/models"))
        _ = await env.act(FillAction(id="I1", value="sentiment analysis"))
        _ = await env.act(ClickAction(id="L17"))
        _ = await env.act(ClickAction(id="L12"))
        _ = await env.act(ScrollDownAction(amount=None))
        _ = await env.act(ScrollDownAction(amount=None))
        _ = await env.act(ScrollDownAction(amount=None))
        _ = await env.act(ScrollUpAction(amount=500))


@pytest.mark.asyncio
async def test_google_search(notte_env: NotteEnv):
    async with notte_env as env:
        _ = await env.act(GotoAction(url="https://www.google.com"))
        if not env.snapshot.dom_node.find("I1"):
            # agree to cookies if menu is present
            _ = await env.act(ClickAction(id="B3"))
        _ = await env.act(FillAction(id="I1", value="test_query"))
        _ = await env.act(SelectDropdownOptionAction(id="I1", option_id="O2"))


@pytest.mark.asyncio
async def test_reddit_fill_search_and_click(notte_env: NotteEnv):
    async with notte_env as env:
        _ = await env.act(GotoAction(url="https://www.reddit.com"))
        _ = await env.act(WaitAction(time_ms=1000))
        _ = await env.act(FillAction(id="I1", value="browser-use", press_enter=True))
        _ = await env.act(ClickAction(id="B1"))
        _ = await env.act(ClickAction(id="B4"))
        _ = await env.act(WaitAction(time_ms=5000))
        _ = await env.act(ClickAction(id="L4"))


@pytest.mark.asyncio
async def test_bbc_click_cookie_policy_link(notte_env: NotteEnv):
    async with notte_env as env:
        obs = await env.act(GotoAction(url="https://www.bbc.com"))
        assert len(obs.metadata.tabs) == 1
        obs = await env.act(ClickAction(id="L1"))
        assert len(obs.metadata.tabs) == 2
        obs = await env.act(ScrapeAction())
        assert obs.data is not None
        assert obs.data.markdown is not None
        assert "BBC" in obs.data.markdown
        assert "cookies" in obs.data.markdown


@pytest.mark.asyncio
async def test_wikipedia_search(notte_env: NotteEnv):
    async with notte_env as env:
        _ = await env.act(GotoAction(url="https://www.wikipedia.org/"))
        _ = await env.act(FillAction(id="I1", value="Nadal"))
        _ = await env.act(ClickAction(id="L11"))
        _ = await env.act(ScrapeAction())


@pytest.mark.asyncio
async def test_allrecipes_search(notte_env: NotteEnv):
    async with notte_env as env:
        _ = await env.act(GotoAction(url="https://www.allrecipes.com"))
        consent_cookie = env.snapshot.dom_node.find("B3")
        if consent_cookie and "Consent" in consent_cookie.text:
            _ = await env.act(ClickAction(id="B3"))
        _ = await env.act(FillAction(id="I1", value="chicken breast and quinoa"))
        _ = await env.act(ClickAction(id="B1"))
        _ = await env.act(ScrapeAction())
        _ = await env.act(GotoAction(url="https://www.allrecipes.com/recipe/215076/chicken-with-quinoa-and-veggies/"))
        _ = await env.act(ScrollDownAction(amount=500))

================
File: tests/llms/test_action_listing_prompt_discrepancies.py
================
import difflib
from pathlib import Path

import pytest


def read_file_content(file_path: Path) -> str:
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()


def extract_section(content: str, start_marker: str, end_marker: str | None = None) -> str:
    """Extract content between start_marker and end_marker."""
    try:
        start_idx: int = content.index(start_marker)
        if end_marker:
            end_idx: int = content.index(end_marker, start_idx)
            return content[start_idx:end_idx].strip()
        else:
            return content[start_idx:].strip()
    except ValueError:
        return ""


def format_diff_message(optim_text: str, incr_text: str) -> str:
    """Creates a detailed diff message between two texts."""
    diff: list[str] = list(difflib.ndiff(optim_text.splitlines(), incr_text.splitlines()))

    # Collect differences
    only_in_optim: list[str] = []
    only_in_incr: list[str] = []

    for line in diff:
        if line.startswith("- "):
            only_in_optim.append(line[2:])
        elif line.startswith("+ "):
            only_in_incr.append(line[2:])

    message: list[str] = []
    if only_in_optim:
        message.append("\nOnly in optimized prompt:")
        message.extend(f"  {line}" for line in only_in_optim)

    if only_in_incr:
        message.append("\nOnly in incremental prompt:")
        message.extend(f"  {line}" for line in only_in_incr)

    return "\n".join(message)


@pytest.fixture
def prompt_contents() -> dict[str, str]:
    """Fixture to load both prompt files"""
    current_dir: Path = Path(__file__).parent
    project_root: Path = current_dir.parent.parent

    optim_path: Path = project_root / "packages/notte-core/src/notte_core/llms/prompts/action-listing/optim/user.md"
    incr_path: Path = project_root / "packages/notte-core/src/notte_core/llms/prompts/action-listing-incr/user.md"

    return {
        "optim": read_file_content(optim_path),
        "incr": read_file_content(incr_path),
    }


def test_intro_section(prompt_contents: dict[str, str]) -> None:
    optim_intro: str = extract_section(prompt_contents["optim"], "You are an expert", "1. <document-summary>")
    incr_intro: str = extract_section(prompt_contents["incr"], "You are an expert", "1. <document-summary>")

    # Remove the incremental-specific text from comparison
    incr_intro_base: str = incr_intro.replace(
        " based on previously identified actions. "
        "Your goal is to extend the list of actions to cover all "
        "possible user interactions, without duplicating any actions.",
        ".",
    ).replace(", and list of previously identified actions", "")

    assert optim_intro.strip() == incr_intro_base.strip(), (
        f"Intro sections differ:{format_diff_message(optim_intro.strip(), incr_intro_base.strip())}"
    )


def test_document_summary_section(prompt_contents: dict[str, str]) -> None:
    optim_summary: str = extract_section(prompt_contents["optim"], "1. <document-summary>", "2. <document-analysis>")
    incr_summary: str = extract_section(prompt_contents["incr"], "1. <document-summary>", "2. <document-analysis>")
    assert optim_summary.strip() == incr_summary.strip(), (
        f"Document summary sections differ:{format_diff_message(optim_summary.strip(), incr_summary.strip())}"
    )


def test_document_analysis_section(prompt_contents: dict[str, str]) -> None:
    optim_analysis: str = extract_section(prompt_contents["optim"], "2. <document-analysis>", "3. <action-listing>")
    incr_analysis: str = (
        extract_section(prompt_contents["incr"], "2. <document-analysis>", "3. <action-listing>")
        .replace(" that have not been previously identified", "")
        .replace(
            """- Compare the provided previous action list against the document to identify new or modified actions.
""",
            "",
        )
    )
    assert optim_analysis.strip() == incr_analysis.strip(), (
        f"Document analysis sections differ:{format_diff_message(optim_analysis.strip(), incr_analysis.strip())}"
    )


def test_action_listing_section(prompt_contents: dict[str, str]) -> None:
    optim_listing: str = extract_section(
        prompt_contents["optim"],
        "3. <action-listing>",
        "# Rules for creating the table:",
    )
    incr_listing: str = extract_section(
        prompt_contents["incr"],
        "3. <action-listing>",
        "# Rules for creating the table:",
    )
    assert optim_listing.strip() == incr_listing.strip(), (
        f"Action listing sections differ:{format_diff_message(optim_listing.strip(), incr_listing.strip())}"
    )


def test_rules_section(prompt_contents: dict[str, str]) -> None:
    optim_rules: str = extract_section(prompt_contents["optim"], "# Rules for creating the table:", "# Critical Rules:")
    incr_rules: str = extract_section(prompt_contents["incr"], "# Rules for creating the table:", "# Critical Rules:")
    assert optim_rules.strip() == incr_rules.strip(), (
        f"Rules sections differ:{format_diff_message(optim_rules.strip(), incr_rules.strip())}"
    )


def test_critical_rules_section(prompt_contents: dict[str, str]) -> None:
    optim_critical: str = extract_section(prompt_contents["optim"], "# Critical Rules:", "Example of CORRECT entries:")
    incr_critical: str = extract_section(prompt_contents["incr"], "# Critical Rules:", "Example of CORRECT entries:")
    assert optim_critical.strip() == incr_critical.strip(), (
        f"Critical rules sections differ:{format_diff_message(optim_critical.strip(), incr_critical.strip())}"
    )


def test_examples_section(prompt_contents: dict[str, str]) -> None:
    optim_examples: str = extract_section(prompt_contents["optim"], "Example of CORRECT entries:", "# Example output:")
    incr_examples: str = extract_section(
        prompt_contents["incr"],
        "Example of CORRECT entries:",
        "# ACTION EXTENSION CRITICAL RULES:",
    )
    assert optim_examples.strip() == incr_examples.strip(), (
        f"Examples sections differ:{format_diff_message(optim_examples.strip(), incr_examples.strip())}"
    )


def test_example_output_section(prompt_contents: dict[str, str]) -> None:
    optim_output: str = extract_section(prompt_contents["optim"], "# Example output:", "<document>")
    incr_output: str = extract_section(prompt_contents["incr"], "# Example output:", "<previous-action-list>")
    assert optim_output.strip() == incr_output.strip(), (
        f"Example output sections differ:{format_diff_message(optim_output.strip(), incr_output.strip())}"
    )

================
File: tests/llms/test_engine.py
================
from unittest.mock import Mock, patch

import pytest
from litellm import Message
from notte_core.llms.engine import LLMEngine, StructuredContent


@pytest.fixture
def llm_engine() -> LLMEngine:
    return LLMEngine()


def test_completion_success(llm_engine: LLMEngine) -> None:
    messages = [
        Message(role="user", content="Hello"),
    ]
    model = "gpt-3.5-turbo"

    mock_response = Mock()
    mock_response.choices = [Mock(message=Mock(content="Hello there!"))]

    with patch("litellm.completion", return_value=mock_response):
        response = llm_engine.completion(messages=messages, model=model)

        assert response == mock_response
        assert response.choices[0].message.content == "Hello there!"


def test_completion_error(llm_engine: LLMEngine) -> None:
    messages = [
        Message(role="user", content="Hello"),
    ]
    model = "gpt-3.5-turbo"

    with patch("litellm.completion", side_effect=Exception("API Error")):
        with pytest.raises(ValueError) as exc_info:
            _ = llm_engine.completion(messages=messages, model=model)

        assert "API Error" in str(exc_info.value)


class TestStructuredContent:
    def test_extract_with_outer_tag(self):
        structure = StructuredContent(outer_tag="response")
        text = "<response>Hello world</response>"
        assert structure.extract(text) == "Hello world"

    def test_extract_with_inner_tag(self):
        structure = StructuredContent(inner_tag="python")
        text = "Some text\n```python\nx = 1\n```\nMore text"
        assert structure.extract(text) == "x = 1"

    def test_extract_with_both_tags(self):
        structure = StructuredContent(outer_tag="response", inner_tag="python")
        text = "<response>\nSome text\n```python\nx = 1\n```\nMore text</response>"
        assert structure.extract(text) == "x = 1"

    def test_extract_missing_outer_tag(self):
        structure = StructuredContent(outer_tag="response")
        text = "Hello world"
        with pytest.raises(ValueError) as exc_info:
            structure.extract(text)
        assert "No content found within <response> tags" in str(exc_info.value)

    def test_extract_missing_inner_tag(self):
        structure = StructuredContent(inner_tag="python")
        text = "Some text without code block"
        with pytest.raises(ValueError) as exc_info:
            structure.extract(text)
        assert "No content found within ```python``` blocks" in str(exc_info.value)

    def test_extract_with_fail_if_final_tag(self):
        response_text = """
Step 4: Process relevant elements.
- Concatenating following text elements to make the output more readable.
- Removing duplicate text fields that occur multiple times across the same section.

### <data-extraction>
```markdown
# Before you continue to Google
```
"""

        sc = StructuredContent(
            outer_tag="data-extraction",
            inner_tag="markdown",
            fail_if_final_tag=False,
            fail_if_inner_tag=False,
        )
        text = sc.extract(response_text)
        assert text == "# Before you continue to Google"

================
File: tests/llms/test_extract_data_prompt_discrepancies.py
================
from pathlib import Path

import pytest

from tests.llms.test_action_listing_prompt_discrepancies import extract_section, format_diff_message, read_file_content


@pytest.fixture
def prompt_contents() -> dict[str, str]:
    """Fixture to load both prompt files"""
    current_dir: Path = Path(__file__).parent
    project_root: Path = current_dir.parent.parent

    raw_path: Path = project_root / "packages/notte-core/src/notte_core/llms/prompts/data-extraction/all_data/user.md"
    relevant_path: Path = (
        project_root / "packages/notte-core/src/notte_core/llms/prompts/data-extraction/only_main_content/user.md"
    )

    return {
        "raw": read_file_content(raw_path),
        "relevant": read_file_content(relevant_path),
    }


def test_intro_section(prompt_contents: dict[str, str]) -> None:
    raw_intro: str = extract_section(prompt_contents["raw"], "You are an expert", "1. `<document-category>`:")
    relevant_intro: str = extract_section(prompt_contents["relevant"], "You are an expert", "1. `<document-category>`:")

    assert raw_intro.strip() == relevant_intro.strip(), (
        f"Intro sections differ:{format_diff_message(raw_intro.strip(), relevant_intro.strip())}"
    )


def test_document_category_section(prompt_contents: dict[str, str]) -> None:
    raw_category: str = extract_section(
        prompt_contents["raw"], "1. `<document-category>`:", "2. `<document-analysis>`:"
    )
    relevant_category: str = extract_section(
        prompt_contents["relevant"],
        "1. `<document-category>`:",
        "2. `<document-analysis>`:",
    )

    assert raw_category.strip() == relevant_category.strip(), (
        f"Document Category sections differ:{format_diff_message(raw_category.strip(), relevant_category.strip())}"
    )


def test_document_analysis_section(prompt_contents: dict[str, str]) -> None:
    raw_analysis: str = extract_section(prompt_contents["raw"], "2. `<document-analysis>`:", "3. `<data-extraction>`:")
    relevant_analysis: str = extract_section(
        prompt_contents["relevant"],
        "2. `<document-analysis>`:",
        "3. `<data-extraction>`:",
    )

    # Remove the incremental-specific text from comparison
    relevant_analysis_base: str = (
        relevant_analysis.replace(
            "- Step 2: Decide Section Relevance. For each identified section, decide if the section is relevant to ",
            "",
        )
        .replace(
            """the document's purpose based on its main content.
* Relevant: Includes sections containing the document's key information.
* Not Relevant: Exclude elements like login areas, navigation menus, """,
            "",
        )
        .replace(
            """or contact information or social media links unless essential to the main purpose.
""",
            "",
        )
        .replace(
            "- Step 3: Capture relevant elements. For each relevant section",
            "- Step 2: For each identified section",
        )
        .replace(
            "list ALL relevant elements ",
            "list ALL elements ",
        )
        .replace(
            '```Step 3 - Relevant elements for section "XYZ"',
            '```Step 2 - Elements for section "XYZ"',
        )
        .replace(
            "- Step 4: process relevant elements. For each captured element",
            "- Step 3: For each element",
        )
    )

    assert raw_analysis.strip() == relevant_analysis_base.strip(), (
        f"Document Analysis sections differ:{format_diff_message(raw_analysis.strip(), relevant_analysis_base.strip())}"
    )


def test_data_extraction_section(prompt_contents: dict[str, str]) -> None:
    raw_extraction: str = extract_section(prompt_contents["raw"], "3. `<data-extraction>`:", "# Critical Rules:")
    relevant_extraction: str = extract_section(
        prompt_contents["relevant"], "3. `<data-extraction>`:", "# Critical Rules:"
    )

    relevant_extraction_base: str = relevant_extraction.replace(
        "captured relevant ",
        "",
    )
    assert raw_extraction.strip() == relevant_extraction_base.strip(), (
        f"Data Extraction sectio differ:{format_diff_message(raw_extraction.strip(), relevant_extraction_base.strip())}"
    )


def test_critical_rules_section(prompt_contents: dict[str, str]) -> None:
    raw_rules: str = extract_section(prompt_contents["raw"], "# Critical Rules:", "# Example outputs:")
    relevant_rules: str = extract_section(prompt_contents["relevant"], "# Critical Rules:", "# Example outputs:")

    assert raw_rules.strip() == relevant_rules.strip(), (
        f"Critical Rules sections differ:{format_diff_message(raw_rules.strip(), relevant_rules.strip())}"
    )


def test_example_outputs_section(prompt_contents: dict[str, str]) -> None:
    raw_outputs: str = extract_section(prompt_contents["raw"], "# Example outputs:", "# Final Reminders:")
    relevant_outputs: str = extract_section(prompt_contents["relevant"], "# Example outputs:", "# Final Reminders:")

    assert raw_outputs.strip() == relevant_outputs.strip(), (
        f"Example outputs sections differ:{format_diff_message(raw_outputs.strip(), relevant_outputs.strip())}"
    )


def test_final_reminders_section(prompt_contents: dict[str, str]) -> None:
    raw_reminders: str = extract_section(prompt_contents["raw"], "# Final Reminders:", "")
    relevant_reminders: str = extract_section(prompt_contents["relevant"], "# Final Reminders:", "")
    relevant_reminder_base: str = (
        relevant_reminders.replace(
            "- DO NOT include unrelevant elements in the output, such as "
            "login areas, navigation menus, or contact information ",
            "",
        )
        .replace(
            """or social media links unless essential to the main purpose.
""",
            "",
        )
        .replace("- ALL remaining textual content", "- ALL textual content")
    )
    assert raw_reminders.strip() == relevant_reminder_base.strip(), (
        f"Final Reminders sections differ:{format_diff_message(raw_reminders.strip(), relevant_reminder_base.strip())}"
    )

================
File: tests/llms/test_prompt.py
================
from pathlib import Path

import pytest
from notte_core.llms.prompt import PromptLibrary


@pytest.fixture
def temp_prompts_dir(tmp_path: Path) -> Path:
    # Create a temporary prompts directory structure
    prompt_dir = tmp_path / "test-prompt"
    prompt_dir.mkdir()

    # Create test prompt files
    user_file = prompt_dir / "user.md"
    system_file = prompt_dir / "system.md"
    assistant_file = prompt_dir / "assistant.md"

    _ = user_file.write_text("Hello {{name}}!")
    _ = system_file.write_text("System message")
    _ = assistant_file.write_text("Fixed response")

    return tmp_path


def test_prompt_library_initialization(temp_prompts_dir: Path) -> None:
    # Test successful initialization
    prompt_lib: PromptLibrary = PromptLibrary(temp_prompts_dir)
    assert prompt_lib.prompts_dir == temp_prompts_dir

    # Test initialization with non-existent directory
    with pytest.raises(NotADirectoryError):
        PromptLibrary("non/existent/path")


def test_get_prompt(temp_prompts_dir: Path) -> None:
    prompt_lib: PromptLibrary = PromptLibrary(temp_prompts_dir)

    # Test successful prompt retrieval
    messages = prompt_lib.get("test-prompt")
    assert len(messages) == 3
    assert any(msg.role == "user" for msg in messages)
    assert any(msg.role == "system" for msg in messages)
    assert any(msg.role == "assistant" for msg in messages)

    # Test non-existent prompt
    with pytest.raises(FileNotFoundError):
        prompt_lib.get("non-existent-prompt")


def test_materialize_prompt(temp_prompts_dir: Path) -> None:
    prompt_lib: PromptLibrary = PromptLibrary(temp_prompts_dir)

    # Test successful materialization with variables
    variables = {"name": "John"}
    messages = prompt_lib.materialize("test-prompt", variables)

    assert len(messages) == 3
    user_message = next(msg for msg in messages if msg["role"] == "user")
    assert user_message["content"] == "Hello John!"

    # Test materialization without variables
    messages = prompt_lib.materialize("test-prompt")
    assert len(messages) == 3

    # Test materialization with missing variable
    # TODO: Andrea check this
    # with pytest.raises(ValueError, match="Missing required variable"):
    #     prompt_lib.materialize("test-prompt", {"wrong_var": "value"})

================
File: tests/mock/mock_browser.py
================
from dataclasses import dataclass
from typing import final

from loguru import logger
from notte_core.actions.base import ExecutableAction
from notte_core.browser.dom_tree import A11yNode, A11yTree, ComputedDomAttributes, DomNode
from notte_core.browser.node_type import NodeType
from notte_core.browser.snapshot import BrowserSnapshot, SnapshotMetadata, TabsData, ViewportData
from notte_core.common.resource import AsyncResource
from typing_extensions import TypedDict, override


class MockBrowserDriverArgs(TypedDict):
    headless: bool
    timeout: int
    screenshot: bool


@dataclass
class MockLocator:
    name: str
    role: str
    selector: str

    def click(self) -> None:
        logger.info(f"Mock locator {self.name} clicked")

    def fill(self, value: str) -> None:
        logger.info(f"Mock locator {self.name} filled with value: {value}")

    def filter(self, filter_str: str) -> "MockLocator":
        logger.info(f"Mock locator {self.name} filtered with value: {filter_str}")
        return self

    async def all(self) -> list["MockLocator"]:
        logger.info(f"Mock locator {self.name} all")
        return [self]

    def first(self) -> "MockLocator":
        logger.info(f"Mock locator {self.name} first")
        return self

    async def text_content(self) -> str:
        logger.info(f"Mock locator {self.name} text content")
        return "Mock text content"

    async def is_visible(self) -> bool:
        logger.info(f"Mock locator {self.name} is visible")
        return True

    async def is_enabled(self) -> bool:
        logger.info(f"Mock locator {self.name} is enabled")
        return True

    async def is_editable(self) -> bool:
        logger.info(f"Mock locator {self.name} is editable")
        return False

    async def is_checked(self) -> bool:
        logger.info(f"Mock locator {self.name} is checked")
        return False


class MockBrowserPage:
    def locate(self, selector: str) -> MockLocator:
        return MockLocator(name="mock", role="mock", selector=selector)

    def get_by_role(self, role: str, name: str | None = None) -> MockLocator:
        return MockLocator(name=name, role=role, selector=f"role={role}&name={name}")


@final
class MockBrowserDriver(AsyncResource):
    """A mock browser that mimics the BrowserDriver API but returns mock data"""

    def __init__(
        self,
        headless: bool = True,
        timeout: int = 10000,
        screenshot: bool = False,
    ) -> None:
        self.args = MockBrowserDriverArgs(
            headless=headless,
            timeout=timeout,
            screenshot=screenshot,
        )
        self._mock_a11y_node = A11yNode(
            role="WebArea",
            name="",
            children=[
                A11yNode(
                    role="link",
                    name="More information",
                    children=[],
                ),
            ],
        )
        self._mock_tree = A11yTree(
            simple=self._mock_a11y_node,
            raw=self._mock_a11y_node,
        )

        self._mock_dom_node = DomNode(
            id="mock",
            role="WebArea",
            text="Mock WebArea",
            children=[
                DomNode(
                    id="L1",
                    role="link",
                    text="More information",
                    children=[],
                    attributes=None,
                    computed_attributes=ComputedDomAttributes(),
                    type=NodeType.INTERACTION,
                ),
            ],
            attributes=None,
            computed_attributes=ComputedDomAttributes(),
            type=NodeType.OTHER,
        )

        self._mock_snapshot = BrowserSnapshot(
            metadata=SnapshotMetadata(
                title="mock",
                url="https://mock.url",
                viewport=ViewportData(
                    scroll_x=0,
                    scroll_y=0,
                    viewport_width=1000,
                    viewport_height=1000,
                    total_width=1000,
                    total_height=1000,
                ),
                tabs=[
                    TabsData(
                        tab_id=0,
                        title="mock",
                        url="https://mock.url",
                    ),
                ],
            ),
            html_content="<html><body>Mock HTML</body></html>",
            a11y_tree=self._mock_tree,
            screenshot=None,
            dom_node=self._mock_dom_node,
        )
        super().__init__(self)

    @override
    async def start(self) -> None:
        """Mock browser startup"""
        pass

    @override
    async def close(self) -> None:
        """Mock browser cleanup"""
        pass

    async def snapshot(self, screenshot: bool | None = None) -> BrowserSnapshot:
        """Return a mock browser snapshot"""
        return self._mock_snapshot

    async def reset(self) -> None:
        """Mock browser reset"""
        pass

    async def press(self, key: str = "Enter") -> BrowserSnapshot:
        """Mock key press action"""
        return self._mock_snapshot

    async def goto(self, url: str, wait_for: str = "networkidle") -> BrowserSnapshot:
        """Mock navigation action"""
        snapshot = BrowserSnapshot(
            metadata=SnapshotMetadata(
                title="mock",
                url=url,
                viewport=ViewportData(
                    scroll_x=0,
                    scroll_y=0,
                    viewport_width=1000,
                    viewport_height=1000,
                    total_width=1000,
                    total_height=1000,
                ),
                tabs=[
                    TabsData(
                        tab_id=0,
                        title="mock",
                        url=url,
                    ),
                ],
            ),
            html_content="<html><body>Mock HTML</body></html>",
            a11y_tree=self._mock_tree,
            screenshot=None,
            dom_node=self._mock_dom_node,
        )
        return snapshot

    async def execute_action(
        self,
        action: ExecutableAction,
        snapshot: BrowserSnapshot,
        enter: bool = False,
    ) -> BrowserSnapshot:
        """Mock action execution"""
        if enter:
            await self.press("Enter")
        return self._mock_snapshot

    @property
    def page(self) -> MockBrowserPage:
        return MockBrowserPage()

================
File: tests/mock/mock_env.py
================
import datetime as dt
from typing import final

from notte_browser.env import NotteEnv
from notte_core.actions.base import Action
from notte_core.actions.space import ActionSpace
from notte_core.browser.observation import Observation
from notte_core.browser.snapshot import SnapshotMetadata, ViewportData
from typing_extensions import override


@final
class MockNotteEnv(NotteEnv):
    """A mock version of NotteEnv that returns constant values for testing"""

    def __init__(self) -> None:
        super().__init__(headless=True)
        self._mock_action = Action(description="Mock action", id="mock_id", category="mock", status="valid")
        self._mock_action_space = ActionSpace(
            raw_actions=[self._mock_action],
            description="Mock action space",
        )
        self._mock_observation = Observation(
            metadata=SnapshotMetadata(
                url="https://mock.url",
                title="Mock title",
                timestamp=dt.datetime.now(),
                viewport=ViewportData(
                    scroll_x=0,
                    scroll_y=0,
                    viewport_width=1000,
                    viewport_height=1000,
                    total_width=1000,
                    total_height=1000,
                ),
                tabs=[],
            ),
            space=self._mock_action_space,
        )

    @override
    async def observe(self, url: str | None = None) -> Observation:
        """Mock observe method that returns a constant observation"""
        return self._mock_observation

    @override
    async def step(
        self,
        action_id: Action | str,
        params: dict[str, str] | str | None = None,
        enter: bool | None = None,
    ) -> Observation:
        """Mock step method that returns a constant observation"""
        return self._mock_observation

================
File: tests/mock/mock_service.py
================
from typing import Any, final

import tiktoken
from litellm import Message, ModelResponse
from notte_core.llms.service import LLMService
from typing_extensions import override


@final
class MockLLMService(LLMService):
    def __init__(self, mock_response: str):  # noqa: B027
        self.mock_response: str = mock_response
        self.last_messages: list[Message] = []
        self.last_model: str | None = None
        self.tokenizer = tiktoken.encoding_for_model("gpt-4o")

    @override
    def completion(
        self,
        prompt_id: str,
        variables: dict[str, Any] | None = None,
    ) -> ModelResponse:
        # create a mock ModelResponse
        return ModelResponse(
            id="mock-id",
            choices=[
                {
                    "message": {
                        "content": self.mock_response,
                        "role": "assistant",
                    },
                    "index": 0,
                    "finish_reason": "stop",
                }
            ],
            created=1234567890,
            model="mock-model",
            usage={
                "prompt_tokens": 0,
                "completion_tokens": 0,
                "total_tokens": 0,
            },
        )

================
File: tests/pipe/action/test_listing.py
================
import pytest
from notte_browser.tagging.action.llm_taging.listing import ActionListingConfig, ActionListingPipe
from notte_browser.tagging.action.llm_taging.parser import ActionListingParserConfig, ActionListingParserType
from notte_core.browser.dom_tree import A11yNode, A11yTree, ComputedDomAttributes, DomNode
from notte_core.browser.node_type import NodeType
from notte_core.browser.snapshot import BrowserSnapshot, SnapshotMetadata, ViewportData

from tests.mock.mock_service import MockLLMService


@pytest.fixture
def action_list_answer() -> str:
    return """
# Discovery & Exploration
* L37: Shows flights from London to Tokyo
* B30: Explores available flights

# Search & Input
* I3: Selects the origin location (origin: str)
* I1: Selects the ticket type (ticketType: str = [Round trip, One way, Multi-city])
* B6: Changes the number of passengers
* I6: Enters the return date (returnDate: date)

"""


@pytest.fixture
def action_table_answer() -> str:
    return "\n".join(
        [
            "| ID  | Description | Parameters | Category |",
            "| L37 | Shows flights from London to Tokyo | | Discovery & Exploration |",
            "| B30 | Explores available flights | | Discovery & Exploration |",
            "| I3  | Selects the origin location | name: origin: type: str | Search & Input |",
            (
                "| I1  | Selects the ticket type | name: ticketType: type: str, "
                'default="Round trip", values=["Round trip", "One way", "Multi-city"]'
                " | Search & Input |"
            ),
            "| B6  | Changes the number of passengers | | Search & Input |",
            "| I6  | Enters the return date | name: returnDate: type: date | Search & Input |",
        ]
    )


@pytest.fixture
def mock_snapshot() -> BrowserSnapshot:
    return BrowserSnapshot(
        metadata=SnapshotMetadata(
            title="mock",
            url="https://www.google.com/travel/flights",
            viewport=ViewportData(
                scroll_x=0,
                scroll_y=0,
                viewport_width=1000,
                viewport_height=1000,
                total_width=1000,
                total_height=1000,
            ),
            tabs=[],
        ),
        html_content="html-content",
        a11y_tree=A11yTree(
            raw=A11yNode(
                id="B2",
                role="button",
                name="user-text",
            ),
            simple=A11yNode(
                id="B2",
                role="button",
                name="user-text",
            ),
        ),
        dom_node=DomNode(
            id="B2",
            role="button",
            text="user-text",
            type=NodeType.INTERACTION,
            children=[],
            attributes=None,
            computed_attributes=ComputedDomAttributes(),
        ),
        screenshot=b"screenshot",
    )


@pytest.mark.parametrize(
    "parser,mock_response",
    [
        (ActionListingParserType.MARKDOWN, "action_list_answer"),
        (ActionListingParserType.TABLE, "action_table_answer"),
    ],
)
def test_listing_pipe(
    mock_snapshot: BrowserSnapshot,
    parser: ActionListingParserType,
    mock_response: str,
    request: pytest.FixtureRequest,
) -> None:
    config = ActionListingConfig(parser=ActionListingParserConfig(type=parser))
    # Get the actual response string from the fixture
    response = request.getfixturevalue(mock_response)

    llm_service = MockLLMService(
        mock_response=f"""
<document-summary>
This is a mock document summary
</document-summary>
<document-category>
homepage
</document-category>
<action-listing>
{response}
</action-listing>
"""
    )

    pipe: ActionListingPipe = ActionListingPipe(llmserve=llm_service, config=config)
    actions = pipe.forward(snapshot=mock_snapshot).actions

    # Test common expectations
    assert len(actions) == 6  # Total number of actions
    # Action 0
    assert actions[0].id == "L37"
    assert actions[0].description == "Shows flights from London to Tokyo"
    assert actions[0].category == "Discovery & Exploration"
    assert len(actions[0].params) == 0

    # Action 1
    assert actions[1].id == "B30"
    assert actions[1].description == "Explores available flights"
    assert actions[1].category == "Discovery & Exploration"
    assert len(actions[1].params) == 0

    # Action 2
    assert actions[2].id == "I3"
    assert actions[2].description == "Selects the origin location"
    assert actions[2].category == "Search & Input"
    assert len(actions[2].params) == 1
    assert actions[2].params[0].name == "origin"
    assert actions[2].params[0].type == "str"
    assert actions[2].params[0].default is None
    assert actions[2].params[0].values == []

    # Action 3
    assert actions[3].id == "I1"
    assert actions[3].description == "Selects the ticket type"
    assert actions[3].category == "Search & Input"
    assert len(actions[3].params) == 1
    assert actions[3].params[0].name == "ticketType"
    assert actions[3].params[0].type == "str"
    # assert actions[3].params[0].default == None
    assert actions[3].params[0].values == ["Round trip", "One way", "Multi-city"]

    # Action 4
    assert actions[4].id == "B6"
    assert actions[4].description == "Changes the number of passengers"
    assert actions[4].category == "Search & Input"
    assert len(actions[4].params) == 0

    # Action 5
    assert actions[5].id == "I6"
    assert actions[5].description == "Enters the return date"
    assert actions[5].category == "Search & Input"
    assert len(actions[5].params) == 1
    assert actions[5].params[0].name == "returnDate"
    assert actions[5].params[0].type == "date"
    assert actions[5].params[0].default is None
    assert actions[5].params[0].values == []

================
File: tests/pipe/action/test_main.py
================
from collections.abc import Sequence
from typing import Callable
from unittest.mock import patch

import pytest
from notte_browser.tagging.action.llm_taging.pipe import LlmActionSpaceConfig, LlmActionSpacePipe
from notte_core.actions.base import Action
from notte_core.actions.space import ActionSpace, PossibleActionSpace
from notte_core.browser.dom_tree import A11yTree, ComputedDomAttributes, DomNode
from notte_core.browser.node_type import NodeRole, NodeType
from notte_core.browser.snapshot import BrowserSnapshot, SnapshotMetadata, ViewportData
from notte_sdk.types import PaginationParams

from tests.mock.mock_service import MockLLMService


def actions_from_ids(ids: list[str]) -> Sequence[Action]:
    return [
        Action(
            id=id,
            description="my description",
            category="my category",
            params=[],
            status="valid",
        )
        for id in ids
    ]


@pytest.fixture
def listing_config() -> LlmActionSpaceConfig:
    return LlmActionSpaceConfig(required_action_coverage=0.0, doc_categorisation=False)


def context_from_ids(ids: list[str]) -> BrowserSnapshot:
    return BrowserSnapshot(
        metadata=SnapshotMetadata(
            title="",
            url="",
            viewport=ViewportData(
                viewport_width=1000,
                viewport_height=1000,
                scroll_x=0,
                scroll_y=0,
                total_width=1000,
                total_height=1000,
            ),
            tabs=[],
        ),
        html_content="",
        a11y_tree=A11yTree(
            raw={},
            simple={},
        ),
        dom_node=DomNode(
            id=None,
            role=NodeRole.WEBAREA,
            text="Root Webarea",
            type=NodeType.OTHER,
            attributes=None,
            computed_attributes=ComputedDomAttributes(),
            children=[
                DomNode(
                    id=id,
                    role=NodeRole.LINK,
                    text="",
                    type=NodeType.INTERACTION,
                    children=[],
                    attributes=None,
                    computed_attributes=ComputedDomAttributes(),
                )
                for id in ids
            ],
        ),
        screenshot=None,
    )


def llm_patch_from_ids(
    ids: list[str],
) -> Callable[[BrowserSnapshot, list[Action] | None], PossibleActionSpace]:
    return lambda context, previous_action_list: PossibleActionSpace(
        description="",
        actions=actions_from_ids(ids),
    )


def context_to_actions(snapshot: BrowserSnapshot) -> Sequence[Action]:
    return actions_from_ids(ids=[node.id for node in snapshot.interaction_nodes()])


def space_to_ids(space: ActionSpace) -> list[str]:
    return [a.id for a in space.actions("valid")]


def test_previous_actions_ids_not_in_context_inodes_not_listed(
    listing_config: LlmActionSpaceConfig,
) -> None:
    # context[B1] + previous[L1] + llm(B1)=> [B1] not [B1,L1]
    pipe = LlmActionSpacePipe(
        llmserve=MockLLMService(mock_response=""),
        config=listing_config,
    )
    context = context_from_ids(["B1"])
    previous_actions = actions_from_ids(["L1"])
    llm_patch = llm_patch_from_ids(["B1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == ["B1"]


def test_previous_actions_ids_in_context_inodes_listed(
    listing_config: LlmActionSpaceConfig,
) -> None:
    # context[B1,L1] + previous[L1] + llm(B1) => [B1,L1]
    pipe = LlmActionSpacePipe(
        llmserve=MockLLMService(mock_response=""),
        config=listing_config,
    )
    context = context_from_ids(["B1", "L1"])
    previous_actions = actions_from_ids(["L1"])
    llm_patch = llm_patch_from_ids(["B1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == ["B1", "L1"]


def test_context_inodes_all_covered_by_previous_actions_listed(
    listing_config: LlmActionSpaceConfig,
) -> None:
    # context[B1,L1] + previous[B1,L1] + llm() => [B1,L1]
    pipe = LlmActionSpacePipe(
        llmserve=MockLLMService(mock_response=""),
        config=listing_config,
    )
    context = context_from_ids(["B1", "L1"])
    previous_actions = actions_from_ids(["B1", "L1"])
    llm_patch = llm_patch_from_ids([])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == ["B1", "L1"]


def test_context_inodes_empty_should_return_empty(
    listing_config: LlmActionSpaceConfig,
) -> None:
    # context[] + previous[B1] + llm(C1) => []
    pipe = LlmActionSpacePipe(
        llmserve=MockLLMService(mock_response=""),
        config=listing_config,
    )
    context = context_from_ids([])
    previous_actions = actions_from_ids(["B1"])
    llm_patch = llm_patch_from_ids(["C1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == []


def test_context_inodes_empty_previous_returns_llms(
    listing_config: LlmActionSpaceConfig,
) -> None:
    # context[B1] + previous[] + llm[B1] => [B1]
    pipe = LlmActionSpacePipe(
        llmserve=MockLLMService(mock_response=""),
        config=listing_config,
    )
    context = context_from_ids(["B1"])
    previous_actions = actions_from_ids([])
    llm_patch = llm_patch_from_ids(["B1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == ["B1"]

    # context[B1] + previous[] + llm(C1) => []
    context = context_from_ids(["B1"])
    previous_actions = actions_from_ids([])
    llm_patch = llm_patch_from_ids(["C1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == []

    # context[B1] + previous[] + llm() => []
    context = context_from_ids(["B1"])
    previous_actions = actions_from_ids([])
    llm_patch = llm_patch_from_ids([])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == []

    # context[B1] + previous[] + llm(B1,B2,C1) => [B1]
    context = context_from_ids(["B1"])
    previous_actions = actions_from_ids([])
    llm_patch = llm_patch_from_ids(["B1", "B2", "C1"])
    with patch(
        "notte_browser.tagging.action.llm_taging.listing.ActionListingPipe.forward",
        side_effect=llm_patch,
    ):
        space = pipe.forward(context, previous_actions, pagination=PaginationParams())
        assert space_to_ids(space) == ["B1"]

================
File: tests/sdk/test_client.py
================
import datetime as dt
import os
from unittest.mock import MagicMock, patch

import pytest
from notte_core.actions.base import Action, BrowserAction
from notte_core.browser.observation import Observation
from notte_core.controller.space import SpaceCategory
from notte_sdk.client import NotteClient
from notte_sdk.types import (
    DEFAULT_MAX_NB_STEPS,
    DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES,
    BrowserType,
    ObserveRequestDict,
    ObserveResponse,
    SessionResponse,
    SessionResponseDict,
    SessionStartRequestDict,
    StepRequestDict,
)


@pytest.fixture
def api_key() -> str:
    return "test-api-key"


@pytest.fixture
def client(api_key: str) -> NotteClient:
    return NotteClient(
        api_key=api_key,
    )


@pytest.fixture
def mock_response() -> MagicMock:
    return MagicMock()


def test_client_initialization_with_env_vars() -> None:
    client = NotteClient(api_key="test-api-key")
    assert client.sessions.token == "test-api-key"


def test_client_initialization_with_params() -> None:
    client = NotteClient(api_key="custom-api-key")
    assert client.sessions.token == "custom-api-key"
    assert client.sessions._session_id is None


def test_client_initialization_without_api_key() -> None:
    with patch.dict(os.environ, clear=True):
        with pytest.raises(ValueError, match="NOTTE_API_KEY needs to be provide"):
            _ = NotteClient()


@pytest.fixture
def session_id() -> str:
    return "test-session-123"


def session_response_dict(session_id: str, close: bool = False) -> SessionResponseDict:
    return {
        "session_id": session_id,
        "timeout_minutes": DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES,
        "created_at": dt.datetime.now(),
        "last_accessed_at": dt.datetime.now(),
        "duration": dt.timedelta(seconds=100),
        "status": "closed" if close else "active",
    }


def _start_session(mock_post: MagicMock, client: NotteClient, session_id: str) -> SessionResponse:
    """
    Mocks the HTTP response for starting a session and triggers session initiation.

    Configures the provided mock_post to simulate a successful HTTP response using a session
    dictionary constructed with the given session_id, then calls client.sessions.start() and
    returns its response.
    """
    mock_response: SessionResponseDict = session_response_dict(session_id)
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = mock_response
    return client.sessions.start()


@patch("requests.post")
def test_start_session(mock_post: MagicMock, client: NotteClient, api_key: str, session_id: str) -> None:
    session_data: SessionStartRequestDict = {
        "timeout_minutes": DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES,
        "chrome_args": None,
        "screenshot": None,
        "max_steps": DEFAULT_MAX_NB_STEPS,
        "proxies": False,
        "browser_type": BrowserType.CHROMIUM,
    }
    response = _start_session(mock_post=mock_post, client=client, session_id=session_id)
    assert response.session_id == session_id
    assert response.error is None

    assert client.sessions._session_id == session_id
    mock_post.assert_called_once_with(
        url=f"{client.sessions.server_url}/sessions/start",
        headers={"Authorization": f"Bearer {api_key}"},
        json=session_data,
        params=None,
        timeout=client.sessions.DEFAULT_REQUEST_TIMEOUT_SECONDS,
    )


@patch("requests.delete")
def test_close_session(mock_delete: MagicMock, client: NotteClient, api_key: str, session_id: str) -> None:
    mock_response: SessionResponseDict = session_response_dict(session_id, close=True)
    mock_delete.return_value.status_code = 200
    mock_delete.return_value.json.return_value = mock_response

    response = client.sessions.close(session_id)

    assert response.session_id == session_id
    assert response.status == "closed"
    mock_delete.assert_called_once_with(
        url=f"{client.sessions.server_url}/sessions/{session_id}/close",
        headers={"Authorization": f"Bearer {api_key}"},
        params=None,
        timeout=client.sessions.DEFAULT_REQUEST_TIMEOUT_SECONDS,
    )


@patch("requests.post")
def test_scrape(mock_post: MagicMock, client: NotteClient, api_key: str, session_id: str) -> None:
    mock_response = {
        "metadata": {
            "title": "Test Page",
            "url": "https://example.com",
            "timestamp": dt.datetime.now(),
            "viewport": {
                "scroll_x": 0,
                "scroll_y": 0,
                "viewport_width": 1000,
                "viewport_height": 1000,
                "total_width": 1000,
                "total_height": 1000,
            },
            "tabs": [],
        },
        "space": None,
        "data": None,
        "screenshot": None,
        "session": session_response_dict(session_id),
        "progress": {
            "current_step": 1,
            "max_steps": 10,
        },
    }
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = mock_response

    observe_data: ObserveRequestDict = {
        "url": "https://example.com",
        "session_id": session_id,
    }
    observation = client.env.scrape(**observe_data)

    assert isinstance(observation, Observation)
    mock_post.assert_called_once()
    actual_call = mock_post.call_args
    assert actual_call.kwargs["headers"] == {"Authorization": f"Bearer {api_key}"}
    assert actual_call.kwargs["json"]["url"] == "https://example.com"
    assert actual_call.kwargs["json"]["session_id"] == session_id


@patch("requests.post")
def test_scrape_without_url_or_session_id(mock_post: MagicMock, client: NotteClient) -> None:
    """
    Test scraping without a URL or session ID.

    Verifies that when both 'url' and 'session_id' are None, calling the scrape
    operation raises a ValueError with an appropriate error message.
    """
    observe_data: ObserveRequestDict = {
        "url": None,
        "session_id": None,
        "keep_alive": False,
        "timeout_minutes": DEFAULT_OPERATION_SESSION_TIMEOUT_IN_MINUTES,
        "screenshot": True,
    }
    with pytest.raises(ValueError, match="Either url or session_id needs to be provided"):
        client.env.scrape(**observe_data)


@pytest.mark.parametrize("start_session", [True, False])
@patch("requests.post")
def test_observe(
    mock_post: MagicMock,
    client: NotteClient,
    api_key: str,
    start_session: bool,
    session_id: str,
) -> None:
    if start_session:
        _ = _start_session(mock_post, client, session_id)
    mock_response = {
        "session": session_response_dict(session_id),
        "metadata": {
            "title": "Test Page",
            "url": "https://example.com",
            "timestamp": dt.datetime.now(),
            "viewport": {
                "scroll_x": 0,
                "scroll_y": 0,
                "viewport_width": 1000,
                "viewport_height": 1000,
                "total_width": 1000,
                "total_height": 1000,
            },
            "tabs": [],
        },
        "space": None,
        "data": None,
        "screenshot": None,
        "progress": {
            "current_step": 1,
            "max_steps": 10,
        },
    }
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = mock_response

    observation = client.env.observe(session_id=session_id, url="https://example.com")

    assert isinstance(observation, Observation)
    if start_session:
        assert client.sessions._session_id == session_id
    assert observation.metadata.url == "https://example.com"
    assert not observation.has_space()
    assert not observation.has_data()
    assert observation.screenshot is None
    if not start_session:
        mock_post.assert_called_once()
    actual_call = mock_post.call_args
    assert actual_call.kwargs["headers"] == {"Authorization": f"Bearer {api_key}"}
    assert actual_call.kwargs["json"]["url"] == "https://example.com"
    if start_session:
        assert actual_call.kwargs["json"]["session_id"] == session_id
    else:
        # disable this test for now as we need to redesign keep_alive
        # assert actual_call.kwargs["json"]["session_id"] is None
        pass


@pytest.mark.parametrize("start_session", [True, False])
@patch("requests.post")
def test_step(
    mock_post: MagicMock,
    client: NotteClient,
    api_key: str,
    start_session: bool,
    session_id: str,
) -> None:
    """
    Tests the client's step method with an optional session start.

    Simulates sending a step action with a defined payload and a mocked HTTP response.
    If start_session is True, a session is initiated before calling the step method and the
    client’s session ID is verified; otherwise, it confirms that no session is maintained.
    The test asserts that the returned observation contains the expected metadata and that
    the HTTP request includes the appropriate authorization header and JSON payload.
    """
    if start_session:
        _ = _start_session(mock_post, client, session_id)
    mock_response = {
        "session": session_response_dict(session_id),
        "metadata": {
            "title": "Test Page",
            "url": "https://example.com",
            "timestamp": dt.datetime.now(),
            "viewport": {
                "scroll_x": 0,
                "scroll_y": 0,
                "viewport_width": 1000,
                "viewport_height": 1000,
                "total_width": 1000,
                "total_height": 1000,
            },
            "tabs": [],
        },
        "space": None,
        "data": None,
        "screenshot": None,
        "progress": {
            "current_step": 1,
            "max_steps": 10,
        },
    }
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = mock_response

    step_data: StepRequestDict = {
        "action_id": "B1",
        "value": "#submit-button",
        "enter": False,
        "session_id": session_id,
    }
    observation = client.env.step(**step_data)

    assert isinstance(observation, Observation)
    if start_session:
        assert client.sessions._session_id == session_id
    else:
        assert client.sessions._session_id is None
    assert observation.metadata.url == "https://example.com"
    assert not observation.has_space()
    assert not observation.has_data()
    assert observation.screenshot is None

    if not start_session:
        mock_post.assert_called_once()
    actual_call = mock_post.call_args
    assert actual_call.kwargs["headers"] == {"Authorization": f"Bearer {api_key}"}
    assert actual_call.kwargs["json"]["action_id"] == "B1"
    assert actual_call.kwargs["json"]["value"] == "#submit-button"
    assert not actual_call.kwargs["json"]["enter"]
    assert actual_call.kwargs["json"]["session_id"] == session_id


def test_format_observe_response(client: NotteClient, session_id: str) -> None:
    response_dict = {
        "status": 200,
        "session": session_response_dict(session_id),
        "metadata": {
            "title": "Test Page",
            "url": "https://example.com",
            "timestamp": dt.datetime.now(),
            "viewport": {
                "scroll_x": 0,
                "scroll_y": 0,
                "viewport_width": 1000,
                "viewport_height": 1000,
                "total_width": 1000,
                "total_height": 1000,
            },
            "tabs": [],
        },
        "screenshot": b"fake_screenshot",
        "data": {"markdown": "my sample data"},
        "space": {
            "markdown": "test space",
            "description": "test space",
            "actions": [
                {"id": "L0", "description": "my_description_0", "category": "homepage"},
                {"id": "L1", "description": "my_description_1", "category": "homepage"},
            ],
            "browser_actions": [s.model_dump() for s in BrowserAction.list()],
            "category": "homepage",
        },
        "progress": {
            "current_step": 1,
            "max_steps": 10,
        },
    }

    obs = client.env._format_observe_response(ObserveResponse.model_validate(response_dict))
    assert obs.metadata.url == "https://example.com"
    assert obs.metadata.title == "Test Page"
    assert obs.screenshot == b"fake_screenshot"
    assert obs.data is not None
    assert obs.data.markdown == "my sample data"
    assert obs.space is not None
    assert obs.space.description == "test space"
    assert obs.space.actions() == [
        Action(
            id="L0",
            description="my_description_0",
            category="homepage",
            params=[],
        ),
        Action(
            id="L1",
            description="my_description_1",
            category="homepage",
            params=[],
        ),
    ]
    assert obs.space.category == SpaceCategory.HOMEPAGE

================
File: tests/sdk/test_types.py
================
import base64
import datetime as dt

import pytest
from notte_core.actions.base import Action, BrowserAction
from notte_core.actions.space import ActionSpace
from notte_core.browser.observation import Observation
from notte_core.browser.snapshot import SnapshotMetadata, ViewportData
from notte_core.controller.space import SpaceCategory
from notte_core.data.space import DataSpace, ImageData, StructuredData
from notte_sdk.types import ActionSpaceResponse, AgentStatus, AgentStatusResponse, ObserveResponse, SessionResponse
from pydantic import BaseModel


def test_observation_fields_match_response_types():
    """
    Ensure all fields in Observation have corresponding fields in ObserveResponseDict/ObserveResponse.
    This test will fail if a new field is added to Observation but not to the response types.
    """
    # Get all field names from Observation
    observation_fields = Observation.model_fields.keys()

    # Remove internal fields that start with '_'
    observation_fields = {f for f in observation_fields if not f.startswith("_")}

    # Create a sample observation with all fields filled
    sample_data = {
        "metadata": {
            "url": "https://example.com",
            "title": "Test Page",
            "timestamp": dt.datetime.now(),
            "viewport": {
                "scroll_x": 0,
                "scroll_y": 0,
                "viewport_width": 1000,
                "viewport_height": 1000,
                "total_width": 1000,
                "total_height": 1000,
            },
            "tabs": [],
        },
        "screenshot": b"fake_screenshot",
        "data": {
            "markdown": "test data",
        },
        "progress": {
            "current_step": 0,
            "max_steps": 10,
        },
    }

    # Try to create ObserveResponseDict with these fields
    response_dict = {
        "session": {
            "session_id": "test_session",  # Required by ResponseDict
            "timeout_minutes": 100,
            "created_at": dt.datetime.now(),
            "last_accessed_at": dt.datetime.now(),
            "duration": dt.timedelta(seconds=100),
            "status": "active",
        },
        **sample_data,
        "space": {
            "description": "test space",
            "actions": [],
            "category": None,
            "browser_actions": BrowserAction.list(),
        },
    }

    # This will raise a type error if any required fields are missing
    response = ObserveResponse.model_validate(response_dict)

    # Check that all Observation fields exist in ObserveResponse
    response_fields = set(response.model_fields.keys())
    missing_fields = observation_fields - response_fields

    assert not missing_fields, f"Fields {missing_fields} exist in Observation but not in ObserveResponse"


def test_action_space_fields_match_response_types():
    """
    Ensure all fields in ActionSpace have corresponding fields in ActionSpaceResponseDict/ActionSpaceResponse.
    This test will fail if a new field is added to ActionSpace but not to the response types.
    """
    # Get all field names from ActionSpace
    space_fields = ActionSpace.model_fields.keys()

    # Remove internal fields that start with '_' and known exclusions
    excluded_fields = {
        "_embeddings",
        "_actions",
        "raw_actions",
    }  # _actions is 'actions' in the response types
    space_fields = {f for f in space_fields if not f.startswith("_") and f not in excluded_fields}
    space_fields.add("actions")  # Add back 'actions' without underscore

    # Create a sample space with all fields filled
    sample_data = {
        "description": "test space",
        "actions": [],
        "category": "homepage",
        "browser_actions": BrowserAction.list(),
    }

    # Try to create ActionSpaceResponseDict with these fields
    response_dict = sample_data

    # This will raise a type error if any required fields are missing
    response = ActionSpaceResponse.model_validate(response_dict)

    # Check that all ActionSpace fields exist in ActionSpaceResponse
    response_fields = set(response.model_fields.keys())
    missing_fields = space_fields - response_fields

    assert not missing_fields, f"Fields {missing_fields} exist in ActionSpace but not in ActionSpaceResponse"


class TestSchema(BaseModel):
    key: str
    value: int


class TestSchemaList(BaseModel):
    items: list[TestSchema]


def test_observe_response_from_observation():
    obs = Observation(
        metadata=SnapshotMetadata(
            url="https://www.google.com",
            title="Google",
            timestamp=dt.datetime.now(),
            viewport=ViewportData(
                scroll_x=0,
                scroll_y=0,
                viewport_width=1000,
                viewport_height=1000,
                total_width=1000,
                total_height=1000,
            ),
            tabs=[],
        ),
        screenshot=b"fake_screenshot",
        data=DataSpace(
            markdown="test data",
            images=[
                ImageData(id="F1", url="https://www.google.com/image1.jpg"),
                ImageData(id="F2", url="https://www.google.com/image2.jpg"),
            ],
            structured=StructuredData(
                success=True,
                data=TestSchemaList.model_validate({"items": [{"key": "A", "value": 1}, {"key": "B", "value": 2}]}),
            ),
        ),
        space=ActionSpace(
            description="test space",
            category=SpaceCategory.OTHER,
            raw_actions=[
                Action(
                    id="L0",
                    description="my_test_description_0",
                    category="my_test_category_0",
                ),
                Action(
                    id="L1",
                    description="my_test_description_1",
                    category="my_test_category_1",
                ),
            ],
        ),
    )
    dt_now = dt.datetime.now()
    session = SessionResponse(
        session_id="test_session",
        timeout_minutes=100,
        created_at=dt_now,
        last_accessed_at=dt_now,
        duration=dt.timedelta(seconds=100),
        status="active",
    )

    response = ObserveResponse.from_obs(
        session=session,
        obs=obs,
    )
    assert response.session.session_id == "test_session"
    assert response.session.timeout_minutes == 100
    assert response.session.created_at == dt_now
    assert response.session.last_accessed_at == dt_now
    assert response.session.duration == dt.timedelta(seconds=100)
    assert response.session.status == "active"
    assert response.metadata.title == "Google"
    assert response.metadata.url == "https://www.google.com"
    assert response.screenshot == b"fake_screenshot"
    assert response.data is not None
    assert response.data.markdown == "test data"
    assert response.space is not None
    assert response.space.description == "test space"
    assert response.space.category == "other"
    assert obs.space is not None
    assert response.space.actions == obs.space.actions()


def test_agent_status_response_replay():
    # Test case 1: Base64 encoded string
    sample_webp_data = b"fake_webp_data"
    base64_encoded = base64.b64encode(sample_webp_data).decode("utf-8")
    response = AgentStatusResponse.model_validate(
        {
            "agent_id": "test_agent",
            "created_at": "2024-03-20",
            "session_id": "test_session",
            "status": AgentStatus.active,
            "replay": base64_encoded,
            "task": "test_task",
            "url": "https://www.google.com",
        }
    )
    assert response.replay == sample_webp_data

    # Test case 2: Direct bytes input
    response = AgentStatusResponse.model_validate(
        {
            "agent_id": "test_agent",
            "created_at": "2024-03-20",
            "session_id": "test_session",
            "status": AgentStatus.active,
            "replay": sample_webp_data,
            "task": "test_task",
            "url": "https://www.google.com",
        }
    )
    assert response.replay == sample_webp_data

    # Test case 3: None input
    response = AgentStatusResponse.model_validate(
        {
            "agent_id": "test_agent",
            "created_at": "2024-03-20",
            "session_id": "test_session",
            "status": AgentStatus.active,
            "replay": None,
            "task": "test_task",
            "url": "https://www.google.com",
        }
    )
    assert response.replay is None

    # Test case 4: Invalid input
    with pytest.raises(ValueError, match="replay must be a bytes or a base64 encoded string"):
        AgentStatusResponse.model_validate(
            {
                "agent_id": "test_agent",
                "created_at": "2024-03-20",
                "session_id": "test_session",
                "status": AgentStatus.active,
                "replay": 123,
                "task": "test_task",
                "url": "https://www.google.com",
            }
        )

================
File: tests/utils/test_image.py
================
from notte_core.utils.image import construct_image_url


def test_construct_image_url() -> None:
    base_url = "https://www.hbs.edu/news/articles/Pages/awa-ambra-seck-profile-2024.aspx"

    # Different types of image sources
    cases = [
        "/news/PublishingImages/image.jpg",  # Absolute path from root
        "image.jpg",  # Relative to current page
        "../images/image.jpg",  # Relative with parent directory
        "https://cdn.example.com/image.jpg",  # Full URL
        "//cdn.example.com/image.jpg",  # Protocol-relative URL
        "/~/media/mckinsey/featured%20insights/charting%20the%20path%20to%20the%20next%20normal",
    ]
    expected_results = [
        "https://www.hbs.edu/news/PublishingImages/image.jpg",
        "https://www.hbs.edu/news/articles/Pages/image.jpg",
        "https://www.hbs.edu/news/articles/images/image.jpg",
        "https://cdn.example.com/image.jpg",
        "https://cdn.example.com/image.jpg",
        "https://www.hbs.edu/~/media/mckinsey/featured%20insights/charting%20the%20path%20to%20the%20next%20normal",
    ]

    for src, expected in zip(cases, expected_results):
        result = construct_image_url(base_url, src)
        assert result == expected, f"Failed for case: {src} ({result} != {expected})"

================
File: tests/conftest.py
================
def pytest_addoption(parser):
    parser.addoption(
        "--config",
        type=str,
        help="Full toml config",
    )


def pytest_generate_tests(metafunc):
    # Define all CLI arguments we want to support
    cli_args = [
        "config",
    ]

    # Check if the test is marked with @pytest.mark.use_cli_args
    marker = metafunc.definition.get_closest_marker("use_cli_args")
    if marker:
        params = {}

        # Only parametrize the test if it requests matching fixtures
        for arg in cli_args:
            if arg in metafunc.fixturenames:
                option_value = metafunc.config.getoption(f"--{arg}")
                params[arg] = option_value

        # Apply parameterization only if any matching arguments exist
        if params:
            metafunc.parametrize(",".join(params.keys()), [next(iter(params.values()))])

================
File: tests/test_env.py
================
from collections.abc import AsyncGenerator, Awaitable

import pytest
from notte_browser.env import NotteEnv
from notte_core.actions.base import Action
from notte_core.browser.snapshot import BrowserSnapshot

from tests.mock.mock_browser import MockBrowserDriver
from tests.mock.mock_service import MockLLMService


@pytest.fixture
def mock_llm_response() -> str:
    return """
| ID  | Description | Parameters | Category |
| L1  | Opens more information page | | Navigation |
"""


@pytest.fixture
def mock_llm_service(mock_llm_response: str) -> MockLLMService:
    return MockLLMService(
        mock_response=f"""
<document-summary>
This is a mock document summary
</document-summary>
<document-category>
homepage
</document-category>
<action-listing>
{mock_llm_response}
</action-listing>
"""
    )


@pytest.fixture
async def env_generator(
    mock_llm_service: MockLLMService,
) -> AsyncGenerator[NotteEnv, None]:
    """Create a NotteEnv instance with mock browser and LLM"""
    window = MockBrowserDriver()
    async with NotteEnv(window=window, llmserve=mock_llm_service) as env:
        yield env


@pytest.fixture
async def aenv(env_generator: AsyncGenerator[NotteEnv, None]) -> NotteEnv:
    """Helper fixture that returns the NotteEnv instance directly"""
    return await anext(env_generator)


@pytest.mark.asyncio
async def test_context_property_before_observation(aenv: Awaitable[NotteEnv]) -> None:
    """Test that accessing context before observation raises an error"""
    with pytest.raises(
        ValueError,
        match="Tried to access `env.snapshot` but no snapshot is available in the environment",
    ):
        _ = (await aenv).snapshot


@pytest.mark.asyncio
async def test_context_property_after_observation(aenv: Awaitable[NotteEnv]) -> None:
    """Test that context is properly set after observation"""
    env = await aenv
    _ = await env.observe("https://notte.cc")

    # Verify context exists and has expected properties
    assert isinstance(env.snapshot, BrowserSnapshot)
    assert env.snapshot.metadata.url == "https://notte.cc"
    assert env.snapshot.a11y_tree is not None
    assert env.snapshot.dom_node is not None


@pytest.mark.asyncio
async def testtrajectory_empty_before_observation(aenv: Awaitable[NotteEnv]) -> None:
    """Test that list_actions returns None before any observation"""
    env = await aenv
    assert len(env.trajectory) == 0


@pytest.mark.asyncio
async def test_valid_observation_after_observation(aenv: Awaitable[NotteEnv]) -> None:
    """Test that last observation returns valid actions after observation"""
    env = await aenv
    obs = await env.observe("https://example.com")

    actions = obs.space.actions()
    assert isinstance(actions, list)
    assert all(isinstance(action, Action) for action in actions)
    assert len(actions) == 1  # Number of actions in mock response

    # Verify each action has required attributes
    actions = [
        Action(id="L1", description="Opens more information page", category="Navigation"),
    ]


@pytest.mark.skip(reason="TODO: fix this")
@pytest.mark.asyncio
async def test_valid_observation_after_step(aenv: Awaitable[NotteEnv]) -> None:
    """Test that last observation returns valid actions after taking a step"""
    # Initial observation
    env = await aenv
    obs = await env.observe("https://example.com")
    if obs.space is None:
        raise ValueError("obs.space is None")
    initial_actions = obs.space.actions("all")
    assert initial_actions is not None
    assert len(initial_actions) == 1

    # Take a step
    _ = await env.step("L1")  # Using L1 from mock response

    # TODO: verify that the action space is updated


@pytest.mark.asyncio
async def test_valid_observation_after_reset(aenv: Awaitable[NotteEnv]) -> None:
    """Test that last observation returns valid actions after reset"""
    # Initial observation
    env = await aenv
    obs = await env.observe("https://example.com")
    assert obs.has_space()

    # Reset environment
    await env.reset()
    obs = await env.observe("https://example.com")

    # Verify new observation is correct
    assert obs.has_space()
    assert obs.metadata.url == "https://example.com"

    # Verify the state was effectively reset
    assert env.snapshot.screenshot == obs.screenshot  # poor proxy but ok
    assert len(env.trajectory) == 1  # the trajectory should only contains a single obs (from reset)

================
File: .dockerignore
================
.git
.gitignore
.venv
.vscode
.vscodeignore

================
File: .env.example
================
# #############################
# ######### SDK CONFIG ########
# #############################

# Notte SDK configuration
# -> Cloud hosted sessions & notte API
NOTTE_API_URL=api.notte.cc
NOTTE_API_KEY=


# #############################
# ######### LOCAL DEV #########
# #############################

# Set your provider API keys (only one provider is required but we advise to set more to bypass rate limits)
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GROQ_API_KEY=
CEREBRAS_API_KEY=
DEEPSEEK_API_KEY=
GEMINI_API_KEY=

# #############################
# ######### TELEMETRY #########
# #############################

# Enable or disable telemetry collection
# We use PostHog for telemetry collection. The data is completely anonymized and
# contains no personally identifiable information.
# Set to 'false' to disable telemetry collection
ANONYMIZED_TELEMETRY=false

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

ignore.*
llm_usage.jsonl
llm_parsing_error.jsonl
traces/

**/__pycache__/**
.DS_Store
**/.DS_Store
old
notebook

================
File: .pre-commit-config.yaml
================
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.9.7
    hooks:
      # Run the linter.
      - id: ruff
        types_or: [ python, pyi ]
        args: [ --fix ]
      # Run the formatter.
      - id: ruff-format
        types_or: [ python, pyi ]

  - repo: https://github.com/DetachHead/basedpyright-pre-commit-mirror
    rev: 1.27.1
    hooks:
      - id: basedpyright
        args: ["--project", "."]
        verbose: true

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        exclude: ^(.*/README\.md|.*/pyproject\.toml|docs/archives/20250307_README\.md|README\.md)$

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json

================
File: .python-version
================
3.11

================
File: build.sh
================
echo "Building root notte package"
uv build
for package in $(ls packages); do
    echo "Building $package"
    cd packages/$package
    uv build
    cd ../../
done

================
File: Dockerfile
================
# syntax=docker/dockerfile:1

############################
###### STAGE 1: Build ######
############################

# Use the same base image
FROM python:3.11-slim-bullseye AS builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install git and other essential build tools if needed
RUN apt-get update && apt-get install -y \
    git \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy the project into the image
ADD . /app

# Sync the project into a new environment, using the frozen lockfile
WORKDIR /app
RUN uv sync --extra api --frozen
ENV PATH="/app/.venv/bin:$PATH"

# Install patchright dependencies
RUN patchright install --with-deps chromium --only-shell


############################
####### STAGE 2: Run #######
############################

FROM python:3.11-slim-bullseye

WORKDIR /app

# Install required system dependencies for Chromium
RUN apt-get update && apt-get install -y \
    chromium \
    chromium-driver \
    libglib2.0-0 \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy only the virtual environment and application files
COPY --from=builder /app/.env /app/.env
COPY --from=builder /app/.venv /app/.venv
COPY --from=builder /app/src /app/src
COPY --from=builder /app/examples /app/examples
COPY --from=builder /root/.cache/ms-playwright /root/.cache/ms-playwright

# Environment setup
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="$VIRTUAL_ENV/lib/python3.11/site-packages"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PYTHONIOENCODING=UTF-8

# Force headless mode for patchright
ENV HEADLESS=true

# Define the command to run your application
EXPOSE 8000
CMD ["python", "-m", "uvicorn", "examples.fastapi_agent:app", "--host", "0.0.0.0", "--port", "8000"]
# REMBMBER TO START WITH
# docker build -f ./Dockerfile -t notte-api .
# docker run --init -p 8000:8000 notte-api

================
File: LICENSE
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1.  Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

2.  Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

3.  Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

4.  Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
    Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
    stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
    that You distribute, all copyright, patent, trademark, and
    attribution notices from the Source form of the Work,
    excluding those notices that do not pertain to any part of
    the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
    distribution, then any Derivative Works that You distribute must
    include a readable copy of the attribution notices contained
    within such NOTICE file, excluding those notices that do not
    pertain to any part of the Derivative Works, in at least one
    of the following places: within a NOTICE text file distributed
    as part of the Derivative Works; within the Source form or
    documentation, if provided along with the Derivative Works; or,
    within a display generated by the Derivative Works, if and
    wherever such third-party notices normally appear. The contents
    of the NOTICE file are for informational purposes only and
    do not modify the License. You may add Your own attribution
    notices within Derivative Works that You distribute, alongside
    or as an addendum to the NOTICE text from the Work, provided
    that such additional attribution notices cannot be construed
    as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

5.  Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

6.  Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

7.  Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

8.  Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

9.  Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

Copyright 2025 Notte Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================
File: makefile
================
ifneq ("$(wildcard .env)","")
  include .env
  export $(shell sed 's/=.*//' .env)
endif

.PHONY: test
test:
	@uv run pytest tests

.PHONY: test-cicd
test-cicd:
	uv run pytest tests --ignore=tests/integration/test_resolution.py --ignore=tests/integration/test_webvoyager_resolution.py --ignore=tests/browser/test_pool.py --ignore=tests/integration/test_e2e.py --ignore=tests/integration/test_webvoyager_scripts.py --durations=10

.PHONY: clean
clean:
	@find . -name "*.pyc" -exec rm -f {} \;
	@find . -name "__pycache__" -exec rm -rf {} \; 2> /dev/null
	@find . -name ".pytest_cache" -exec rm -rf {} \; 2> /dev/null
	@find . -name ".mypy_cache" -exec rm -rf {} \; 2> /dev/null
	@find . -name ".ruff_cache" -exec rm -rf {} \; 2> /dev/null
	@find . -name ".DS_Store" -exec rm -f {} \; 2> /dev/null
	@find . -type d -empty -delete

.PHONY: install
install:
	@rm -f uv.lock
	@uv sync --dev --all-extras
	@uv export > requirements.txt

.PHONY: release
release:
	@echo "resetting to latest remote..."
	@git pull && git reset --hard origin/main
	@echo "re-installing package..."
	@make install
	@echo "starting release process..."
	@if [ "$$(git symbolic-ref --short HEAD)" != "main" ]; then \
		echo "not on main branch, please switch to main first"; \
		exit 1; \
	fi
	@VERSION="$(wordlist 2,2,$(MAKECMDGOALS))" && if [ -z "$$VERSION" ]; then \
		echo "no VERSION provided, auto-incrementing patch version..."; \
		OLD_VERSION=$$(uv version | awk '{print $$2}'); \
		MAJOR=$$(echo $$OLD_VERSION | cut -d. -f1); \
		MINOR=$$(echo $$OLD_VERSION | cut -d. -f2); \
		PATCH=$$(echo $$OLD_VERSION | cut -d. -f3); \
		VERSION=$$MAJOR.$$MINOR.$$((PATCH + 1)); \
		echo "auto-incremented version to $$VERSION"; \
	else \
		echo "updating version to $$VERSION..."; \
	fi && \
	uv version $$VERSION && \
	echo "creating and pushing git tag..." && \
	git add pyproject.toml uv.lock requirements.txt && \
	git commit -m "release version v$$VERSION" && \
	git tag -a v$$VERSION -m "Release version v$$VERSION" && \
	git push origin main && git push origin v$$VERSION

================
File: pyproject.toml
================
[project]
name = "notte"
version = "1.3.3"
requires-python = ">=3.11"
dependencies = [
    "notte-core",
    "notte-sdk",
    "notte-browser",
    "notte-agent",
    "notte-integrations",
    "notte-eval",
    "notte-pools",
]

[tool.uv.sources]
notte-core = { workspace = true }
notte-sdk = { workspace = true }
notte-browser = { workspace = true }
notte-agent = { workspace = true }
notte-integrations = { workspace = true }
notte-eval = { workspace = true }
notte-pools = { workspace = true }

[tool.uv.workspace]
members = ["packages/*", "."]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.wheel]
packages = ["src/notte"]


[dependency-groups]

dev = [
    "aiomultiprocess>=0.9.1",
    "basedpyright>=1.27.1",
    "cloudpickle>=3.1.1",
    "joblib>=1.4.2",
    "jupyter>=1.1.1",
    "pandas",
    "pebble>=5.1.1",
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.14.0",
]
lint = [
    "ruff>=0.9.7",
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
timeout = 60
asyncio_mode = "strict"
log_cli = true
log_cli_level = "INFO"
filterwarnings = [
    "ignore::DeprecationWarning:sklearn.utils.fixes:",
    "ignore::DeprecationWarning:pandas.core.common:",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20:",
    "ignore::DeprecationWarning:importlib.resources._legacy:",
    "ignore::DeprecationWarning:litellm.utils:",
    "ignore:open_text is deprecated*:DeprecationWarning",
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.*:DeprecationWarning",
    'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
    "ignore:Valid config keys have changed in V2*:UserWarning"
]

[tool.ruff]
line-length = 120
indent-width = 4
exclude = [".venv"]

[tool.ruff.lint]
extend-select = ["I"]

[tool.basedpyright]
exclude = [".venv", "uv-cache", "**/site-packages/**", "**/dist-packages/**", "tests", "old", "notebook", "dist"]
enableTypeIgnoreComments = true
reportIgnoreCommentWithoutRule = false
failOnWarnings = true
reportAny = false
reportExplicitAny = false

================
File: README.md
================
<div align="center">
  <p>
    ⚡️ we outperform other web agents in speed, costs and reliability 👉🏼 <a href="https://github.com/nottelabs/open-operator-evals">read more on open-operator-evals</a>
  </p>
</div>

<p align="center">
  <img src="docs/logo/bgd.png" alt="Notte Logo" width="100%">
</p>

## The full stack for the agentic internet layer

[![GitHub stars](https://img.shields.io/github/stars/nottelabs/notte?style=social)](https://github.com/nottelabs/notte/stargazers)
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![PyPI version](https://img.shields.io/pypi/v/notte?color=blue)](https://pypi.org/project/notte/)
[![PyPI Downloads](https://static.pepy.tech/badge/notte?color=blue)](https://pepy.tech/projects/notte)
[![commits main](https://img.shields.io/github/commit-activity/m/nottelabs/notte?color=blue)](https://github.com/nottelabs/notte/commits/main)
![CodeRabbit Pull Request Reviews](https://img.shields.io/coderabbit/prs/github/nottelabs/notte?utm_source=oss&utm_medium=github&utm_campaign=nottelabs%2Fnotte&labelColor=171717&color=FF570A&link=https%3A%2F%2Fcoderabbit.ai&label=CodeRabbit+Reviews)

```bash
$ agent.run("go to twitter and post: new era this is @nottecore taking over my acc")
— ft. secure password vault, bypass bot detection, speed x2
```

<p align="center">
  <img src="docs/gifs/v1.gif" alt="Demo" width="100%" href="https://video.twimg.com/ext_tw_video/1892967963344461824/pu/vid/avc1/1282x720/15sCfmmUUcAtBZaR.mp4">
</p>

## Benchmarks

Read the full story here: [https://github.com/nottelabs/open-operator-evals](https://github.com/nottelabs/open-operator-evals)

| Rank | Provider                                                    | Agent Self-Report | LLM Evaluation | Time per Task | Task Reliability |
| ---- | ----------------------------------------------------------- | ----------------- | -------------- | ------------- | ---------------- |
| 🏆   | [Notte](https://github.com/nottelabs/notte)                 | **86.2%**         | **79.0%**      | **47s**       | **96.6%**        |
| 2️⃣   | [Browser-Use](https://github.com/browser-use/browser-use)   | 77.3%             | 60.2%          | 113s          | 83.3%            |
| 3️⃣   | [Convergence](https://github.com/convergence-ai/proxy-lite) | 38.4%             | 31.4%          | 83s           | 50%              |

## Quickstart me

```bash
uv venv --python 3.11
uv pip install notte
uv run patchright install --with-deps chromium
export GEMINI_API_KEY="your-api-key"
```

And spin up your crazy cool and dead simple agent;

```python
from notte import Agent
agi = Agent(reasoning_model="gemini/gemini-2.0-flash")
agi.run(task="doom scroll cat memes on google images")
```

This is by far the closest attempt to AGI we've ever witnessed ;)

## Highlights 🌌

Notte is the full stack framework for web browsing LLM agents. Our main tech highlight is that we introduce a perception layer that turns the internet into an agent-friendly environment, by turning websites into structured maps described in natural language, ready to be digested by an LLM with less effort ✨

```bash
$ page.perceive("https://www.google.com/travel/flights")

# Flight Search
* I1: Enters departure location (departureLocation: str = "San Francisco")
* I3: Selects departure date (departureDate: date)
* I6: Selects trip type (tripType: str = "round-trip", allowed=["round-trip", "one-way", "multi-city"])
* B3: Search flights options with current filters

# Website Navigation
* B5: Opens Google apps menu
* L28: Navigates to Google homepage

# User Preferences
* B26: Open menu to change language settings
...
```

The above gives you the gist of how we push to better parse webpages and reduce the cognitive load of LLM reasoners. The aim is to enable you to build and deploy more accurate web browsing agents, while downgrading to smaller models, which in turn increase inference speed and reduce production costs.

### Speed contest vs. Browser-Use

The perception layer enables smaller models (e.g. the llama suite) to be connected for the agent's reasoning, because all the DOM noise is abstracted and the LLM can focus on a set of actions described in plain language. This allows the agent to be served on ultra-high inference such as Cerebras without losing precision 🏃‍♂️

```bash
$ agent.run("search cheapest flight from paris to nyc on gflight")
— left:browser-use, right:notte-agent (cerebras)
```

<p align="center">
  <img src="docs/gifs/v2.gif" alt="Demo" width="100%" href="https://video.twimg.com/amplify_video/1882896602324418560/vid/avc1/1278x720/Conf_R7LL8htoooT.mp4?tag=16">
</p>

## The full stack framework

Notte's full stack agentic internet framework combines core browser infrastructure (sessions, live replay, cdp) with intelligent browsing agents, bridged and enhanced with our perception layer. Our entire codebase is made to be highly customizable, ready to integrate other devtools from the ecosystem and packaged to be push to prod. We also provide web scripting capabilities and sota scraping endpoints out of the box, because why not.

<table>
  <tr>
    <th><strong>service</strong></th>
    <th><code>agent.run()</code></th>
    <th><code>agent.cloud()</code></th>
    <th><code>page.scrape()</code></th>
    <th><code>page.act()</code></th>
    <th><code>page.perceive()</code></th>
  </tr>
  <tr>
    <td><strong>browser-use</strong></td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td><strong>stagehand</strong></td>
    <td></td>
    <td></td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
    <td></td>
  </tr>
  <tr>
    <td><strong>notte</strong></td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
    <td align="center">🌕</td>
  </tr>
</table>

PS: The title of services are figurative eg. `agent.cloud()` refers to hosting an agent in cloud for you.

### Unstable and upcoming features

⏭️ We have either already partially shipped or are working on the following features: captcha resolution, residential proxies, web security, vpn-style browsing, authentication and payments with secure safe, improved speed and memory, human-in-the-loop integration, channeled notifications, and cookies management.

## Hosted SDK

We can manage cloud browser sessions and all libraries features for you:

```python
# just append .sdk to import from sdk
from notte_sdk.client import NotteClient
client = NotteClient(api_key="your-api-key")
agent = client.agents.run(task="doom scroll dog memes on google images", reasoning_model="gemini/gemini-2.0-flash")
response = client.agents.wait_for_completion(agent_id=agent.agent_id)
```

To run the above you'll need a notte API key from our [console platform](https://console.notte.cc) 🔑

### API endpoints

Scraping endpoint:

- `/v1/scrape` - Scrape data from a URL

Session management:

- `/v1/sessions/create` - Create a new browser session
- `/v1/sessions/{session_id}/close` - Close a session
- `/v1/sessions/{session_id}/debug` - Get debug information from a session (i.e live CDP url / viewer url)
- `/v1/sessions` - List active sessions

Browser & Page interactions:

- `/v1/env/scrape` - Extract structured data from current page
- `/v1/env/observe` - Get action space (perception) from current page
- `/v1/env/act` - Perform action on current page with text command

Agent launchpad:

- `/v1/agent/run` - Execute agent task
- `/v1/agent/{agent_id}` - Get agent task status
- `/v1/agent/{agent_id}/stop` - Stop running agent
- `/v1/agents/` - List running agent tasks

Read more on our [documentation](https://docs.notte.cc) website. You can cURL all of them 🥰

## The console

Most of our features are also available on our [console Playground](https://console.notte.cc/browse) with a large free-tier!

```bash
$ page.extract("get top 5 latest trendy coins on pf, return ticker, name, mcap")
— webpage scraping, structured schema llm extraction
```

<p align="center">
  <img src="docs/gifs/v3.gif" alt="Demo" width="100%" href="https://video.twimg.com/ext_tw_video/1891808695886991360/pu/vid/avc1/1014x720/uc56Q0q3RGK2h8YM.mp4?tag=12">
</p>

## Contribute

Setup your local working environment;

```bash
uv sync --dev
uv run patchright install --with-deps chromium
uv run pre-commit install
```

Find an issue, fork, open a PR, and merge :)

## License

Notte is released under the [Apache 2.0 license](LICENSE)

## Citation

If you use notte in your research or project, please cite:

```bibtex
@software{notte2025,
  author = {Pinto, Andrea and Giordano, Lucas and {nottelabs-team}},
  title = {Notte: Software suite for internet-native agentic systems},
  url = {https://github.com/nottelabs/notte},
  year = {2025},
  publisher = {GitHub},
  license = {Apache-2.0}
  version = {0.1.3},
}
```

Built with luv from Earth 🌏

================
File: sample.py
================
from notte import Agent
agi = Agent(reasoning_model="gemini/gemini-2.0-flash")
agi.run(task="Open hardbox.eu, find pool configurator, use it, configure your pool,send request with maksym+notte@h2mai.com, +48123456789")

================
File: uv.lock
================
version = 1
requires-python = ">=3.11"
resolution-markers = [
    "python_full_version >= '3.13' and sys_platform == 'darwin'",
    "python_full_version >= '3.12.4' and python_full_version < '3.13' and sys_platform == 'darwin'",
    "python_full_version >= '3.12' and python_full_version < '3.12.4' and sys_platform == 'darwin'",
    "python_full_version >= '3.13' and platform_machine == 'aarch64' and sys_platform == 'linux'",
    "python_full_version >= '3.12.4' and python_full_version < '3.13' and platform_machine == 'aarch64' and sys_platform == 'linux'",
    "python_full_version >= '3.12' and python_full_version < '3.12.4' and platform_machine == 'aarch64' and sys_platform == 'linux'",
    "(python_full_version >= '3.13' and platform_machine != 'aarch64' and sys_platform == 'linux') or (python_full_version >= '3.13' and sys_platform != 'darwin' and sys_platform != 'linux')",
    "(python_full_version >= '3.12.4' and python_full_version < '3.13' and platform_machine != 'aarch64' and sys_platform == 'linux') or (python_full_version >= '3.12.4' and python_full_version < '3.13' and sys_platform != 'darwin' and sys_platform != 'linux')",
    "(python_full_version >= '3.12' and python_full_version < '3.12.4' and platform_machine != 'aarch64' and sys_platform == 'linux') or (python_full_version >= '3.12' and python_full_version < '3.12.4' and sys_platform != 'darwin' and sys_platform != 'linux')",
    "python_full_version < '3.12' and sys_platform == 'darwin'",
    "python_full_version < '3.12' and platform_machine == 'aarch64' and sys_platform == 'linux'",
    "(python_full_version < '3.12' and platform_machine != 'aarch64' and sys_platform == 'linux') or (python_full_version < '3.12' and sys_platform != 'darwin' and sys_platform != 'linux')",
]

[manifest]
members = [
    "notte",
    "notte-agent",
    "notte-browser",
    "notte-core",
    "notte-eval",
    "notte-integrations",
    "notte-pools",
    "notte-sdk",
]

[[package]]
name = "aiohappyeyeballs"
version = "2.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/26/30/f84a107a9c4331c14b2b586036f40965c128aa4fee4dda5d3d51cb14ad54/aiohappyeyeballs-2.6.1.tar.gz", hash = "sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558", size = 22760 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0f/15/5bf3b99495fb160b63f95972b81750f18f7f4e02ad051373b669d17d44f2/aiohappyeyeballs-2.6.1-py3-none-any.whl", hash = "sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8", size = 15265 },
]

[[package]]
name = "aiohttp"
version = "3.11.16"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohappyeyeballs" },
    { name = "aiosignal" },
    { name = "attrs" },
    { name = "frozenlist" },
    { name = "multidict" },
    { name = "propcache" },
    { name = "yarl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f1/d9/1c4721d143e14af753f2bf5e3b681883e1f24b592c0482df6fa6e33597fa/aiohttp-3.11.16.tar.gz", hash = "sha256:16f8a2c9538c14a557b4d309ed4d0a7c60f0253e8ed7b6c9a2859a7582f8b1b8", size = 7676826 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/98/be30539cd84260d9f3ea1936d50445e25aa6029a4cb9707f3b64cfd710f7/aiohttp-3.11.16-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:8cb0688a8d81c63d716e867d59a9ccc389e97ac7037ebef904c2b89334407180", size = 708664 },
    { url = "https://files.pythonhosted.org/packages/e6/27/d51116ce18bdfdea7a2244b55ad38d7b01a4298af55765eed7e8431f013d/aiohttp-3.11.16-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:0ad1fb47da60ae1ddfb316f0ff16d1f3b8e844d1a1e154641928ea0583d486ed", size = 468953 },
    { url = "https://files.pythonhosted.org/packages/34/23/eedf80ec42865ea5355b46265a2433134138eff9a4fea17e1348530fa4ae/aiohttp-3.11.16-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:df7db76400bf46ec6a0a73192b14c8295bdb9812053f4fe53f4e789f3ea66bbb", size = 456065 },
    { url = "https://files.pythonhosted.org/packages/36/23/4a5b1ef6cff994936bf96d981dd817b487d9db755457a0d1c2939920d620/aiohttp-3.11.16-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cc3a145479a76ad0ed646434d09216d33d08eef0d8c9a11f5ae5cdc37caa3540", size = 1687976 },
    { url = "https://files.pythonhosted.org/packages/d0/5d/c7474b4c3069bb35276d54c82997dff4f7575e4b73f0a7b1b08a39ece1eb/aiohttp-3.11.16-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d007aa39a52d62373bd23428ba4a2546eed0e7643d7bf2e41ddcefd54519842c", size = 1752711 },
    { url = "https://files.pythonhosted.org/packages/64/4c/ee416987b6729558f2eb1b727c60196580aafdb141e83bd78bb031d1c000/aiohttp-3.11.16-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f6ddd90d9fb4b501c97a4458f1c1720e42432c26cb76d28177c5b5ad4e332601", size = 1791305 },
    { url = "https://files.pythonhosted.org/packages/58/28/3e1e1884070b95f1f69c473a1995852a6f8516670bb1c29d6cb2dbb73e1c/aiohttp-3.11.16-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0a2f451849e6b39e5c226803dcacfa9c7133e9825dcefd2f4e837a2ec5a3bb98", size = 1674499 },
    { url = "https://files.pythonhosted.org/packages/ad/55/a032b32fa80a662d25d9eb170ed1e2c2be239304ca114ec66c89dc40f37f/aiohttp-3.11.16-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8df6612df74409080575dca38a5237282865408016e65636a76a2eb9348c2567", size = 1622313 },
    { url = "https://files.pythonhosted.org/packages/b1/df/ca775605f72abbda4e4746e793c408c84373ca2c6ce7a106a09f853f1e89/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:78e6e23b954644737e385befa0deb20233e2dfddf95dd11e9db752bdd2a294d3", size = 1658274 },
    { url = "https://files.pythonhosted.org/packages/cc/6c/21c45b66124df5b4b0ab638271ecd8c6402b702977120cb4d5be6408e15d/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:696ef00e8a1f0cec5e30640e64eca75d8e777933d1438f4facc9c0cdf288a810", size = 1666704 },
    { url = "https://files.pythonhosted.org/packages/1d/e2/7d92adc03e3458edd18a21da2575ab84e58f16b1672ae98529e4eeee45ab/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:e3538bc9fe1b902bef51372462e3d7c96fce2b566642512138a480b7adc9d508", size = 1652815 },
    { url = "https://files.pythonhosted.org/packages/3a/52/7549573cd654ad651e3c5786ec3946d8f0ee379023e22deb503ff856b16c/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:3ab3367bb7f61ad18793fea2ef71f2d181c528c87948638366bf1de26e239183", size = 1735669 },
    { url = "https://files.pythonhosted.org/packages/d5/54/dcd24a23c7a5a2922123e07a296a5f79ea87ce605f531be068415c326de6/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:56a3443aca82abda0e07be2e1ecb76a050714faf2be84256dae291182ba59049", size = 1760422 },
    { url = "https://files.pythonhosted.org/packages/a7/53/87327fe982fa310944e1450e97bf7b2a28015263771931372a1dfe682c58/aiohttp-3.11.16-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:61c721764e41af907c9d16b6daa05a458f066015abd35923051be8705108ed17", size = 1694457 },
    { url = "https://files.pythonhosted.org/packages/ce/6d/c5ccf41059267bcf89853d3db9d8d217dacf0a04f4086cb6bf278323011f/aiohttp-3.11.16-cp311-cp311-win32.whl", hash = "sha256:3e061b09f6fa42997cf627307f220315e313ece74907d35776ec4373ed718b86", size = 416817 },
    { url = "https://files.pythonhosted.org/packages/e7/dd/01f6fe028e054ef4f909c9d63e3a2399e77021bb2e1bb51d56ca8b543989/aiohttp-3.11.16-cp311-cp311-win_amd64.whl", hash = "sha256:745f1ed5e2c687baefc3c5e7b4304e91bf3e2f32834d07baaee243e349624b24", size = 442986 },
    { url = "https://files.pythonhosted.org/packages/db/38/100d01cbc60553743baf0fba658cb125f8ad674a8a771f765cdc155a890d/aiohttp-3.11.16-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:911a6e91d08bb2c72938bc17f0a2d97864c531536b7832abee6429d5296e5b27", size = 704881 },
    { url = "https://files.pythonhosted.org/packages/21/ed/b4102bb6245e36591209e29f03fe87e7956e54cb604ee12e20f7eb47f994/aiohttp-3.11.16-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:6ac13b71761e49d5f9e4d05d33683bbafef753e876e8e5a7ef26e937dd766713", size = 464564 },
    { url = "https://files.pythonhosted.org/packages/3b/e1/a9ab6c47b62ecee080eeb33acd5352b40ecad08fb2d0779bcc6739271745/aiohttp-3.11.16-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:fd36c119c5d6551bce374fcb5c19269638f8d09862445f85a5a48596fd59f4bb", size = 456548 },
    { url = "https://files.pythonhosted.org/packages/80/ad/216c6f71bdff2becce6c8776f0aa32cb0fa5d83008d13b49c3208d2e4016/aiohttp-3.11.16-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d489d9778522fbd0f8d6a5c6e48e3514f11be81cb0a5954bdda06f7e1594b321", size = 1691749 },
    { url = "https://files.pythonhosted.org/packages/bd/ea/7df7bcd3f4e734301605f686ffc87993f2d51b7acb6bcc9b980af223f297/aiohttp-3.11.16-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:69a2cbd61788d26f8f1e626e188044834f37f6ae3f937bd9f08b65fc9d7e514e", size = 1736874 },
    { url = "https://files.pythonhosted.org/packages/51/41/c7724b9c87a29b7cfd1202ec6446bae8524a751473d25e2ff438bc9a02bf/aiohttp-3.11.16-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:cd464ba806e27ee24a91362ba3621bfc39dbbb8b79f2e1340201615197370f7c", size = 1786885 },
    { url = "https://files.pythonhosted.org/packages/86/b3/f61f8492fa6569fa87927ad35a40c159408862f7e8e70deaaead349e2fba/aiohttp-3.11.16-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1ce63ae04719513dd2651202352a2beb9f67f55cb8490c40f056cea3c5c355ce", size = 1698059 },
    { url = "https://files.pythonhosted.org/packages/ce/be/7097cf860a9ce8bbb0e8960704e12869e111abcd3fbd245153373079ccec/aiohttp-3.11.16-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:09b00dd520d88eac9d1768439a59ab3d145065c91a8fab97f900d1b5f802895e", size = 1626527 },
    { url = "https://files.pythonhosted.org/packages/1d/1d/aaa841c340e8c143a8d53a1f644c2a2961c58cfa26e7b398d6bf75cf5d23/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:7f6428fee52d2bcf96a8aa7b62095b190ee341ab0e6b1bcf50c615d7966fd45b", size = 1644036 },
    { url = "https://files.pythonhosted.org/packages/2c/88/59d870f76e9345e2b149f158074e78db457985c2b4da713038d9da3020a8/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:13ceac2c5cdcc3f64b9015710221ddf81c900c5febc505dbd8f810e770011540", size = 1685270 },
    { url = "https://files.pythonhosted.org/packages/2b/b1/c6686948d4c79c3745595efc469a9f8a43cab3c7efc0b5991be65d9e8cb8/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:fadbb8f1d4140825069db3fedbbb843290fd5f5bc0a5dbd7eaf81d91bf1b003b", size = 1650852 },
    { url = "https://files.pythonhosted.org/packages/fe/94/3e42a6916fd3441721941e0f1b8438e1ce2a4c49af0e28e0d3c950c9b3c9/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:6a792ce34b999fbe04a7a71a90c74f10c57ae4c51f65461a411faa70e154154e", size = 1704481 },
    { url = "https://files.pythonhosted.org/packages/b1/6d/6ab5854ff59b27075c7a8c610597d2b6c38945f9a1284ee8758bc3720ff6/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:f4065145bf69de124accdd17ea5f4dc770da0a6a6e440c53f6e0a8c27b3e635c", size = 1735370 },
    { url = "https://files.pythonhosted.org/packages/73/2a/08a68eec3c99a6659067d271d7553e4d490a0828d588e1daa3970dc2b771/aiohttp-3.11.16-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:fa73e8c2656a3653ae6c307b3f4e878a21f87859a9afab228280ddccd7369d71", size = 1697619 },
    { url = "https://files.pythonhosted.org/packages/61/d5/fea8dbbfb0cd68fbb56f0ae913270a79422d9a41da442a624febf72d2aaf/aiohttp-3.11.16-cp312-cp312-win32.whl", hash = "sha256:f244b8e541f414664889e2c87cac11a07b918cb4b540c36f7ada7bfa76571ea2", size = 411710 },
    { url = "https://files.pythonhosted.org/packages/33/fb/41cde15fbe51365024550bf77b95a4fc84ef41365705c946da0421f0e1e0/aiohttp-3.11.16-cp312-cp312-win_amd64.whl", hash = "sha256:23a15727fbfccab973343b6d1b7181bfb0b4aa7ae280f36fd2f90f5476805682", size = 438012 },
    { url = "https://files.pythonhosted.org/packages/52/52/7c712b2d9fb4d5e5fd6d12f9ab76e52baddfee71e3c8203ca7a7559d7f51/aiohttp-3.11.16-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a3814760a1a700f3cfd2f977249f1032301d0a12c92aba74605cfa6ce9f78489", size = 698005 },
    { url = "https://files.pythonhosted.org/packages/51/3e/61057814f7247666d43ac538abcd6335b022869ade2602dab9bf33f607d2/aiohttp-3.11.16-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9b751a6306f330801665ae69270a8a3993654a85569b3469662efaad6cf5cc50", size = 461106 },
    { url = "https://files.pythonhosted.org/packages/4f/85/6b79fb0ea6e913d596d5b949edc2402b20803f51b1a59e1bbc5bb7ba7569/aiohttp-3.11.16-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:ad497f38a0d6c329cb621774788583ee12321863cd4bd9feee1effd60f2ad133", size = 453394 },
    { url = "https://files.pythonhosted.org/packages/4b/04/e1bb3fcfbd2c26753932c759593a32299aff8625eaa0bf8ff7d9c0c34a36/aiohttp-3.11.16-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ca37057625693d097543bd88076ceebeb248291df9d6ca8481349efc0b05dcd0", size = 1666643 },
    { url = "https://files.pythonhosted.org/packages/0e/27/97bc0fdd1f439b8f060beb3ba8fb47b908dc170280090801158381ad7942/aiohttp-3.11.16-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a5abcbba9f4b463a45c8ca8b7720891200658f6f46894f79517e6cd11f3405ca", size = 1721948 },
    { url = "https://files.pythonhosted.org/packages/2c/4f/bc4c5119e75c05ef15c5670ef1563bbe25d4ed4893b76c57b0184d815e8b/aiohttp-3.11.16-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f420bfe862fb357a6d76f2065447ef6f484bc489292ac91e29bc65d2d7a2c84d", size = 1774454 },
    { url = "https://files.pythonhosted.org/packages/73/5b/54b42b2150bb26fdf795464aa55ceb1a49c85f84e98e6896d211eabc6670/aiohttp-3.11.16-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:58ede86453a6cf2d6ce40ef0ca15481677a66950e73b0a788917916f7e35a0bb", size = 1677785 },
    { url = "https://files.pythonhosted.org/packages/10/ee/a0fe68916d3f82eae199b8535624cf07a9c0a0958c7a76e56dd21140487a/aiohttp-3.11.16-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6fdec0213244c39973674ca2a7f5435bf74369e7d4e104d6c7473c81c9bcc8c4", size = 1608456 },
    { url = "https://files.pythonhosted.org/packages/8b/48/83afd779242b7cf7e1ceed2ff624a86d3221e17798061cf9a79e0b246077/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:72b1b03fb4655c1960403c131740755ec19c5898c82abd3961c364c2afd59fe7", size = 1622424 },
    { url = "https://files.pythonhosted.org/packages/6f/27/452f1d5fca1f516f9f731539b7f5faa9e9d3bf8a3a6c3cd7c4b031f20cbd/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:780df0d837276276226a1ff803f8d0fa5f8996c479aeef52eb040179f3156cbd", size = 1660943 },
    { url = "https://files.pythonhosted.org/packages/d6/e1/5c7d63143b8d00c83b958b9e78e7048c4a69903c760c1e329bf02bac57a1/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:ecdb8173e6c7aa09eee342ac62e193e6904923bd232e76b4157ac0bfa670609f", size = 1622797 },
    { url = "https://files.pythonhosted.org/packages/46/9e/2ac29cca2746ee8e449e73cd2fcb3d454467393ec03a269d50e49af743f1/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:a6db7458ab89c7d80bc1f4e930cc9df6edee2200127cfa6f6e080cf619eddfbd", size = 1687162 },
    { url = "https://files.pythonhosted.org/packages/ad/6b/eaa6768e02edebaf37d77f4ffb74dd55f5cbcbb6a0dbf798ccec7b0ac23b/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:2540ddc83cc724b13d1838026f6a5ad178510953302a49e6d647f6e1de82bc34", size = 1718518 },
    { url = "https://files.pythonhosted.org/packages/e5/18/dda87cbad29472a51fa058d6d8257dfce168289adaeb358b86bd93af3b20/aiohttp-3.11.16-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:3b4e6db8dc4879015b9955778cfb9881897339c8fab7b3676f8433f849425913", size = 1675254 },
    { url = "https://files.pythonhosted.org/packages/32/d9/d2fb08c614df401d92c12fcbc60e6e879608d5e8909ef75c5ad8d4ad8aa7/aiohttp-3.11.16-cp313-cp313-win32.whl", hash = "sha256:493910ceb2764f792db4dc6e8e4b375dae1b08f72e18e8f10f18b34ca17d0979", size = 410698 },
    { url = "https://files.pythonhosted.org/packages/ce/ed/853e36d5a33c24544cfa46585895547de152dfef0b5c79fa675f6e4b7b87/aiohttp-3.11.16-cp313-cp313-win_amd64.whl", hash = "sha256:42864e70a248f5f6a49fdaf417d9bc62d6e4d8ee9695b24c5916cb4bb666c802", size = 436395 },
]

[[package]]
name = "aiomultiprocess"
version = "0.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/02/d4/1e69e17dda5df91734b70d03dbbf9f222ddb438e1f3bf4ea8fa135ce46de/aiomultiprocess-0.9.1.tar.gz", hash = "sha256:f0231dbe0291e15325d7896ebeae0002d95a4f2675426ca05eb35f24c60e495b", size = 24514 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ad/14/c48c2f5c96960f5649a72b96a0a31d45384b37d89a63f7ccea76bf4fceba/aiomultiprocess-0.9.1-py3-none-any.whl", hash = "sha256:3a7b3bb3c38dbfb4d9d1194ece5934b6d32cf0280e8edbe64a7d215bba1322c6", size = 17517 },
]

[[package]]
name = "aiosignal"
version = "1.3.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "frozenlist" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ba/b5/6d55e80f6d8a08ce22b982eafa278d823b541c925f11ee774b0b9c43473d/aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54", size = 19424 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/6a/bc7e17a3e87a2985d3e8f4da4cd0f481060eb78fb08596c42be62c90a4d9/aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5", size = 7597 },
]

[[package]]
name = "altair"
version = "5.5.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jinja2" },
    { name = "jsonschema" },
    { name = "narwhals" },
    { name = "packaging" },
    { name = "typing-extensions", marker = "python_full_version < '3.14'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/16/b1/f2969c7bdb8ad8bbdda031687defdce2c19afba2aa2c8e1d2a17f78376d8/altair-5.5.0.tar.gz", hash = "sha256:d960ebe6178c56de3855a68c47b516be38640b73fb3b5111c2a9ca90546dd73d", size = 705305 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/aa/f3/0b6ced594e51cc95d8c1fc1640d3623770d01e4969d29c0bd09945fafefa/altair-5.5.0-py3-none-any.whl", hash = "sha256:91a310b926508d560fe0148d02a194f38b824122641ef528113d029fcd129f8c", size = 731200 },
]

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643 },
]

[[package]]
name = "anthropic"
version = "0.49.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "jiter" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/86/e3/a88c8494ce4d1a88252b9e053607e885f9b14d0a32273d47b727cbee4228/anthropic-0.49.0.tar.gz", hash = "sha256:c09e885b0f674b9119b4f296d8508907f6cff0009bc20d5cf6b35936c40b4398", size = 210016 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/74/5d90ad14d55fbe3f9c474fdcb6e34b4bed99e3be8efac98734a5ddce88c1/anthropic-0.49.0-py3-none-any.whl", hash = "sha256:bbc17ad4e7094988d2fa86b87753ded8dce12498f4b85fe5810f208f454a8375", size = 243368 },
]

[[package]]
name = "antlr4-python3-runtime"
version = "4.9.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/3e/38/7859ff46355f76f8d19459005ca000b6e7012f2f1ca597746cbcd1fbfe5e/antlr4-python3-runtime-4.9.3.tar.gz", hash = "sha256:f224469b4168294902bb1efa80a8bf7855f24c99aef99cbefc1bcd3cce77881b", size = 117034 }

[[package]]
name = "anyio"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
    { name = "typing-extensions", marker = "python_full_version < '3.13'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/95/7d/4c1bd541d4dffa1b52bd83fb8527089e097a106fc90b467a7313b105f840/anyio-4.9.0.tar.gz", hash = "sha256:673c0c244e15788651a4ff38710fea9675823028a6f08a5eda409e0c9840a028", size = 190949 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a1/ee/48ca1a7c89ffec8b6a0c5d02b89c305671d5ffd8d3c94acf8b8c408575bb/anyio-4.9.0-py3-none-any.whl", hash = "sha256:9f76d541cad6e36af7beb62e978876f3b41e3e04f2c1fbf0884604c0a9c4d93c", size = 100916 },
]

[[package]]
name = "appnope"
version = "0.1.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/35/5d/752690df9ef5b76e169e68d6a129fa6d08a7100ca7f754c89495db3c6019/appnope-0.1.4.tar.gz", hash = "sha256:1de3860566df9caf38f01f86f65e0e13e379af54f9e4bee1e66b48f2efffd1ee", size = 4170 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/29/5ecc3a15d5a33e31b26c11426c45c501e439cb865d0bff96315d86443b78/appnope-0.1.4-py2.py3-none-any.whl", hash = "sha256:502575ee11cd7a28c0205f379b525beefebab9d161b7c964670864014ed7213c", size = 4321 },
]

[[package]]
name = "apscheduler"
version = "3.11.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "tzlocal" },
]
sdist = { url = "https://files.pythonhosted.org/packages/4e/00/6d6814ddc19be2df62c8c898c4df6b5b1914f3bd024b780028caa392d186/apscheduler-3.11.0.tar.gz", hash = "sha256:4c622d250b0955a65d5d0eb91c33e6d43fd879834bf541e0a18661ae60460133", size = 107347 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/ae/9a053dd9229c0fde6b1f1f33f609ccff1ee79ddda364c756a924c6d8563b/APScheduler-3.11.0-py3-none-any.whl", hash = "sha256:fc134ca32e50f5eadcc4938e3a4545ab19131435e851abb40b34d63d5141c6da", size = 64004 },
]

[[package]]
name = "argon2-cffi"
version = "23.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "argon2-cffi-bindings" },
]
sdist = { url = "https://files.pythonhosted.org/packages/31/fa/57ec2c6d16ecd2ba0cf15f3c7d1c3c2e7b5fcb83555ff56d7ab10888ec8f/argon2_cffi-23.1.0.tar.gz", hash = "sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08", size = 42798 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a4/6a/e8a041599e78b6b3752da48000b14c8d1e8a04ded09c88c714ba047f34f5/argon2_cffi-23.1.0-py3-none-any.whl", hash = "sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea", size = 15124 },
]

[[package]]
name = "argon2-cffi-bindings"
version = "21.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b9/e9/184b8ccce6683b0aa2fbb7ba5683ea4b9c5763f1356347f1312c32e3c66e/argon2-cffi-bindings-21.2.0.tar.gz", hash = "sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3", size = 1779911 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d4/13/838ce2620025e9666aa8f686431f67a29052241692a3dd1ae9d3692a89d3/argon2_cffi_bindings-21.2.0-cp36-abi3-macosx_10_9_x86_64.whl", hash = "sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367", size = 29658 },
    { url = "https://files.pythonhosted.org/packages/b3/02/f7f7bb6b6af6031edb11037639c697b912e1dea2db94d436e681aea2f495/argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d", size = 80583 },
    { url = "https://files.pythonhosted.org/packages/ec/f7/378254e6dd7ae6f31fe40c8649eea7d4832a42243acaf0f1fff9083b2bed/argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae", size = 86168 },
    { url = "https://files.pythonhosted.org/packages/74/f6/4a34a37a98311ed73bb80efe422fed95f2ac25a4cacc5ae1d7ae6a144505/argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c", size = 82709 },
    { url = "https://files.pythonhosted.org/packages/74/2b/73d767bfdaab25484f7e7901379d5f8793cccbb86c6e0cbc4c1b96f63896/argon2_cffi_bindings-21.2.0-cp36-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86", size = 83613 },
    { url = "https://files.pythonhosted.org/packages/4f/fd/37f86deef67ff57c76f137a67181949c2d408077e2e3dd70c6c42912c9bf/argon2_cffi_bindings-21.2.0-cp36-abi3-musllinux_1_1_i686.whl", hash = "sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f", size = 84583 },
    { url = "https://files.pythonhosted.org/packages/6f/52/5a60085a3dae8fded8327a4f564223029f5f54b0cb0455a31131b5363a01/argon2_cffi_bindings-21.2.0-cp36-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e", size = 88475 },
    { url = "https://files.pythonhosted.org/packages/8b/95/143cd64feb24a15fa4b189a3e1e7efbaeeb00f39a51e99b26fc62fbacabd/argon2_cffi_bindings-21.2.0-cp36-abi3-win32.whl", hash = "sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082", size = 27698 },
    { url = "https://files.pythonhosted.org/packages/37/2c/e34e47c7dee97ba6f01a6203e0383e15b60fb85d78ac9a15cd066f6fe28b/argon2_cffi_bindings-21.2.0-cp36-abi3-win_amd64.whl", hash = "sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f", size = 30817 },
    { url = "https://files.pythonhosted.org/packages/5a/e4/bf8034d25edaa495da3c8a3405627d2e35758e44ff6eaa7948092646fdcc/argon2_cffi_bindings-21.2.0-cp38-abi3-macosx_10_9_universal2.whl", hash = "sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93", size = 53104 },
]

[[package]]
name = "arrow"
version = "1.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dateutil" },
    { name = "types-python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2e/00/0f6e8fcdb23ea632c866620cc872729ff43ed91d284c866b515c6342b173/arrow-1.3.0.tar.gz", hash = "sha256:d4540617648cb5f895730f1ad8c82a65f2dad0166f57b75f3ca54759c4d67a85", size = 131960 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f8/ed/e97229a566617f2ae958a6b13e7cc0f585470eac730a73e9e82c32a3cdd2/arrow-1.3.0-py3-none-any.whl", hash = "sha256:c728b120ebc00eb84e01882a6f5e7927a53960aa990ce7dd2b10f39005a67f80", size = 66419 },
]

[[package]]
name = "asttokens"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/4a/e7/82da0a03e7ba5141f05cce0d302e6eed121ae055e0456ca228bf693984bc/asttokens-3.0.0.tar.gz", hash = "sha256:0dcd8baa8d62b0c1d118b399b2ddba3c4aff271d0d7a9e0d4c1681c79035bbc7", size = 61978 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/25/8a/c46dcc25341b5bce5472c718902eb3d38600a903b14fa6aeecef3f21a46f/asttokens-3.0.0-py3-none-any.whl", hash = "sha256:e3078351a059199dd5138cb1c706e6430c05eff2ff136af5eb4790f9d28932e2", size = 26918 },
]

[[package]]
name = "async-lru"
version = "2.0.5"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b2/4d/71ec4d3939dc755264f680f6c2b4906423a304c3d18e96853f0a595dfe97/async_lru-2.0.5.tar.gz", hash = "sha256:481d52ccdd27275f42c43a928b4a50c3bfb2d67af4e78b170e3e0bb39c66e5bb", size = 10380 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/03/49/d10027df9fce941cb8184e78a02857af36360d33e1721df81c5ed2179a1a/async_lru-2.0.5-py3-none-any.whl", hash = "sha256:ab95404d8d2605310d345932697371a5f40def0487c03d6d0ad9138de52c9943", size = 6069 },
]

[[package]]
name = "async-timeout"
version = "5.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a5/ae/136395dfbfe00dfc94da3f3e136d0b13f394cba8f4841120e34226265780/async_timeout-5.0.1.tar.gz", hash = "sha256:d9321a7a3d5a6a5e187e824d2fa0793ce379a202935782d555d6e9d2735677d3", size = 9274 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fe/ba/e2081de779ca30d473f21f5b30e0e737c438205440784c7dfc81efc2b029/async_timeout-5.0.1-py3-none-any.whl", hash = "sha256:39e3809566ff85354557ec2398b55e096c8364bacac9405a7a1fa429e77fe76c", size = 6233 },
]

[[package]]
name = "attrs"
version = "25.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5a/b0/1367933a8532ee6ff8d63537de4f1177af4bff9f3e829baf7331f595bb24/attrs-25.3.0.tar.gz", hash = "sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b", size = 812032 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/77/06/bb80f5f86020c4551da315d78b3ab75e8228f89f0162f2c3a819e407941a/attrs-25.3.0-py3-none-any.whl", hash = "sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3", size = 63815 },
]

[[package]]
name = "babel"
version = "2.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7d/6b/d52e42361e1aa00709585ecc30b3f9684b3ab62530771402248b1b1d6240/babel-2.17.0.tar.gz", hash = "sha256:0c54cffb19f690cdcc52a3b50bcbf71e07a808d1c80d549f2459b9d2cf0afb9d", size = 9951852 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/b8/3fe70c75fe32afc4bb507f75563d39bc5642255d1d94f1f23604725780bf/babel-2.17.0-py3-none-any.whl", hash = "sha256:4d0b53093fdfb4b21c92b5213dba5a1b23885afa8383709427046b21c366e5f2", size = 10182537 },
]

[[package]]
name = "backoff"
version = "2.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/47/d7/5bbeb12c44d7c4f2fb5b56abce497eb5ed9f34d85701de869acedd602619/backoff-2.2.1.tar.gz", hash = "sha256:03f829f5bb1923180821643f8753b0502c3b682293992485b0eef2807afa5cba", size = 17001 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/df/73/b6e24bd22e6720ca8ee9a85a0c4a2971af8497d8f3193fa05390cbd46e09/backoff-2.2.1-py3-none-any.whl", hash = "sha256:63579f9a0628e06278f7e47b7d7d5b6ce20dc65c5e96a6f3ca99a6adca0396e8", size = 15148 },
]

[[package]]
name = "basedpyright"
version = "1.28.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "nodejs-wheel-binaries" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ce/43/7a85507882cfbda82b9003a849924dcb6f58ef74051c13f2dea9d1c30067/basedpyright-1.28.5.tar.gz", hash = "sha256:f2f13d1158c77edffe827b0a8366a8d6ec8c3a69aa9f4c938ec8fe6026d1e309", size = 21748156 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/77/57/8aabf496d7c9c22fe259494fddc28b130e8f5d099f41025e616139b80428/basedpyright-1.28.5-py3-none-any.whl", hash = "sha256:33dab5a88832c17dbce6207e2c9df244c227ad0bf71d7e38d8728a227244e980", size = 11387863 },
]

[[package]]
name = "beautifulsoup4"
version = "4.13.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "soupsieve" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f0/3c/adaf39ce1fb4afdd21b611e3d530b183bb7759c9b673d60db0e347fd4439/beautifulsoup4-4.13.3.tar.gz", hash = "sha256:1bd32405dacc920b42b83ba01644747ed77456a65760e285fbc47633ceddaf8b", size = 619516 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/49/6abb616eb3cbab6a7cca303dc02fdf3836de2e0b834bf966a7f5271a34d8/beautifulsoup4-4.13.3-py3-none-any.whl", hash = "sha256:99045d7d3f08f91f0d656bc9b7efbae189426cd913d830294a15eefa0ea4df16", size = 186015 },
]

[[package]]
name = "bleach"
version = "6.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "webencodings" },
]
sdist = { url = "https://files.pythonhosted.org/packages/76/9a/0e33f5054c54d349ea62c277191c020c2d6ef1d65ab2cb1993f91ec846d1/bleach-6.2.0.tar.gz", hash = "sha256:123e894118b8a599fd80d3ec1a6d4cc7ce4e5882b1317a7e1ba69b56e95f991f", size = 203083 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fc/55/96142937f66150805c25c4d0f31ee4132fd33497753400734f9dfdcbdc66/bleach-6.2.0-py3-none-any.whl", hash = "sha256:117d9c6097a7c3d22fd578fcd8d35ff1e125df6736f554da4e432fdd63f31e5e", size = 163406 },
]

[package.optional-dependencies]
css = [
    { name = "tinycss2" },
]

[[package]]
name = "blinker"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/21/28/9b3f50ce0e048515135495f198351908d99540d69bfdc8c1d15b73dc55ce/blinker-1.9.0.tar.gz", hash = "sha256:b4ce2265a7abece45e7cc896e98dbebe6cead56bcf805a3d23136d145f5445bf", size = 22460 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/10/cb/f2ad4230dc2eb1a74edf38f1a38b9b52277f75bef262d8908e60d957e13c/blinker-1.9.0-py3-none-any.whl", hash = "sha256:ba0efaa9080b619ff2f3459d1d500c57bddea4a6b424b60a91141db6fd2f08bc", size = 8458 },
]

[[package]]
name = "boto3"
version = "1.34.34"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "botocore" },
    { name = "jmespath" },
    { name = "s3transfer" },
]
sdist = { url = "https://files.pythonhosted.org/packages/50/a0/f332de5bc770ddbcbddc244a9ced5476ac2d105a14fbd867c62f702a73ee/boto3-1.34.34.tar.gz", hash = "sha256:b2f321e20966f021ec800b7f2c01287a3dd04fc5965acdfbaa9c505a24ca45d1", size = 108364 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0e/78/d505b8c71139d234e34df1c4a18d0567287494ce63f690337aa2af23219c/boto3-1.34.34-py3-none-any.whl", hash = "sha256:33a8b6d9136fa7427160edb92d2e50f2035f04e9d63a2d1027349053e12626aa", size = 139320 },
]

[[package]]
name = "botocore"
version = "1.34.162"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jmespath" },
    { name = "python-dateutil" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/22/de/17d672eac6725da49bd5832e3bd2f74c4d212311cd393fd56b59f51a4e86/botocore-1.34.162.tar.gz", hash = "sha256:adc23be4fb99ad31961236342b7cbf3c0bfc62532cd02852196032e8c0d682f3", size = 12676693 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bc/47/e35f788047c91110f48703a6254e5c84e33111b3291f7b57a653ca00accf/botocore-1.34.162-py3-none-any.whl", hash = "sha256:2d918b02db88d27a75b48275e6fb2506e9adaaddbec1ffa6a8a0898b34e769be", size = 12468049 },
]

[[package]]
name = "browser-use"
version = "0.1.40"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx" },
    { name = "langchain-anthropic" },
    { name = "langchain-core" },
    { name = "langchain-ollama" },
    { name = "langchain-openai" },
    { name = "markdownify" },
    { name = "playwright" },
    { name = "posthog" },
    { name = "pydantic" },
    { name = "python-dotenv" },
    { name = "requests" },
    { name = "setuptools" },
]
sdist = { url = "https://files.pythonhosted.org/packages/36/ff/3c2b0e0cc1deae97f8977526ae7ecbe9b1fe075638d91312504d98bed20e/browser_use-0.1.40.tar.gz", hash = "sha256:ddafcda30a9f9fe0f63612af5bf19a0ec03454d2774f54543eee70eef7ab369f", size = 1394511 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b8/29/2aedf2958334a86ed1f7ab111b18dfb69e94490314134f82c691e0060851/browser_use-0.1.40-py3-none-any.whl", hash = "sha256:8deb6846bec00819bf150808357406e7847204c383351147c1f3d261c1904fb9", size = 85510 },
]

[[package]]
name = "browserbase"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/74/fc/017c3150ba6ed7686376450438a8e5e929857472c6dc677c9b200128bf48/browserbase-1.2.0.tar.gz", hash = "sha256:44a1dbf2562893a8f9447c3d6de6fe72d3ae30fe743a5c2c52439928d0464a7b", size = 117806 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e7/49/501be83c5c86d1da4cab7ba8467aaa0e8f5f1b6c2e607bab73d4bbb7f118/browserbase-1.2.0-py3-none-any.whl", hash = "sha256:0b8d9429dea58f787b42b0109306f7a193770b78a24329ed13f50864debdf959", size = 95478 },
]

[[package]]
name = "browserforge"
version = "1.2.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
]
sdist = { url = "https://files.pythonhosted.org/packages/df/5c/fe4d8cc5d5e61a5b1585190bba19d25bb76c45fdfe9c7bf264f5301fcf33/browserforge-1.2.3.tar.gz", hash = "sha256:d5bec6dffd4748b30fbac9f9c1ef33b26c01a23185240bf90011843e174b7ecc", size = 38072 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8b/53/c60eb5bd26cf8689e361031bebc431437bc988555e80ba52d48c12c1d866/browserforge-1.2.3-py3-none-any.whl", hash = "sha256:a6c71ed4688b2f1b0bee757ca82ddad0007cbba68a71eca66ca607dde382f132", size = 39626 },
]

[[package]]
name = "cachetools"
version = "5.5.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6c/81/3747dad6b14fa2cf53fcf10548cf5aea6913e96fab41a3c198676f8948a5/cachetools-5.5.2.tar.gz", hash = "sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4", size = 28380 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/76/20fa66124dbe6be5cafeb312ece67de6b61dd91a0247d1ea13db4ebb33c2/cachetools-5.5.2-py3-none-any.whl", hash = "sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a", size = 10080 },
]

[[package]]
name = "camoufox"
version = "0.4.11"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "browserforge" },
    { name = "click" },
    { name = "language-tags" },
    { name = "lxml" },
    { name = "numpy" },
    { name = "orjson" },
    { name = "platformdirs" },
    { name = "playwright" },
    { name = "pysocks" },
    { name = "pyyaml" },
    { name = "requests" },
    { name = "screeninfo" },
    { name = "tqdm" },
    { name = "typing-extensions" },
    { name = "ua-parser" },
]
sdist = { url = "https://files.pythonhosted.org/packages/d3/15/e0a1b586e354ea6b8d6612717bf4372aaaa6753444d5d006caf0bb116466/camoufox-0.4.11.tar.gz", hash = "sha256:0a2c9d24ac5070c104e7c2b125c0a3937f70efa416084ef88afe94c32a72eebe", size = 64409 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c6/7b/a2f099a5afb9660271b3f20f6056ba679e7ab4eba42682266a65d5730f7e/camoufox-0.4.11-py3-none-any.whl", hash = "sha256:83864d434d159a7566990aa6524429a8d1a859cbf84d2f64ef4a9f29e7d2e5ff", size = 71628 },
]

[package.optional-dependencies]
geoip = [
    { name = "geoip2" },
]

[[package]]
name = "certifi"
version = "2025.1.31"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1c/ab/c9f1e32b7b1bf505bf26f0ef697775960db7932abeb7b516de930ba2705f/certifi-2025.1.31.tar.gz", hash = "sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651", size = 167577 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/38/fc/bce832fd4fd99766c04d1ee0eead6b0ec6486fb100ae5e74c1d91292b982/certifi-2025.1.31-py3-none-any.whl", hash = "sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe", size = 166393 },
]

[[package]]
name = "cffi"
version = "1.17.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pycparser" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/97/c783634659c2920c3fc70419e3af40972dbaf758daa229a7d6ea6135c90d/cffi-1.17.1.tar.gz", hash = "sha256:1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824", size = 516621 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6b/f4/927e3a8899e52a27fa57a48607ff7dc91a9ebe97399b357b85a0c7892e00/cffi-1.17.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:a45e3c6913c5b87b3ff120dcdc03f6131fa0065027d0ed7ee6190736a74cd401", size = 182264 },
    { url = "https://files.pythonhosted.org/packages/6c/f5/6c3a8efe5f503175aaddcbea6ad0d2c96dad6f5abb205750d1b3df44ef29/cffi-1.17.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:30c5e0cb5ae493c04c8b42916e52ca38079f1b235c2f8ae5f4527b963c401caf", size = 178651 },
    { url = "https://files.pythonhosted.org/packages/94/dd/a3f0118e688d1b1a57553da23b16bdade96d2f9bcda4d32e7d2838047ff7/cffi-1.17.1-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f75c7ab1f9e4aca5414ed4d8e5c0e303a34f4421f8a0d47a4d019ceff0ab6af4", size = 445259 },
    { url = "https://files.pythonhosted.org/packages/2e/ea/70ce63780f096e16ce8588efe039d3c4f91deb1dc01e9c73a287939c79a6/cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a1ed2dd2972641495a3ec98445e09766f077aee98a1c896dcb4ad0d303628e41", size = 469200 },
    { url = "https://files.pythonhosted.org/packages/1c/a0/a4fa9f4f781bda074c3ddd57a572b060fa0df7655d2a4247bbe277200146/cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:46bf43160c1a35f7ec506d254e5c890f3c03648a4dbac12d624e4490a7046cd1", size = 477235 },
    { url = "https://files.pythonhosted.org/packages/62/12/ce8710b5b8affbcdd5c6e367217c242524ad17a02fe5beec3ee339f69f85/cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a24ed04c8ffd54b0729c07cee15a81d964e6fee0e3d4d342a27b020d22959dc6", size = 459721 },
    { url = "https://files.pythonhosted.org/packages/ff/6b/d45873c5e0242196f042d555526f92aa9e0c32355a1be1ff8c27f077fd37/cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:610faea79c43e44c71e1ec53a554553fa22321b65fae24889706c0a84d4ad86d", size = 467242 },
    { url = "https://files.pythonhosted.org/packages/1a/52/d9a0e523a572fbccf2955f5abe883cfa8bcc570d7faeee06336fbd50c9fc/cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:a9b15d491f3ad5d692e11f6b71f7857e7835eb677955c00cc0aefcd0669adaf6", size = 477999 },
    { url = "https://files.pythonhosted.org/packages/44/74/f2a2460684a1a2d00ca799ad880d54652841a780c4c97b87754f660c7603/cffi-1.17.1-cp311-cp311-musllinux_1_1_i686.whl", hash = "sha256:de2ea4b5833625383e464549fec1bc395c1bdeeb5f25c4a3a82b5a8c756ec22f", size = 454242 },
    { url = "https://files.pythonhosted.org/packages/f8/4a/34599cac7dfcd888ff54e801afe06a19c17787dfd94495ab0c8d35fe99fb/cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b", size = 478604 },
    { url = "https://files.pythonhosted.org/packages/34/33/e1b8a1ba29025adbdcda5fb3a36f94c03d771c1b7b12f726ff7fef2ebe36/cffi-1.17.1-cp311-cp311-win32.whl", hash = "sha256:85a950a4ac9c359340d5963966e3e0a94a676bd6245a4b55bc43949eee26a655", size = 171727 },
    { url = "https://files.pythonhosted.org/packages/3d/97/50228be003bb2802627d28ec0627837ac0bf35c90cf769812056f235b2d1/cffi-1.17.1-cp311-cp311-win_amd64.whl", hash = "sha256:caaf0640ef5f5517f49bc275eca1406b0ffa6aa184892812030f04c2abf589a0", size = 181400 },
    { url = "https://files.pythonhosted.org/packages/5a/84/e94227139ee5fb4d600a7a4927f322e1d4aea6fdc50bd3fca8493caba23f/cffi-1.17.1-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:805b4371bf7197c329fcb3ead37e710d1bca9da5d583f5073b799d5c5bd1eee4", size = 183178 },
    { url = "https://files.pythonhosted.org/packages/da/ee/fb72c2b48656111c4ef27f0f91da355e130a923473bf5ee75c5643d00cca/cffi-1.17.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:733e99bc2df47476e3848417c5a4540522f234dfd4ef3ab7fafdf555b082ec0c", size = 178840 },
    { url = "https://files.pythonhosted.org/packages/cc/b6/db007700f67d151abadf508cbfd6a1884f57eab90b1bb985c4c8c02b0f28/cffi-1.17.1-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1257bdabf294dceb59f5e70c64a3e2f462c30c7ad68092d01bbbfb1c16b1ba36", size = 454803 },
    { url = "https://files.pythonhosted.org/packages/1a/df/f8d151540d8c200eb1c6fba8cd0dfd40904f1b0682ea705c36e6c2e97ab3/cffi-1.17.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:da95af8214998d77a98cc14e3a3bd00aa191526343078b530ceb0bd710fb48a5", size = 478850 },
    { url = "https://files.pythonhosted.org/packages/28/c0/b31116332a547fd2677ae5b78a2ef662dfc8023d67f41b2a83f7c2aa78b1/cffi-1.17.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d63afe322132c194cf832bfec0dc69a99fb9bb6bbd550f161a49e9e855cc78ff", size = 485729 },
    { url = "https://files.pythonhosted.org/packages/91/2b/9a1ddfa5c7f13cab007a2c9cc295b70fbbda7cb10a286aa6810338e60ea1/cffi-1.17.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f79fc4fc25f1c8698ff97788206bb3c2598949bfe0fef03d299eb1b5356ada99", size = 471256 },
    { url = "https://files.pythonhosted.org/packages/b2/d5/da47df7004cb17e4955df6a43d14b3b4ae77737dff8bf7f8f333196717bf/cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93", size = 479424 },
    { url = "https://files.pythonhosted.org/packages/0b/ac/2a28bcf513e93a219c8a4e8e125534f4f6db03e3179ba1c45e949b76212c/cffi-1.17.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:386c8bf53c502fff58903061338ce4f4950cbdcb23e2902d86c0f722b786bbe3", size = 484568 },
    { url = "https://files.pythonhosted.org/packages/d4/38/ca8a4f639065f14ae0f1d9751e70447a261f1a30fa7547a828ae08142465/cffi-1.17.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:4ceb10419a9adf4460ea14cfd6bc43d08701f0835e979bf821052f1805850fe8", size = 488736 },
    { url = "https://files.pythonhosted.org/packages/86/c5/28b2d6f799ec0bdecf44dced2ec5ed43e0eb63097b0f58c293583b406582/cffi-1.17.1-cp312-cp312-win32.whl", hash = "sha256:a08d7e755f8ed21095a310a693525137cfe756ce62d066e53f502a83dc550f65", size = 172448 },
    { url = "https://files.pythonhosted.org/packages/50/b9/db34c4755a7bd1cb2d1603ac3863f22bcecbd1ba29e5ee841a4bc510b294/cffi-1.17.1-cp312-cp312-win_amd64.whl", hash = "sha256:51392eae71afec0d0c8fb1a53b204dbb3bcabcb3c9b807eedf3e1e6ccf2de903", size = 181976 },
    { url = "https://files.pythonhosted.org/packages/8d/f8/dd6c246b148639254dad4d6803eb6a54e8c85c6e11ec9df2cffa87571dbe/cffi-1.17.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:f3a2b4222ce6b60e2e8b337bb9596923045681d71e5a082783484d845390938e", size = 182989 },
    { url = "https://files.pythonhosted.org/packages/8b/f1/672d303ddf17c24fc83afd712316fda78dc6fce1cd53011b839483e1ecc8/cffi-1.17.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0984a4925a435b1da406122d4d7968dd861c1385afe3b45ba82b750f229811e2", size = 178802 },
    { url = "https://files.pythonhosted.org/packages/0e/2d/eab2e858a91fdff70533cab61dcff4a1f55ec60425832ddfdc9cd36bc8af/cffi-1.17.1-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d01b12eeeb4427d3110de311e1774046ad344f5b1a7403101878976ecd7a10f3", size = 454792 },
    { url = "https://files.pythonhosted.org/packages/75/b2/fbaec7c4455c604e29388d55599b99ebcc250a60050610fadde58932b7ee/cffi-1.17.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:706510fe141c86a69c8ddc029c7910003a17353970cff3b904ff0686a5927683", size = 478893 },
    { url = "https://files.pythonhosted.org/packages/4f/b7/6e4a2162178bf1935c336d4da8a9352cccab4d3a5d7914065490f08c0690/cffi-1.17.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:de55b766c7aa2e2a3092c51e0483d700341182f08e67c63630d5b6f200bb28e5", size = 485810 },
    { url = "https://files.pythonhosted.org/packages/c7/8a/1d0e4a9c26e54746dc08c2c6c037889124d4f59dffd853a659fa545f1b40/cffi-1.17.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c59d6e989d07460165cc5ad3c61f9fd8f1b4796eacbd81cee78957842b834af4", size = 471200 },
    { url = "https://files.pythonhosted.org/packages/26/9f/1aab65a6c0db35f43c4d1b4f580e8df53914310afc10ae0397d29d697af4/cffi-1.17.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:dd398dbc6773384a17fe0d3e7eeb8d1a21c2200473ee6806bb5e6a8e62bb73dd", size = 479447 },
    { url = "https://files.pythonhosted.org/packages/5f/e4/fb8b3dd8dc0e98edf1135ff067ae070bb32ef9d509d6cb0f538cd6f7483f/cffi-1.17.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:3edc8d958eb099c634dace3c7e16560ae474aa3803a5df240542b305d14e14ed", size = 484358 },
    { url = "https://files.pythonhosted.org/packages/f1/47/d7145bf2dc04684935d57d67dff9d6d795b2ba2796806bb109864be3a151/cffi-1.17.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:72e72408cad3d5419375fc87d289076ee319835bdfa2caad331e377589aebba9", size = 488469 },
    { url = "https://files.pythonhosted.org/packages/bf/ee/f94057fa6426481d663b88637a9a10e859e492c73d0384514a17d78ee205/cffi-1.17.1-cp313-cp313-win32.whl", hash = "sha256:e03eab0a8677fa80d646b5ddece1cbeaf556c313dcfac435ba11f107ba117b5d", size = 172475 },
    { url = "https://files.pythonhosted.org/packages/7c/fc/6a8cb64e5f0324877d503c854da15d76c1e50eb722e320b15345c4d0c6de/cffi-1.17.1-cp313-cp313-win_amd64.whl", hash = "sha256:f6a16c31041f09ead72d69f583767292f750d24913dadacf5756b966aacb3f1a", size = 182009 },
]

[[package]]
name = "cfgv"
version = "3.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/11/74/539e56497d9bd1d484fd863dd69cbbfa653cd2aa27abfe35653494d85e94/cfgv-3.4.0.tar.gz", hash = "sha256:e52591d4c5f5dead8e0f673fb16db7949d2cfb3f7da4582893288f0ded8fe560", size = 7114 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c5/55/51844dd50c4fc7a33b653bfaba4c2456f06955289ca770a5dbd5fd267374/cfgv-3.4.0-py2.py3-none-any.whl", hash = "sha256:b7265b1f29fd3316bfcd2b330d63d024f2bfd8bcb8b0272f8e19a504856c48f9", size = 7249 },
]

[[package]]
name = "charset-normalizer"
version = "3.4.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/16/b0/572805e227f01586461c80e0fd25d65a2115599cc9dad142fee4b747c357/charset_normalizer-3.4.1.tar.gz", hash = "sha256:44251f18cd68a75b56585dd00dae26183e102cd5e0f9f1466e6df5da2ed64ea3", size = 123188 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/80/41ef5d5a7935d2d3a773e3eaebf0a9350542f2cab4eac59a7a4741fbbbbe/charset_normalizer-3.4.1-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:8bfa33f4f2672964266e940dd22a195989ba31669bd84629f05fab3ef4e2d125", size = 194995 },
    { url = "https://files.pythonhosted.org/packages/7a/28/0b9fefa7b8b080ec492110af6d88aa3dea91c464b17d53474b6e9ba5d2c5/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:28bf57629c75e810b6ae989f03c0828d64d6b26a5e205535585f96093e405ed1", size = 139471 },
    { url = "https://files.pythonhosted.org/packages/71/64/d24ab1a997efb06402e3fc07317e94da358e2585165930d9d59ad45fcae2/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f08ff5e948271dc7e18a35641d2f11a4cd8dfd5634f55228b691e62b37125eb3", size = 149831 },
    { url = "https://files.pythonhosted.org/packages/37/ed/be39e5258e198655240db5e19e0b11379163ad7070962d6b0c87ed2c4d39/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:234ac59ea147c59ee4da87a0c0f098e9c8d169f4dc2a159ef720f1a61bbe27cd", size = 142335 },
    { url = "https://files.pythonhosted.org/packages/88/83/489e9504711fa05d8dde1574996408026bdbdbd938f23be67deebb5eca92/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fd4ec41f914fa74ad1b8304bbc634b3de73d2a0889bd32076342a573e0779e00", size = 143862 },
    { url = "https://files.pythonhosted.org/packages/c6/c7/32da20821cf387b759ad24627a9aca289d2822de929b8a41b6241767b461/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:eea6ee1db730b3483adf394ea72f808b6e18cf3cb6454b4d86e04fa8c4327a12", size = 145673 },
    { url = "https://files.pythonhosted.org/packages/68/85/f4288e96039abdd5aeb5c546fa20a37b50da71b5cf01e75e87f16cd43304/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:c96836c97b1238e9c9e3fe90844c947d5afbf4f4c92762679acfe19927d81d77", size = 140211 },
    { url = "https://files.pythonhosted.org/packages/28/a3/a42e70d03cbdabc18997baf4f0227c73591a08041c149e710045c281f97b/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:4d86f7aff21ee58f26dcf5ae81a9addbd914115cdebcbb2217e4f0ed8982e146", size = 148039 },
    { url = "https://files.pythonhosted.org/packages/85/e4/65699e8ab3014ecbe6f5c71d1a55d810fb716bbfd74f6283d5c2aa87febf/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:09b5e6733cbd160dcc09589227187e242a30a49ca5cefa5a7edd3f9d19ed53fd", size = 151939 },
    { url = "https://files.pythonhosted.org/packages/b1/82/8e9fe624cc5374193de6860aba3ea8070f584c8565ee77c168ec13274bd2/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:5777ee0881f9499ed0f71cc82cf873d9a0ca8af166dfa0af8ec4e675b7df48e6", size = 149075 },
    { url = "https://files.pythonhosted.org/packages/3d/7b/82865ba54c765560c8433f65e8acb9217cb839a9e32b42af4aa8e945870f/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:237bdbe6159cff53b4f24f397d43c6336c6b0b42affbe857970cefbb620911c8", size = 144340 },
    { url = "https://files.pythonhosted.org/packages/b5/b6/9674a4b7d4d99a0d2df9b215da766ee682718f88055751e1e5e753c82db0/charset_normalizer-3.4.1-cp311-cp311-win32.whl", hash = "sha256:8417cb1f36cc0bc7eaba8ccb0e04d55f0ee52df06df3ad55259b9a323555fc8b", size = 95205 },
    { url = "https://files.pythonhosted.org/packages/1e/ab/45b180e175de4402dcf7547e4fb617283bae54ce35c27930a6f35b6bef15/charset_normalizer-3.4.1-cp311-cp311-win_amd64.whl", hash = "sha256:d7f50a1f8c450f3925cb367d011448c39239bb3eb4117c36a6d354794de4ce76", size = 102441 },
    { url = "https://files.pythonhosted.org/packages/0a/9a/dd1e1cdceb841925b7798369a09279bd1cf183cef0f9ddf15a3a6502ee45/charset_normalizer-3.4.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:73d94b58ec7fecbc7366247d3b0b10a21681004153238750bb67bd9012414545", size = 196105 },
    { url = "https://files.pythonhosted.org/packages/d3/8c/90bfabf8c4809ecb648f39794cf2a84ff2e7d2a6cf159fe68d9a26160467/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dad3e487649f498dd991eeb901125411559b22e8d7ab25d3aeb1af367df5efd7", size = 140404 },
    { url = "https://files.pythonhosted.org/packages/ad/8f/e410d57c721945ea3b4f1a04b74f70ce8fa800d393d72899f0a40526401f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c30197aa96e8eed02200a83fba2657b4c3acd0f0aa4bdc9f6c1af8e8962e0757", size = 150423 },
    { url = "https://files.pythonhosted.org/packages/f0/b8/e6825e25deb691ff98cf5c9072ee0605dc2acfca98af70c2d1b1bc75190d/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2369eea1ee4a7610a860d88f268eb39b95cb588acd7235e02fd5a5601773d4fa", size = 143184 },
    { url = "https://files.pythonhosted.org/packages/3e/a2/513f6cbe752421f16d969e32f3583762bfd583848b763913ddab8d9bfd4f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bc2722592d8998c870fa4e290c2eec2c1569b87fe58618e67d38b4665dfa680d", size = 145268 },
    { url = "https://files.pythonhosted.org/packages/74/94/8a5277664f27c3c438546f3eb53b33f5b19568eb7424736bdc440a88a31f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ffc9202a29ab3920fa812879e95a9e78b2465fd10be7fcbd042899695d75e616", size = 147601 },
    { url = "https://files.pythonhosted.org/packages/7c/5f/6d352c51ee763623a98e31194823518e09bfa48be2a7e8383cf691bbb3d0/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:804a4d582ba6e5b747c625bf1255e6b1507465494a40a2130978bda7b932c90b", size = 141098 },
    { url = "https://files.pythonhosted.org/packages/78/d4/f5704cb629ba5ab16d1d3d741396aec6dc3ca2b67757c45b0599bb010478/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:0f55e69f030f7163dffe9fd0752b32f070566451afe180f99dbeeb81f511ad8d", size = 149520 },
    { url = "https://files.pythonhosted.org/packages/c5/96/64120b1d02b81785f222b976c0fb79a35875457fa9bb40827678e54d1bc8/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c4c3e6da02df6fa1410a7680bd3f63d4f710232d3139089536310d027950696a", size = 152852 },
    { url = "https://files.pythonhosted.org/packages/84/c9/98e3732278a99f47d487fd3468bc60b882920cef29d1fa6ca460a1fdf4e6/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:5df196eb874dae23dcfb968c83d4f8fdccb333330fe1fc278ac5ceeb101003a9", size = 150488 },
    { url = "https://files.pythonhosted.org/packages/13/0e/9c8d4cb99c98c1007cc11eda969ebfe837bbbd0acdb4736d228ccaabcd22/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e358e64305fe12299a08e08978f51fc21fac060dcfcddd95453eabe5b93ed0e1", size = 146192 },
    { url = "https://files.pythonhosted.org/packages/b2/21/2b6b5b860781a0b49427309cb8670785aa543fb2178de875b87b9cc97746/charset_normalizer-3.4.1-cp312-cp312-win32.whl", hash = "sha256:9b23ca7ef998bc739bf6ffc077c2116917eabcc901f88da1b9856b210ef63f35", size = 95550 },
    { url = "https://files.pythonhosted.org/packages/21/5b/1b390b03b1d16c7e382b561c5329f83cc06623916aab983e8ab9239c7d5c/charset_normalizer-3.4.1-cp312-cp312-win_amd64.whl", hash = "sha256:6ff8a4a60c227ad87030d76e99cd1698345d4491638dfa6673027c48b3cd395f", size = 102785 },
    { url = "https://files.pythonhosted.org/packages/38/94/ce8e6f63d18049672c76d07d119304e1e2d7c6098f0841b51c666e9f44a0/charset_normalizer-3.4.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:aabfa34badd18f1da5ec1bc2715cadc8dca465868a4e73a0173466b688f29dda", size = 195698 },
    { url = "https://files.pythonhosted.org/packages/24/2e/dfdd9770664aae179a96561cc6952ff08f9a8cd09a908f259a9dfa063568/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:22e14b5d70560b8dd51ec22863f370d1e595ac3d024cb8ad7d308b4cd95f8313", size = 140162 },
    { url = "https://files.pythonhosted.org/packages/24/4e/f646b9093cff8fc86f2d60af2de4dc17c759de9d554f130b140ea4738ca6/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8436c508b408b82d87dc5f62496973a1805cd46727c34440b0d29d8a2f50a6c9", size = 150263 },
    { url = "https://files.pythonhosted.org/packages/5e/67/2937f8d548c3ef6e2f9aab0f6e21001056f692d43282b165e7c56023e6dd/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2d074908e1aecee37a7635990b2c6d504cd4766c7bc9fc86d63f9c09af3fa11b", size = 142966 },
    { url = "https://files.pythonhosted.org/packages/52/ed/b7f4f07de100bdb95c1756d3a4d17b90c1a3c53715c1a476f8738058e0fa/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:955f8851919303c92343d2f66165294848d57e9bba6cf6e3625485a70a038d11", size = 144992 },
    { url = "https://files.pythonhosted.org/packages/96/2c/d49710a6dbcd3776265f4c923bb73ebe83933dfbaa841c5da850fe0fd20b/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:44ecbf16649486d4aebafeaa7ec4c9fed8b88101f4dd612dcaf65d5e815f837f", size = 147162 },
    { url = "https://files.pythonhosted.org/packages/b4/41/35ff1f9a6bd380303dea55e44c4933b4cc3c4850988927d4082ada230273/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0924e81d3d5e70f8126529951dac65c1010cdf117bb75eb02dd12339b57749dd", size = 140972 },
    { url = "https://files.pythonhosted.org/packages/fb/43/c6a0b685fe6910d08ba971f62cd9c3e862a85770395ba5d9cad4fede33ab/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:2967f74ad52c3b98de4c3b32e1a44e32975e008a9cd2a8cc8966d6a5218c5cb2", size = 149095 },
    { url = "https://files.pythonhosted.org/packages/4c/ff/a9a504662452e2d2878512115638966e75633519ec11f25fca3d2049a94a/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:c75cb2a3e389853835e84a2d8fb2b81a10645b503eca9bcb98df6b5a43eb8886", size = 152668 },
    { url = "https://files.pythonhosted.org/packages/6c/71/189996b6d9a4b932564701628af5cee6716733e9165af1d5e1b285c530ed/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:09b26ae6b1abf0d27570633b2b078a2a20419c99d66fb2823173d73f188ce601", size = 150073 },
    { url = "https://files.pythonhosted.org/packages/e4/93/946a86ce20790e11312c87c75ba68d5f6ad2208cfb52b2d6a2c32840d922/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fa88b843d6e211393a37219e6a1c1df99d35e8fd90446f1118f4216e307e48cd", size = 145732 },
    { url = "https://files.pythonhosted.org/packages/cd/e5/131d2fb1b0dddafc37be4f3a2fa79aa4c037368be9423061dccadfd90091/charset_normalizer-3.4.1-cp313-cp313-win32.whl", hash = "sha256:eb8178fe3dba6450a3e024e95ac49ed3400e506fd4e9e5c32d30adda88cbd407", size = 95391 },
    { url = "https://files.pythonhosted.org/packages/27/f2/4f9a69cc7712b9b5ad8fdb87039fd89abba997ad5cbe690d1835d40405b0/charset_normalizer-3.4.1-cp313-cp313-win_amd64.whl", hash = "sha256:b1ac5992a838106edb89654e0aebfc24f5848ae2547d22c2c3f66454daa11971", size = 102702 },
    { url = "https://files.pythonhosted.org/packages/0e/f6/65ecc6878a89bb1c23a086ea335ad4bf21a588990c3f535a227b9eea9108/charset_normalizer-3.4.1-py3-none-any.whl", hash = "sha256:d98b1668f06378c6dbefec3b92299716b931cd4e6061f3c875a71ced1780ab85", size = 49767 },
]

[[package]]
name = "chevron"
version = "0.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/15/1f/ca74b65b19798895d63a6e92874162f44233467c9e7c1ed8afd19016ebe9/chevron-0.14.0.tar.gz", hash = "sha256:87613aafdf6d77b6a90ff073165a61ae5086e21ad49057aa0e53681601800ebf", size = 11440 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/52/93/342cc62a70ab727e093ed98e02a725d85b746345f05d2b5e5034649f4ec8/chevron-0.14.0-py3-none-any.whl", hash = "sha256:fbf996a709f8da2e745ef763f482ce2d311aa817d287593a5b990d6d6e4f0443", size = 11595 },
]

[[package]]
name = "click"
version = "8.1.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b9/2e/0090cbf739cee7d23781ad4b89a9894a41538e4fcf4c31dcdd705b78eb8b/click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a", size = 226593 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/d4/7ebdbd03970677812aac39c869717059dbb71a4cfc033ca6e5221787892c/click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2", size = 98188 },
]

[[package]]
name = "cloudpickle"
version = "3.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/52/39/069100b84d7418bc358d81669d5748efb14b9cceacd2f9c75f550424132f/cloudpickle-3.1.1.tar.gz", hash = "sha256:b216fa8ae4019d5482a8ac3c95d8f6346115d8835911fd4aefd1a445e4242c64", size = 22113 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/e8/64c37fadfc2816a7701fa8a6ed8d87327c7d54eacfbfb6edab14a2f2be75/cloudpickle-3.1.1-py3-none-any.whl", hash = "sha256:c8c5a44295039331ee9dad40ba100a9c7297b6f988e50e87ccdf3765a668350e", size = 20992 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "comm"
version = "0.2.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e9/a8/fb783cb0abe2b5fded9f55e5703015cdf1c9c85b3669087c538dd15a6a86/comm-0.2.2.tar.gz", hash = "sha256:3fd7a84065306e07bea1773df6eb8282de51ba82f77c72f9c85716ab11fe980e", size = 6210 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e6/75/49e5bfe642f71f272236b5b2d2691cf915a7283cc0ceda56357b61daa538/comm-0.2.2-py3-none-any.whl", hash = "sha256:e6fb86cb70ff661ee8c9c14e7d36d6de3b4066f1441be4063df9c5009f0a64d3", size = 7180 },
]

[[package]]
name = "courlan"
version = "1.3.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "babel" },
    { name = "tld" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6f/54/6d6ceeff4bed42e7a10d6064d35ee43a810e7b3e8beb4abeae8cff4713ae/courlan-1.3.2.tar.gz", hash = "sha256:0b66f4db3a9c39a6e22dd247c72cfaa57d68ea660e94bb2c84ec7db8712af190", size = 206382 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8e/ca/6a667ccbe649856dcd3458bab80b016681b274399d6211187c6ab969fc50/courlan-1.3.2-py3-none-any.whl", hash = "sha256:d0dab52cf5b5b1000ee2839fbc2837e93b2514d3cb5bb61ae158a55b7a04c6be", size = 33848 },
]

[[package]]
name = "cryptography"
version = "43.0.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi", marker = "platform_python_implementation != 'PyPy'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/0d/05/07b55d1fa21ac18c3a8c79f764e2514e6f6a9698f1be44994f5adf0d29db/cryptography-43.0.3.tar.gz", hash = "sha256:315b9001266a492a6ff443b61238f956b214dbec9910a081ba5b6646a055a805", size = 686989 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/1f/f3/01fdf26701a26f4b4dbc337a26883ad5bccaa6f1bbbdd29cd89e22f18a1c/cryptography-43.0.3-cp37-abi3-macosx_10_9_universal2.whl", hash = "sha256:bf7a1932ac4176486eab36a19ed4c0492da5d97123f1406cf15e41b05e787d2e", size = 6225303 },
    { url = "https://files.pythonhosted.org/packages/a3/01/4896f3d1b392025d4fcbecf40fdea92d3df8662123f6835d0af828d148fd/cryptography-43.0.3-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:63efa177ff54aec6e1c0aefaa1a241232dcd37413835a9b674b6e3f0ae2bfd3e", size = 3760905 },
    { url = "https://files.pythonhosted.org/packages/0a/be/f9a1f673f0ed4b7f6c643164e513dbad28dd4f2dcdf5715004f172ef24b6/cryptography-43.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7e1ce50266f4f70bf41a2c6dc4358afadae90e2a1e5342d3c08883df1675374f", size = 3977271 },
    { url = "https://files.pythonhosted.org/packages/4e/49/80c3a7b5514d1b416d7350830e8c422a4d667b6d9b16a9392ebfd4a5388a/cryptography-43.0.3-cp37-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:443c4a81bb10daed9a8f334365fe52542771f25aedaf889fd323a853ce7377d6", size = 3746606 },
    { url = "https://files.pythonhosted.org/packages/0e/16/a28ddf78ac6e7e3f25ebcef69ab15c2c6be5ff9743dd0709a69a4f968472/cryptography-43.0.3-cp37-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:74f57f24754fe349223792466a709f8e0c093205ff0dca557af51072ff47ab18", size = 3986484 },
    { url = "https://files.pythonhosted.org/packages/01/f5/69ae8da70c19864a32b0315049866c4d411cce423ec169993d0434218762/cryptography-43.0.3-cp37-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:9762ea51a8fc2a88b70cf2995e5675b38d93bf36bd67d91721c309df184f49bd", size = 3852131 },
    { url = "https://files.pythonhosted.org/packages/fd/db/e74911d95c040f9afd3612b1f732e52b3e517cb80de8bf183be0b7d413c6/cryptography-43.0.3-cp37-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:81ef806b1fef6b06dcebad789f988d3b37ccaee225695cf3e07648eee0fc6b73", size = 4075647 },
    { url = "https://files.pythonhosted.org/packages/56/48/7b6b190f1462818b324e674fa20d1d5ef3e24f2328675b9b16189cbf0b3c/cryptography-43.0.3-cp37-abi3-win32.whl", hash = "sha256:cbeb489927bd7af4aa98d4b261af9a5bc025bd87f0e3547e11584be9e9427be2", size = 2623873 },
    { url = "https://files.pythonhosted.org/packages/eb/b1/0ebff61a004f7f89e7b65ca95f2f2375679d43d0290672f7713ee3162aff/cryptography-43.0.3-cp37-abi3-win_amd64.whl", hash = "sha256:f46304d6f0c6ab8e52770addfa2fc41e6629495548862279641972b6215451cd", size = 3068039 },
    { url = "https://files.pythonhosted.org/packages/30/d5/c8b32c047e2e81dd172138f772e81d852c51f0f2ad2ae8a24f1122e9e9a7/cryptography-43.0.3-cp39-abi3-macosx_10_9_universal2.whl", hash = "sha256:8ac43ae87929a5982f5948ceda07001ee5e83227fd69cf55b109144938d96984", size = 6222984 },
    { url = "https://files.pythonhosted.org/packages/2f/78/55356eb9075d0be6e81b59f45c7b48df87f76a20e73893872170471f3ee8/cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:846da004a5804145a5f441b8530b4bf35afbf7da70f82409f151695b127213d5", size = 3762968 },
    { url = "https://files.pythonhosted.org/packages/2a/2c/488776a3dc843f95f86d2f957ca0fc3407d0242b50bede7fad1e339be03f/cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4", size = 3977754 },
    { url = "https://files.pythonhosted.org/packages/7c/04/2345ca92f7a22f601a9c62961741ef7dd0127c39f7310dffa0041c80f16f/cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:f7b178f11ed3664fd0e995a47ed2b5ff0a12d893e41dd0494f406d1cf555cab7", size = 3749458 },
    { url = "https://files.pythonhosted.org/packages/ac/25/e715fa0bc24ac2114ed69da33adf451a38abb6f3f24ec207908112e9ba53/cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405", size = 3988220 },
    { url = "https://files.pythonhosted.org/packages/21/ce/b9c9ff56c7164d8e2edfb6c9305045fbc0df4508ccfdb13ee66eb8c95b0e/cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:e1be4655c7ef6e1bbe6b5d0403526601323420bcf414598955968c9ef3eb7d16", size = 3853898 },
    { url = "https://files.pythonhosted.org/packages/2a/33/b3682992ab2e9476b9c81fff22f02c8b0a1e6e1d49ee1750a67d85fd7ed2/cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:df6b6c6d742395dd77a23ea3728ab62f98379eff8fb61be2744d4679ab678f73", size = 4076592 },
    { url = "https://files.pythonhosted.org/packages/81/1e/ffcc41b3cebd64ca90b28fd58141c5f68c83d48563c88333ab660e002cd3/cryptography-43.0.3-cp39-abi3-win32.whl", hash = "sha256:d56e96520b1020449bbace2b78b603442e7e378a9b3bd68de65c782db1507995", size = 2623145 },
    { url = "https://files.pythonhosted.org/packages/87/5c/3dab83cc4aba1f4b0e733e3f0c3e7d4386440d660ba5b1e3ff995feb734d/cryptography-43.0.3-cp39-abi3-win_amd64.whl", hash = "sha256:0c580952eef9bf68c4747774cde7ec1d85a6e61de97281f2dba83c7d2c806362", size = 3068026 },
]

[[package]]
name = "cython"
version = "3.0.12"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5a/25/886e197c97a4b8e254173002cdc141441e878ff29aaa7d9ba560cd6e4866/cython-3.0.12.tar.gz", hash = "sha256:b988bb297ce76c671e28c97d017b95411010f7c77fa6623dd0bb47eed1aee1bc", size = 2757617 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/60/3d27abd940f7b80a6aeb69dc093a892f04828e1dd0b243dd81ff87d7b0e9/Cython-3.0.12-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:feb86122a823937cc06e4c029d80ff69f082ebb0b959ab52a5af6cdd271c5dc3", size = 3277430 },
    { url = "https://files.pythonhosted.org/packages/e6/6c/3be501a6520a93449b1e7e6f63e598ec56f3b5d1bc7ad14167c72a22ddf7/Cython-3.0.12-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:fe030d4a00afb2844f5f70896b7f2a1a0d7da09bf3aa3d884cbe5f73fff5d310", size = 3311717 },
    { url = "https://files.pythonhosted.org/packages/67/ad/550ddcb8b5a5d9949fe6606595cce36984c1d42309f1e04af98f5933a7ea/Cython-3.0.12-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4ee6f1ea1bead8e6cbc4e64571505b5d8dbdb3b58e679d31f3a84160cebf1a1a", size = 3393574 },
    { url = "https://files.pythonhosted.org/packages/27/6b/7c87867d255cbce8167ed99fc65635e9395d2af0f0c915428f5b17ec412d/Cython-3.0.12-py2.py3-none-any.whl", hash = "sha256:0038c9bae46c459669390e53a1ec115f8096b2e4647ae007ff1bf4e6dee92806", size = 1171640 },
]

[[package]]
name = "dateparser"
version = "1.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dateutil" },
    { name = "pytz" },
    { name = "regex" },
    { name = "tzlocal" },
]
sdist = { url = "https://files.pythonhosted.org/packages/bd/3f/d3207a05f5b6a78c66d86631e60bfba5af163738a599a5b9aa2c2737a09e/dateparser-1.2.1.tar.gz", hash = "sha256:7e4919aeb48481dbfc01ac9683c8e20bfe95bb715a38c1e9f6af889f4f30ccc3", size = 309924 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cf/0a/981c438c4cd84147c781e4e96c1d72df03775deb1bc76c5a6ee8afa89c62/dateparser-1.2.1-py3-none-any.whl", hash = "sha256:bdcac262a467e6260030040748ad7c10d6bacd4f3b9cdb4cfd2251939174508c", size = 295658 },
]

[[package]]
name = "debugpy"
version = "1.8.14"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bd/75/087fe07d40f490a78782ff3b0a30e3968936854105487decdb33446d4b0e/debugpy-1.8.14.tar.gz", hash = "sha256:7cd287184318416850aa8b60ac90105837bb1e59531898c07569d197d2ed5322", size = 1641444 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/e8/57fe0c86915671fd6a3d2d8746e40485fd55e8d9e682388fbb3a3d42b86f/debugpy-1.8.14-cp311-cp311-macosx_14_0_universal2.whl", hash = "sha256:1b2ac8c13b2645e0b1eaf30e816404990fbdb168e193322be8f545e8c01644a9", size = 2175064 },
    { url = "https://files.pythonhosted.org/packages/3b/97/2b2fd1b1c9569c6764ccdb650a6f752e4ac31be465049563c9eb127a8487/debugpy-1.8.14-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:cf431c343a99384ac7eab2f763980724834f933a271e90496944195318c619e2", size = 3132359 },
    { url = "https://files.pythonhosted.org/packages/c0/ee/b825c87ed06256ee2a7ed8bab8fb3bb5851293bf9465409fdffc6261c426/debugpy-1.8.14-cp311-cp311-win32.whl", hash = "sha256:c99295c76161ad8d507b413cd33422d7c542889fbb73035889420ac1fad354f2", size = 5133269 },
    { url = "https://files.pythonhosted.org/packages/d5/a6/6c70cd15afa43d37839d60f324213843174c1d1e6bb616bd89f7c1341bac/debugpy-1.8.14-cp311-cp311-win_amd64.whl", hash = "sha256:7816acea4a46d7e4e50ad8d09d963a680ecc814ae31cdef3622eb05ccacf7b01", size = 5158156 },
    { url = "https://files.pythonhosted.org/packages/d9/2a/ac2df0eda4898f29c46eb6713a5148e6f8b2b389c8ec9e425a4a1d67bf07/debugpy-1.8.14-cp312-cp312-macosx_14_0_universal2.whl", hash = "sha256:8899c17920d089cfa23e6005ad9f22582fd86f144b23acb9feeda59e84405b84", size = 2501268 },
    { url = "https://files.pythonhosted.org/packages/10/53/0a0cb5d79dd9f7039169f8bf94a144ad3efa52cc519940b3b7dde23bcb89/debugpy-1.8.14-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f6bb5c0dcf80ad5dbc7b7d6eac484e2af34bdacdf81df09b6a3e62792b722826", size = 4221077 },
    { url = "https://files.pythonhosted.org/packages/f8/d5/84e01821f362327bf4828728aa31e907a2eca7c78cd7c6ec062780d249f8/debugpy-1.8.14-cp312-cp312-win32.whl", hash = "sha256:281d44d248a0e1791ad0eafdbbd2912ff0de9eec48022a5bfbc332957487ed3f", size = 5255127 },
    { url = "https://files.pythonhosted.org/packages/33/16/1ed929d812c758295cac7f9cf3dab5c73439c83d9091f2d91871e648093e/debugpy-1.8.14-cp312-cp312-win_amd64.whl", hash = "sha256:5aa56ef8538893e4502a7d79047fe39b1dae08d9ae257074c6464a7b290b806f", size = 5297249 },
    { url = "https://files.pythonhosted.org/packages/4d/e4/395c792b243f2367d84202dc33689aa3d910fb9826a7491ba20fc9e261f5/debugpy-1.8.14-cp313-cp313-macosx_14_0_universal2.whl", hash = "sha256:329a15d0660ee09fec6786acdb6e0443d595f64f5d096fc3e3ccf09a4259033f", size = 2485676 },
    { url = "https://files.pythonhosted.org/packages/ba/f1/6f2ee3f991327ad9e4c2f8b82611a467052a0fb0e247390192580e89f7ff/debugpy-1.8.14-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0f920c7f9af409d90f5fd26e313e119d908b0dd2952c2393cd3247a462331f15", size = 4217514 },
    { url = "https://files.pythonhosted.org/packages/79/28/b9d146f8f2dc535c236ee09ad3e5ac899adb39d7a19b49f03ac95d216beb/debugpy-1.8.14-cp313-cp313-win32.whl", hash = "sha256:3784ec6e8600c66cbdd4ca2726c72d8ca781e94bce2f396cc606d458146f8f4e", size = 5254756 },
    { url = "https://files.pythonhosted.org/packages/e0/62/a7b4a57013eac4ccaef6977966e6bec5c63906dd25a86e35f155952e29a1/debugpy-1.8.14-cp313-cp313-win_amd64.whl", hash = "sha256:684eaf43c95a3ec39a96f1f5195a7ff3d4144e4a18d69bb66beeb1a6de605d6e", size = 5297119 },
    { url = "https://files.pythonhosted.org/packages/97/1a/481f33c37ee3ac8040d3d51fc4c4e4e7e61cb08b8bc8971d6032acc2279f/debugpy-1.8.14-py2.py3-none-any.whl", hash = "sha256:5cd9a579d553b6cb9759a7908a41988ee6280b961f24f63336835d9418216a20", size = 5256230 },
]

[[package]]
name = "decorator"
version = "5.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/fa/6d96a0978d19e17b68d634497769987b16c8f4cd0a7a05048bec693caa6b/decorator-5.2.1.tar.gz", hash = "sha256:65f266143752f734b0a7cc83c46f4618af75b8c5911b00ccb61d0ac9b6da0360", size = 56711 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/8c/f3147f5c4b73e7550fe5f9352eaa956ae838d5c51eb58e7a25b9f3e2643b/decorator-5.2.1-py3-none-any.whl", hash = "sha256:d316bb415a2d9e2d2b3abcc4084c6502fc09240e292cd76a76afc106a1c8e04a", size = 9190 },
]

[[package]]
name = "defusedxml"
version = "0.7.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0f/d5/c66da9b79e5bdb124974bfe172b4daf3c984ebd9c2a06e2b8a4dc7331c72/defusedxml-0.7.1.tar.gz", hash = "sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69", size = 75520 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/6c/aa3f2f849e01cb6a001cd8554a88d4c77c5c1a31c95bdf1cf9301e6d9ef4/defusedxml-0.7.1-py2.py3-none-any.whl", hash = "sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61", size = 25604 },
]

[[package]]
name = "discord-py"
version = "2.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohttp" },
]
sdist = { url = "https://files.pythonhosted.org/packages/39/af/80cab4015722d3bee175509b7249a11d5adf77b5ff4c27f268558079d149/discord_py-2.4.0.tar.gz", hash = "sha256:d07cb2a223a185873a1d0ee78b9faa9597e45b3f6186df21a95cec1e9bcdc9a5", size = 1027707 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/23/10/3c44e9331a5ec3bae8b2919d51f611a5b94e179563b1b89eb6423a8f43eb/discord.py-2.4.0-py3-none-any.whl", hash = "sha256:b8af6711c70f7e62160bfbecb55be699b5cb69d007426759ab8ab06b1bd77d1d", size = 1125988 },
]

[[package]]
name = "distlib"
version = "0.3.9"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0d/dd/1bec4c5ddb504ca60fc29472f3d27e8d4da1257a854e1d96742f15c1d02d/distlib-0.3.9.tar.gz", hash = "sha256:a60f20dea646b8a33f3e7772f74dc0b2d0772d2837ee1342a00645c81edf9403", size = 613923 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/91/a1/cf2472db20f7ce4a6be1253a81cfdf85ad9c7885ffbed7047fb72c24cf87/distlib-0.3.9-py2.py3-none-any.whl", hash = "sha256:47f8c22fd27c27e25a65601af709b38e4f0a45ea4fc2e710f65755fa8caaaf87", size = 468973 },
]

[[package]]
name = "distro"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fc/f8/98eea607f65de6527f8a2e8885fc8015d3e6f5775df186e443e0964a11c3/distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed", size = 60722 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/12/b3/231ffd4ab1fc9d679809f356cebee130ac7daa00d6d6f3206dd4fd137e9e/distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2", size = 20277 },
]

[[package]]
name = "dnspython"
version = "2.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b5/4a/263763cb2ba3816dd94b08ad3a33d5fdae34ecb856678773cc40a3605829/dnspython-2.7.0.tar.gz", hash = "sha256:ce9c432eda0dc91cf618a5cedf1a4e142651196bbcd2c80e89ed5a907e5cfaf1", size = 345197 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/68/1b/e0a87d256e40e8c888847551b20a017a6b98139178505dc7ffb96f04e954/dnspython-2.7.0-py3-none-any.whl", hash = "sha256:b4c34b7d10b51bcc3a5071e7b8dee77939f1e878477eeecc965e9835f63c6c86", size = 313632 },
]

[[package]]
name = "email-validator"
version = "2.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "dnspython" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/48/ce/13508a1ec3f8bb981ae4ca79ea40384becc868bfae97fd1c942bb3a001b1/email_validator-2.2.0.tar.gz", hash = "sha256:cb690f344c617a714f22e66ae771445a1ceb46821152df8e165c5f9a364582b7", size = 48967 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/ee/bf0adb559ad3c786f12bcbc9296b3f5675f529199bef03e2df281fa1fadb/email_validator-2.2.0-py3-none-any.whl", hash = "sha256:561977c2d73ce3611850a06fa56b414621e0c8faa9d66f2611407d87465da631", size = 33521 },
]

[[package]]
name = "executing"
version = "2.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/91/50/a9d80c47ff289c611ff12e63f7c5d13942c65d68125160cefd768c73e6e4/executing-2.2.0.tar.gz", hash = "sha256:5d108c028108fe2551d1a7b2e8b713341e2cb4fc0aa7dcf966fa4327a5226755", size = 978693 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7b/8f/c4d9bafc34ad7ad5d8dc16dd1347ee0e507a52c3adb6bfa8887e1c6a26ba/executing-2.2.0-py2.py3-none-any.whl", hash = "sha256:11387150cad388d62750327a53d3339fad4888b39a6fe233c3afbb54ecffd3aa", size = 26702 },
]

[[package]]
name = "fastapi"
version = "0.115.12"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "starlette" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f4/55/ae499352d82338331ca1e28c7f4a63bfd09479b16395dce38cf50a39e2c2/fastapi-0.115.12.tar.gz", hash = "sha256:1e2c2a2646905f9e83d32f04a3f86aff4a286669c6c950ca95b5fd68c2602681", size = 295236 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/50/b3/b51f09c2ba432a576fe63758bddc81f78f0c6309d9e5c10d194313bf021e/fastapi-0.115.12-py3-none-any.whl", hash = "sha256:e94613d6c05e27be7ffebdd6ea5f388112e5e430c8f7d6494a9d1d88d43e814d", size = 95164 },
]

[[package]]
name = "fastapi-sso"
version = "0.16.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "fastapi" },
    { name = "httpx" },
    { name = "oauthlib" },
    { name = "pydantic", extra = ["email"] },
]
sdist = { url = "https://files.pythonhosted.org/packages/57/9b/25c43c928b46ec919cb8941d3de53dd2e12bab12e1c0182646425dbefd60/fastapi_sso-0.16.0.tar.gz", hash = "sha256:f3941f986347566b7d3747c710cf474a907f581bfb6697ff3bb3e44eb76b438c", size = 16555 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/84/df15745ff06c1b44e478b72759d5cf48e4583e221389d4cdea76c472dd1c/fastapi_sso-0.16.0-py3-none-any.whl", hash = "sha256:3a66a942474ef9756d3a9d8b945d55bd9faf99781facdb9b87a40b73d6d6b0c3", size = 23942 },
]

[[package]]
name = "fastjsonschema"
version = "2.21.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8b/50/4b769ce1ac4071a1ef6d86b1a3fb56cdc3a37615e8c5519e1af96cdac366/fastjsonschema-2.21.1.tar.gz", hash = "sha256:794d4f0a58f848961ba16af7b9c85a3e88cd360df008c59aac6fc5ae9323b5d4", size = 373939 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/90/2b/0817a2b257fe88725c25589d89aec060581aabf668707a8d03b2e9e0cb2a/fastjsonschema-2.21.1-py3-none-any.whl", hash = "sha256:c9e5b7e908310918cf494a434eeb31384dd84a98b57a30bcb1f535015b554667", size = 23924 },
]

[[package]]
name = "filelock"
version = "3.18.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0a/10/c23352565a6544bdc5353e0b15fc1c563352101f30e24bf500207a54df9a/filelock-3.18.0.tar.gz", hash = "sha256:adbc88eabb99d2fec8c9c1b229b171f18afa655400173ddc653d5d01501fb9f2", size = 18075 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4d/36/2a115987e2d8c300a974597416d9de88f2444426de9571f4b59b2cca3acc/filelock-3.18.0-py3-none-any.whl", hash = "sha256:c401f4f8377c4464e6db25fff06205fd89bdd83b65eb0488ed1b160f780e21de", size = 16215 },
]

[[package]]
name = "filetype"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bb/29/745f7d30d47fe0f251d3ad3dc2978a23141917661998763bebb6da007eb1/filetype-1.2.0.tar.gz", hash = "sha256:66b56cd6474bf41d8c54660347d37afcc3f7d1970648de365c102ef77548aadb", size = 998020 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/79/1b8fa1bb3568781e84c9200f951c735f3f157429f44be0495da55894d620/filetype-1.2.0-py2.py3-none-any.whl", hash = "sha256:7ce71b6880181241cf7ac8697a2f1eb6a8bd9b429f7ad6d27b8db9ba5f1c2d25", size = 19970 },
]

[[package]]
name = "fqdn"
version = "1.5.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/30/3e/a80a8c077fd798951169626cde3e239adeba7dab75deb3555716415bd9b0/fqdn-1.5.1.tar.gz", hash = "sha256:105ed3677e767fb5ca086a0c1f4bb66ebc3c100be518f0e0d755d9eae164d89f", size = 6015 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cf/58/8acf1b3e91c58313ce5cb67df61001fc9dcd21be4fadb76c1a2d540e09ed/fqdn-1.5.1-py3-none-any.whl", hash = "sha256:3a179af3761e4df6eb2e026ff9e1a3033d3587bf980a0b1b2e1e5d08d7358014", size = 9121 },
]

[[package]]
name = "frozenlist"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8f/ed/0f4cec13a93c02c47ec32d81d11c0c1efbadf4a471e3f3ce7cad366cbbd3/frozenlist-1.5.0.tar.gz", hash = "sha256:81d5af29e61b9c8348e876d442253723928dce6433e0e76cd925cd83f1b4b817", size = 39930 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/79/43/0bed28bf5eb1c9e4301003b74453b8e7aa85fb293b31dde352aac528dafc/frozenlist-1.5.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:fd74520371c3c4175142d02a976aee0b4cb4a7cc912a60586ffd8d5929979b30", size = 94987 },
    { url = "https://files.pythonhosted.org/packages/bb/bf/b74e38f09a246e8abbe1e90eb65787ed745ccab6eaa58b9c9308e052323d/frozenlist-1.5.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2f3f7a0fbc219fb4455264cae4d9f01ad41ae6ee8524500f381de64ffaa077d5", size = 54584 },
    { url = "https://files.pythonhosted.org/packages/2c/31/ab01375682f14f7613a1ade30149f684c84f9b8823a4391ed950c8285656/frozenlist-1.5.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:f47c9c9028f55a04ac254346e92977bf0f166c483c74b4232bee19a6697e4778", size = 52499 },
    { url = "https://files.pythonhosted.org/packages/98/a8/d0ac0b9276e1404f58fec3ab6e90a4f76b778a49373ccaf6a563f100dfbc/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0996c66760924da6e88922756d99b47512a71cfd45215f3570bf1e0b694c206a", size = 276357 },
    { url = "https://files.pythonhosted.org/packages/ad/c9/c7761084fa822f07dac38ac29f841d4587570dd211e2262544aa0b791d21/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a2fe128eb4edeabe11896cb6af88fca5346059f6c8d807e3b910069f39157869", size = 287516 },
    { url = "https://files.pythonhosted.org/packages/a1/ff/cd7479e703c39df7bdab431798cef89dc75010d8aa0ca2514c5b9321db27/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1a8ea951bbb6cacd492e3948b8da8c502a3f814f5d20935aae74b5df2b19cf3d", size = 283131 },
    { url = "https://files.pythonhosted.org/packages/59/a0/370941beb47d237eca4fbf27e4e91389fd68699e6f4b0ebcc95da463835b/frozenlist-1.5.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:de537c11e4aa01d37db0d403b57bd6f0546e71a82347a97c6a9f0dcc532b3a45", size = 261320 },
    { url = "https://files.pythonhosted.org/packages/b8/5f/c10123e8d64867bc9b4f2f510a32042a306ff5fcd7e2e09e5ae5100ee333/frozenlist-1.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9c2623347b933fcb9095841f1cc5d4ff0b278addd743e0e966cb3d460278840d", size = 274877 },
    { url = "https://files.pythonhosted.org/packages/fa/79/38c505601ae29d4348f21706c5d89755ceded02a745016ba2f58bd5f1ea6/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:cee6798eaf8b1416ef6909b06f7dc04b60755206bddc599f52232606e18179d3", size = 269592 },
    { url = "https://files.pythonhosted.org/packages/19/e2/39f3a53191b8204ba9f0bb574b926b73dd2efba2a2b9d2d730517e8f7622/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:f5f9da7f5dbc00a604fe74aa02ae7c98bcede8a3b8b9666f9f86fc13993bc71a", size = 265934 },
    { url = "https://files.pythonhosted.org/packages/d5/c9/3075eb7f7f3a91f1a6b00284af4de0a65a9ae47084930916f5528144c9dd/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:90646abbc7a5d5c7c19461d2e3eeb76eb0b204919e6ece342feb6032c9325ae9", size = 283859 },
    { url = "https://files.pythonhosted.org/packages/05/f5/549f44d314c29408b962fa2b0e69a1a67c59379fb143b92a0a065ffd1f0f/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:bdac3c7d9b705d253b2ce370fde941836a5f8b3c5c2b8fd70940a3ea3af7f4f2", size = 287560 },
    { url = "https://files.pythonhosted.org/packages/9d/f8/cb09b3c24a3eac02c4c07a9558e11e9e244fb02bf62c85ac2106d1eb0c0b/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:03d33c2ddbc1816237a67f66336616416e2bbb6beb306e5f890f2eb22b959cdf", size = 277150 },
    { url = "https://files.pythonhosted.org/packages/37/48/38c2db3f54d1501e692d6fe058f45b6ad1b358d82cd19436efab80cfc965/frozenlist-1.5.0-cp311-cp311-win32.whl", hash = "sha256:237f6b23ee0f44066219dae14c70ae38a63f0440ce6750f868ee08775073f942", size = 45244 },
    { url = "https://files.pythonhosted.org/packages/ca/8c/2ddffeb8b60a4bce3b196c32fcc30d8830d4615e7b492ec2071da801b8ad/frozenlist-1.5.0-cp311-cp311-win_amd64.whl", hash = "sha256:0cc974cc93d32c42e7b0f6cf242a6bd941c57c61b618e78b6c0a96cb72788c1d", size = 51634 },
    { url = "https://files.pythonhosted.org/packages/79/73/fa6d1a96ab7fd6e6d1c3500700963eab46813847f01ef0ccbaa726181dd5/frozenlist-1.5.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:31115ba75889723431aa9a4e77d5f398f5cf976eea3bdf61749731f62d4a4a21", size = 94026 },
    { url = "https://files.pythonhosted.org/packages/ab/04/ea8bf62c8868b8eada363f20ff1b647cf2e93377a7b284d36062d21d81d1/frozenlist-1.5.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7437601c4d89d070eac8323f121fcf25f88674627505334654fd027b091db09d", size = 54150 },
    { url = "https://files.pythonhosted.org/packages/d0/9a/8e479b482a6f2070b26bda572c5e6889bb3ba48977e81beea35b5ae13ece/frozenlist-1.5.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7948140d9f8ece1745be806f2bfdf390127cf1a763b925c4a805c603df5e697e", size = 51927 },
    { url = "https://files.pythonhosted.org/packages/e3/12/2aad87deb08a4e7ccfb33600871bbe8f0e08cb6d8224371387f3303654d7/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:feeb64bc9bcc6b45c6311c9e9b99406660a9c05ca8a5b30d14a78555088b0b3a", size = 282647 },
    { url = "https://files.pythonhosted.org/packages/77/f2/07f06b05d8a427ea0060a9cef6e63405ea9e0d761846b95ef3fb3be57111/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:683173d371daad49cffb8309779e886e59c2f369430ad28fe715f66d08d4ab1a", size = 289052 },
    { url = "https://files.pythonhosted.org/packages/bd/9f/8bf45a2f1cd4aa401acd271b077989c9267ae8463e7c8b1eb0d3f561b65e/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7d57d8f702221405a9d9b40f9da8ac2e4a1a8b5285aac6100f3393675f0a85ee", size = 291719 },
    { url = "https://files.pythonhosted.org/packages/41/d1/1f20fd05a6c42d3868709b7604c9f15538a29e4f734c694c6bcfc3d3b935/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:30c72000fbcc35b129cb09956836c7d7abf78ab5416595e4857d1cae8d6251a6", size = 267433 },
    { url = "https://files.pythonhosted.org/packages/af/f2/64b73a9bb86f5a89fb55450e97cd5c1f84a862d4ff90d9fd1a73ab0f64a5/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:000a77d6034fbad9b6bb880f7ec073027908f1b40254b5d6f26210d2dab1240e", size = 283591 },
    { url = "https://files.pythonhosted.org/packages/29/e2/ffbb1fae55a791fd6c2938dd9ea779509c977435ba3940b9f2e8dc9d5316/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5d7f5a50342475962eb18b740f3beecc685a15b52c91f7d975257e13e029eca9", size = 273249 },
    { url = "https://files.pythonhosted.org/packages/2e/6e/008136a30798bb63618a114b9321b5971172a5abddff44a100c7edc5ad4f/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:87f724d055eb4785d9be84e9ebf0f24e392ddfad00b3fe036e43f489fafc9039", size = 271075 },
    { url = "https://files.pythonhosted.org/packages/ae/f0/4e71e54a026b06724cec9b6c54f0b13a4e9e298cc8db0f82ec70e151f5ce/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:6e9080bb2fb195a046e5177f10d9d82b8a204c0736a97a153c2466127de87784", size = 285398 },
    { url = "https://files.pythonhosted.org/packages/4d/36/70ec246851478b1c0b59f11ef8ade9c482ff447c1363c2bd5fad45098b12/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:9b93d7aaa36c966fa42efcaf716e6b3900438632a626fb09c049f6a2f09fc631", size = 294445 },
    { url = "https://files.pythonhosted.org/packages/37/e0/47f87544055b3349b633a03c4d94b405956cf2437f4ab46d0928b74b7526/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:52ef692a4bc60a6dd57f507429636c2af8b6046db8b31b18dac02cbc8f507f7f", size = 280569 },
    { url = "https://files.pythonhosted.org/packages/f9/7c/490133c160fb6b84ed374c266f42800e33b50c3bbab1652764e6e1fc498a/frozenlist-1.5.0-cp312-cp312-win32.whl", hash = "sha256:29d94c256679247b33a3dc96cce0f93cbc69c23bf75ff715919332fdbb6a32b8", size = 44721 },
    { url = "https://files.pythonhosted.org/packages/b1/56/4e45136ffc6bdbfa68c29ca56ef53783ef4c2fd395f7cbf99a2624aa9aaa/frozenlist-1.5.0-cp312-cp312-win_amd64.whl", hash = "sha256:8969190d709e7c48ea386db202d708eb94bdb29207a1f269bab1196ce0dcca1f", size = 51329 },
    { url = "https://files.pythonhosted.org/packages/da/3b/915f0bca8a7ea04483622e84a9bd90033bab54bdf485479556c74fd5eaf5/frozenlist-1.5.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:7a1a048f9215c90973402e26c01d1cff8a209e1f1b53f72b95c13db61b00f953", size = 91538 },
    { url = "https://files.pythonhosted.org/packages/c7/d1/a7c98aad7e44afe5306a2b068434a5830f1470675f0e715abb86eb15f15b/frozenlist-1.5.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:dd47a5181ce5fcb463b5d9e17ecfdb02b678cca31280639255ce9d0e5aa67af0", size = 52849 },
    { url = "https://files.pythonhosted.org/packages/3a/c8/76f23bf9ab15d5f760eb48701909645f686f9c64fbb8982674c241fbef14/frozenlist-1.5.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:1431d60b36d15cda188ea222033eec8e0eab488f39a272461f2e6d9e1a8e63c2", size = 50583 },
    { url = "https://files.pythonhosted.org/packages/1f/22/462a3dd093d11df623179d7754a3b3269de3b42de2808cddef50ee0f4f48/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6482a5851f5d72767fbd0e507e80737f9c8646ae7fd303def99bfe813f76cf7f", size = 265636 },
    { url = "https://files.pythonhosted.org/packages/80/cf/e075e407fc2ae7328155a1cd7e22f932773c8073c1fc78016607d19cc3e5/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:44c49271a937625619e862baacbd037a7ef86dd1ee215afc298a417ff3270608", size = 270214 },
    { url = "https://files.pythonhosted.org/packages/a1/58/0642d061d5de779f39c50cbb00df49682832923f3d2ebfb0fedf02d05f7f/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:12f78f98c2f1c2429d42e6a485f433722b0061d5c0b0139efa64f396efb5886b", size = 273905 },
    { url = "https://files.pythonhosted.org/packages/ab/66/3fe0f5f8f2add5b4ab7aa4e199f767fd3b55da26e3ca4ce2cc36698e50c4/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ce3aa154c452d2467487765e3adc730a8c153af77ad84096bc19ce19a2400840", size = 250542 },
    { url = "https://files.pythonhosted.org/packages/f6/b8/260791bde9198c87a465224e0e2bb62c4e716f5d198fc3a1dacc4895dbd1/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9b7dc0c4338e6b8b091e8faf0db3168a37101943e687f373dce00959583f7439", size = 267026 },
    { url = "https://files.pythonhosted.org/packages/2e/a4/3d24f88c527f08f8d44ade24eaee83b2627793fa62fa07cbb7ff7a2f7d42/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:45e0896250900b5aa25180f9aec243e84e92ac84bd4a74d9ad4138ef3f5c97de", size = 257690 },
    { url = "https://files.pythonhosted.org/packages/de/9a/d311d660420b2beeff3459b6626f2ab4fb236d07afbdac034a4371fe696e/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:561eb1c9579d495fddb6da8959fd2a1fca2c6d060d4113f5844b433fc02f2641", size = 253893 },
    { url = "https://files.pythonhosted.org/packages/c6/23/e491aadc25b56eabd0f18c53bb19f3cdc6de30b2129ee0bc39cd387cd560/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:df6e2f325bfee1f49f81aaac97d2aa757c7646534a06f8f577ce184afe2f0a9e", size = 267006 },
    { url = "https://files.pythonhosted.org/packages/08/c4/ab918ce636a35fb974d13d666dcbe03969592aeca6c3ab3835acff01f79c/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:140228863501b44b809fb39ec56b5d4071f4d0aa6d216c19cbb08b8c5a7eadb9", size = 276157 },
    { url = "https://files.pythonhosted.org/packages/c0/29/3b7a0bbbbe5a34833ba26f686aabfe982924adbdcafdc294a7a129c31688/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:7707a25d6a77f5d27ea7dc7d1fc608aa0a478193823f88511ef5e6b8a48f9d03", size = 264642 },
    { url = "https://files.pythonhosted.org/packages/ab/42/0595b3dbffc2e82d7fe658c12d5a5bafcd7516c6bf2d1d1feb5387caa9c1/frozenlist-1.5.0-cp313-cp313-win32.whl", hash = "sha256:31a9ac2b38ab9b5a8933b693db4939764ad3f299fcaa931a3e605bc3460e693c", size = 44914 },
    { url = "https://files.pythonhosted.org/packages/17/c4/b7db1206a3fea44bf3b838ca61deb6f74424a8a5db1dd53ecb21da669be6/frozenlist-1.5.0-cp313-cp313-win_amd64.whl", hash = "sha256:11aabdd62b8b9c4b84081a3c246506d1cddd2dd93ff0ad53ede5defec7886b28", size = 51167 },
    { url = "https://files.pythonhosted.org/packages/c6/c8/a5be5b7550c10858fcf9b0ea054baccab474da77d37f1e828ce043a3a5d4/frozenlist-1.5.0-py3-none-any.whl", hash = "sha256:d994863bba198a4a518b467bb971c56e1db3f180a25c6cf7bb1949c267f748c3", size = 11901 },
]

[[package]]
name = "fsspec"
version = "2025.3.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/45/d8/8425e6ba5fcec61a1d16e41b1b71d2bf9344f1fe48012c2b48b9620feae5/fsspec-2025.3.2.tar.gz", hash = "sha256:e52c77ef398680bbd6a98c0e628fbc469491282981209907bbc8aea76a04fdc6", size = 299281 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/44/4b/e0cfc1a6f17e990f3e64b7d941ddc4acdc7b19d6edd51abf495f32b1a9e4/fsspec-2025.3.2-py3-none-any.whl", hash = "sha256:2daf8dc3d1dfa65b6aa37748d112773a7a08416f6c70d96b264c96476ecaf711", size = 194435 },
]

[[package]]
name = "geoip2"
version = "5.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohttp" },
    { name = "maxminddb" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/17/d7/21cfa1072b8ec5937c6af0cf8b624b4be9b44a7ca82f4335900df5482076/geoip2-5.0.1.tar.gz", hash = "sha256:90af8b6d3687f3bef251f2708ad017b30d627d1144c0040eabc4c9017a807d86", size = 175854 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0f/6c/4f17beb65444cd0b8e602c2ea64ef1ec8ff32e1aa8c6a3be3fad7113b947/geoip2-5.0.1-py3-none-any.whl", hash = "sha256:128b7c9e6b55fb66178428a9400bd4f8b011cf64f147b1ed9e3a4766e61a9b78", size = 28064 },
]

[[package]]
name = "gitdb"
version = "4.0.12"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "smmap" },
]
sdist = { url = "https://files.pythonhosted.org/packages/72/94/63b0fc47eb32792c7ba1fe1b694daec9a63620db1e313033d18140c2320a/gitdb-4.0.12.tar.gz", hash = "sha256:5ef71f855d191a3326fcfbc0d5da835f26b13fbcba60c32c21091c349ffdb571", size = 394684 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a0/61/5c78b91c3143ed5c14207f463aecfc8f9dbb5092fb2869baf37c273b2705/gitdb-4.0.12-py3-none-any.whl", hash = "sha256:67073e15955400952c6565cc3e707c554a4eea2e428946f7a4c162fab9bd9bcf", size = 62794 },
]

[[package]]
name = "gitpython"
version = "3.1.44"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "gitdb" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c0/89/37df0b71473153574a5cdef8f242de422a0f5d26d7a9e231e6f169b4ad14/gitpython-3.1.44.tar.gz", hash = "sha256:c87e30b26253bf5418b01b0660f818967f3c503193838337fe5e573331249269", size = 214196 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/1d/9a/4114a9057db2f1462d5c8f8390ab7383925fe1ac012eaa42402ad65c2963/GitPython-3.1.44-py3-none-any.whl", hash = "sha256:9e0e10cda9bed1ee64bc9a6de50e7e38a9c9943241cd7f585f6df3ed28011110", size = 207599 },
]

[[package]]
name = "google-ai-generativelanguage"
version = "0.6.17"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-api-core", extra = ["grpc"] },
    { name = "google-auth" },
    { name = "proto-plus" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e6/aa/809e7de6af007e36d456d9a5361250bc906a3f3a6dfc9babebb0de146641/google_ai_generativelanguage-0.6.17.tar.gz", hash = "sha256:8439503503aba6c85b3871504f490bbc66be854031d8bb4d5ac95d3ca2173f38", size = 1423814 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e7/ae/1c1553aea9209db84ed8c0b2f8d2dd3feb146290fdae5988b54ee71b5c9d/google_ai_generativelanguage-0.6.17-py3-none-any.whl", hash = "sha256:1aedc8df9bf27c9b6b7e0a70944a29a3db2e7a34bfc0cc8e0ca54a84d361a8a1", size = 1356577 },
]

[[package]]
name = "google-api-core"
version = "2.24.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-auth" },
    { name = "googleapis-common-protos" },
    { name = "proto-plus" },
    { name = "protobuf" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/09/5c/085bcb872556934bb119e5e09de54daa07873f6866b8f0303c49e72287f7/google_api_core-2.24.2.tar.gz", hash = "sha256:81718493daf06d96d6bc76a91c23874dbf2fac0adbbf542831b805ee6e974696", size = 163516 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/95/f472d85adab6e538da2025dfca9e976a0d125cc0af2301f190e77b76e51c/google_api_core-2.24.2-py3-none-any.whl", hash = "sha256:810a63ac95f3c441b7c0e43d344e372887f62ce9071ba972eacf32672e072de9", size = 160061 },
]

[package.optional-dependencies]
grpc = [
    { name = "grpcio" },
    { name = "grpcio-status" },
]

[[package]]
name = "google-auth"
version = "2.38.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cachetools" },
    { name = "pyasn1-modules" },
    { name = "rsa" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/eb/d504ba1daf190af6b204a9d4714d457462b486043744901a6eeea711f913/google_auth-2.38.0.tar.gz", hash = "sha256:8285113607d3b80a3f1543b75962447ba8a09fe85783432a784fdeef6ac094c4", size = 270866 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9d/47/603554949a37bca5b7f894d51896a9c534b9eab808e2520a748e081669d0/google_auth-2.38.0-py2.py3-none-any.whl", hash = "sha256:e7dae6694313f434a2727bf2906f27ad259bae090d7aa896590d86feec3d9d4a", size = 210770 },
]

[[package]]
name = "googleapis-common-protos"
version = "1.69.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1b/d7/ee9d56af4e6dbe958562b5020f46263c8a4628e7952070241fc0e9b182ae/googleapis_common_protos-1.69.2.tar.gz", hash = "sha256:3e1b904a27a33c821b4b749fd31d334c0c9c30e6113023d495e48979a3dc9c5f", size = 144496 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/53/d35476d547a286506f0a6a634ccf1e5d288fffd53d48f0bd5fef61d68684/googleapis_common_protos-1.69.2-py3-none-any.whl", hash = "sha256:0b30452ff9c7a27d80bfc5718954063e8ab53dd3697093d3bc99581f5fd24212", size = 293215 },
]

[[package]]
name = "greenlet"
version = "3.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2f/ff/df5fede753cc10f6a5be0931204ea30c35fa2f2ea7a35b25bdaf4fe40e46/greenlet-3.1.1.tar.gz", hash = "sha256:4ce3ac6cdb6adf7946475d7ef31777c26d94bccc377e070a7986bd2d5c515467", size = 186022 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/28/62/1c2665558618553c42922ed47a4e6d6527e2fa3516a8256c2f431c5d0441/greenlet-3.1.1-cp311-cp311-macosx_11_0_universal2.whl", hash = "sha256:e4d333e558953648ca09d64f13e6d8f0523fa705f51cae3f03b5983489958c70", size = 272479 },
    { url = "https://files.pythonhosted.org/packages/76/9d/421e2d5f07285b6e4e3a676b016ca781f63cfe4a0cd8eaecf3fd6f7a71ae/greenlet-3.1.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:09fc016b73c94e98e29af67ab7b9a879c307c6731a2c9da0db5a7d9b7edd1159", size = 640404 },
    { url = "https://files.pythonhosted.org/packages/e5/de/6e05f5c59262a584e502dd3d261bbdd2c97ab5416cc9c0b91ea38932a901/greenlet-3.1.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d5e975ca70269d66d17dd995dafc06f1b06e8cb1ec1e9ed54c1d1e4a7c4cf26e", size = 652813 },
    { url = "https://files.pythonhosted.org/packages/49/93/d5f93c84241acdea15a8fd329362c2c71c79e1a507c3f142a5d67ea435ae/greenlet-3.1.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:3b2813dc3de8c1ee3f924e4d4227999285fd335d1bcc0d2be6dc3f1f6a318ec1", size = 648517 },
    { url = "https://files.pythonhosted.org/packages/15/85/72f77fc02d00470c86a5c982b8daafdf65d38aefbbe441cebff3bf7037fc/greenlet-3.1.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e347b3bfcf985a05e8c0b7d462ba6f15b1ee1c909e2dcad795e49e91b152c383", size = 647831 },
    { url = "https://files.pythonhosted.org/packages/f7/4b/1c9695aa24f808e156c8f4813f685d975ca73c000c2a5056c514c64980f6/greenlet-3.1.1-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:9e8f8c9cb53cdac7ba9793c276acd90168f416b9ce36799b9b885790f8ad6c0a", size = 602413 },
    { url = "https://files.pythonhosted.org/packages/76/70/ad6e5b31ef330f03b12559d19fda2606a522d3849cde46b24f223d6d1619/greenlet-3.1.1-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:62ee94988d6b4722ce0028644418d93a52429e977d742ca2ccbe1c4f4a792511", size = 1129619 },
    { url = "https://files.pythonhosted.org/packages/f4/fb/201e1b932e584066e0f0658b538e73c459b34d44b4bd4034f682423bc801/greenlet-3.1.1-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:1776fd7f989fc6b8d8c8cb8da1f6b82c5814957264d1f6cf818d475ec2bf6395", size = 1155198 },
    { url = "https://files.pythonhosted.org/packages/12/da/b9ed5e310bb8b89661b80cbcd4db5a067903bbcd7fc854923f5ebb4144f0/greenlet-3.1.1-cp311-cp311-win_amd64.whl", hash = "sha256:48ca08c771c268a768087b408658e216133aecd835c0ded47ce955381105ba39", size = 298930 },
    { url = "https://files.pythonhosted.org/packages/7d/ec/bad1ac26764d26aa1353216fcbfa4670050f66d445448aafa227f8b16e80/greenlet-3.1.1-cp312-cp312-macosx_11_0_universal2.whl", hash = "sha256:4afe7ea89de619adc868e087b4d2359282058479d7cfb94970adf4b55284574d", size = 274260 },
    { url = "https://files.pythonhosted.org/packages/66/d4/c8c04958870f482459ab5956c2942c4ec35cac7fe245527f1039837c17a9/greenlet-3.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f406b22b7c9a9b4f8aa9d2ab13d6ae0ac3e85c9a809bd590ad53fed2bf70dc79", size = 649064 },
    { url = "https://files.pythonhosted.org/packages/51/41/467b12a8c7c1303d20abcca145db2be4e6cd50a951fa30af48b6ec607581/greenlet-3.1.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c3a701fe5a9695b238503ce5bbe8218e03c3bcccf7e204e455e7462d770268aa", size = 663420 },
    { url = "https://files.pythonhosted.org/packages/27/8f/2a93cd9b1e7107d5c7b3b7816eeadcac2ebcaf6d6513df9abaf0334777f6/greenlet-3.1.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2846930c65b47d70b9d178e89c7e1a69c95c1f68ea5aa0a58646b7a96df12441", size = 658035 },
    { url = "https://files.pythonhosted.org/packages/57/5c/7c6f50cb12be092e1dccb2599be5a942c3416dbcfb76efcf54b3f8be4d8d/greenlet-3.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:99cfaa2110534e2cf3ba31a7abcac9d328d1d9f1b95beede58294a60348fba36", size = 660105 },
    { url = "https://files.pythonhosted.org/packages/f1/66/033e58a50fd9ec9df00a8671c74f1f3a320564c6415a4ed82a1c651654ba/greenlet-3.1.1-cp312-cp312-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:1443279c19fca463fc33e65ef2a935a5b09bb90f978beab37729e1c3c6c25fe9", size = 613077 },
    { url = "https://files.pythonhosted.org/packages/19/c5/36384a06f748044d06bdd8776e231fadf92fc896bd12cb1c9f5a1bda9578/greenlet-3.1.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:b7cede291382a78f7bb5f04a529cb18e068dd29e0fb27376074b6d0317bf4dd0", size = 1135975 },
    { url = "https://files.pythonhosted.org/packages/38/f9/c0a0eb61bdf808d23266ecf1d63309f0e1471f284300ce6dac0ae1231881/greenlet-3.1.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:23f20bb60ae298d7d8656c6ec6db134bca379ecefadb0b19ce6f19d1f232a942", size = 1163955 },
    { url = "https://files.pythonhosted.org/packages/43/21/a5d9df1d21514883333fc86584c07c2b49ba7c602e670b174bd73cfc9c7f/greenlet-3.1.1-cp312-cp312-win_amd64.whl", hash = "sha256:7124e16b4c55d417577c2077be379514321916d5790fa287c9ed6f23bd2ffd01", size = 299655 },
    { url = "https://files.pythonhosted.org/packages/f3/57/0db4940cd7bb461365ca8d6fd53e68254c9dbbcc2b452e69d0d41f10a85e/greenlet-3.1.1-cp313-cp313-macosx_11_0_universal2.whl", hash = "sha256:05175c27cb459dcfc05d026c4232f9de8913ed006d42713cb8a5137bd49375f1", size = 272990 },
    { url = "https://files.pythonhosted.org/packages/1c/ec/423d113c9f74e5e402e175b157203e9102feeb7088cee844d735b28ef963/greenlet-3.1.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:935e943ec47c4afab8965954bf49bfa639c05d4ccf9ef6e924188f762145c0ff", size = 649175 },
    { url = "https://files.pythonhosted.org/packages/a9/46/ddbd2db9ff209186b7b7c621d1432e2f21714adc988703dbdd0e65155c77/greenlet-3.1.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:667a9706c970cb552ede35aee17339a18e8f2a87a51fba2ed39ceeeb1004798a", size = 663425 },
    { url = "https://files.pythonhosted.org/packages/bc/f9/9c82d6b2b04aa37e38e74f0c429aece5eeb02bab6e3b98e7db89b23d94c6/greenlet-3.1.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b8a678974d1f3aa55f6cc34dc480169d58f2e6d8958895d68845fa4ab566509e", size = 657736 },
    { url = "https://files.pythonhosted.org/packages/d9/42/b87bc2a81e3a62c3de2b0d550bf91a86939442b7ff85abb94eec3fc0e6aa/greenlet-3.1.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:efc0f674aa41b92da8c49e0346318c6075d734994c3c4e4430b1c3f853e498e4", size = 660347 },
    { url = "https://files.pythonhosted.org/packages/37/fa/71599c3fd06336cdc3eac52e6871cfebab4d9d70674a9a9e7a482c318e99/greenlet-3.1.1-cp313-cp313-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:0153404a4bb921f0ff1abeb5ce8a5131da56b953eda6e14b88dc6bbc04d2049e", size = 615583 },
    { url = "https://files.pythonhosted.org/packages/4e/96/e9ef85de031703ee7a4483489b40cf307f93c1824a02e903106f2ea315fe/greenlet-3.1.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:275f72decf9932639c1c6dd1013a1bc266438eb32710016a1c742df5da6e60a1", size = 1133039 },
    { url = "https://files.pythonhosted.org/packages/87/76/b2b6362accd69f2d1889db61a18c94bc743e961e3cab344c2effaa4b4a25/greenlet-3.1.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:c4aab7f6381f38a4b42f269057aee279ab0fc7bf2e929e3d4abfae97b682a12c", size = 1160716 },
    { url = "https://files.pythonhosted.org/packages/1f/1b/54336d876186920e185066d8c3024ad55f21d7cc3683c856127ddb7b13ce/greenlet-3.1.1-cp313-cp313-win_amd64.whl", hash = "sha256:b42703b1cf69f2aa1df7d1030b9d77d3e584a70755674d60e710f0af570f3761", size = 299490 },
    { url = "https://files.pythonhosted.org/packages/5f/17/bea55bf36990e1638a2af5ba10c1640273ef20f627962cf97107f1e5d637/greenlet-3.1.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f1695e76146579f8c06c1509c7ce4dfe0706f49c6831a817ac04eebb2fd02011", size = 643731 },
    { url = "https://files.pythonhosted.org/packages/78/d2/aa3d2157f9ab742a08e0fd8f77d4699f37c22adfbfeb0c610a186b5f75e0/greenlet-3.1.1-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:7876452af029456b3f3549b696bb36a06db7c90747740c5302f74a9e9fa14b13", size = 649304 },
    { url = "https://files.pythonhosted.org/packages/f1/8e/d0aeffe69e53ccff5a28fa86f07ad1d2d2d6537a9506229431a2a02e2f15/greenlet-3.1.1-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:4ead44c85f8ab905852d3de8d86f6f8baf77109f9da589cb4fa142bd3b57b475", size = 646537 },
    { url = "https://files.pythonhosted.org/packages/05/79/e15408220bbb989469c8871062c97c6c9136770657ba779711b90870d867/greenlet-3.1.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8320f64b777d00dd7ccdade271eaf0cad6636343293a25074cc5566160e4de7b", size = 642506 },
    { url = "https://files.pythonhosted.org/packages/18/87/470e01a940307796f1d25f8167b551a968540fbe0551c0ebb853cb527dd6/greenlet-3.1.1-cp313-cp313t-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:6510bf84a6b643dabba74d3049ead221257603a253d0a9873f55f6a59a65f822", size = 602753 },
    { url = "https://files.pythonhosted.org/packages/e2/72/576815ba674eddc3c25028238f74d7b8068902b3968cbe456771b166455e/greenlet-3.1.1-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:04b013dc07c96f83134b1e99888e7a79979f1a247e2a9f59697fa14b5862ed01", size = 1122731 },
    { url = "https://files.pythonhosted.org/packages/ac/38/08cc303ddddc4b3d7c628c3039a61a3aae36c241ed01393d00c2fd663473/greenlet-3.1.1-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:411f015496fec93c1c8cd4e5238da364e1da7a124bcb293f085bf2860c32c6f6", size = 1142112 },
]

[[package]]
name = "grpcio"
version = "1.71.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1c/95/aa11fc09a85d91fbc7dd405dcb2a1e0256989d67bf89fa65ae24b3ba105a/grpcio-1.71.0.tar.gz", hash = "sha256:2b85f7820475ad3edec209d3d89a7909ada16caab05d3f2e08a7e8ae3200a55c", size = 12549828 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/63/04/a085f3ad4133426f6da8c1becf0749872a49feb625a407a2e864ded3fb12/grpcio-1.71.0-cp311-cp311-linux_armv7l.whl", hash = "sha256:d6aa986318c36508dc1d5001a3ff169a15b99b9f96ef5e98e13522c506b37eef", size = 5210453 },
    { url = "https://files.pythonhosted.org/packages/b4/d5/0bc53ed33ba458de95020970e2c22aa8027b26cc84f98bea7fcad5d695d1/grpcio-1.71.0-cp311-cp311-macosx_10_14_universal2.whl", hash = "sha256:d2c170247315f2d7e5798a22358e982ad6eeb68fa20cf7a820bb74c11f0736e7", size = 11347567 },
    { url = "https://files.pythonhosted.org/packages/e3/6d/ce334f7e7a58572335ccd61154d808fe681a4c5e951f8a1ff68f5a6e47ce/grpcio-1.71.0-cp311-cp311-manylinux_2_17_aarch64.whl", hash = "sha256:e6f83a583ed0a5b08c5bc7a3fe860bb3c2eac1f03f1f63e0bc2091325605d2b7", size = 5696067 },
    { url = "https://files.pythonhosted.org/packages/05/4a/80befd0b8b1dc2b9ac5337e57473354d81be938f87132e147c4a24a581bd/grpcio-1.71.0-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4be74ddeeb92cc87190e0e376dbc8fc7736dbb6d3d454f2fa1f5be1dee26b9d7", size = 6348377 },
    { url = "https://files.pythonhosted.org/packages/c7/67/cbd63c485051eb78663355d9efd1b896cfb50d4a220581ec2cb9a15cd750/grpcio-1.71.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4dd0dfbe4d5eb1fcfec9490ca13f82b089a309dc3678e2edabc144051270a66e", size = 5940407 },
    { url = "https://files.pythonhosted.org/packages/98/4b/7a11aa4326d7faa499f764eaf8a9b5a0eb054ce0988ee7ca34897c2b02ae/grpcio-1.71.0-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:a2242d6950dc892afdf9e951ed7ff89473aaf744b7d5727ad56bdaace363722b", size = 6030915 },
    { url = "https://files.pythonhosted.org/packages/eb/a2/cdae2d0e458b475213a011078b0090f7a1d87f9a68c678b76f6af7c6ac8c/grpcio-1.71.0-cp311-cp311-musllinux_1_1_i686.whl", hash = "sha256:0fa05ee31a20456b13ae49ad2e5d585265f71dd19fbd9ef983c28f926d45d0a7", size = 6648324 },
    { url = "https://files.pythonhosted.org/packages/27/df/f345c8daaa8d8574ce9869f9b36ca220c8845923eb3087e8f317eabfc2a8/grpcio-1.71.0-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:3d081e859fb1ebe176de33fc3adb26c7d46b8812f906042705346b314bde32c3", size = 6197839 },
    { url = "https://files.pythonhosted.org/packages/f2/2c/cd488dc52a1d0ae1bad88b0d203bc302efbb88b82691039a6d85241c5781/grpcio-1.71.0-cp311-cp311-win32.whl", hash = "sha256:d6de81c9c00c8a23047136b11794b3584cdc1460ed7cbc10eada50614baa1444", size = 3619978 },
    { url = "https://files.pythonhosted.org/packages/ee/3f/cf92e7e62ccb8dbdf977499547dfc27133124d6467d3a7d23775bcecb0f9/grpcio-1.71.0-cp311-cp311-win_amd64.whl", hash = "sha256:24e867651fc67717b6f896d5f0cac0ec863a8b5fb7d6441c2ab428f52c651c6b", size = 4282279 },
    { url = "https://files.pythonhosted.org/packages/4c/83/bd4b6a9ba07825bd19c711d8b25874cd5de72c2a3fbf635c3c344ae65bd2/grpcio-1.71.0-cp312-cp312-linux_armv7l.whl", hash = "sha256:0ff35c8d807c1c7531d3002be03221ff9ae15712b53ab46e2a0b4bb271f38537", size = 5184101 },
    { url = "https://files.pythonhosted.org/packages/31/ea/2e0d90c0853568bf714693447f5c73272ea95ee8dad107807fde740e595d/grpcio-1.71.0-cp312-cp312-macosx_10_14_universal2.whl", hash = "sha256:b78a99cd1ece4be92ab7c07765a0b038194ded2e0a26fd654591ee136088d8d7", size = 11310927 },
    { url = "https://files.pythonhosted.org/packages/ac/bc/07a3fd8af80467390af491d7dc66882db43884128cdb3cc8524915e0023c/grpcio-1.71.0-cp312-cp312-manylinux_2_17_aarch64.whl", hash = "sha256:dc1a1231ed23caac1de9f943d031f1bc38d0f69d2a3b243ea0d664fc1fbd7fec", size = 5654280 },
    { url = "https://files.pythonhosted.org/packages/16/af/21f22ea3eed3d0538b6ef7889fce1878a8ba4164497f9e07385733391e2b/grpcio-1.71.0-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e6beeea5566092c5e3c4896c6d1d307fb46b1d4bdf3e70c8340b190a69198594", size = 6312051 },
    { url = "https://files.pythonhosted.org/packages/49/9d/e12ddc726dc8bd1aa6cba67c85ce42a12ba5b9dd75d5042214a59ccf28ce/grpcio-1.71.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d5170929109450a2c031cfe87d6716f2fae39695ad5335d9106ae88cc32dc84c", size = 5910666 },
    { url = "https://files.pythonhosted.org/packages/d9/e9/38713d6d67aedef738b815763c25f092e0454dc58e77b1d2a51c9d5b3325/grpcio-1.71.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:5b08d03ace7aca7b2fadd4baf291139b4a5f058805a8327bfe9aece7253b6d67", size = 6012019 },
    { url = "https://files.pythonhosted.org/packages/80/da/4813cd7adbae6467724fa46c952d7aeac5e82e550b1c62ed2aeb78d444ae/grpcio-1.71.0-cp312-cp312-musllinux_1_1_i686.whl", hash = "sha256:f903017db76bf9cc2b2d8bdd37bf04b505bbccad6be8a81e1542206875d0e9db", size = 6637043 },
    { url = "https://files.pythonhosted.org/packages/52/ca/c0d767082e39dccb7985c73ab4cf1d23ce8613387149e9978c70c3bf3b07/grpcio-1.71.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:469f42a0b410883185eab4689060a20488a1a0a00f8bbb3cbc1061197b4c5a79", size = 6186143 },
    { url = "https://files.pythonhosted.org/packages/00/61/7b2c8ec13303f8fe36832c13d91ad4d4ba57204b1c723ada709c346b2271/grpcio-1.71.0-cp312-cp312-win32.whl", hash = "sha256:ad9f30838550695b5eb302add33f21f7301b882937460dd24f24b3cc5a95067a", size = 3604083 },
    { url = "https://files.pythonhosted.org/packages/fd/7c/1e429c5fb26122055d10ff9a1d754790fb067d83c633ff69eddcf8e3614b/grpcio-1.71.0-cp312-cp312-win_amd64.whl", hash = "sha256:652350609332de6dac4ece254e5d7e1ff834e203d6afb769601f286886f6f3a8", size = 4272191 },
    { url = "https://files.pythonhosted.org/packages/04/dd/b00cbb45400d06b26126dcfdbdb34bb6c4f28c3ebbd7aea8228679103ef6/grpcio-1.71.0-cp313-cp313-linux_armv7l.whl", hash = "sha256:cebc1b34ba40a312ab480ccdb396ff3c529377a2fce72c45a741f7215bfe8379", size = 5184138 },
    { url = "https://files.pythonhosted.org/packages/ed/0a/4651215983d590ef53aac40ba0e29dda941a02b097892c44fa3357e706e5/grpcio-1.71.0-cp313-cp313-macosx_10_14_universal2.whl", hash = "sha256:85da336e3649a3d2171e82f696b5cad2c6231fdd5bad52616476235681bee5b3", size = 11310747 },
    { url = "https://files.pythonhosted.org/packages/57/a3/149615b247f321e13f60aa512d3509d4215173bdb982c9098d78484de216/grpcio-1.71.0-cp313-cp313-manylinux_2_17_aarch64.whl", hash = "sha256:f9a412f55bb6e8f3bb000e020dbc1e709627dcb3a56f6431fa7076b4c1aab0db", size = 5653991 },
    { url = "https://files.pythonhosted.org/packages/ca/56/29432a3e8d951b5e4e520a40cd93bebaa824a14033ea8e65b0ece1da6167/grpcio-1.71.0-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:47be9584729534660416f6d2a3108aaeac1122f6b5bdbf9fd823e11fe6fbaa29", size = 6312781 },
    { url = "https://files.pythonhosted.org/packages/a3/f8/286e81a62964ceb6ac10b10925261d4871a762d2a763fbf354115f9afc98/grpcio-1.71.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7c9c80ac6091c916db81131d50926a93ab162a7e97e4428ffc186b6e80d6dda4", size = 5910479 },
    { url = "https://files.pythonhosted.org/packages/35/67/d1febb49ec0f599b9e6d4d0d44c2d4afdbed9c3e80deb7587ec788fcf252/grpcio-1.71.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:789d5e2a3a15419374b7b45cd680b1e83bbc1e52b9086e49308e2c0b5bbae6e3", size = 6013262 },
    { url = "https://files.pythonhosted.org/packages/a1/04/f9ceda11755f0104a075ad7163fc0d96e2e3a9fe25ef38adfc74c5790daf/grpcio-1.71.0-cp313-cp313-musllinux_1_1_i686.whl", hash = "sha256:1be857615e26a86d7363e8a163fade914595c81fec962b3d514a4b1e8760467b", size = 6643356 },
    { url = "https://files.pythonhosted.org/packages/fb/ce/236dbc3dc77cf9a9242adcf1f62538734ad64727fabf39e1346ad4bd5c75/grpcio-1.71.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:a76d39b5fafd79ed604c4be0a869ec3581a172a707e2a8d7a4858cb05a5a7637", size = 6186564 },
    { url = "https://files.pythonhosted.org/packages/10/fd/b3348fce9dd4280e221f513dd54024e765b21c348bc475516672da4218e9/grpcio-1.71.0-cp313-cp313-win32.whl", hash = "sha256:74258dce215cb1995083daa17b379a1a5a87d275387b7ffe137f1d5131e2cfbb", size = 3601890 },
    { url = "https://files.pythonhosted.org/packages/be/f8/db5d5f3fc7e296166286c2a397836b8b042f7ad1e11028d82b061701f0f7/grpcio-1.71.0-cp313-cp313-win_amd64.whl", hash = "sha256:22c3bc8d488c039a199f7a003a38cb7635db6656fa96437a8accde8322ce2366", size = 4273308 },
]

[[package]]
name = "grpcio-status"
version = "1.71.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "googleapis-common-protos" },
    { name = "grpcio" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/d7/53/a911467bece076020456401f55a27415d2d70d3bc2c37af06b44ea41fc5c/grpcio_status-1.71.0.tar.gz", hash = "sha256:11405fed67b68f406b3f3c7c5ae5104a79d2d309666d10d61b152e91d28fb968", size = 13669 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ad/d6/31fbc43ff097d8c4c9fc3df741431b8018f67bf8dfbe6553a555f6e5f675/grpcio_status-1.71.0-py3-none-any.whl", hash = "sha256:843934ef8c09e3e858952887467f8256aac3910c55f077a359a65b2b3cde3e68", size = 14424 },
]

[[package]]
name = "gunicorn"
version = "23.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "packaging" },
]
sdist = { url = "https://files.pythonhosted.org/packages/34/72/9614c465dc206155d93eff0ca20d42e1e35afc533971379482de953521a4/gunicorn-23.0.0.tar.gz", hash = "sha256:f014447a0101dc57e294f6c18ca6b40227a4c90e9bdb586042628030cba004ec", size = 375031 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cb/7d/6dac2a6e1eba33ee43f318edbed4ff29151a49b5d37f080aad1e6469bca4/gunicorn-23.0.0-py3-none-any.whl", hash = "sha256:ec400d38950de4dfd418cff8328b2c8faed0edb0d517d3394e457c317908ca4d", size = 85029 },
]

[[package]]
name = "h11"
version = "0.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f5/38/3af3d3633a34a3316095b39c8e8fb4853a28a536e55d347bd8d8e9a14b03/h11-0.14.0.tar.gz", hash = "sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d", size = 100418 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/95/04/ff642e65ad6b90db43e668d70ffb6736436c7ce41fcc549f4e9472234127/h11-0.14.0-py3-none-any.whl", hash = "sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761", size = 58259 },
]

[[package]]
name = "html2text"
version = "2024.2.26"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1a/43/e1d53588561e533212117750ee79ad0ba02a41f52a08c1df3396bd466c05/html2text-2024.2.26.tar.gz", hash = "sha256:05f8e367d15aaabc96415376776cdd11afd5127a77fce6e36afc60c563ca2c32", size = 56527 }

[[package]]
name = "htmldate"
version = "1.9.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "charset-normalizer" },
    { name = "dateparser" },
    { name = "lxml" },
    { name = "python-dateutil" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a5/26/aaae4cab984f0b7dd0f5f1b823fa2ed2fd4a2bb50acd5bd2f0d217562678/htmldate-1.9.3.tar.gz", hash = "sha256:ac0caf4628c3ded4042011e2d60dc68dfb314c77b106587dd307a80d77e708e9", size = 44913 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/05/49/8872130016209c20436ce0c1067de1cf630755d0443d068a5bc17fa95015/htmldate-1.9.3-py3-none-any.whl", hash = "sha256:3fadc422cf3c10a5cdb5e1b914daf37ec7270400a80a1b37e2673ff84faaaff8", size = 31565 },
]

[[package]]
name = "httpcore"
version = "1.0.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9f/45/ad3e1b4d448f22c0cff4f5692f5ed0666658578e358b8d58a19846048059/httpcore-1.0.8.tar.gz", hash = "sha256:86e94505ed24ea06514883fd44d2bc02d90e77e7979c8eb71b90f41d364a1bad", size = 85385 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/8d/f052b1e336bb2c1fc7ed1aaed898aa570c0b61a09707b108979d9fc6e308/httpcore-1.0.8-py3-none-any.whl", hash = "sha256:5254cf149bcb5f75e9d1b2b9f729ea4a4b883d1ad7379fc632b727cec23674be", size = 78732 },
]

[[package]]
name = "httpx"
version = "0.28.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "certifi" },
    { name = "httpcore" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/df/48c586a5fe32a0f01324ee087459e112ebb7224f646c0b5023f5e79e9956/httpx-0.28.1.tar.gz", hash = "sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc", size = 141406 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/39/e50c7c3a983047577ee07d2a9e53faf5a69493943ec3f6a384bdc792deb2/httpx-0.28.1-py3-none-any.whl", hash = "sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad", size = 73517 },
]

[[package]]
name = "httpx-sse"
version = "0.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/4c/60/8f4281fa9bbf3c8034fd54c0e7412e66edbab6bc74c4996bd616f8d0406e/httpx-sse-0.4.0.tar.gz", hash = "sha256:1e81a3a3070ce322add1d3529ed42eb5f70817f45ed6ec915ab753f961139721", size = 12624 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/9b/a181f281f65d776426002f330c31849b86b31fc9d848db62e16f03ff739f/httpx_sse-0.4.0-py3-none-any.whl", hash = "sha256:f329af6eae57eaa2bdfd962b42524764af68075ea87370a2de920af5341e318f", size = 7819 },
]

[[package]]
name = "huggingface-hub"
version = "0.30.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "filelock" },
    { name = "fsspec" },
    { name = "packaging" },
    { name = "pyyaml" },
    { name = "requests" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/df/22/8eb91736b1dcb83d879bd49050a09df29a57cc5cd9f38e48a4b1c45ee890/huggingface_hub-0.30.2.tar.gz", hash = "sha256:9a7897c5b6fd9dad3168a794a8998d6378210f5b9688d0dfc180b1a228dc2466", size = 400868 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/93/27/1fb384a841e9661faad1c31cbfa62864f59632e876df5d795234da51c395/huggingface_hub-0.30.2-py3-none-any.whl", hash = "sha256:68ff05969927058cfa41df4f2155d4bb48f5f54f719dd0390103eefa9b191e28", size = 481433 },
]

[[package]]
name = "hvac"
version = "2.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/48/a4/c0b698a7250b7a5c2956427406560701862215c646e079a7907846608f44/hvac-2.3.0.tar.gz", hash = "sha256:1b85e3320e8642dd82f234db63253cda169a817589e823713dc5fca83119b1e2", size = 332660 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0b/34/56facf52e2ea14ce640f434ccf00311af6f3a1df0019d4682ba28ea09948/hvac-2.3.0-py3-none-any.whl", hash = "sha256:a3afc5710760b6ee9b3571769df87a0333da45da05a5f9f963e1d3925a84be7d", size = 155860 },
]

[[package]]
name = "identify"
version = "2.6.9"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/9b/98/a71ab060daec766acc30fb47dfca219d03de34a70d616a79a38c6066c5bf/identify-2.6.9.tar.gz", hash = "sha256:d40dfe3142a1421d8518e3d3985ef5ac42890683e32306ad614a29490abeb6bf", size = 99249 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/ce/0845144ed1f0e25db5e7a79c2354c1da4b5ce392b8966449d5db8dca18f1/identify-2.6.9-py2.py3-none-any.whl", hash = "sha256:c98b4322da415a8e5a70ff6e51fbc2d2932c015532d77e9f8537b4ba7813b150", size = 99101 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "importlib-metadata"
version = "8.6.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "zipp" },
]
sdist = { url = "https://files.pythonhosted.org/packages/33/08/c1395a292bb23fd03bdf572a1357c5a733d3eecbab877641ceacab23db6e/importlib_metadata-8.6.1.tar.gz", hash = "sha256:310b41d755445d74569f993ccfc22838295d9fe005425094fad953d7f15c8580", size = 55767 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/79/9d/0fb148dc4d6fa4a7dd1d8378168d9b4cd8d4560a6fbf6f0121c5fc34eb68/importlib_metadata-8.6.1-py3-none-any.whl", hash = "sha256:02a89390c1e15fdfdc0d7c6b25cb3e62650d0494005c97d6f148bf5b9787525e", size = 26971 },
]

[[package]]
name = "iniconfig"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f2/97/ebf4da567aa6827c909642694d71c9fcf53e5b504f2d96afea02718862f3/iniconfig-2.1.0.tar.gz", hash = "sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7", size = 4793 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/e1/e6716421ea10d38022b952c159d5161ca1193197fb744506875fbb87ea7b/iniconfig-2.1.0-py3-none-any.whl", hash = "sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760", size = 6050 },
]

[[package]]
name = "ipykernel"
version = "6.29.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "appnope", marker = "sys_platform == 'darwin'" },
    { name = "comm" },
    { name = "debugpy" },
    { name = "ipython" },
    { name = "jupyter-client" },
    { name = "jupyter-core" },
    { name = "matplotlib-inline" },
    { name = "nest-asyncio" },
    { name = "packaging" },
    { name = "psutil" },
    { name = "pyzmq" },
    { name = "tornado" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e9/5c/67594cb0c7055dc50814b21731c22a601101ea3b1b50a9a1b090e11f5d0f/ipykernel-6.29.5.tar.gz", hash = "sha256:f093a22c4a40f8828f8e330a9c297cb93dcab13bd9678ded6de8e5cf81c56215", size = 163367 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/94/5c/368ae6c01c7628438358e6d337c19b05425727fbb221d2a3c4303c372f42/ipykernel-6.29.5-py3-none-any.whl", hash = "sha256:afdb66ba5aa354b09b91379bac28ae4afebbb30e8b39510c9690afb7a10421b5", size = 117173 },
]

[[package]]
name = "ipython"
version = "9.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "decorator" },
    { name = "ipython-pygments-lexers" },
    { name = "jedi" },
    { name = "matplotlib-inline" },
    { name = "pexpect", marker = "sys_platform != 'emscripten' and sys_platform != 'win32'" },
    { name = "prompt-toolkit" },
    { name = "pygments" },
    { name = "stack-data" },
    { name = "traitlets" },
    { name = "typing-extensions", marker = "python_full_version < '3.12'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/70/9a/6b8984bedc990f3a4aa40ba8436dea27e23d26a64527de7c2e5e12e76841/ipython-9.1.0.tar.gz", hash = "sha256:a47e13a5e05e02f3b8e1e7a0f9db372199fe8c3763532fe7a1e0379e4e135f16", size = 4373688 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/9d/4ff2adf55d1b6e3777b0303fdbe5b723f76e46cba4a53a32fe82260d2077/ipython-9.1.0-py3-none-any.whl", hash = "sha256:2df07257ec2f84a6b346b8d83100bcf8fa501c6e01ab75cd3799b0bb253b3d2a", size = 604053 },
]

[[package]]
name = "ipython-pygments-lexers"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ef/4c/5dd1d8af08107f88c7f741ead7a40854b8ac24ddf9ae850afbcf698aa552/ipython_pygments_lexers-1.1.1.tar.gz", hash = "sha256:09c0138009e56b6854f9535736f4171d855c8c08a563a0dcd8022f78355c7e81", size = 8393 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/33/1f075bf72b0b747cb3288d011319aaf64083cf2efef8354174e3ed4540e2/ipython_pygments_lexers-1.1.1-py3-none-any.whl", hash = "sha256:a9462224a505ade19a605f71f8fa63c2048833ce50abc86768a0d81d876dc81c", size = 8074 },
]

[[package]]
name = "ipywidgets"
version = "8.1.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "comm" },
    { name = "ipython" },
    { name = "jupyterlab-widgets" },
    { name = "traitlets" },
    { name = "widgetsnbextension" },
]
sdist = { url = "https://files.pythonhosted.org/packages/aa/98/4074d9cb7e89f7ee387b41e9a4b74c8e0d6196e90b910af1cc674e1cdd3d/ipywidgets-8.1.6.tar.gz", hash = "sha256:d8ace49c66f14419fc66071371b99d01bed230bbc15d8a60233b18bfbd782851", size = 116764 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/53/b8/62952729573d983d9433faacf62a52ee2e8cf46504418061ad1739967abe/ipywidgets-8.1.6-py3-none-any.whl", hash = "sha256:446e7630a1d025bdc7635e1169fcc06f2ce33b5bd41c2003edeb4a47c8d4bbb1", size = 139808 },
]

[[package]]
name = "isoduration"
version = "20.11.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "arrow" },
]
sdist = { url = "https://files.pythonhosted.org/packages/7c/1a/3c8edc664e06e6bd06cce40c6b22da5f1429aa4224d0c590f3be21c91ead/isoduration-20.11.0.tar.gz", hash = "sha256:ac2f9015137935279eac671f94f89eb00584f940f5dc49462a0c4ee692ba1bd9", size = 11649 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7b/55/e5326141505c5d5e34c5e0935d2908a74e4561eca44108fbfb9c13d2911a/isoduration-20.11.0-py3-none-any.whl", hash = "sha256:b2904c2a4228c3d44f409c8ae8e2370eb21a26f7ac2ec5446df141dde3452042", size = 11321 },
]

[[package]]
name = "jedi"
version = "0.19.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "parso" },
]
sdist = { url = "https://files.pythonhosted.org/packages/72/3a/79a912fbd4d8dd6fbb02bf69afd3bb72cf0c729bb3063c6f4498603db17a/jedi-0.19.2.tar.gz", hash = "sha256:4770dc3de41bde3966b02eb84fbcf557fb33cce26ad23da12c742fb50ecb11f0", size = 1231287 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c0/5a/9cac0c82afec3d09ccd97c8b6502d48f165f9124db81b4bcb90b4af974ee/jedi-0.19.2-py2.py3-none-any.whl", hash = "sha256:a8ef22bde8490f57fe5c7681a3c83cb58874daf72b4784de3cce5b6ef6edb5b9", size = 1572278 },
]

[[package]]
name = "jinja2"
version = "3.1.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markupsafe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/df/bf/f7da0350254c0ed7c72f3e33cef02e048281fec7ecec5f032d4aac52226b/jinja2-3.1.6.tar.gz", hash = "sha256:0137fb05990d35f1275a587e9aee6d56da821fc83491a0fb838183be43f66d6d", size = 245115 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/62/a1/3d680cbfd5f4b8f15abc1d571870c5fc3e594bb582bc3b64ea099db13e56/jinja2-3.1.6-py3-none-any.whl", hash = "sha256:85ece4451f492d0c13c5dd7c13a64681a86afae63a5f347908daf103ce6d2f67", size = 134899 },
]

[[package]]
name = "jiter"
version = "0.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1e/c2/e4562507f52f0af7036da125bb699602ead37a2332af0788f8e0a3417f36/jiter-0.9.0.tar.gz", hash = "sha256:aadba0964deb424daa24492abc3d229c60c4a31bfee205aedbf1acc7639d7893", size = 162604 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/23/44/e241a043f114299254e44d7e777ead311da400517f179665e59611ab0ee4/jiter-0.9.0-cp311-cp311-macosx_10_12_x86_64.whl", hash = "sha256:6c4d99c71508912a7e556d631768dcdef43648a93660670986916b297f1c54af", size = 314654 },
    { url = "https://files.pythonhosted.org/packages/fb/1b/a7e5e42db9fa262baaa9489d8d14ca93f8663e7f164ed5e9acc9f467fc00/jiter-0.9.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:8f60fb8ce7df529812bf6c625635a19d27f30806885139e367af93f6e734ef58", size = 320909 },
    { url = "https://files.pythonhosted.org/packages/60/bf/8ebdfce77bc04b81abf2ea316e9c03b4a866a7d739cf355eae4d6fd9f6fe/jiter-0.9.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:51c4e1a4f8ea84d98b7b98912aa4290ac3d1eabfde8e3c34541fae30e9d1f08b", size = 341733 },
    { url = "https://files.pythonhosted.org/packages/a8/4e/754ebce77cff9ab34d1d0fa0fe98f5d42590fd33622509a3ba6ec37ff466/jiter-0.9.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:5f4c677c424dc76684fea3e7285a7a2a7493424bea89ac441045e6a1fb1d7b3b", size = 365097 },
    { url = "https://files.pythonhosted.org/packages/32/2c/6019587e6f5844c612ae18ca892f4cd7b3d8bbf49461ed29e384a0f13d98/jiter-0.9.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:2221176dfec87f3470b21e6abca056e6b04ce9bff72315cb0b243ca9e835a4b5", size = 406603 },
    { url = "https://files.pythonhosted.org/packages/da/e9/c9e6546c817ab75a1a7dab6dcc698e62e375e1017113e8e983fccbd56115/jiter-0.9.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:3c7adb66f899ffa25e3c92bfcb593391ee1947dbdd6a9a970e0d7e713237d572", size = 396625 },
    { url = "https://files.pythonhosted.org/packages/be/bd/976b458add04271ebb5a255e992bd008546ea04bb4dcadc042a16279b4b4/jiter-0.9.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c98d27330fdfb77913c1097a7aab07f38ff2259048949f499c9901700789ac15", size = 351832 },
    { url = "https://files.pythonhosted.org/packages/07/51/fe59e307aaebec9265dbad44d9d4381d030947e47b0f23531579b9a7c2df/jiter-0.9.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:eda3f8cc74df66892b1d06b5d41a71670c22d95a1ca2cbab73654745ce9d0419", size = 384590 },
    { url = "https://files.pythonhosted.org/packages/db/55/5dcd2693794d8e6f4889389ff66ef3be557a77f8aeeca8973a97a7c00557/jiter-0.9.0-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:dd5ab5ddc11418dce28343123644a100f487eaccf1de27a459ab36d6cca31043", size = 520690 },
    { url = "https://files.pythonhosted.org/packages/54/d5/9f51dc90985e9eb251fbbb747ab2b13b26601f16c595a7b8baba964043bd/jiter-0.9.0-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:42f8a68a69f047b310319ef8e2f52fdb2e7976fb3313ef27df495cf77bcad965", size = 512649 },
    { url = "https://files.pythonhosted.org/packages/a6/e5/4e385945179bcf128fa10ad8dca9053d717cbe09e258110e39045c881fe5/jiter-0.9.0-cp311-cp311-win32.whl", hash = "sha256:a25519efb78a42254d59326ee417d6f5161b06f5da827d94cf521fed961b1ff2", size = 206920 },
    { url = "https://files.pythonhosted.org/packages/4c/47/5e0b94c603d8e54dd1faab439b40b832c277d3b90743e7835879ab663757/jiter-0.9.0-cp311-cp311-win_amd64.whl", hash = "sha256:923b54afdd697dfd00d368b7ccad008cccfeb1efb4e621f32860c75e9f25edbd", size = 210119 },
    { url = "https://files.pythonhosted.org/packages/af/d7/c55086103d6f29b694ec79156242304adf521577530d9031317ce5338c59/jiter-0.9.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:7b46249cfd6c48da28f89eb0be3f52d6fdb40ab88e2c66804f546674e539ec11", size = 309203 },
    { url = "https://files.pythonhosted.org/packages/b0/01/f775dfee50beb420adfd6baf58d1c4d437de41c9b666ddf127c065e5a488/jiter-0.9.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:609cf3c78852f1189894383cf0b0b977665f54cb38788e3e6b941fa6d982c00e", size = 319678 },
    { url = "https://files.pythonhosted.org/packages/ab/b8/09b73a793714726893e5d46d5c534a63709261af3d24444ad07885ce87cb/jiter-0.9.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d726a3890a54561e55a9c5faea1f7655eda7f105bd165067575ace6e65f80bb2", size = 341816 },
    { url = "https://files.pythonhosted.org/packages/35/6f/b8f89ec5398b2b0d344257138182cc090302854ed63ed9c9051e9c673441/jiter-0.9.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:2e89dc075c1fef8fa9be219e249f14040270dbc507df4215c324a1839522ea75", size = 364152 },
    { url = "https://files.pythonhosted.org/packages/9b/ca/978cc3183113b8e4484cc7e210a9ad3c6614396e7abd5407ea8aa1458eef/jiter-0.9.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:04e8ffa3c353b1bc4134f96f167a2082494351e42888dfcf06e944f2729cbe1d", size = 406991 },
    { url = "https://files.pythonhosted.org/packages/13/3a/72861883e11a36d6aa314b4922125f6ae90bdccc225cd96d24cc78a66385/jiter-0.9.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:203f28a72a05ae0e129b3ed1f75f56bc419d5f91dfacd057519a8bd137b00c42", size = 395824 },
    { url = "https://files.pythonhosted.org/packages/87/67/22728a86ef53589c3720225778f7c5fdb617080e3deaed58b04789418212/jiter-0.9.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fca1a02ad60ec30bb230f65bc01f611c8608b02d269f998bc29cca8619a919dc", size = 351318 },
    { url = "https://files.pythonhosted.org/packages/69/b9/f39728e2e2007276806d7a6609cda7fac44ffa28ca0d02c49a4f397cc0d9/jiter-0.9.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:237e5cee4d5d2659aaf91bbf8ec45052cc217d9446070699441a91b386ae27dc", size = 384591 },
    { url = "https://files.pythonhosted.org/packages/eb/8f/8a708bc7fd87b8a5d861f1c118a995eccbe6d672fe10c9753e67362d0dd0/jiter-0.9.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:528b6b71745e7326eed73c53d4aa57e2a522242320b6f7d65b9c5af83cf49b6e", size = 520746 },
    { url = "https://files.pythonhosted.org/packages/95/1e/65680c7488bd2365dbd2980adaf63c562d3d41d3faac192ebc7ef5b4ae25/jiter-0.9.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:9f48e86b57bc711eb5acdfd12b6cb580a59cc9a993f6e7dcb6d8b50522dcd50d", size = 512754 },
    { url = "https://files.pythonhosted.org/packages/78/f3/fdc43547a9ee6e93c837685da704fb6da7dba311fc022e2766d5277dfde5/jiter-0.9.0-cp312-cp312-win32.whl", hash = "sha256:699edfde481e191d81f9cf6d2211debbfe4bd92f06410e7637dffb8dd5dfde06", size = 207075 },
    { url = "https://files.pythonhosted.org/packages/cd/9d/742b289016d155f49028fe1bfbeb935c9bf0ffeefdf77daf4a63a42bb72b/jiter-0.9.0-cp312-cp312-win_amd64.whl", hash = "sha256:099500d07b43f61d8bd780466d429c45a7b25411b334c60ca875fa775f68ccb0", size = 207999 },
    { url = "https://files.pythonhosted.org/packages/e7/1b/4cd165c362e8f2f520fdb43245e2b414f42a255921248b4f8b9c8d871ff1/jiter-0.9.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:2764891d3f3e8b18dce2cff24949153ee30c9239da7c00f032511091ba688ff7", size = 308197 },
    { url = "https://files.pythonhosted.org/packages/13/aa/7a890dfe29c84c9a82064a9fe36079c7c0309c91b70c380dc138f9bea44a/jiter-0.9.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:387b22fbfd7a62418d5212b4638026d01723761c75c1c8232a8b8c37c2f1003b", size = 318160 },
    { url = "https://files.pythonhosted.org/packages/6a/38/5888b43fc01102f733f085673c4f0be5a298f69808ec63de55051754e390/jiter-0.9.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:40d8da8629ccae3606c61d9184970423655fb4e33d03330bcdfe52d234d32f69", size = 341259 },
    { url = "https://files.pythonhosted.org/packages/3d/5e/bbdbb63305bcc01006de683b6228cd061458b9b7bb9b8d9bc348a58e5dc2/jiter-0.9.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:a1be73d8982bdc278b7b9377426a4b44ceb5c7952073dd7488e4ae96b88e1103", size = 363730 },
    { url = "https://files.pythonhosted.org/packages/75/85/53a3edc616992fe4af6814c25f91ee3b1e22f7678e979b6ea82d3bc0667e/jiter-0.9.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:2228eaaaa111ec54b9e89f7481bffb3972e9059301a878d085b2b449fbbde635", size = 405126 },
    { url = "https://files.pythonhosted.org/packages/ae/b3/1ee26b12b2693bd3f0b71d3188e4e5d817b12e3c630a09e099e0a89e28fa/jiter-0.9.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:11509bfecbc319459647d4ac3fd391d26fdf530dad00c13c4dadabf5b81f01a4", size = 393668 },
    { url = "https://files.pythonhosted.org/packages/11/87/e084ce261950c1861773ab534d49127d1517b629478304d328493f980791/jiter-0.9.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3f22238da568be8bbd8e0650e12feeb2cfea15eda4f9fc271d3b362a4fa0604d", size = 352350 },
    { url = "https://files.pythonhosted.org/packages/f0/06/7dca84b04987e9df563610aa0bc154ea176e50358af532ab40ffb87434df/jiter-0.9.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:17f5d55eb856597607562257c8e36c42bc87f16bef52ef7129b7da11afc779f3", size = 384204 },
    { url = "https://files.pythonhosted.org/packages/16/2f/82e1c6020db72f397dd070eec0c85ebc4df7c88967bc86d3ce9864148f28/jiter-0.9.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:6a99bed9fbb02f5bed416d137944419a69aa4c423e44189bc49718859ea83bc5", size = 520322 },
    { url = "https://files.pythonhosted.org/packages/36/fd/4f0cd3abe83ce208991ca61e7e5df915aa35b67f1c0633eb7cf2f2e88ec7/jiter-0.9.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:e057adb0cd1bd39606100be0eafe742de2de88c79df632955b9ab53a086b3c8d", size = 512184 },
    { url = "https://files.pythonhosted.org/packages/a0/3c/8a56f6d547731a0b4410a2d9d16bf39c861046f91f57c98f7cab3d2aa9ce/jiter-0.9.0-cp313-cp313-win32.whl", hash = "sha256:f7e6850991f3940f62d387ccfa54d1a92bd4bb9f89690b53aea36b4364bcab53", size = 206504 },
    { url = "https://files.pythonhosted.org/packages/f4/1c/0c996fd90639acda75ed7fa698ee5fd7d80243057185dc2f63d4c1c9f6b9/jiter-0.9.0-cp313-cp313-win_amd64.whl", hash = "sha256:c8ae3bf27cd1ac5e6e8b7a27487bf3ab5f82318211ec2e1346a5b058756361f7", size = 204943 },
    { url = "https://files.pythonhosted.org/packages/78/0f/77a63ca7aa5fed9a1b9135af57e190d905bcd3702b36aca46a01090d39ad/jiter-0.9.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:f0b2827fb88dda2cbecbbc3e596ef08d69bda06c6f57930aec8e79505dc17001", size = 317281 },
    { url = "https://files.pythonhosted.org/packages/f9/39/a3a1571712c2bf6ec4c657f0d66da114a63a2e32b7e4eb8e0b83295ee034/jiter-0.9.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:062b756ceb1d40b0b28f326cba26cfd575a4918415b036464a52f08632731e5a", size = 350273 },
    { url = "https://files.pythonhosted.org/packages/ee/47/3729f00f35a696e68da15d64eb9283c330e776f3b5789bac7f2c0c4df209/jiter-0.9.0-cp313-cp313t-win_amd64.whl", hash = "sha256:6f7838bc467ab7e8ef9f387bd6de195c43bad82a569c1699cb822f6609dd4cdf", size = 206867 },
]

[[package]]
name = "jmespath"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/00/2a/e867e8531cf3e36b41201936b7fa7ba7b5702dbef42922193f05c8976cd6/jmespath-1.0.1.tar.gz", hash = "sha256:90261b206d6defd58fdd5e85f478bf633a2901798906be2ad389150c5c60edbe", size = 25843 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/31/b4/b9b800c45527aadd64d5b442f9b932b00648617eb5d63d2c7a6587b7cafc/jmespath-1.0.1-py3-none-any.whl", hash = "sha256:02e2e4cc71b5bcab88332eebf907519190dd9e6e82107fa7f83b1003a6252980", size = 20256 },
]

[[package]]
name = "joblib"
version = "1.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/64/33/60135848598c076ce4b231e1b1895170f45fbcaeaa2c9d5e38b04db70c35/joblib-1.4.2.tar.gz", hash = "sha256:2382c5816b2636fbd20a09e0f4e9dad4736765fdfb7dca582943b9c1366b3f0e", size = 2116621 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/91/29/df4b9b42f2be0b623cbd5e2140cafcaa2bef0759a00b7b70104dcfe2fb51/joblib-1.4.2-py3-none-any.whl", hash = "sha256:06d478d5674cbc267e7496a410ee875abd68e4340feff4490bcb7afb88060ae6", size = 301817 },
]

[[package]]
name = "json5"
version = "0.12.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/12/be/c6c745ec4c4539b25a278b70e29793f10382947df0d9efba2fa09120895d/json5-0.12.0.tar.gz", hash = "sha256:0b4b6ff56801a1c7dc817b0241bca4ce474a0e6a163bfef3fc594d3fd263ff3a", size = 51907 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/41/9f/3500910d5a98549e3098807493851eeef2b89cdd3032227558a104dfe926/json5-0.12.0-py3-none-any.whl", hash = "sha256:6d37aa6c08b0609f16e1ec5ff94697e2cbbfbad5ac112afa05794da9ab7810db", size = 36079 },
]

[[package]]
name = "jsonpatch"
version = "1.33"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jsonpointer" },
]
sdist = { url = "https://files.pythonhosted.org/packages/42/78/18813351fe5d63acad16aec57f94ec2b70a09e53ca98145589e185423873/jsonpatch-1.33.tar.gz", hash = "sha256:9fcd4009c41e6d12348b4a0ff2563ba56a2923a7dfee731d004e212e1ee5030c", size = 21699 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/73/07/02e16ed01e04a374e644b575638ec7987ae846d25ad97bcc9945a3ee4b0e/jsonpatch-1.33-py2.py3-none-any.whl", hash = "sha256:0ae28c0cd062bbd8b8ecc26d7d164fbbea9652a1a3693f3b956c1eae5145dade", size = 12898 },
]

[[package]]
name = "jsonpointer"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6a/0a/eebeb1fa92507ea94016a2a790b93c2ae41a7e18778f85471dc54475ed25/jsonpointer-3.0.0.tar.gz", hash = "sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef", size = 9114 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/71/92/5e77f98553e9e75130c78900d000368476aed74276eb8ae8796f65f00918/jsonpointer-3.0.0-py2.py3-none-any.whl", hash = "sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942", size = 7595 },
]

[[package]]
name = "jsonschema"
version = "4.23.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "attrs" },
    { name = "jsonschema-specifications" },
    { name = "referencing" },
    { name = "rpds-py" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/2e/03362ee4034a4c917f697890ccd4aec0800ccf9ded7f511971c75451deec/jsonschema-4.23.0.tar.gz", hash = "sha256:d71497fef26351a33265337fa77ffeb82423f3ea21283cd9467bb03999266bc4", size = 325778 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/4a/4f9dbeb84e8850557c02365a0eee0649abe5eb1d84af92a25731c6c0f922/jsonschema-4.23.0-py3-none-any.whl", hash = "sha256:fbadb6f8b144a8f8cf9f0b89ba94501d143e50411a1278633f56a7acf7fd5566", size = 88462 },
]

[package.optional-dependencies]
format-nongpl = [
    { name = "fqdn" },
    { name = "idna" },
    { name = "isoduration" },
    { name = "jsonpointer" },
    { name = "rfc3339-validator" },
    { name = "rfc3986-validator" },
    { name = "uri-template" },
    { name = "webcolors" },
]

[[package]]
name = "jsonschema-specifications"
version = "2024.10.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "referencing" },
]
sdist = { url = "https://files.pythonhosted.org/packages/10/db/58f950c996c793472e336ff3655b13fbcf1e3b359dcf52dcf3ed3b52c352/jsonschema_specifications-2024.10.1.tar.gz", hash = "sha256:0f38b83639958ce1152d02a7f062902c41c8fd20d558b0c34344292d417ae272", size = 15561 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/0f/8910b19ac0670a0f80ce1008e5e751c4a57e14d2c4c13a482aa6079fa9d6/jsonschema_specifications-2024.10.1-py3-none-any.whl", hash = "sha256:a09a0680616357d9a0ecf05c12ad234479f549239d0f5b55f3deea67475da9bf", size = 18459 },
]

[[package]]
name = "jupyter"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ipykernel" },
    { name = "ipywidgets" },
    { name = "jupyter-console" },
    { name = "jupyterlab" },
    { name = "nbconvert" },
    { name = "notebook" },
]
sdist = { url = "https://files.pythonhosted.org/packages/58/f3/af28ea964ab8bc1e472dba2e82627d36d470c51f5cd38c37502eeffaa25e/jupyter-1.1.1.tar.gz", hash = "sha256:d55467bceabdea49d7e3624af7e33d59c37fff53ed3a350e1ac957bed731de7a", size = 5714959 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/38/64/285f20a31679bf547b75602702f7800e74dbabae36ef324f716c02804753/jupyter-1.1.1-py2.py3-none-any.whl", hash = "sha256:7a59533c22af65439b24bbe60373a4e95af8f16ac65a6c00820ad378e3f7cc83", size = 2657 },
]

[[package]]
name = "jupyter-client"
version = "8.6.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jupyter-core" },
    { name = "python-dateutil" },
    { name = "pyzmq" },
    { name = "tornado" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/71/22/bf9f12fdaeae18019a468b68952a60fe6dbab5d67cd2a103cac7659b41ca/jupyter_client-8.6.3.tar.gz", hash = "sha256:35b3a0947c4a6e9d589eb97d7d4cd5e90f910ee73101611f01283732bd6d9419", size = 342019 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/11/85/b0394e0b6fcccd2c1eeefc230978a6f8cb0c5df1e4cd3e7625735a0d7d1e/jupyter_client-8.6.3-py3-none-any.whl", hash = "sha256:e8a19cc986cc45905ac3362915f410f3af85424b4c0905e94fa5f2cb08e8f23f", size = 106105 },
]

[[package]]
name = "jupyter-console"
version = "6.6.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ipykernel" },
    { name = "ipython" },
    { name = "jupyter-client" },
    { name = "jupyter-core" },
    { name = "prompt-toolkit" },
    { name = "pygments" },
    { name = "pyzmq" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/bd/2d/e2fd31e2fc41c14e2bcb6c976ab732597e907523f6b2420305f9fc7fdbdb/jupyter_console-6.6.3.tar.gz", hash = "sha256:566a4bf31c87adbfadf22cdf846e3069b59a71ed5da71d6ba4d8aaad14a53539", size = 34363 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ca/77/71d78d58f15c22db16328a476426f7ac4a60d3a5a7ba3b9627ee2f7903d4/jupyter_console-6.6.3-py3-none-any.whl", hash = "sha256:309d33409fcc92ffdad25f0bcdf9a4a9daa61b6f341177570fdac03de5352485", size = 24510 },
]

[[package]]
name = "jupyter-core"
version = "5.7.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "platformdirs" },
    { name = "pywin32", marker = "platform_python_implementation != 'PyPy' and sys_platform == 'win32'" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/00/11/b56381fa6c3f4cc5d2cf54a7dbf98ad9aa0b339ef7a601d6053538b079a7/jupyter_core-5.7.2.tar.gz", hash = "sha256:aa5f8d32bbf6b431ac830496da7392035d6f61b4f54872f15c4bd2a9c3f536d9", size = 87629 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c9/fb/108ecd1fe961941959ad0ee4e12ee7b8b1477247f30b1fdfd83ceaf017f0/jupyter_core-5.7.2-py3-none-any.whl", hash = "sha256:4f7315d2f6b4bcf2e3e7cb6e46772eba760ae459cd1f59d29eb57b0a01bd7409", size = 28965 },
]

[[package]]
name = "jupyter-events"
version = "0.12.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jsonschema", extra = ["format-nongpl"] },
    { name = "packaging" },
    { name = "python-json-logger" },
    { name = "pyyaml" },
    { name = "referencing" },
    { name = "rfc3339-validator" },
    { name = "rfc3986-validator" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9d/c3/306d090461e4cf3cd91eceaff84bede12a8e52cd821c2d20c9a4fd728385/jupyter_events-0.12.0.tar.gz", hash = "sha256:fc3fce98865f6784c9cd0a56a20644fc6098f21c8c33834a8d9fe383c17e554b", size = 62196 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e2/48/577993f1f99c552f18a0428731a755e06171f9902fa118c379eb7c04ea22/jupyter_events-0.12.0-py3-none-any.whl", hash = "sha256:6464b2fa5ad10451c3d35fabc75eab39556ae1e2853ad0c0cc31b656731a97fb", size = 19430 },
]

[[package]]
name = "jupyter-lsp"
version = "2.2.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jupyter-server" },
]
sdist = { url = "https://files.pythonhosted.org/packages/85/b4/3200b0b09c12bc3b72d943d923323c398eff382d1dcc7c0dbc8b74630e40/jupyter-lsp-2.2.5.tar.gz", hash = "sha256:793147a05ad446f809fd53ef1cd19a9f5256fd0a2d6b7ce943a982cb4f545001", size = 48741 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/e0/7bd7cff65594fd9936e2f9385701e44574fc7d721331ff676ce440b14100/jupyter_lsp-2.2.5-py3-none-any.whl", hash = "sha256:45fbddbd505f3fbfb0b6cb2f1bc5e15e83ab7c79cd6e89416b248cb3c00c11da", size = 69146 },
]

[[package]]
name = "jupyter-server"
version = "2.15.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "argon2-cffi" },
    { name = "jinja2" },
    { name = "jupyter-client" },
    { name = "jupyter-core" },
    { name = "jupyter-events" },
    { name = "jupyter-server-terminals" },
    { name = "nbconvert" },
    { name = "nbformat" },
    { name = "overrides" },
    { name = "packaging" },
    { name = "prometheus-client" },
    { name = "pywinpty", marker = "(os_name == 'nt' and platform_machine != 'aarch64' and sys_platform == 'linux') or (os_name == 'nt' and sys_platform != 'darwin' and sys_platform != 'linux')" },
    { name = "pyzmq" },
    { name = "send2trash" },
    { name = "terminado" },
    { name = "tornado" },
    { name = "traitlets" },
    { name = "websocket-client" },
]
sdist = { url = "https://files.pythonhosted.org/packages/61/8c/df09d4ab646141f130f9977b32b206ba8615d1969b2eba6a2e84b7f89137/jupyter_server-2.15.0.tar.gz", hash = "sha256:9d446b8697b4f7337a1b7cdcac40778babdd93ba614b6d68ab1c0c918f1c4084", size = 725227 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e2/a2/89eeaf0bb954a123a909859fa507fa86f96eb61b62dc30667b60dbd5fdaf/jupyter_server-2.15.0-py3-none-any.whl", hash = "sha256:872d989becf83517012ee669f09604aa4a28097c0bd90b2f424310156c2cdae3", size = 385826 },
]

[[package]]
name = "jupyter-server-terminals"
version = "0.5.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pywinpty", marker = "(os_name == 'nt' and platform_machine != 'aarch64' and sys_platform == 'linux') or (os_name == 'nt' and sys_platform != 'darwin' and sys_platform != 'linux')" },
    { name = "terminado" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/d5/562469734f476159e99a55426d697cbf8e7eb5efe89fb0e0b4f83a3d3459/jupyter_server_terminals-0.5.3.tar.gz", hash = "sha256:5ae0295167220e9ace0edcfdb212afd2b01ee8d179fe6f23c899590e9b8a5269", size = 31430 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/2d/2b32cdbe8d2a602f697a649798554e4f072115438e92249624e532e8aca6/jupyter_server_terminals-0.5.3-py3-none-any.whl", hash = "sha256:41ee0d7dc0ebf2809c668e0fc726dfaf258fcd3e769568996ca731b6194ae9aa", size = 13656 },
]

[[package]]
name = "jupyterlab"
version = "4.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "async-lru" },
    { name = "httpx" },
    { name = "ipykernel" },
    { name = "jinja2" },
    { name = "jupyter-core" },
    { name = "jupyter-lsp" },
    { name = "jupyter-server" },
    { name = "jupyterlab-server" },
    { name = "notebook-shim" },
    { name = "packaging" },
    { name = "setuptools" },
    { name = "tornado" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/46/49/0beaab21155e5f7438032f3da920abbcf46159b28adafbdf596dd33c57a6/jupyterlab-4.4.0.tar.gz", hash = "sha256:f1767d5f0104e40f3b4a63bf6892bbef8e4704dcabf0c78408a3bdc411792f04", size = 22996521 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a2/64/1a559e1b945c3d424c1ac9f333bfd6f595d5819efde3a6d8b036e6b0585f/jupyterlab-4.4.0-py3-none-any.whl", hash = "sha256:61d33991fbb352cc7caac08bd0c34577fea86d8d5d9772600d9d5a6bcbc882c0", size = 12291918 },
]

[[package]]
name = "jupyterlab-pygments"
version = "0.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/90/51/9187be60d989df97f5f0aba133fa54e7300f17616e065d1ada7d7646b6d6/jupyterlab_pygments-0.3.0.tar.gz", hash = "sha256:721aca4d9029252b11cfa9d185e5b5af4d54772bb8072f9b7036f4170054d35d", size = 512900 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/dd/ead9d8ea85bf202d90cc513b533f9c363121c7792674f78e0d8a854b63b4/jupyterlab_pygments-0.3.0-py3-none-any.whl", hash = "sha256:841a89020971da1d8693f1a99997aefc5dc424bb1b251fd6322462a1b8842780", size = 15884 },
]

[[package]]
name = "jupyterlab-server"
version = "2.27.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "babel" },
    { name = "jinja2" },
    { name = "json5" },
    { name = "jsonschema" },
    { name = "jupyter-server" },
    { name = "packaging" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/0a/c9/a883ce65eb27905ce77ace410d83587c82ea64dc85a48d1f7ed52bcfa68d/jupyterlab_server-2.27.3.tar.gz", hash = "sha256:eb36caca59e74471988f0ae25c77945610b887f777255aa21f8065def9e51ed4", size = 76173 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/09/2032e7d15c544a0e3cd831c51d77a8ca57f7555b2e1b2922142eddb02a84/jupyterlab_server-2.27.3-py3-none-any.whl", hash = "sha256:e697488f66c3db49df675158a77b3b017520d772c6e1548c7d9bcc5df7944ee4", size = 59700 },
]

[[package]]
name = "jupyterlab-widgets"
version = "3.0.14"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/94/766b8199e8a902a4c5ee12a9407a348bbabe9fa22400758576b153d17d8e/jupyterlab_widgets-3.0.14.tar.gz", hash = "sha256:bad03e59546869f026e537e0d170e454259e6dc7048e14041707ca31e523c8a1", size = 203815 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/64/7a/f2479ba401e02f7fcbd3fc6af201eac888eaa188574b8e9df19452ab4972/jupyterlab_widgets-3.0.14-py3-none-any.whl", hash = "sha256:54c33e3306b7fca139d165d6190dc6c0627aafa5d14adfc974a4e9a3d26cb703", size = 213999 },
]

[[package]]
name = "justext"
version = "3.0.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "lxml", extra = ["html-clean"] },
]
sdist = { url = "https://files.pythonhosted.org/packages/49/f3/45890c1b314f0d04e19c1c83d534e611513150939a7cf039664d9ab1e649/justext-3.0.2.tar.gz", hash = "sha256:13496a450c44c4cd5b5a75a5efcd9996066d2a189794ea99a49949685a0beb05", size = 828521 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f2/ac/52f4e86d1924a7fc05af3aeb34488570eccc39b4af90530dd6acecdf16b5/justext-3.0.2-py2.py3-none-any.whl", hash = "sha256:62b1c562b15c3c6265e121cc070874243a443bfd53060e869393f09d6b6cc9a7", size = 837940 },
]

[[package]]
name = "langchain-anthropic"
version = "0.3.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anthropic" },
    { name = "defusedxml" },
    { name = "langchain-core" },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5f/ad/f9f77948deeca2c33a55f262ca78cee7c2c3dfbaef849704991517443bf6/langchain_anthropic-0.3.3.tar.gz", hash = "sha256:1faf0aa0aed392a18ed34d00e816d7c748ef342523deacc131690aae08ab4f1b", size = 21003 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/56/cf/466b38e46e7071e7367c452bd29d1b4de03e4023685b0c45fc2df728b616/langchain_anthropic-0.3.3-py3-none-any.whl", hash = "sha256:385e6d6d719514369f38304ed5e9b74827feca36f3391595695dcb82696ed04a", size = 22471 },
]

[[package]]
name = "langchain-core"
version = "0.3.51"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jsonpatch" },
    { name = "langsmith" },
    { name = "packaging" },
    { name = "pydantic" },
    { name = "pyyaml" },
    { name = "tenacity" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6e/24/74dfce829f63aaf09885ae569121335a62ecfa5043a35d9e819cd0e046f0/langchain_core-0.3.51.tar.gz", hash = "sha256:db76b9cc331411602cb40ba0469a161febe7a0663fbcaddbc9056046ac2d22f4", size = 542003 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a9/bf/3464d759bf8687a3bbdfeb9af2f2aeb0a265c6d5ef5fd9274c2a70449f77/langchain_core-0.3.51-py3-none-any.whl", hash = "sha256:4bd71e8acd45362aa428953f2a91d8162318014544a2216e4b769463caf68e13", size = 423303 },
]

[[package]]
name = "langchain-google-genai"
version = "2.1.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "filetype" },
    { name = "google-ai-generativelanguage" },
    { name = "langchain-core" },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/32/aeaa30a23f495417d71a7b8d9f6a71a40500b9994424c57e89418d96fc52/langchain_google_genai-2.1.2.tar.gz", hash = "sha256:f605501b498288d32914f6f8c0b7c9cfa67432757f596dcb2dbbd8042e892963", size = 38091 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/59/82/2a5d3fe54df23d6471768b9558f9a73e1a712065e6c20a228aa3254092aa/langchain_google_genai-2.1.2-py3-none-any.whl", hash = "sha256:eb9c95d551ecc0216e5baef2f2e6ae1b60897e618f273356d31b680022a1a755", size = 42030 },
]

[[package]]
name = "langchain-ollama"
version = "0.2.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "langchain-core" },
    { name = "ollama" },
]
sdist = { url = "https://files.pythonhosted.org/packages/88/8e/21f1df6af0983cf1bc6d15c71f21bd17d968114bf6cce0fb40442f5ba81f/langchain_ollama-0.2.2.tar.gz", hash = "sha256:2d9bcb06ffdbe43c7c6906c46e710d36d33b6b99cd4975cbf54060f13e51c875", size = 16970 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7f/77/219fb2290c832e33af2731246ea3328bade50756288c1e97ae73c4ccc197/langchain_ollama-0.2.2-py3-none-any.whl", hash = "sha256:8a1ee72dbb6ea3b3ace1d9dd317e472d667a8ed491328550da59f4893a6796f8", size = 18362 },
]

[[package]]
name = "langchain-openai"
version = "0.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "langchain-core" },
    { name = "openai" },
    { name = "tiktoken" },
]
sdist = { url = "https://files.pythonhosted.org/packages/85/01/8fa0e1a708f1634a88df0c239f1e9733a2848c62fcd6aaea08cee4857ec1/langchain_openai-0.3.1.tar.gz", hash = "sha256:cce314f1437b2cad73e0ed2b55e74dc399bc1bbc43594c4448912fb51c5e4447", size = 48216 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8d/9e/388aaa4a727e86c3f61238df059a0d438de1a68ee369957182436d976a8a/langchain_openai-0.3.1-py3-none-any.whl", hash = "sha256:5cf2a1e115b12570158d89c22832fa381803c3e1e11d1eb781195c8d9e454bd5", size = 54311 },
]

[[package]]
name = "langsmith"
version = "0.3.30"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx" },
    { name = "orjson", marker = "platform_python_implementation != 'PyPy'" },
    { name = "packaging" },
    { name = "pydantic" },
    { name = "requests" },
    { name = "requests-toolbelt" },
    { name = "zstandard" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1c/f5/4b2c34982dfeec08460e4530306163ab8b463f887171d8191d883fe6335f/langsmith-0.3.30.tar.gz", hash = "sha256:4588aad24623320cdf355f7594e583874c27e70460e6e6446a416ebb702b8cf7", size = 343529 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d8/3a/2c2d50e46a5e0b33411faea1200e93cca84e0534e833934e76692543822d/langsmith-0.3.30-py3-none-any.whl", hash = "sha256:80d591a4c62c14950ba497bb8b565ad9bd8d07e102b643916f0d2af1a7b2daaf", size = 358245 },
]

[[package]]
name = "language-tags"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e0/7e/b6a0efe4fee11e9742c1baaedf7c574084238a70b03c1d8eb2761383848f/language_tags-1.2.0.tar.gz", hash = "sha256:e934acba3e3dc85f867703eca421847a9ab7b7679b11b5d5cfd096febbf8bde6", size = 207901 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/42/327554649ed2dd5ce59d3f5da176c7be20f9352c7c6c51597293660b7b08/language_tags-1.2.0-py3-none-any.whl", hash = "sha256:d815604622242fdfbbfd747b40c31213617fd03734a267f2e39ee4bd73c88722", size = 213449 },
]

[[package]]
name = "litellm"
version = "1.65.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohttp" },
    { name = "click" },
    { name = "httpx" },
    { name = "importlib-metadata" },
    { name = "jinja2" },
    { name = "jsonschema" },
    { name = "openai" },
    { name = "pydantic" },
    { name = "python-dotenv" },
    { name = "tiktoken" },
    { name = "tokenizers" },
]
sdist = { url = "https://files.pythonhosted.org/packages/7b/b2/847d00916c2961fa15a452fdfa17461ec4a969712b0144996c6fcbfa4406/litellm-1.65.7.tar.gz", hash = "sha256:e5ea827cc006be32f8ad977b5f8296eeed2ed42bdbff5539bb6814db068fae84", size = 7171383 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bb/bc/491d078db53c349ca77758d188833b3ffd7a26fa87ea7e7042d6789dc36b/litellm-1.65.7-py3-none-any.whl", hash = "sha256:2a8a847ce6899b4096f7e25f808904e1abfde687eb62003dea7a56305c0ecfaf", size = 7519547 },
]

[package.optional-dependencies]
proxy = [
    { name = "apscheduler" },
    { name = "backoff" },
    { name = "boto3" },
    { name = "cryptography" },
    { name = "fastapi" },
    { name = "fastapi-sso" },
    { name = "gunicorn" },
    { name = "litellm-proxy-extras" },
    { name = "mcp" },
    { name = "orjson" },
    { name = "pyjwt" },
    { name = "pynacl" },
    { name = "python-multipart" },
    { name = "pyyaml" },
    { name = "rq" },
    { name = "uvicorn" },
    { name = "uvloop" },
    { name = "websockets" },
]

[[package]]
name = "litellm-proxy-extras"
version = "0.1.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2b/1e05b1c22ff1b759b6c23e975b6f6980b375add3502e073cc77c54dd41fd/litellm_proxy_extras-0.1.3.tar.gz", hash = "sha256:4df7036592f4d434db841a2b19c64c9bc50b9a80de45afc94c409b81698db8c3", size = 8698 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6c/5f/121ffa541a9b116972d9c9cb7cae6553cdb04d60ef7f3688b88c47d8c500/litellm_proxy_extras-0.1.3-py3-none-any.whl", hash = "sha256:7025e876d866776304a1171612c6676714426ae15ae36840cbf5481df8686283", size = 11739 },
]

[[package]]
name = "llamux"
version = "0.1.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "litellm" },
    { name = "loguru" },
]
sdist = { url = "https://files.pythonhosted.org/packages/7b/2d/8bc6a0a7460ed6ab3aac0078f894408bf1e20d4c12f30cf52416bfe29803/llamux-0.1.9.tar.gz", hash = "sha256:0ca00469b92fb523a4e905159ac269c53b2146233de10c858f016536c75d68e9", size = 4821 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ca/95/e48aa86223b5ad5ba3c8a615a90ee202e00202d9212530745c7492829aa1/llamux-0.1.9-py3-none-any.whl", hash = "sha256:5bd703fc754e78c6d43ad2900bb7ca373df678a41038da4520cd2e539e99fd4d", size = 5376 },
]

[[package]]
name = "loguru"
version = "0.7.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "win32-setctime", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3a/05/a1dae3dffd1116099471c643b8924f5aa6524411dc6c63fdae648c4f1aca/loguru-0.7.3.tar.gz", hash = "sha256:19480589e77d47b8d85b2c827ad95d49bf31b0dcde16593892eb51dd18706eb6", size = 63559 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0c/29/0348de65b8cc732daa3e33e67806420b2ae89bdce2b04af740289c5c6c8c/loguru-0.7.3-py3-none-any.whl", hash = "sha256:31a33c10c8e1e10422bfd431aeb5d351c7cf7fa671e3c4df004162264b28220c", size = 61595 },
]

[[package]]
name = "lxml"
version = "5.3.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/80/61/d3dc048cd6c7be6fe45b80cedcbdd4326ba4d550375f266d9f4246d0f4bc/lxml-5.3.2.tar.gz", hash = "sha256:773947d0ed809ddad824b7b14467e1a481b8976e87278ac4a730c2f7c7fcddc1", size = 3679948 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/84/b8/2b727f5a90902f7cc5548349f563b60911ca05f3b92e35dfa751349f265f/lxml-5.3.2-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:9d61a7d0d208ace43986a92b111e035881c4ed45b1f5b7a270070acae8b0bfb4", size = 8163457 },
    { url = "https://files.pythonhosted.org/packages/91/84/23135b2dc72b3440d68c8f39ace2bb00fe78e3a2255f7c74f7e76f22498e/lxml-5.3.2-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:856dfd7eda0b75c29ac80a31a6411ca12209183e866c33faf46e77ace3ce8a79", size = 4433445 },
    { url = "https://files.pythonhosted.org/packages/c9/1c/6900ade2294488f80598af7b3229669562166384bb10bf4c915342a2f288/lxml-5.3.2-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7a01679e4aad0727bedd4c9407d4d65978e920f0200107ceeffd4b019bd48529", size = 5029603 },
    { url = "https://files.pythonhosted.org/packages/2f/e9/31dbe5deaccf0d33ec279cf400306ad4b32dfd1a0fee1fca40c5e90678fe/lxml-5.3.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b6b37b4c3acb8472d191816d4582379f64d81cecbdce1a668601745c963ca5cc", size = 4771236 },
    { url = "https://files.pythonhosted.org/packages/68/41/c3412392884130af3415af2e89a2007e00b2a782be6fb848a95b598a114c/lxml-5.3.2-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3df5a54e7b7c31755383f126d3a84e12a4e0333db4679462ef1165d702517477", size = 5369815 },
    { url = "https://files.pythonhosted.org/packages/34/0a/ba0309fd5f990ea0cc05aba2bea225ef1bcb07ecbf6c323c6b119fc46e7f/lxml-5.3.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c09a40f28dcded933dc16217d6a092be0cc49ae25811d3b8e937c8060647c353", size = 4843663 },
    { url = "https://files.pythonhosted.org/packages/b6/c6/663b5d87d51d00d4386a2d52742a62daa486c5dc6872a443409d9aeafece/lxml-5.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a1ef20f1851ccfbe6c5a04c67ec1ce49da16ba993fdbabdce87a92926e505412", size = 4918028 },
    { url = "https://files.pythonhosted.org/packages/75/5f/f6a72ccbe05cf83341d4b6ad162ed9e1f1ffbd12f1c4b8bc8ae413392282/lxml-5.3.2-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:f79a63289dbaba964eb29ed3c103b7911f2dce28c36fe87c36a114e6bd21d7ad", size = 4792005 },
    { url = "https://files.pythonhosted.org/packages/37/7b/8abd5b332252239ffd28df5842ee4e5bf56e1c613c323586c21ccf5af634/lxml-5.3.2-cp311-cp311-manylinux_2_28_ppc64le.whl", hash = "sha256:75a72697d95f27ae00e75086aed629f117e816387b74a2f2da6ef382b460b710", size = 5405363 },
    { url = "https://files.pythonhosted.org/packages/5a/79/549b7ec92b8d9feb13869c1b385a0749d7ccfe5590d1e60f11add9cdd580/lxml-5.3.2-cp311-cp311-manylinux_2_28_s390x.whl", hash = "sha256:b9b00c9ee1cc3a76f1f16e94a23c344e0b6e5c10bec7f94cf2d820ce303b8c01", size = 4932915 },
    { url = "https://files.pythonhosted.org/packages/57/eb/4fa626d0bac8b4f2aa1d0e6a86232db030fd0f462386daf339e4a0ee352b/lxml-5.3.2-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:77cbcab50cbe8c857c6ba5f37f9a3976499c60eada1bf6d38f88311373d7b4bc", size = 4983473 },
    { url = "https://files.pythonhosted.org/packages/1b/c8/79d61d13cbb361c2c45fbe7c8bd00ea6a23b3e64bc506264d2856c60d702/lxml-5.3.2-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:29424058f072a24622a0a15357bca63d796954758248a72da6d512f9bd9a4493", size = 4855284 },
    { url = "https://files.pythonhosted.org/packages/80/16/9f84e1ef03a13136ab4f9482c9adaaad425c68b47556b9d3192a782e5d37/lxml-5.3.2-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:7d82737a8afe69a7c80ef31d7626075cc7d6e2267f16bf68af2c764b45ed68ab", size = 5458355 },
    { url = "https://files.pythonhosted.org/packages/aa/6d/f62860451bb4683e87636e49effb76d499773337928e53356c1712ccec24/lxml-5.3.2-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:95473d1d50a5d9fcdb9321fdc0ca6e1edc164dce4c7da13616247d27f3d21e31", size = 5300051 },
    { url = "https://files.pythonhosted.org/packages/3f/5f/3b6c4acec17f9a57ea8bb89a658a70621db3fb86ea588e7703b6819d9b03/lxml-5.3.2-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:2162068f6da83613f8b2a32ca105e37a564afd0d7009b0b25834d47693ce3538", size = 5033481 },
    { url = "https://files.pythonhosted.org/packages/79/bd/3c4dd7d903bb9981f4876c61ef2ff5d5473e409ef61dc7337ac207b91920/lxml-5.3.2-cp311-cp311-win32.whl", hash = "sha256:f8695752cf5d639b4e981afe6c99e060621362c416058effd5c704bede9cb5d1", size = 3474266 },
    { url = "https://files.pythonhosted.org/packages/1f/ea/9311fa1ef75b7d601c89600fc612838ee77ad3d426184941cba9cf62641f/lxml-5.3.2-cp311-cp311-win_amd64.whl", hash = "sha256:d1a94cbb4ee64af3ab386c2d63d6d9e9cf2e256ac0fd30f33ef0a3c88f575174", size = 3815230 },
    { url = "https://files.pythonhosted.org/packages/0d/7e/c749257a7fabc712c4df57927b0f703507f316e9f2c7e3219f8f76d36145/lxml-5.3.2-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:16b3897691ec0316a1aa3c6585f61c8b7978475587c5b16fc1d2c28d283dc1b0", size = 8193212 },
    { url = "https://files.pythonhosted.org/packages/a8/50/17e985ba162c9f1ca119f4445004b58f9e5ef559ded599b16755e9bfa260/lxml-5.3.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:a8d4b34a0eeaf6e73169dcfd653c8d47f25f09d806c010daf074fba2db5e2d3f", size = 4451439 },
    { url = "https://files.pythonhosted.org/packages/c2/b5/4960ba0fcca6ce394ed4a2f89ee13083e7fcbe9641a91166e8e9792fedb1/lxml-5.3.2-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:9cd7a959396da425022e1e4214895b5cfe7de7035a043bcc2d11303792b67554", size = 5052146 },
    { url = "https://files.pythonhosted.org/packages/5f/d1/184b04481a5d1f5758916de087430752a7b229bddbd6c1d23405078c72bd/lxml-5.3.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cac5eaeec3549c5df7f8f97a5a6db6963b91639389cdd735d5a806370847732b", size = 4789082 },
    { url = "https://files.pythonhosted.org/packages/7d/75/1a19749d373e9a3d08861addccdf50c92b628c67074b22b8f3c61997cf5a/lxml-5.3.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:29b5f7d77334877c2146e7bb8b94e4df980325fab0a8af4d524e5d43cd6f789d", size = 5312300 },
    { url = "https://files.pythonhosted.org/packages/fb/00/9d165d4060d3f347e63b219fcea5c6a3f9193e9e2868c6801e18e5379725/lxml-5.3.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:13f3495cfec24e3d63fffd342cc8141355d1d26ee766ad388775f5c8c5ec3932", size = 4836655 },
    { url = "https://files.pythonhosted.org/packages/b8/e9/06720a33cc155966448a19677f079100517b6629a872382d22ebd25e48aa/lxml-5.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e70ad4c9658beeff99856926fd3ee5fde8b519b92c693f856007177c36eb2e30", size = 4961795 },
    { url = "https://files.pythonhosted.org/packages/2d/57/4540efab2673de2904746b37ef7f74385329afd4643ed92abcc9ec6e00ca/lxml-5.3.2-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:507085365783abd7879fa0a6fa55eddf4bdd06591b17a2418403bb3aff8a267d", size = 4779791 },
    { url = "https://files.pythonhosted.org/packages/99/ad/6056edf6c9f4fa1d41e6fbdae52c733a4a257fd0d7feccfa26ae051bb46f/lxml-5.3.2-cp312-cp312-manylinux_2_28_ppc64le.whl", hash = "sha256:5bb304f67cbf5dfa07edad904732782cbf693286b9cd85af27059c5779131050", size = 5346807 },
    { url = "https://files.pythonhosted.org/packages/a1/fa/5be91fc91a18f3f705ea5533bc2210b25d738c6b615bf1c91e71a9b2f26b/lxml-5.3.2-cp312-cp312-manylinux_2_28_s390x.whl", hash = "sha256:3d84f5c093645c21c29a4e972b84cb7cf682f707f8706484a5a0c7ff13d7a988", size = 4909213 },
    { url = "https://files.pythonhosted.org/packages/f3/74/71bb96a3b5ae36b74e0402f4fa319df5559a8538577f8c57c50f1b57dc15/lxml-5.3.2-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:bdc13911db524bd63f37b0103af014b7161427ada41f1b0b3c9b5b5a9c1ca927", size = 4987694 },
    { url = "https://files.pythonhosted.org/packages/08/c2/3953a68b0861b2f97234b1838769269478ccf872d8ea7a26e911238220ad/lxml-5.3.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1ec944539543f66ebc060ae180d47e86aca0188bda9cbfadff47d86b0dc057dc", size = 4862865 },
    { url = "https://files.pythonhosted.org/packages/e0/9a/52e48f7cfd5a5e61f44a77e679880580dfb4f077af52d6ed5dd97e3356fe/lxml-5.3.2-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:59d437cc8a7f838282df5a199cf26f97ef08f1c0fbec6e84bd6f5cc2b7913f6e", size = 5423383 },
    { url = "https://files.pythonhosted.org/packages/17/67/42fe1d489e4dcc0b264bef361aef0b929fbb2b5378702471a3043bc6982c/lxml-5.3.2-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:0e275961adbd32e15672e14e0cc976a982075208224ce06d149c92cb43db5b93", size = 5286864 },
    { url = "https://files.pythonhosted.org/packages/29/e4/03b1d040ee3aaf2bd4e1c2061de2eae1178fe9a460d3efc1ea7ef66f6011/lxml-5.3.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:038aeb6937aa404480c2966b7f26f1440a14005cb0702078c173c028eca72c31", size = 5056819 },
    { url = "https://files.pythonhosted.org/packages/83/b3/e2ec8a6378e4d87da3af9de7c862bcea7ca624fc1a74b794180c82e30123/lxml-5.3.2-cp312-cp312-win32.whl", hash = "sha256:3c2c8d0fa3277147bff180e3590be67597e17d365ce94beb2efa3138a2131f71", size = 3486177 },
    { url = "https://files.pythonhosted.org/packages/d5/8a/6a08254b0bab2da9573735725caab8302a2a1c9b3818533b41568ca489be/lxml-5.3.2-cp312-cp312-win_amd64.whl", hash = "sha256:77809fcd97dfda3f399102db1794f7280737b69830cd5c961ac87b3c5c05662d", size = 3817134 },
    { url = "https://files.pythonhosted.org/packages/19/fe/904fd1b0ba4f42ed5a144fcfff7b8913181892a6aa7aeb361ee783d441f8/lxml-5.3.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:77626571fb5270ceb36134765f25b665b896243529eefe840974269b083e090d", size = 8173598 },
    { url = "https://files.pythonhosted.org/packages/97/e8/5e332877b3ce4e2840507b35d6dbe1cc33b17678ece945ba48d2962f8c06/lxml-5.3.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:78a533375dc7aa16d0da44af3cf6e96035e484c8c6b2b2445541a5d4d3d289ee", size = 4441586 },
    { url = "https://files.pythonhosted.org/packages/de/f4/8fe2e6d8721803182fbce2325712e98f22dbc478126070e62731ec6d54a0/lxml-5.3.2-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a6f62b2404b3f3f0744bbcabb0381c5fe186fa2a9a67ecca3603480f4846c585", size = 5038447 },
    { url = "https://files.pythonhosted.org/packages/a6/ac/fa63f86a1a4b1ba8b03599ad9e2f5212fa813223ac60bfe1155390d1cc0c/lxml-5.3.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2ea918da00091194526d40c30c4996971f09dacab032607581f8d8872db34fbf", size = 4783583 },
    { url = "https://files.pythonhosted.org/packages/1a/7a/08898541296a02c868d4acc11f31a5839d80f5b21d4a96f11d4c0fbed15e/lxml-5.3.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c35326f94702a7264aa0eea826a79547d3396a41ae87a70511b9f6e9667ad31c", size = 5305684 },
    { url = "https://files.pythonhosted.org/packages/0b/be/9a6d80b467771b90be762b968985d3de09e0d5886092238da65dac9c1f75/lxml-5.3.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:e3bef90af21d31c4544bc917f51e04f94ae11b43156356aff243cdd84802cbf2", size = 4830797 },
    { url = "https://files.pythonhosted.org/packages/8d/1c/493632959f83519802637f7db3be0113b6e8a4e501b31411fbf410735a75/lxml-5.3.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:52fa7ba11a495b7cbce51573c73f638f1dcff7b3ee23697467dc063f75352a69", size = 4950302 },
    { url = "https://files.pythonhosted.org/packages/c7/13/01aa3b92a6b93253b90c061c7527261b792f5ae7724b420cded733bfd5d6/lxml-5.3.2-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:ad131e2c4d2c3803e736bb69063382334e03648de2a6b8f56a878d700d4b557d", size = 4775247 },
    { url = "https://files.pythonhosted.org/packages/60/4a/baeb09fbf5c84809e119c9cf8e2e94acec326a9b45563bf5ae45a234973b/lxml-5.3.2-cp313-cp313-manylinux_2_28_ppc64le.whl", hash = "sha256:00a4463ca409ceacd20490a893a7e08deec7870840eff33dc3093067b559ce3e", size = 5338824 },
    { url = "https://files.pythonhosted.org/packages/69/c7/a05850f169ad783ed09740ac895e158b06d25fce4b13887a8ac92a84d61c/lxml-5.3.2-cp313-cp313-manylinux_2_28_s390x.whl", hash = "sha256:87e8d78205331cace2b73ac8249294c24ae3cba98220687b5b8ec5971a2267f1", size = 4899079 },
    { url = "https://files.pythonhosted.org/packages/de/48/18ca583aba5235582db0e933ed1af6540226ee9ca16c2ee2d6f504fcc34a/lxml-5.3.2-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:bf6389133bb255e530a4f2f553f41c4dd795b1fbb6f797aea1eff308f1e11606", size = 4978041 },
    { url = "https://files.pythonhosted.org/packages/b6/55/6968ddc88554209d1dba0dca196360c629b3dfe083bc32a3370f9523a0c4/lxml-5.3.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:b3709fc752b42fb6b6ffa2ba0a5b9871646d97d011d8f08f4d5b3ee61c7f3b2b", size = 4859761 },
    { url = "https://files.pythonhosted.org/packages/2e/52/d2d3baa1e0b7d04a729613160f1562f466fb1a0e45085a33acb0d6981a2b/lxml-5.3.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:abc795703d0de5d83943a4badd770fbe3d1ca16ee4ff3783d7caffc252f309ae", size = 5418209 },
    { url = "https://files.pythonhosted.org/packages/d3/50/6005b297ba5f858a113d6e81ccdb3a558b95a615772e7412d1f1cbdf22d7/lxml-5.3.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:98050830bb6510159f65d9ad1b8aca27f07c01bb3884ba95f17319ccedc4bcf9", size = 5274231 },
    { url = "https://files.pythonhosted.org/packages/fb/33/6f40c09a5f7d7e7fcb85ef75072e53eba3fbadbf23e4991ca069ab2b1abb/lxml-5.3.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:6ba465a91acc419c5682f8b06bcc84a424a7aa5c91c220241c6fd31de2a72bc6", size = 5051899 },
    { url = "https://files.pythonhosted.org/packages/8b/3a/673bc5c0d5fb6596ee2963dd016fdaefaed2c57ede82c7634c08cbda86c1/lxml-5.3.2-cp313-cp313-win32.whl", hash = "sha256:56a1d56d60ea1ec940f949d7a309e0bff05243f9bd337f585721605670abb1c1", size = 3485315 },
    { url = "https://files.pythonhosted.org/packages/8c/be/cab8dd33b0dbe3af5b5d4d24137218f79ea75d540f74eb7d8581195639e0/lxml-5.3.2-cp313-cp313-win_amd64.whl", hash = "sha256:1a580dc232c33d2ad87d02c8a3069d47abbcdce974b9c9cc82a79ff603065dbe", size = 3814639 },
]

[package.optional-dependencies]
html-clean = [
    { name = "lxml-html-clean" },
]

[[package]]
name = "lxml-html-clean"
version = "0.4.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "lxml" },
]
sdist = { url = "https://files.pythonhosted.org/packages/79/b6/466e71db127950fb8d172026a8f0a9f0dc6f64c8e78e2ca79f252e5790b8/lxml_html_clean-0.4.2.tar.gz", hash = "sha256:91291e7b5db95430abf461bc53440964d58e06cc468950f9e47db64976cebcb3", size = 21622 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/0b/942cb7278d6caad79343ad2ddd636ed204a47909b969d19114a3097f5aa3/lxml_html_clean-0.4.2-py3-none-any.whl", hash = "sha256:74ccfba277adcfea87a1e9294f47dd86b05d65b4da7c5b07966e3d5f3be8a505", size = 14184 },
]

[[package]]
name = "maincontentextractor"
version = "0.0.4"
source = { git = "https://github.com/HawkClaws/main_content_extractor?rev=7c3ed7f6ed7f6c10223a3357d43ab741663bc812#7c3ed7f6ed7f6c10223a3357d43ab741663bc812" }
dependencies = [
    { name = "beautifulsoup4" },
    { name = "html2text" },
    { name = "trafilatura" },
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mdurl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/71/3b932df36c1a044d397a1f92d1cf91ee0a503d91e470cbd670aa66b07ed0/markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb", size = 74596 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1", size = 87528 },
]

[[package]]
name = "markdownify"
version = "0.14.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "beautifulsoup4" },
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1b/75/483a4bcca436fe88d02dc7686c372631d833848951b368700bdc0c770bb7/markdownify-0.14.1.tar.gz", hash = "sha256:a62a7a216947ed0b8dafb95b99b2ef4a0edd1e18d5653c656f68f03db2bfb2f1", size = 14332 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/65/0b/74cec93a7b05edf4fc3ea1c899fe8a37f041d7b9d303c75abf7a162924e0/markdownify-0.14.1-py3-none-any.whl", hash = "sha256:4c46a6c0c12c6005ddcd49b45a5a890398b002ef51380cd319db62df5e09bc2a", size = 11530 },
]

[[package]]
name = "markupsafe"
version = "3.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b2/97/5d42485e71dfc078108a86d6de8fa46db44a1a9295e89c5d6d4a06e23a62/markupsafe-3.0.2.tar.gz", hash = "sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0", size = 20537 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6b/28/bbf83e3f76936960b850435576dd5e67034e200469571be53f69174a2dfd/MarkupSafe-3.0.2-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:9025b4018f3a1314059769c7bf15441064b2207cb3f065e6ea1e7359cb46db9d", size = 14353 },
    { url = "https://files.pythonhosted.org/packages/6c/30/316d194b093cde57d448a4c3209f22e3046c5bb2fb0820b118292b334be7/MarkupSafe-3.0.2-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:93335ca3812df2f366e80509ae119189886b0f3c2b81325d39efdb84a1e2ae93", size = 12392 },
    { url = "https://files.pythonhosted.org/packages/f2/96/9cdafba8445d3a53cae530aaf83c38ec64c4d5427d975c974084af5bc5d2/MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2cb8438c3cbb25e220c2ab33bb226559e7afb3baec11c4f218ffa7308603c832", size = 23984 },
    { url = "https://files.pythonhosted.org/packages/f1/a4/aefb044a2cd8d7334c8a47d3fb2c9f328ac48cb349468cc31c20b539305f/MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a123e330ef0853c6e822384873bef7507557d8e4a082961e1defa947aa59ba84", size = 23120 },
    { url = "https://files.pythonhosted.org/packages/8d/21/5e4851379f88f3fad1de30361db501300d4f07bcad047d3cb0449fc51f8c/MarkupSafe-3.0.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1e084f686b92e5b83186b07e8a17fc09e38fff551f3602b249881fec658d3eca", size = 23032 },
    { url = "https://files.pythonhosted.org/packages/00/7b/e92c64e079b2d0d7ddf69899c98842f3f9a60a1ae72657c89ce2655c999d/MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:d8213e09c917a951de9d09ecee036d5c7d36cb6cb7dbaece4c71a60d79fb9798", size = 24057 },
    { url = "https://files.pythonhosted.org/packages/f9/ac/46f960ca323037caa0a10662ef97d0a4728e890334fc156b9f9e52bcc4ca/MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:5b02fb34468b6aaa40dfc198d813a641e3a63b98c2b05a16b9f80b7ec314185e", size = 23359 },
    { url = "https://files.pythonhosted.org/packages/69/84/83439e16197337b8b14b6a5b9c2105fff81d42c2a7c5b58ac7b62ee2c3b1/MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:0bff5e0ae4ef2e1ae4fdf2dfd5b76c75e5c2fa4132d05fc1b0dabcd20c7e28c4", size = 23306 },
    { url = "https://files.pythonhosted.org/packages/9a/34/a15aa69f01e2181ed8d2b685c0d2f6655d5cca2c4db0ddea775e631918cd/MarkupSafe-3.0.2-cp311-cp311-win32.whl", hash = "sha256:6c89876f41da747c8d3677a2b540fb32ef5715f97b66eeb0c6b66f5e3ef6f59d", size = 15094 },
    { url = "https://files.pythonhosted.org/packages/da/b8/3a3bd761922d416f3dc5d00bfbed11f66b1ab89a0c2b6e887240a30b0f6b/MarkupSafe-3.0.2-cp311-cp311-win_amd64.whl", hash = "sha256:70a87b411535ccad5ef2f1df5136506a10775d267e197e4cf531ced10537bd6b", size = 15521 },
    { url = "https://files.pythonhosted.org/packages/22/09/d1f21434c97fc42f09d290cbb6350d44eb12f09cc62c9476effdb33a18aa/MarkupSafe-3.0.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:9778bd8ab0a994ebf6f84c2b949e65736d5575320a17ae8984a77fab08db94cf", size = 14274 },
    { url = "https://files.pythonhosted.org/packages/6b/b0/18f76bba336fa5aecf79d45dcd6c806c280ec44538b3c13671d49099fdd0/MarkupSafe-3.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225", size = 12348 },
    { url = "https://files.pythonhosted.org/packages/e0/25/dd5c0f6ac1311e9b40f4af06c78efde0f3b5cbf02502f8ef9501294c425b/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028", size = 24149 },
    { url = "https://files.pythonhosted.org/packages/f3/f0/89e7aadfb3749d0f52234a0c8c7867877876e0a20b60e2188e9850794c17/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8", size = 23118 },
    { url = "https://files.pythonhosted.org/packages/d5/da/f2eeb64c723f5e3777bc081da884b414671982008c47dcc1873d81f625b6/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c", size = 22993 },
    { url = "https://files.pythonhosted.org/packages/da/0e/1f32af846df486dce7c227fe0f2398dc7e2e51d4a370508281f3c1c5cddc/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557", size = 24178 },
    { url = "https://files.pythonhosted.org/packages/c4/f6/bb3ca0532de8086cbff5f06d137064c8410d10779c4c127e0e47d17c0b71/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22", size = 23319 },
    { url = "https://files.pythonhosted.org/packages/a2/82/8be4c96ffee03c5b4a034e60a31294daf481e12c7c43ab8e34a1453ee48b/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ad10d3ded218f1039f11a75f8091880239651b52e9bb592ca27de44eed242a48", size = 23352 },
    { url = "https://files.pythonhosted.org/packages/51/ae/97827349d3fcffee7e184bdf7f41cd6b88d9919c80f0263ba7acd1bbcb18/MarkupSafe-3.0.2-cp312-cp312-win32.whl", hash = "sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30", size = 15097 },
    { url = "https://files.pythonhosted.org/packages/c1/80/a61f99dc3a936413c3ee4e1eecac96c0da5ed07ad56fd975f1a9da5bc630/MarkupSafe-3.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:8e06879fc22a25ca47312fbe7c8264eb0b662f6db27cb2d3bbbc74b1df4b9b87", size = 15601 },
    { url = "https://files.pythonhosted.org/packages/83/0e/67eb10a7ecc77a0c2bbe2b0235765b98d164d81600746914bebada795e97/MarkupSafe-3.0.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ba9527cdd4c926ed0760bc301f6728ef34d841f405abf9d4f959c478421e4efd", size = 14274 },
    { url = "https://files.pythonhosted.org/packages/2b/6d/9409f3684d3335375d04e5f05744dfe7e9f120062c9857df4ab490a1031a/MarkupSafe-3.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f8b3d067f2e40fe93e1ccdd6b2e1d16c43140e76f02fb1319a05cf2b79d99430", size = 12352 },
    { url = "https://files.pythonhosted.org/packages/d2/f5/6eadfcd3885ea85fe2a7c128315cc1bb7241e1987443d78c8fe712d03091/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:569511d3b58c8791ab4c2e1285575265991e6d8f8700c7be0e88f86cb0672094", size = 24122 },
    { url = "https://files.pythonhosted.org/packages/0c/91/96cf928db8236f1bfab6ce15ad070dfdd02ed88261c2afafd4b43575e9e9/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396", size = 23085 },
    { url = "https://files.pythonhosted.org/packages/c2/cf/c9d56af24d56ea04daae7ac0940232d31d5a8354f2b457c6d856b2057d69/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f3818cb119498c0678015754eba762e0d61e5b52d34c8b13d770f0719f7b1d79", size = 22978 },
    { url = "https://files.pythonhosted.org/packages/2a/9f/8619835cd6a711d6272d62abb78c033bda638fdc54c4e7f4272cf1c0962b/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:cdb82a876c47801bb54a690c5ae105a46b392ac6099881cdfb9f6e95e4014c6a", size = 24208 },
    { url = "https://files.pythonhosted.org/packages/f9/bf/176950a1792b2cd2102b8ffeb5133e1ed984547b75db47c25a67d3359f77/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:cabc348d87e913db6ab4aa100f01b08f481097838bdddf7c7a84b7575b7309ca", size = 23357 },
    { url = "https://files.pythonhosted.org/packages/ce/4f/9a02c1d335caabe5c4efb90e1b6e8ee944aa245c1aaaab8e8a618987d816/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:444dcda765c8a838eaae23112db52f1efaf750daddb2d9ca300bcae1039adc5c", size = 23344 },
    { url = "https://files.pythonhosted.org/packages/ee/55/c271b57db36f748f0e04a759ace9f8f759ccf22b4960c270c78a394f58be/MarkupSafe-3.0.2-cp313-cp313-win32.whl", hash = "sha256:bcf3e58998965654fdaff38e58584d8937aa3096ab5354d493c77d1fdd66d7a1", size = 15101 },
    { url = "https://files.pythonhosted.org/packages/29/88/07df22d2dd4df40aba9f3e402e6dc1b8ee86297dddbad4872bd5e7b0094f/MarkupSafe-3.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:e6a2a455bd412959b57a172ce6328d2dd1f01cb2135efda2e4576e8a23fa3b0f", size = 15603 },
    { url = "https://files.pythonhosted.org/packages/62/6a/8b89d24db2d32d433dffcd6a8779159da109842434f1dd2f6e71f32f738c/MarkupSafe-3.0.2-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:b5a6b3ada725cea8a5e634536b1b01c30bcdcd7f9c6fff4151548d5bf6b3a36c", size = 14510 },
    { url = "https://files.pythonhosted.org/packages/7a/06/a10f955f70a2e5a9bf78d11a161029d278eeacbd35ef806c3fd17b13060d/MarkupSafe-3.0.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:a904af0a6162c73e3edcb969eeeb53a63ceeb5d8cf642fade7d39e7963a22ddb", size = 12486 },
    { url = "https://files.pythonhosted.org/packages/34/cf/65d4a571869a1a9078198ca28f39fba5fbb910f952f9dbc5220afff9f5e6/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4aa4e5faecf353ed117801a068ebab7b7e09ffb6e1d5e412dc852e0da018126c", size = 25480 },
    { url = "https://files.pythonhosted.org/packages/0c/e3/90e9651924c430b885468b56b3d597cabf6d72be4b24a0acd1fa0e12af67/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c0ef13eaeee5b615fb07c9a7dadb38eac06a0608b41570d8ade51c56539e509d", size = 23914 },
    { url = "https://files.pythonhosted.org/packages/66/8c/6c7cf61f95d63bb866db39085150df1f2a5bd3335298f14a66b48e92659c/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d16a81a06776313e817c951135cf7340a3e91e8c1ff2fac444cfd75fffa04afe", size = 23796 },
    { url = "https://files.pythonhosted.org/packages/bb/35/cbe9238ec3f47ac9a7c8b3df7a808e7cb50fe149dc7039f5f454b3fba218/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:6381026f158fdb7c72a168278597a5e3a5222e83ea18f543112b2662a9b699c5", size = 25473 },
    { url = "https://files.pythonhosted.org/packages/e6/32/7621a4382488aa283cc05e8984a9c219abad3bca087be9ec77e89939ded9/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:3d79d162e7be8f996986c064d1c7c817f6df3a77fe3d6859f6f9e7be4b8c213a", size = 24114 },
    { url = "https://files.pythonhosted.org/packages/0d/80/0985960e4b89922cb5a0bac0ed39c5b96cbc1a536a99f30e8c220a996ed9/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9", size = 24098 },
    { url = "https://files.pythonhosted.org/packages/82/78/fedb03c7d5380df2427038ec8d973587e90561b2d90cd472ce9254cf348b/MarkupSafe-3.0.2-cp313-cp313t-win32.whl", hash = "sha256:ba8062ed2cf21c07a9e295d5b8a2a5ce678b913b45fdf68c32d95d6c1291e0b6", size = 15208 },
    { url = "https://files.pythonhosted.org/packages/4f/65/6079a46068dfceaeabb5dcad6d674f5f5c61a6fa5673746f42a9f4c233b3/MarkupSafe-3.0.2-cp313-cp313t-win_amd64.whl", hash = "sha256:e444a31f8db13eb18ada366ab3cf45fd4b31e4db1236a4448f68778c1d1a5a2f", size = 15739 },
]

[[package]]
name = "matplotlib-inline"
version = "0.1.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/99/5b/a36a337438a14116b16480db471ad061c36c3694df7c2084a0da7ba538b7/matplotlib_inline-0.1.7.tar.gz", hash = "sha256:8423b23ec666be3d16e16b60bdd8ac4e86e840ebd1dd11a30b9f117f2fa0ab90", size = 8159 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8f/8e/9ad090d3553c280a8060fbf6e24dc1c0c29704ee7d1c372f0c174aa59285/matplotlib_inline-0.1.7-py3-none-any.whl", hash = "sha256:df192d39a4ff8f21b1895d72e6a13f5fcc5099f00fa84384e0ea28c2cc0653ca", size = 9899 },
]

[[package]]
name = "maxminddb"
version = "2.6.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/57/ae/422ec0f3b6a40f23de9477c42fce90126a3994dd51d06b50582973c0088e/maxminddb-2.6.3.tar.gz", hash = "sha256:d2c3806baa7aa047aa1bac7419e7e353db435f88f09d51106a84dbacf645d254", size = 181376 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7d/77/9c33b1ec7655b6afa04a6f1e2085f9e751f5d4f663ec6352fe1c1838bde5/maxminddb-2.6.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:27ba5e22bd09fe324f0a4c5ed97e73c1c7c3ab7e3bae4e1e6fcaa15f175b9f5a", size = 35003 },
    { url = "https://files.pythonhosted.org/packages/7a/49/732d650a2c0e33a09dec7c06b3d0fed39a4b961e32b8ec25b0c5a7498e75/maxminddb-2.6.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:fa36f1ca12fd3a37ad758afd0666457a749b2c4b16db0eb3f8c953f55ae6325d", size = 34848 },
    { url = "https://files.pythonhosted.org/packages/af/66/5743c3ceaeebe475d436803fa0f60bfde9f79ffd758a5b77923c2c27a32b/maxminddb-2.6.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:83d2324788a31a28bbb38b0dbdece5826f56db4df6e1538cf6f4b72f6a3da66c", size = 88800 },
    { url = "https://files.pythonhosted.org/packages/aa/ad/4265b7fe1a471de0e242fcb30644f151b6f32595a833ee1e291692db3123/maxminddb-2.6.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d4bac2b7b7609bed8dcf6beef1ef4a1e411e9e39c311070ffc2ace80d6de6444", size = 88070 },
    { url = "https://files.pythonhosted.org/packages/23/56/c9b83d1e96c20a2223a54e6c3daad7b074aa69a5e3be1a4a1ab79f21e23b/maxminddb-2.6.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8868580f34b483d5b74edd4270db417e211906d57fb13bbeeb11ea8d5cd01829", size = 86586 },
    { url = "https://files.pythonhosted.org/packages/89/58/2fd227d4c9e0e5778f8ab32412a329bea437900c8032968fd4cf67118e1b/maxminddb-2.6.3-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:b29cea50b191784e2242227e0fac5bc985972b3849f97fe96c7f37fb7a7426d7", size = 91306 },
    { url = "https://files.pythonhosted.org/packages/1b/dc/913326a18d11e925b9b6c0b13163975fc297325c1bdbf29c2af8bd96b7f9/maxminddb-2.6.3-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:4d470fc4f9c5ed8854a945dc5ea56b2f0644a5c3e5872d0e579d66a5a9238d7f", size = 90285 },
    { url = "https://files.pythonhosted.org/packages/80/18/0b749456ceefa7eaf1cb1e63605ca152dc47114323a94b09e9c62909ca77/maxminddb-2.6.3-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:2849357de35bfed0011ad1ff14a83c946273ae8c75a8867612d22f559df70e7d", size = 90480 },
    { url = "https://files.pythonhosted.org/packages/0c/e8/0a188d6fefae8793f7b74d65246041704c94074f5be1d4f75ed8517902c6/maxminddb-2.6.3-cp311-cp311-win32.whl", hash = "sha256:39254e173af7b0018c1508c2dd68ecda0c043032176140cfe917587e2d082f42", size = 34599 },
    { url = "https://files.pythonhosted.org/packages/60/e8/b0bea5f9618480974bd9e1f5e7af035d2f190ca3af816bfb9639d3ea7af5/maxminddb-2.6.3-cp311-cp311-win_amd64.whl", hash = "sha256:489c5ae835198a228380b83cc537a5ffb1911f1579d7545baf097e4a8eefcd9a", size = 36663 },
    { url = "https://files.pythonhosted.org/packages/3a/c7/ddbb62accafeecb920d462df37b3c0102709feef2faf111b53fbf841b059/maxminddb-2.6.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:2b0fef825b23df047876d2056cbb69fb8d8e4b965f744f674be75e16fb86a52e", size = 35228 },
    { url = "https://files.pythonhosted.org/packages/82/fe/2aa559147d123ed243bf7ef47dde5402b95c0620b9c88b986fcb4d5b672e/maxminddb-2.6.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:a38faf03db15cc285009c0ddaacd04071b84ebd8ff7d773f700c7def695a291c", size = 35023 },
    { url = "https://files.pythonhosted.org/packages/c2/6f/c8a86c172a3e93c0d17ed6dd7858a66ec791626a27b76fdc07143a6a5189/maxminddb-2.6.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:edab18a50470031fc8447bcd9285c9f5f952abef2b6db5579fe50665bdcda941", size = 90098 },
    { url = "https://files.pythonhosted.org/packages/93/eb/5be5fec6128898a69e09e3af348c933eebb2d0f38e4ff375b3138436476f/maxminddb-2.6.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:415dd5de87adc7640d3da2a8e7cf19a313c1a715cb84a3433f0e3b2d27665319", size = 89567 },
    { url = "https://files.pythonhosted.org/packages/77/2b/ca6e35cc8bbc4340f667a1531cc6cab24072326afd7b3424c8e89ad767dd/maxminddb-2.6.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d78a02b70ededb3ba7317c24266217d7b68283e3be04cad0c34ee446a0217ee0", size = 87622 },
    { url = "https://files.pythonhosted.org/packages/aa/08/730374d10e7d3ec21f77ae76a7ada8c9347bba5bb55c82d0cb8b50db7dc5/maxminddb-2.6.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:4b80275603bba6a95ed69d859d184dfa60bfd8e83cd4c8b722d7f7eaa9d95f8f", size = 92303 },
    { url = "https://files.pythonhosted.org/packages/61/dc/5fffe5def128ca998004826010801d5f242e07efe9d03da4cc2a0b8ad03b/maxminddb-2.6.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:a6868438d1771c0bd0bbc95d84480c1ae04df72a85879e1ada42762250a00f59", size = 91211 },
    { url = "https://files.pythonhosted.org/packages/b8/28/ac699e0994f1a45aebfed0db42efa56845369a047adc249c2df482b03279/maxminddb-2.6.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:efd875d43c4207fb90e10d582e4394d8a04f7b55c83c4d6bc0593a7be450e04f", size = 92128 },
    { url = "https://files.pythonhosted.org/packages/1a/a1/d9ba3c10fcc3b1cdc432a28daeef5f4726d2125cc47e699c6da4b57cefa0/maxminddb-2.6.3-cp312-cp312-win32.whl", hash = "sha256:aadb9d12e887a1f52e8214e539e5d78338356fad4ef2a51931f6f7dbe56c2228", size = 34750 },
    { url = "https://files.pythonhosted.org/packages/04/c2/c4c9aece9e56d86becca10f39cb02d4baaae71dc37cc1d0c6ad0d6015793/maxminddb-2.6.3-cp312-cp312-win_amd64.whl", hash = "sha256:7d6024d1e40244b5549c5e6063af109399a2f89503a24916b5139c4d0657f1c8", size = 36781 },
    { url = "https://files.pythonhosted.org/packages/cc/e3/a3218d7cd35c930a08f7d7301334f9c85aa0a28dbac3f50e3d43f3d70734/maxminddb-2.6.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9580b2cd017185db07baacd9d629ca01f3fe6f236528681c88a0209725376e9c", size = 35235 },
    { url = "https://files.pythonhosted.org/packages/85/40/11f23d1c1f6654618d87e995f56a789f00c1c07d5c986f9b14d81f04f90c/maxminddb-2.6.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:47828bed767b82c219ba7aa65f0cb03d7f7443d7270259ce931e133a40691d34", size = 35021 },
    { url = "https://files.pythonhosted.org/packages/68/7e/883adcb107fb45916328ecb40f980cc598dbcc7dfd2ccc871851c40836d6/maxminddb-2.6.3-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:77112cb1a2e381de42c443d1bf222c58b9da203183bb2008dd370c3d2a587a4e", size = 90068 },
    { url = "https://files.pythonhosted.org/packages/2c/87/b57cf9ef4cf8b076f3b25df949b57c7b3ee0f4543f1f76f445afd313b96b/maxminddb-2.6.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:448d062e95242e3088df85fe7ed3f2890a9f4aea924bde336e9ff5d2337ca5fd", size = 89506 },
    { url = "https://files.pythonhosted.org/packages/ff/f8/cf746032f267ee25bd32f70d71a63e857fec91e19a0907db885bdbb7b0c1/maxminddb-2.6.3-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a59d72bf373c61da156fd43e2be6da802f68370a50a2205de84ee76916e05f9f", size = 87612 },
    { url = "https://files.pythonhosted.org/packages/c0/9e/ff5c93e8e589c1544cad2a457c1b7e4169a256c8655928266a9de6f21cac/maxminddb-2.6.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:e867852037a8a26a24cfcf31b697dce63d488e1617af244c2895568d8f6c7a31", size = 92310 },
    { url = "https://files.pythonhosted.org/packages/99/44/56ed56377ba8c99f7eb3101479c063d46f18e5f0a9070432d74a2ed15f82/maxminddb-2.6.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:5a1586260eac831d61c2665b26ca1ae3ad00caca57c8031346767f4527025311", size = 91227 },
    { url = "https://files.pythonhosted.org/packages/9b/58/cdb1a7c18a1946ad006657b52cb499e489d2b28a62490fd5aee14b356a55/maxminddb-2.6.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:6eb23f842a72ab3096f9f9b1c292f4feb55a8d758567cb6d77637c2257a3187c", size = 92126 },
    { url = "https://files.pythonhosted.org/packages/39/94/4b37ffa77f8921a549805a62ce62f6fa453ea3c59c0dfcd584770fc59a8c/maxminddb-2.6.3-cp313-cp313-win32.whl", hash = "sha256:acf46e20709a27d2b519669888e3f53a37bc4204b98a0c690664c48ff8cb1364", size = 34751 },
    { url = "https://files.pythonhosted.org/packages/1e/af/638811134e1a33cf75c2d2be1b0b9b90dd1f43216a4ef1f24e223f646b46/maxminddb-2.6.3-cp313-cp313-win_amd64.whl", hash = "sha256:3015afb00e6168837938dbe5fda40ace37442c22b292ccee27c1690fbf6078ed", size = 36790 },
]

[[package]]
name = "mcp"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "httpx" },
    { name = "httpx-sse" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "sse-starlette" },
    { name = "starlette" },
    { name = "uvicorn" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6d/c9/c55764824e893fdebe777ac7223200986a275c3191dba9169f8eb6d7c978/mcp-1.5.0.tar.gz", hash = "sha256:5b2766c05e68e01a2034875e250139839498c61792163a7b221fc170c12f5aa9", size = 159128 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c1/d1/3ff566ecf322077d861f1a68a1ff025cad337417bd66ad22a7c6f7dfcfaf/mcp-1.5.0-py3-none-any.whl", hash = "sha256:51c3f35ce93cb702f7513c12406bbea9665ef75a08db909200b07da9db641527", size = 73734 },
]

[[package]]
name = "mdurl"
version = "0.1.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/54/cfe61301667036ec958cb99bd3efefba235e65cdeb9c84d24a8293ba1d90/mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba", size = 8729 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8", size = 9979 },
]

[[package]]
name = "mistune"
version = "3.1.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/c4/79/bda47f7dd7c3c55770478d6d02c9960c430b0cf1773b72366ff89126ea31/mistune-3.1.3.tar.gz", hash = "sha256:a7035c21782b2becb6be62f8f25d3df81ccb4d6fa477a6525b15af06539f02a0", size = 94347 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/01/4d/23c4e4f09da849e127e9f123241946c23c1e30f45a88366879e064211815/mistune-3.1.3-py3-none-any.whl", hash = "sha256:1a32314113cff28aa6432e99e522677c8587fd83e3d51c29b82a52409c842bd9", size = 53410 },
]

[[package]]
name = "monotonic"
version = "1.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ea/ca/8e91948b782ddfbd194f323e7e7d9ba12e5877addf04fb2bf8fca38e86ac/monotonic-1.6.tar.gz", hash = "sha256:3a55207bcfed53ddd5c5bae174524062935efed17792e9de2ad0205ce9ad63f7", size = 7615 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9a/67/7e8406a29b6c45be7af7740456f7f37025f0506ae2e05fb9009a53946860/monotonic-1.6-py2.py3-none-any.whl", hash = "sha256:68687e19a14f11f26d140dd5c86f3dba4bf5df58003000ed467e0e2a69bca96c", size = 8154 },
]

[[package]]
name = "mpmath"
version = "1.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e0/47/dd32fa426cc72114383ac549964eecb20ecfd886d1e5ccf5340b55b02f57/mpmath-1.3.0.tar.gz", hash = "sha256:7a28eb2a9774d00c7bc92411c19a89209d5da7c4c9a9e227be8330a23a25b91f", size = 508106 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/43/e3/7d92a15f894aa0c9c4b49b8ee9ac9850d6e63b03c9c32c0367a13ae62209/mpmath-1.3.0-py3-none-any.whl", hash = "sha256:a0b2b9fe80bbcd81a6647ff13108738cfb482d481d826cc0e02f5b35e5c88d2c", size = 536198 },
]

[[package]]
name = "multidict"
version = "6.4.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/da/2c/e367dfb4c6538614a0c9453e510d75d66099edf1c4e69da1b5ce691a1931/multidict-6.4.3.tar.gz", hash = "sha256:3ada0b058c9f213c5f95ba301f922d402ac234f1111a7d8fd70f1b99f3c281ec", size = 89372 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/16/e0/53cf7f27eda48fffa53cfd4502329ed29e00efb9e4ce41362cbf8aa54310/multidict-6.4.3-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:f6f19170197cc29baccd33ccc5b5d6a331058796485857cf34f7635aa25fb0cd", size = 65259 },
    { url = "https://files.pythonhosted.org/packages/44/79/1dcd93ce7070cf01c2ee29f781c42b33c64fce20033808f1cc9ec8413d6e/multidict-6.4.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:f2882bf27037eb687e49591690e5d491e677272964f9ec7bc2abbe09108bdfb8", size = 38451 },
    { url = "https://files.pythonhosted.org/packages/f4/35/2292cf29ab5f0d0b3613fad1b75692148959d3834d806be1885ceb49a8ff/multidict-6.4.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:fbf226ac85f7d6b6b9ba77db4ec0704fde88463dc17717aec78ec3c8546c70ad", size = 37706 },
    { url = "https://files.pythonhosted.org/packages/f6/d1/6b157110b2b187b5a608b37714acb15ee89ec773e3800315b0107ea648cd/multidict-6.4.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2e329114f82ad4b9dd291bef614ea8971ec119ecd0f54795109976de75c9a852", size = 226669 },
    { url = "https://files.pythonhosted.org/packages/40/7f/61a476450651f177c5570e04bd55947f693077ba7804fe9717ee9ae8de04/multidict-6.4.3-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:1f4e0334d7a555c63f5c8952c57ab6f1c7b4f8c7f3442df689fc9f03df315c08", size = 223182 },
    { url = "https://files.pythonhosted.org/packages/51/7b/eaf7502ac4824cdd8edcf5723e2e99f390c879866aec7b0c420267b53749/multidict-6.4.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:740915eb776617b57142ce0bb13b7596933496e2f798d3d15a20614adf30d229", size = 235025 },
    { url = "https://files.pythonhosted.org/packages/3b/f6/facdbbd73c96b67a93652774edd5778ab1167854fa08ea35ad004b1b70ad/multidict-6.4.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:255dac25134d2b141c944b59a0d2f7211ca12a6d4779f7586a98b4b03ea80508", size = 231481 },
    { url = "https://files.pythonhosted.org/packages/70/57/c008e861b3052405eebf921fd56a748322d8c44dcfcab164fffbccbdcdc4/multidict-6.4.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d4e8535bd4d741039b5aad4285ecd9b902ef9e224711f0b6afda6e38d7ac02c7", size = 223492 },
    { url = "https://files.pythonhosted.org/packages/30/4d/7d8440d3a12a6ae5d6b202d6e7f2ac6ab026e04e99aaf1b73f18e6bc34bc/multidict-6.4.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:30c433a33be000dd968f5750722eaa0991037be0be4a9d453eba121774985bc8", size = 217279 },
    { url = "https://files.pythonhosted.org/packages/7f/e7/bca0df4dd057597b94138d2d8af04eb3c27396a425b1b0a52e082f9be621/multidict-6.4.3-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:4eb33b0bdc50acd538f45041f5f19945a1f32b909b76d7b117c0c25d8063df56", size = 228733 },
    { url = "https://files.pythonhosted.org/packages/88/f5/383827c3f1c38d7c92dbad00a8a041760228573b1c542fbf245c37bbca8a/multidict-6.4.3-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:75482f43465edefd8a5d72724887ccdcd0c83778ded8f0cb1e0594bf71736cc0", size = 218089 },
    { url = "https://files.pythonhosted.org/packages/36/8a/a5174e8a7d8b94b4c8f9c1e2cf5d07451f41368ffe94d05fc957215b8e72/multidict-6.4.3-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:ce5b3082e86aee80b3925ab4928198450d8e5b6466e11501fe03ad2191c6d777", size = 225257 },
    { url = "https://files.pythonhosted.org/packages/8c/76/1d4b7218f0fd00b8e5c90b88df2e45f8af127f652f4e41add947fa54c1c4/multidict-6.4.3-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:e413152e3212c4d39f82cf83c6f91be44bec9ddea950ce17af87fbf4e32ca6b2", size = 234728 },
    { url = "https://files.pythonhosted.org/packages/64/44/18372a4f6273fc7ca25630d7bf9ae288cde64f29593a078bff450c7170b6/multidict-6.4.3-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:8aac2eeff69b71f229a405c0a4b61b54bade8e10163bc7b44fcd257949620618", size = 230087 },
    { url = "https://files.pythonhosted.org/packages/0f/ae/28728c314a698d8a6d9491fcacc897077348ec28dd85884d09e64df8a855/multidict-6.4.3-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:ab583ac203af1d09034be41458feeab7863c0635c650a16f15771e1386abf2d7", size = 223137 },
    { url = "https://files.pythonhosted.org/packages/22/50/785bb2b3fe16051bc91c70a06a919f26312da45c34db97fc87441d61e343/multidict-6.4.3-cp311-cp311-win32.whl", hash = "sha256:1b2019317726f41e81154df636a897de1bfe9228c3724a433894e44cd2512378", size = 34959 },
    { url = "https://files.pythonhosted.org/packages/2f/63/2a22e099ae2f4d92897618c00c73a09a08a2a9aa14b12736965bf8d59fd3/multidict-6.4.3-cp311-cp311-win_amd64.whl", hash = "sha256:43173924fa93c7486402217fab99b60baf78d33806af299c56133a3755f69589", size = 38541 },
    { url = "https://files.pythonhosted.org/packages/fc/bb/3abdaf8fe40e9226ce8a2ba5ecf332461f7beec478a455d6587159f1bf92/multidict-6.4.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:1f1c2f58f08b36f8475f3ec6f5aeb95270921d418bf18f90dffd6be5c7b0e676", size = 64019 },
    { url = "https://files.pythonhosted.org/packages/7e/b5/1b2e8de8217d2e89db156625aa0fe4a6faad98972bfe07a7b8c10ef5dd6b/multidict-6.4.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:26ae9ad364fc61b936fb7bf4c9d8bd53f3a5b4417142cd0be5c509d6f767e2f1", size = 37925 },
    { url = "https://files.pythonhosted.org/packages/b4/e2/3ca91c112644a395c8eae017144c907d173ea910c913ff8b62549dcf0bbf/multidict-6.4.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:659318c6c8a85f6ecfc06b4e57529e5a78dfdd697260cc81f683492ad7e9435a", size = 37008 },
    { url = "https://files.pythonhosted.org/packages/60/23/79bc78146c7ac8d1ac766b2770ca2e07c2816058b8a3d5da6caed8148637/multidict-6.4.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e1eb72c741fd24d5a28242ce72bb61bc91f8451877131fa3fe930edb195f7054", size = 224374 },
    { url = "https://files.pythonhosted.org/packages/86/35/77950ed9ebd09136003a85c1926ba42001ca5be14feb49710e4334ee199b/multidict-6.4.3-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:3cd06d88cb7398252284ee75c8db8e680aa0d321451132d0dba12bc995f0adcc", size = 230869 },
    { url = "https://files.pythonhosted.org/packages/49/97/2a33c6e7d90bc116c636c14b2abab93d6521c0c052d24bfcc231cbf7f0e7/multidict-6.4.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4543d8dc6470a82fde92b035a92529317191ce993533c3c0c68f56811164ed07", size = 231949 },
    { url = "https://files.pythonhosted.org/packages/56/ce/e9b5d9fcf854f61d6686ada7ff64893a7a5523b2a07da6f1265eaaea5151/multidict-6.4.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:30a3ebdc068c27e9d6081fca0e2c33fdf132ecea703a72ea216b81a66860adde", size = 231032 },
    { url = "https://files.pythonhosted.org/packages/f0/ac/7ced59dcdfeddd03e601edb05adff0c66d81ed4a5160c443e44f2379eef0/multidict-6.4.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b038f10e23f277153f86f95c777ba1958bcd5993194fda26a1d06fae98b2f00c", size = 223517 },
    { url = "https://files.pythonhosted.org/packages/db/e6/325ed9055ae4e085315193a1b58bdb4d7fc38ffcc1f4975cfca97d015e17/multidict-6.4.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c605a2b2dc14282b580454b9b5d14ebe0668381a3a26d0ac39daa0ca115eb2ae", size = 216291 },
    { url = "https://files.pythonhosted.org/packages/fa/84/eeee6d477dd9dcb7691c3bb9d08df56017f5dd15c730bcc9383dcf201cf4/multidict-6.4.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:8bd2b875f4ca2bb527fe23e318ddd509b7df163407b0fb717df229041c6df5d3", size = 228982 },
    { url = "https://files.pythonhosted.org/packages/82/94/4d1f3e74e7acf8b0c85db350e012dcc61701cd6668bc2440bb1ecb423c90/multidict-6.4.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:c2e98c840c9c8e65c0e04b40c6c5066c8632678cd50c8721fdbcd2e09f21a507", size = 226823 },
    { url = "https://files.pythonhosted.org/packages/09/f0/1e54b95bda7cd01080e5732f9abb7b76ab5cc795b66605877caeb2197476/multidict-6.4.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:66eb80dd0ab36dbd559635e62fba3083a48a252633164857a1d1684f14326427", size = 222714 },
    { url = "https://files.pythonhosted.org/packages/e7/a2/f6cbca875195bd65a3e53b37ab46486f3cc125bdeab20eefe5042afa31fb/multidict-6.4.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c23831bdee0a2a3cf21be057b5e5326292f60472fb6c6f86392bbf0de70ba731", size = 233739 },
    { url = "https://files.pythonhosted.org/packages/79/68/9891f4d2b8569554723ddd6154375295f789dc65809826c6fb96a06314fd/multidict-6.4.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:1535cec6443bfd80d028052e9d17ba6ff8a5a3534c51d285ba56c18af97e9713", size = 230809 },
    { url = "https://files.pythonhosted.org/packages/e6/72/a7be29ba1e87e4fc5ceb44dabc7940b8005fd2436a332a23547709315f70/multidict-6.4.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3b73e7227681f85d19dec46e5b881827cd354aabe46049e1a61d2f9aaa4e285a", size = 226934 },
    { url = "https://files.pythonhosted.org/packages/12/c1/259386a9ad6840ff7afc686da96808b503d152ac4feb3a96c651dc4f5abf/multidict-6.4.3-cp312-cp312-win32.whl", hash = "sha256:8eac0c49df91b88bf91f818e0a24c1c46f3622978e2c27035bfdca98e0e18124", size = 35242 },
    { url = "https://files.pythonhosted.org/packages/06/24/c8fdff4f924d37225dc0c56a28b1dca10728fc2233065fafeb27b4b125be/multidict-6.4.3-cp312-cp312-win_amd64.whl", hash = "sha256:11990b5c757d956cd1db7cb140be50a63216af32cd6506329c2c59d732d802db", size = 38635 },
    { url = "https://files.pythonhosted.org/packages/6c/4b/86fd786d03915c6f49998cf10cd5fe6b6ac9e9a071cb40885d2e080fb90d/multidict-6.4.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:7a76534263d03ae0cfa721fea40fd2b5b9d17a6f85e98025931d41dc49504474", size = 63831 },
    { url = "https://files.pythonhosted.org/packages/45/05/9b51fdf7aef2563340a93be0a663acba2c428c4daeaf3960d92d53a4a930/multidict-6.4.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:805031c2f599eee62ac579843555ed1ce389ae00c7e9f74c2a1b45e0564a88dd", size = 37888 },
    { url = "https://files.pythonhosted.org/packages/0b/43/53fc25394386c911822419b522181227ca450cf57fea76e6188772a1bd91/multidict-6.4.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:c56c179839d5dcf51d565132185409d1d5dd8e614ba501eb79023a6cab25576b", size = 36852 },
    { url = "https://files.pythonhosted.org/packages/8a/68/7b99c751e822467c94a235b810a2fd4047d4ecb91caef6b5c60116991c4b/multidict-6.4.3-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9c64f4ddb3886dd8ab71b68a7431ad4aa01a8fa5be5b11543b29674f29ca0ba3", size = 223644 },
    { url = "https://files.pythonhosted.org/packages/80/1b/d458d791e4dd0f7e92596667784fbf99e5c8ba040affe1ca04f06b93ae92/multidict-6.4.3-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:3002a856367c0b41cad6784f5b8d3ab008eda194ed7864aaa58f65312e2abcac", size = 230446 },
    { url = "https://files.pythonhosted.org/packages/e2/46/9793378d988905491a7806d8987862dc5a0bae8a622dd896c4008c7b226b/multidict-6.4.3-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3d75e621e7d887d539d6e1d789f0c64271c250276c333480a9e1de089611f790", size = 231070 },
    { url = "https://files.pythonhosted.org/packages/a7/b8/b127d3e1f8dd2a5bf286b47b24567ae6363017292dc6dec44656e6246498/multidict-6.4.3-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:995015cf4a3c0d72cbf453b10a999b92c5629eaf3a0c3e1efb4b5c1f602253bb", size = 229956 },
    { url = "https://files.pythonhosted.org/packages/0c/93/f70a4c35b103fcfe1443059a2bb7f66e5c35f2aea7804105ff214f566009/multidict-6.4.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a2b0fabae7939d09d7d16a711468c385272fa1b9b7fb0d37e51143585d8e72e0", size = 222599 },
    { url = "https://files.pythonhosted.org/packages/63/8c/e28e0eb2fe34921d6aa32bfc4ac75b09570b4d6818cc95d25499fe08dc1d/multidict-6.4.3-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:61ed4d82f8a1e67eb9eb04f8587970d78fe7cddb4e4d6230b77eda23d27938f9", size = 216136 },
    { url = "https://files.pythonhosted.org/packages/72/f5/fbc81f866585b05f89f99d108be5d6ad170e3b6c4d0723d1a2f6ba5fa918/multidict-6.4.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:062428944a8dc69df9fdc5d5fc6279421e5f9c75a9ee3f586f274ba7b05ab3c8", size = 228139 },
    { url = "https://files.pythonhosted.org/packages/bb/ba/7d196bad6b85af2307d81f6979c36ed9665f49626f66d883d6c64d156f78/multidict-6.4.3-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:b90e27b4674e6c405ad6c64e515a505c6d113b832df52fdacb6b1ffd1fa9a1d1", size = 226251 },
    { url = "https://files.pythonhosted.org/packages/cc/e2/fae46a370dce79d08b672422a33df721ec8b80105e0ea8d87215ff6b090d/multidict-6.4.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:7d50d4abf6729921e9613d98344b74241572b751c6b37feed75fb0c37bd5a817", size = 221868 },
    { url = "https://files.pythonhosted.org/packages/26/20/bbc9a3dec19d5492f54a167f08546656e7aef75d181d3d82541463450e88/multidict-6.4.3-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:43fe10524fb0a0514be3954be53258e61d87341008ce4914f8e8b92bee6f875d", size = 233106 },
    { url = "https://files.pythonhosted.org/packages/ee/8d/f30ae8f5ff7a2461177f4d8eb0d8f69f27fb6cfe276b54ec4fd5a282d918/multidict-6.4.3-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:236966ca6c472ea4e2d3f02f6673ebfd36ba3f23159c323f5a496869bc8e47c9", size = 230163 },
    { url = "https://files.pythonhosted.org/packages/15/e9/2833f3c218d3c2179f3093f766940ded6b81a49d2e2f9c46ab240d23dfec/multidict-6.4.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:422a5ec315018e606473ba1f5431e064cf8b2a7468019233dcf8082fabad64c8", size = 225906 },
    { url = "https://files.pythonhosted.org/packages/f1/31/6edab296ac369fd286b845fa5dd4c409e63bc4655ed8c9510fcb477e9ae9/multidict-6.4.3-cp313-cp313-win32.whl", hash = "sha256:f901a5aace8e8c25d78960dcc24c870c8d356660d3b49b93a78bf38eb682aac3", size = 35238 },
    { url = "https://files.pythonhosted.org/packages/23/57/2c0167a1bffa30d9a1383c3dab99d8caae985defc8636934b5668830d2ef/multidict-6.4.3-cp313-cp313-win_amd64.whl", hash = "sha256:1c152c49e42277bc9a2f7b78bd5fa10b13e88d1b0328221e7aef89d5c60a99a5", size = 38799 },
    { url = "https://files.pythonhosted.org/packages/c9/13/2ead63b9ab0d2b3080819268acb297bd66e238070aa8d42af12b08cbee1c/multidict-6.4.3-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:be8751869e28b9c0d368d94f5afcb4234db66fe8496144547b4b6d6a0645cfc6", size = 68642 },
    { url = "https://files.pythonhosted.org/packages/85/45/f1a751e1eede30c23951e2ae274ce8fad738e8a3d5714be73e0a41b27b16/multidict-6.4.3-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:0d4b31f8a68dccbcd2c0ea04f0e014f1defc6b78f0eb8b35f2265e8716a6df0c", size = 40028 },
    { url = "https://files.pythonhosted.org/packages/a7/29/fcc53e886a2cc5595cc4560df333cb9630257bda65003a7eb4e4e0d8f9c1/multidict-6.4.3-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:032efeab3049e37eef2ff91271884303becc9e54d740b492a93b7e7266e23756", size = 39424 },
    { url = "https://files.pythonhosted.org/packages/f6/f0/056c81119d8b88703971f937b371795cab1407cd3c751482de5bfe1a04a9/multidict-6.4.3-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9e78006af1a7c8a8007e4f56629d7252668344442f66982368ac06522445e375", size = 226178 },
    { url = "https://files.pythonhosted.org/packages/a3/79/3b7e5fea0aa80583d3a69c9d98b7913dfd4fbc341fb10bb2fb48d35a9c21/multidict-6.4.3-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:daeac9dd30cda8703c417e4fddccd7c4dc0c73421a0b54a7da2713be125846be", size = 222617 },
    { url = "https://files.pythonhosted.org/packages/06/db/3ed012b163e376fc461e1d6a67de69b408339bc31dc83d39ae9ec3bf9578/multidict-6.4.3-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1f6f90700881438953eae443a9c6f8a509808bc3b185246992c4233ccee37fea", size = 227919 },
    { url = "https://files.pythonhosted.org/packages/b1/db/0433c104bca380989bc04d3b841fc83e95ce0c89f680e9ea4251118b52b6/multidict-6.4.3-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f84627997008390dd15762128dcf73c3365f4ec0106739cde6c20a07ed198ec8", size = 226097 },
    { url = "https://files.pythonhosted.org/packages/c2/95/910db2618175724dd254b7ae635b6cd8d2947a8b76b0376de7b96d814dab/multidict-6.4.3-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3307b48cd156153b117c0ea54890a3bdbf858a5b296ddd40dc3852e5f16e9b02", size = 220706 },
    { url = "https://files.pythonhosted.org/packages/d1/af/aa176c6f5f1d901aac957d5258d5e22897fe13948d1e69063ae3d5d0ca01/multidict-6.4.3-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ead46b0fa1dcf5af503a46e9f1c2e80b5d95c6011526352fa5f42ea201526124", size = 211728 },
    { url = "https://files.pythonhosted.org/packages/e7/42/d51cc5fc1527c3717d7f85137d6c79bb7a93cd214c26f1fc57523774dbb5/multidict-6.4.3-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:1748cb2743bedc339d63eb1bca314061568793acd603a6e37b09a326334c9f44", size = 226276 },
    { url = "https://files.pythonhosted.org/packages/28/6b/d836dea45e0b8432343ba4acf9a8ecaa245da4c0960fb7ab45088a5e568a/multidict-6.4.3-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:acc9fa606f76fc111b4569348cc23a771cb52c61516dcc6bcef46d612edb483b", size = 212069 },
    { url = "https://files.pythonhosted.org/packages/55/34/0ee1a7adb3560e18ee9289c6e5f7db54edc312b13e5c8263e88ea373d12c/multidict-6.4.3-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:31469d5832b5885adeb70982e531ce86f8c992334edd2f2254a10fa3182ac504", size = 217858 },
    { url = "https://files.pythonhosted.org/packages/04/08/586d652c2f5acefe0cf4e658eedb4d71d4ba6dfd4f189bd81b400fc1bc6b/multidict-6.4.3-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:ba46b51b6e51b4ef7bfb84b82f5db0dc5e300fb222a8a13b8cd4111898a869cf", size = 226988 },
    { url = "https://files.pythonhosted.org/packages/82/e3/cc59c7e2bc49d7f906fb4ffb6d9c3a3cf21b9f2dd9c96d05bef89c2b1fd1/multidict-6.4.3-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:389cfefb599edf3fcfd5f64c0410da686f90f5f5e2c4d84e14f6797a5a337af4", size = 220435 },
    { url = "https://files.pythonhosted.org/packages/e0/32/5c3a556118aca9981d883f38c4b1bfae646f3627157f70f4068e5a648955/multidict-6.4.3-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:64bc2bbc5fba7b9db5c2c8d750824f41c6994e3882e6d73c903c2afa78d091e4", size = 221494 },
    { url = "https://files.pythonhosted.org/packages/b9/3b/1599631f59024b75c4d6e3069f4502409970a336647502aaf6b62fb7ac98/multidict-6.4.3-cp313-cp313t-win32.whl", hash = "sha256:0ecdc12ea44bab2807d6b4a7e5eef25109ab1c82a8240d86d3c1fc9f3b72efd5", size = 41775 },
    { url = "https://files.pythonhosted.org/packages/e8/4e/09301668d675d02ca8e8e1a3e6be046619e30403f5ada2ed5b080ae28d02/multidict-6.4.3-cp313-cp313t-win_amd64.whl", hash = "sha256:7146a8742ea71b5d7d955bffcef58a9e6e04efba704b52a460134fefd10a8208", size = 45946 },
    { url = "https://files.pythonhosted.org/packages/96/10/7d526c8974f017f1e7ca584c71ee62a638e9334d8d33f27d7cdfc9ae79e4/multidict-6.4.3-py3-none-any.whl", hash = "sha256:59fe01ee8e2a1e8ceb3f6dbb216b09c8d9f4ef1c22c4fc825d045a147fa2ebc9", size = 10400 },
]

[[package]]
name = "narwhals"
version = "1.34.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f5/6d/0ad9e8fe41dba509f1c3241a46e52c9677eb9f67f7eb3c8018b1ae088469/narwhals-1.34.1.tar.gz", hash = "sha256:8941a08cf62f39ae67be945090b20a19c51fb9048ac909cad2f95aee23f9e302", size = 265602 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/a2/2ea3f2058ae661b06fad1a14c0f29f1cc8e49478d02a2d68f0eac3872b86/narwhals-1.34.1-py3-none-any.whl", hash = "sha256:aee49a30d1624371ad975ede2bab16cd125ab5df0fd185e2f4757e103b074d27", size = 325548 },
]

[[package]]
name = "nbclient"
version = "0.10.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jupyter-client" },
    { name = "jupyter-core" },
    { name = "nbformat" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/87/66/7ffd18d58eae90d5721f9f39212327695b749e23ad44b3881744eaf4d9e8/nbclient-0.10.2.tar.gz", hash = "sha256:90b7fc6b810630db87a6d0c2250b1f0ab4cf4d3c27a299b0cde78a4ed3fd9193", size = 62424 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/34/6d/e7fa07f03a4a7b221d94b4d586edb754a9b0dc3c9e2c93353e9fa4e0d117/nbclient-0.10.2-py3-none-any.whl", hash = "sha256:4ffee11e788b4a27fabeb7955547e4318a5298f34342a4bfd01f2e1faaeadc3d", size = 25434 },
]

[[package]]
name = "nbconvert"
version = "7.16.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "beautifulsoup4" },
    { name = "bleach", extra = ["css"] },
    { name = "defusedxml" },
    { name = "jinja2" },
    { name = "jupyter-core" },
    { name = "jupyterlab-pygments" },
    { name = "markupsafe" },
    { name = "mistune" },
    { name = "nbclient" },
    { name = "nbformat" },
    { name = "packaging" },
    { name = "pandocfilters" },
    { name = "pygments" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a3/59/f28e15fc47ffb73af68a8d9b47367a8630d76e97ae85ad18271b9db96fdf/nbconvert-7.16.6.tar.gz", hash = "sha256:576a7e37c6480da7b8465eefa66c17844243816ce1ccc372633c6b71c3c0f582", size = 857715 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cc/9a/cd673b2f773a12c992f41309ef81b99da1690426bd2f96957a7ade0d3ed7/nbconvert-7.16.6-py3-none-any.whl", hash = "sha256:1375a7b67e0c2883678c48e506dc320febb57685e5ee67faa51b18a90f3a712b", size = 258525 },
]

[[package]]
name = "nbformat"
version = "5.10.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "fastjsonschema" },
    { name = "jsonschema" },
    { name = "jupyter-core" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6d/fd/91545e604bc3dad7dca9ed03284086039b294c6b3d75c0d2fa45f9e9caf3/nbformat-5.10.4.tar.gz", hash = "sha256:322168b14f937a5d11362988ecac2a4952d3d8e3a2cbeb2319584631226d5b3a", size = 142749 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a9/82/0340caa499416c78e5d8f5f05947ae4bc3cba53c9f038ab6e9ed964e22f1/nbformat-5.10.4-py3-none-any.whl", hash = "sha256:3b48d6c8fbca4b299bf3982ea7db1af21580e4fec269ad087b9e81588891200b", size = 78454 },
]

[[package]]
name = "nest-asyncio"
version = "1.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/83/f8/51569ac65d696c8ecbee95938f89d4abf00f47d58d48f6fbabfe8f0baefe/nest_asyncio-1.6.0.tar.gz", hash = "sha256:6f172d5449aca15afd6c646851f4e31e02c598d553a667e38cafa997cfec55fe", size = 7418 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a0/c4/c2971a3ba4c6103a3d10c4b0f24f461ddc027f0f09763220cf35ca1401b3/nest_asyncio-1.6.0-py3-none-any.whl", hash = "sha256:87af6efd6b5e897c81050477ef65c62e2b2f35d51703cae01aff2905b1852e1c", size = 5195 },
]

[[package]]
name = "networkx"
version = "3.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fd/1d/06475e1cd5264c0b870ea2cc6fdb3e37177c1e565c43f56ff17a10e3937f/networkx-3.4.2.tar.gz", hash = "sha256:307c3669428c5362aab27c8a1260aa8f47c4e91d3891f48be0141738d8d053e1", size = 2151368 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b9/54/dd730b32ea14ea797530a4479b2ed46a6fb250f682a9cfb997e968bf0261/networkx-3.4.2-py3-none-any.whl", hash = "sha256:df5d4365b724cf81b8c6a7312509d0c22386097011ad1abe274afd5e9d3bbc5f", size = 1723263 },
]

[[package]]
name = "nodeenv"
version = "1.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/16/fc88b08840de0e0a72a2f9d8c6bae36be573e475a6326ae854bcc549fc45/nodeenv-1.9.1.tar.gz", hash = "sha256:6ec12890a2dab7946721edbfbcd91f3319c6ccc9aec47be7c7e6b7011ee6645f", size = 47437 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/1d/1b658dbd2b9fa9c4c9f32accbfc0205d532c8c6194dc0f2a4c0428e7128a/nodeenv-1.9.1-py2.py3-none-any.whl", hash = "sha256:ba11c9782d29c27c70ffbdda2d7415098754709be8a7056d79a737cd901155c9", size = 22314 },
]

[[package]]
name = "nodejs-wheel-binaries"
version = "22.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d7/c7/4fd3871d2b7fd5122216245e273201ab98eda92bbd6fe9ad04846b758c56/nodejs_wheel_binaries-22.14.0.tar.gz", hash = "sha256:c1dc43713598c7310d53795c764beead861b8c5021fe4b1366cb912ce1a4c8bf", size = 8055 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/b6/66ef4ef75ea7389ea788f2d5505bf9a8e5c3806d56c7a90cf46a6942f1cf/nodejs_wheel_binaries-22.14.0-py2.py3-none-macosx_11_0_arm64.whl", hash = "sha256:d8ab8690516a3e98458041286e3f0d6458de176d15c14f205c3ea2972131420d", size = 50326597 },
    { url = "https://files.pythonhosted.org/packages/7d/78/023d91a293ba73572a643bc89d11620d189f35f205a309dd8296aa45e69a/nodejs_wheel_binaries-22.14.0-py2.py3-none-macosx_11_0_x86_64.whl", hash = "sha256:b2f200f23b3610bdbee01cf136279e005ffdf8ee74557aa46c0940a7867956f6", size = 51158258 },
    { url = "https://files.pythonhosted.org/packages/af/86/324f6342c79e5034a13319b02ba9ed1f4ac8813af567d223c9a9e56cd338/nodejs_wheel_binaries-22.14.0-py2.py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d0877832abd7a9c75c8c5caafa37f986c9341ee025043c2771213d70c4c1defa", size = 57180264 },
    { url = "https://files.pythonhosted.org/packages/6d/9f/42bdaab26137e31732bff00147b9aca2185d475b5752b57a443e6c7ba93f/nodejs_wheel_binaries-22.14.0-py2.py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8fded5a70a8a55c2135e67bd580d8b7f2e94fcbafcc679b6a2d5b92f88373d69", size = 57693251 },
    { url = "https://files.pythonhosted.org/packages/ab/d7/94f8f269aa86cf35f9ed2b70d09aca48dc971fb5656fdc4a3b69364b189f/nodejs_wheel_binaries-22.14.0-py2.py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:c1ade6f3ece458b40c02e89c91d5103792a9f18aaad5026da533eb0dcb87090e", size = 58841717 },
    { url = "https://files.pythonhosted.org/packages/2d/a0/43b7316eaf22b4ee9bfb897ee36c724efceac7b89d7d1bedca28057b7be1/nodejs_wheel_binaries-22.14.0-py2.py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:34fa5ed4cf3f65cbfbe9b45c407ffc2fc7d97a06cd8993e6162191ff81f29f48", size = 59808791 },
    { url = "https://files.pythonhosted.org/packages/10/0a/814491f751a25136e37de68a2728c9a9e3c1d20494aba5ff3c230d5f9c2d/nodejs_wheel_binaries-22.14.0-py2.py3-none-win_amd64.whl", hash = "sha256:ca7023276327455988b81390fa6bbfa5191c1da7fc45bc57c7abc281ba9967e9", size = 40478921 },
    { url = "https://files.pythonhosted.org/packages/f4/5c/cab444afaa387dceac8debb817b52fd00596efcd2d54506c27311c6fe6a8/nodejs_wheel_binaries-22.14.0-py2.py3-none-win_arm64.whl", hash = "sha256:fd59c8e9a202221e316febe1624a1ae3b42775b7fb27737bf12ec79565983eaf", size = 36206637 },
]

[[package]]
name = "notebook"
version = "7.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jupyter-server" },
    { name = "jupyterlab" },
    { name = "jupyterlab-server" },
    { name = "notebook-shim" },
    { name = "tornado" },
]
sdist = { url = "https://files.pythonhosted.org/packages/33/7c/2dd051638502268da7a6784ae18bb40c2d7fcbea3581bf14078a168f9960/notebook-7.4.0.tar.gz", hash = "sha256:581d88f83709d90ce738dfd1d759892b96e3cbbc9c4a989912ed6c6a08f0d3e8", size = 13880491 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/13/d1/a8897aa74ac54409c4679e96e6d8b31d7187b2ce31596ae3ee95bee20e87/notebook-7.4.0-py3-none-any.whl", hash = "sha256:005fd21f4db6093a7b739b17df5fe60597811adb07e8255f458db4035d208e3a", size = 14281255 },
]

[[package]]
name = "notebook-shim"
version = "0.2.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jupyter-server" },
]
sdist = { url = "https://files.pythonhosted.org/packages/54/d2/92fa3243712b9a3e8bafaf60aac366da1cada3639ca767ff4b5b3654ec28/notebook_shim-0.2.4.tar.gz", hash = "sha256:b4b2cfa1b65d98307ca24361f5b30fe785b53c3fd07b7a47e89acb5e6ac638cb", size = 13167 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/33/bd5b9137445ea4b680023eb0469b2bb969d61303dedb2aac6560ff3d14a1/notebook_shim-0.2.4-py3-none-any.whl", hash = "sha256:411a5be4e9dc882a074ccbcae671eda64cceb068767e9a3419096986560e1cef", size = 13307 },
]

[[package]]
name = "notte"
version = "1.3.3"
source = { editable = "." }
dependencies = [
    { name = "notte-agent" },
    { name = "notte-browser" },
    { name = "notte-core" },
    { name = "notte-eval" },
    { name = "notte-integrations" },
    { name = "notte-pools" },
    { name = "notte-sdk" },
]

[package.dev-dependencies]
dev = [
    { name = "aiomultiprocess" },
    { name = "basedpyright" },
    { name = "cloudpickle" },
    { name = "joblib" },
    { name = "jupyter" },
    { name = "pandas" },
    { name = "pebble" },
    { name = "pre-commit" },
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-mock" },
]
lint = [
    { name = "ruff" },
]

[package.metadata]
requires-dist = [
    { name = "notte-agent", editable = "packages/notte-agent" },
    { name = "notte-browser", editable = "packages/notte-browser" },
    { name = "notte-core", editable = "packages/notte-core" },
    { name = "notte-eval", editable = "packages/notte-eval" },
    { name = "notte-integrations", editable = "packages/notte-integrations" },
    { name = "notte-pools", editable = "packages/notte-pools" },
    { name = "notte-sdk", editable = "packages/notte-sdk" },
]

[package.metadata.requires-dev]
dev = [
    { name = "aiomultiprocess", specifier = ">=0.9.1" },
    { name = "basedpyright", specifier = ">=1.27.1" },
    { name = "cloudpickle", specifier = ">=3.1.1" },
    { name = "joblib", specifier = ">=1.4.2" },
    { name = "jupyter", specifier = ">=1.1.1" },
    { name = "pandas" },
    { name = "pebble", specifier = ">=5.1.1" },
    { name = "pre-commit", specifier = ">=4.1.0" },
    { name = "pytest", specifier = ">=8.3.4" },
    { name = "pytest-asyncio", specifier = ">=0.25.3" },
    { name = "pytest-mock", specifier = ">=3.14.0" },
]
lint = [{ name = "ruff", specifier = ">=0.9.7" }]

[[package]]
name = "notte-agent"
version = "1.3.3"
source = { editable = "packages/notte-agent" }
dependencies = [
    { name = "notte-browser" },
    { name = "notte-core" },
]

[package.metadata]
requires-dist = [
    { name = "notte-browser", editable = "packages/notte-browser" },
    { name = "notte-core", editable = "packages/notte-core" },
]

[[package]]
name = "notte-browser"
version = "1.3.3"
source = { editable = "packages/notte-browser" }
dependencies = [
    { name = "maincontentextractor" },
    { name = "notte-core" },
    { name = "patchright" },
]

[package.metadata]
requires-dist = [
    { name = "maincontentextractor", git = "https://github.com/HawkClaws/main_content_extractor?rev=7c3ed7f6ed7f6c10223a3357d43ab741663bc812" },
    { name = "notte-core", editable = "packages/notte-core" },
    { name = "patchright", specifier = "==1.50.0" },
]

[[package]]
name = "notte-core"
version = "1.3.3"
source = { editable = "packages/notte-core" }
dependencies = [
    { name = "chevron" },
    { name = "litellm" },
    { name = "llamux" },
    { name = "loguru" },
    { name = "patchright" },
    { name = "pillow" },
    { name = "posthog" },
    { name = "pydantic" },
    { name = "pyotp" },
    { name = "python-dotenv" },
    { name = "requests" },
    { name = "tldextract" },
]

[package.optional-dependencies]
server = [
    { name = "litellm", extra = ["proxy"] },
]

[package.metadata]
requires-dist = [
    { name = "chevron", specifier = ">=0.14.0" },
    { name = "litellm", specifier = ">=1.61.16" },
    { name = "litellm", extras = ["proxy"], marker = "extra == 'server'", specifier = ">=1.61.16" },
    { name = "llamux", specifier = ">=0.1.9" },
    { name = "loguru", specifier = ">=0.7.3" },
    { name = "patchright", specifier = "==1.50.0" },
    { name = "pillow", specifier = ">=11.1.0" },
    { name = "posthog", specifier = ">=3.0.1" },
    { name = "pydantic", specifier = ">=2.10.6" },
    { name = "pyotp", specifier = ">=2.9.0" },
    { name = "python-dotenv", specifier = ">=1.0.1" },
    { name = "requests", specifier = ">=2.32.3" },
    { name = "tldextract", specifier = ">=5.2.0" },
]

[[package]]
name = "notte-eval"
version = "1.3.3"
source = { editable = "packages/notte-eval" }
dependencies = [
    { name = "browserforge" },
    { name = "chevron" },
    { name = "litellm" },
    { name = "llamux" },
    { name = "loguru" },
    { name = "maincontentextractor" },
    { name = "patchright" },
    { name = "pillow" },
    { name = "posthog" },
    { name = "pydantic" },
    { name = "pyotp" },
    { name = "python-dotenv" },
    { name = "requests" },
    { name = "tldextract" },
]

[package.optional-dependencies]
api = [
    { name = "fastapi" },
    { name = "uvicorn" },
]
browser-use = [
    { name = "browser-use" },
    { name = "langchain-google-genai" },
]
browserbase = [
    { name = "browserbase" },
]
camoufox = [
    { name = "camoufox", extra = ["geoip"] },
]
convergence = [
    { name = "proxy-lite" },
]
discord = [
    { name = "discord-py" },
]
embedding = [
    { name = "sentence-transformers" },
]
server = [
    { name = "litellm", extra = ["proxy"] },
]
slack = [
    { name = "slack-sdk" },
]
vault = [
    { name = "hvac" },
]

[package.dev-dependencies]
dev = [
    { name = "aiomultiprocess" },
    { name = "basedpyright" },
    { name = "cloudpickle" },
    { name = "joblib" },
    { name = "jupyter" },
    { name = "pandas" },
    { name = "pebble" },
    { name = "pre-commit" },
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-mock" },
]
lint = [
    { name = "ruff" },
]

[package.metadata]
requires-dist = [
    { name = "browser-use", marker = "extra == 'browser-use'", specifier = ">=0.1.40" },
    { name = "browserbase", marker = "extra == 'browserbase'", specifier = ">=1.2.0" },
    { name = "browserforge", specifier = ">=1.2.3" },
    { name = "camoufox", extras = ["geoip"], marker = "extra == 'camoufox'", specifier = ">=0.4.11" },
    { name = "chevron", specifier = ">=0.14.0" },
    { name = "discord-py", marker = "extra == 'discord'", specifier = ">=2.3.0,<2.5.0" },
    { name = "fastapi", marker = "extra == 'api'", specifier = ">=0.115.8" },
    { name = "hvac", marker = "extra == 'vault'", specifier = ">=2.3.0" },
    { name = "langchain-google-genai", marker = "extra == 'browser-use'", specifier = ">=2.1.1" },
    { name = "litellm", specifier = ">=1.61.16" },
    { name = "litellm", extras = ["proxy"], marker = "extra == 'server'", specifier = ">=1.61.16" },
    { name = "llamux", specifier = ">=0.1.9" },
    { name = "loguru", specifier = ">=0.7.3" },
    { name = "maincontentextractor", git = "https://github.com/HawkClaws/main_content_extractor?rev=7c3ed7f6ed7f6c10223a3357d43ab741663bc812" },
    { name = "patchright", specifier = "==1.50.0" },
    { name = "pillow", specifier = ">=11.1.0" },
    { name = "posthog", specifier = ">=3.0.1" },
    { name = "proxy-lite", marker = "extra == 'convergence'", git = "https://github.com/leo-notte/proxy-lite" },
    { name = "pydantic", specifier = ">=2.10.6" },
    { name = "pyotp", specifier = ">=2.9.0" },
    { name = "python-dotenv", specifier = ">=1.0.1" },
    { name = "requests", specifier = ">=2.32.3" },
    { name = "sentence-transformers", marker = "extra == 'embedding'", specifier = ">=3.4.1" },
    { name = "slack-sdk", marker = "extra == 'slack'", specifier = ">=3.34.0" },
    { name = "tldextract", specifier = ">=5.2.0" },
    { name = "uvicorn", marker = "extra == 'api'", specifier = ">=0.29.0" },
]

[package.metadata.requires-dev]
dev = [
    { name = "aiomultiprocess", specifier = ">=0.9.1" },
    { name = "basedpyright", specifier = ">=1.27.1" },
    { name = "cloudpickle", specifier = ">=3.1.1" },
    { name = "joblib", specifier = ">=1.4.2" },
    { name = "jupyter", specifier = ">=1.1.1" },
    { name = "pandas" },
    { name = "pebble", specifier = ">=5.1.1" },
    { name = "pre-commit", specifier = ">=4.1.0" },
    { name = "pytest", specifier = ">=8.3.4" },
    { name = "pytest-asyncio", specifier = ">=0.25.3" },
    { name = "pytest-mock", specifier = ">=3.14.0" },
]
lint = [{ name = "ruff", specifier = ">=0.9.7" }]

[[package]]
name = "notte-integrations"
version = "1.3.3"
source = { editable = "packages/notte-integrations" }
dependencies = [
    { name = "browser-use" },
    { name = "browserbase" },
    { name = "camoufox", extra = ["geoip"] },
    { name = "discord-py" },
    { name = "fastapi" },
    { name = "hvac" },
    { name = "langchain-google-genai" },
    { name = "notte-agent" },
    { name = "notte-browser" },
    { name = "notte-core" },
    { name = "slack-sdk" },
    { name = "uvicorn" },
]

[package.metadata]
requires-dist = [
    { name = "browser-use", specifier = ">=0.1.40" },
    { name = "browserbase", specifier = ">=1.2.0" },
    { name = "camoufox", extras = ["geoip"], specifier = ">=0.4.11" },
    { name = "discord-py", specifier = ">=2.3.0,<2.5.0" },
    { name = "fastapi", specifier = ">=0.115.8" },
    { name = "hvac", specifier = ">=2.3.0" },
    { name = "langchain-google-genai", specifier = ">=2.1.1" },
    { name = "notte-agent", editable = "packages/notte-agent" },
    { name = "notte-browser", editable = "packages/notte-browser" },
    { name = "notte-core", editable = "packages/notte-core" },
    { name = "slack-sdk", specifier = ">=3.34.0" },
    { name = "uvicorn", specifier = ">=0.29.0" },
]

[[package]]
name = "notte-pools"
version = "1.3.3"
source = { editable = "packages/notte-pools" }
dependencies = [
    { name = "browser-use" },
    { name = "browserbase" },
    { name = "camoufox", extra = ["geoip"] },
    { name = "discord-py" },
    { name = "fastapi" },
    { name = "hvac" },
    { name = "langchain-google-genai" },
    { name = "proxy-lite" },
    { name = "slack-sdk" },
    { name = "uvicorn" },
]

[package.dev-dependencies]
dev = [
    { name = "aiomultiprocess" },
    { name = "basedpyright" },
    { name = "cloudpickle" },
    { name = "joblib" },
    { name = "jupyter" },
    { name = "pandas" },
    { name = "pebble" },
    { name = "pre-commit" },
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-mock" },
]
lint = [
    { name = "ruff" },
]

[package.metadata]
requires-dist = [
    { name = "browser-use", specifier = ">=0.1.40" },
    { name = "browserbase", specifier = ">=1.2.0" },
    { name = "camoufox", extras = ["geoip"], specifier = ">=0.4.11" },
    { name = "discord-py", specifier = ">=2.3.0,<2.5.0" },
    { name = "fastapi", specifier = ">=0.115.8" },
    { name = "hvac", specifier = ">=2.3.0" },
    { name = "langchain-google-genai", specifier = ">=2.1.1" },
    { name = "proxy-lite", git = "https://github.com/leo-notte/proxy-lite" },
    { name = "slack-sdk", specifier = ">=3.34.0" },
    { name = "uvicorn", specifier = ">=0.29.0" },
]

[package.metadata.requires-dev]
dev = [
    { name = "aiomultiprocess", specifier = ">=0.9.1" },
    { name = "basedpyright", specifier = ">=1.27.1" },
    { name = "cloudpickle", specifier = ">=3.1.1" },
    { name = "joblib", specifier = ">=1.4.2" },
    { name = "jupyter", specifier = ">=1.1.1" },
    { name = "pandas" },
    { name = "pebble", specifier = ">=5.1.1" },
    { name = "pre-commit", specifier = ">=4.1.0" },
    { name = "pytest", specifier = ">=8.3.4" },
    { name = "pytest-asyncio", specifier = ">=0.25.3" },
    { name = "pytest-mock", specifier = ">=3.14.0" },
]
lint = [{ name = "ruff", specifier = ">=0.9.7" }]

[[package]]
name = "notte-sdk"
version = "1.3.3"
source = { editable = "packages/notte-sdk" }
dependencies = [
    { name = "loguru" },
    { name = "notte-core" },
    { name = "pydantic" },
    { name = "requests" },
]

[package.metadata]
requires-dist = [
    { name = "loguru", specifier = ">=0.7.3" },
    { name = "notte-core", editable = "packages/notte-core" },
    { name = "pydantic", specifier = ">=2.11.3" },
    { name = "requests", specifier = ">=2.32.3" },
]

[[package]]
name = "numpy"
version = "2.2.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e1/78/31103410a57bc2c2b93a3597340a8119588571f6a4539067546cb9a0bfac/numpy-2.2.4.tar.gz", hash = "sha256:9ba03692a45d3eef66559efe1d1096c4b9b75c0986b5dff5530c378fb8331d4f", size = 20270701 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/16/fb/09e778ee3a8ea0d4dc8329cca0a9c9e65fed847d08e37eba74cb7ed4b252/numpy-2.2.4-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:e9e0a277bb2eb5d8a7407e14688b85fd8ad628ee4e0c7930415687b6564207a4", size = 21254989 },
    { url = "https://files.pythonhosted.org/packages/a2/0a/1212befdbecab5d80eca3cde47d304cad986ad4eec7d85a42e0b6d2cc2ef/numpy-2.2.4-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:9eeea959168ea555e556b8188da5fa7831e21d91ce031e95ce23747b7609f8a4", size = 14425910 },
    { url = "https://files.pythonhosted.org/packages/2b/3e/e7247c1d4f15086bb106c8d43c925b0b2ea20270224f5186fa48d4fb5cbd/numpy-2.2.4-cp311-cp311-macosx_14_0_arm64.whl", hash = "sha256:bd3ad3b0a40e713fc68f99ecfd07124195333f1e689387c180813f0e94309d6f", size = 5426490 },
    { url = "https://files.pythonhosted.org/packages/5d/fa/aa7cd6be51419b894c5787a8a93c3302a1ed4f82d35beb0613ec15bdd0e2/numpy-2.2.4-cp311-cp311-macosx_14_0_x86_64.whl", hash = "sha256:cf28633d64294969c019c6df4ff37f5698e8326db68cc2b66576a51fad634880", size = 6967754 },
    { url = "https://files.pythonhosted.org/packages/d5/ee/96457c943265de9fadeb3d2ffdbab003f7fba13d971084a9876affcda095/numpy-2.2.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2fa8fa7697ad1646b5c93de1719965844e004fcad23c91228aca1cf0800044a1", size = 14373079 },
    { url = "https://files.pythonhosted.org/packages/c5/5c/ceefca458559f0ccc7a982319f37ed07b0d7b526964ae6cc61f8ad1b6119/numpy-2.2.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f4162988a360a29af158aeb4a2f4f09ffed6a969c9776f8f3bdee9b06a8ab7e5", size = 16428819 },
    { url = "https://files.pythonhosted.org/packages/22/31/9b2ac8eee99e001eb6add9fa27514ef5e9faf176169057a12860af52704c/numpy-2.2.4-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:892c10d6a73e0f14935c31229e03325a7b3093fafd6ce0af704be7f894d95687", size = 15881470 },
    { url = "https://files.pythonhosted.org/packages/f0/dc/8569b5f25ff30484b555ad8a3f537e0225d091abec386c9420cf5f7a2976/numpy-2.2.4-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:db1f1c22173ac1c58db249ae48aa7ead29f534b9a948bc56828337aa84a32ed6", size = 18218144 },
    { url = "https://files.pythonhosted.org/packages/5e/05/463c023a39bdeb9bb43a99e7dee2c664cb68d5bb87d14f92482b9f6011cc/numpy-2.2.4-cp311-cp311-win32.whl", hash = "sha256:ea2bb7e2ae9e37d96835b3576a4fa4b3a97592fbea8ef7c3587078b0068b8f09", size = 6606368 },
    { url = "https://files.pythonhosted.org/packages/8b/72/10c1d2d82101c468a28adc35de6c77b308f288cfd0b88e1070f15b98e00c/numpy-2.2.4-cp311-cp311-win_amd64.whl", hash = "sha256:f7de08cbe5551911886d1ab60de58448c6df0f67d9feb7d1fb21e9875ef95e91", size = 12947526 },
    { url = "https://files.pythonhosted.org/packages/a2/30/182db21d4f2a95904cec1a6f779479ea1ac07c0647f064dea454ec650c42/numpy-2.2.4-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:a7b9084668aa0f64e64bd00d27ba5146ef1c3a8835f3bd912e7a9e01326804c4", size = 20947156 },
    { url = "https://files.pythonhosted.org/packages/24/6d/9483566acfbda6c62c6bc74b6e981c777229d2af93c8eb2469b26ac1b7bc/numpy-2.2.4-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:dbe512c511956b893d2dacd007d955a3f03d555ae05cfa3ff1c1ff6df8851854", size = 14133092 },
    { url = "https://files.pythonhosted.org/packages/27/f6/dba8a258acbf9d2bed2525cdcbb9493ef9bae5199d7a9cb92ee7e9b2aea6/numpy-2.2.4-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:bb649f8b207ab07caebba230d851b579a3c8711a851d29efe15008e31bb4de24", size = 5163515 },
    { url = "https://files.pythonhosted.org/packages/62/30/82116199d1c249446723c68f2c9da40d7f062551036f50b8c4caa42ae252/numpy-2.2.4-cp312-cp312-macosx_14_0_x86_64.whl", hash = "sha256:f34dc300df798742b3d06515aa2a0aee20941c13579d7a2f2e10af01ae4901ee", size = 6696558 },
    { url = "https://files.pythonhosted.org/packages/0e/b2/54122b3c6df5df3e87582b2e9430f1bdb63af4023c739ba300164c9ae503/numpy-2.2.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c3f7ac96b16955634e223b579a3e5798df59007ca43e8d451a0e6a50f6bfdfba", size = 14084742 },
    { url = "https://files.pythonhosted.org/packages/02/e2/e2cbb8d634151aab9528ef7b8bab52ee4ab10e076509285602c2a3a686e0/numpy-2.2.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4f92084defa704deadd4e0a5ab1dc52d8ac9e8a8ef617f3fbb853e79b0ea3592", size = 16134051 },
    { url = "https://files.pythonhosted.org/packages/8e/21/efd47800e4affc993e8be50c1b768de038363dd88865920439ef7b422c60/numpy-2.2.4-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:7a4e84a6283b36632e2a5b56e121961f6542ab886bc9e12f8f9818b3c266bfbb", size = 15578972 },
    { url = "https://files.pythonhosted.org/packages/04/1e/f8bb88f6157045dd5d9b27ccf433d016981032690969aa5c19e332b138c0/numpy-2.2.4-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:11c43995255eb4127115956495f43e9343736edb7fcdb0d973defd9de14cd84f", size = 17898106 },
    { url = "https://files.pythonhosted.org/packages/2b/93/df59a5a3897c1f036ae8ff845e45f4081bb06943039ae28a3c1c7c780f22/numpy-2.2.4-cp312-cp312-win32.whl", hash = "sha256:65ef3468b53269eb5fdb3a5c09508c032b793da03251d5f8722b1194f1790c00", size = 6311190 },
    { url = "https://files.pythonhosted.org/packages/46/69/8c4f928741c2a8efa255fdc7e9097527c6dc4e4df147e3cadc5d9357ce85/numpy-2.2.4-cp312-cp312-win_amd64.whl", hash = "sha256:2aad3c17ed2ff455b8eaafe06bcdae0062a1db77cb99f4b9cbb5f4ecb13c5146", size = 12644305 },
    { url = "https://files.pythonhosted.org/packages/2a/d0/bd5ad792e78017f5decfb2ecc947422a3669a34f775679a76317af671ffc/numpy-2.2.4-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:1cf4e5c6a278d620dee9ddeb487dc6a860f9b199eadeecc567f777daace1e9e7", size = 20933623 },
    { url = "https://files.pythonhosted.org/packages/c3/bc/2b3545766337b95409868f8e62053135bdc7fa2ce630aba983a2aa60b559/numpy-2.2.4-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:1974afec0b479e50438fc3648974268f972e2d908ddb6d7fb634598cdb8260a0", size = 14148681 },
    { url = "https://files.pythonhosted.org/packages/6a/70/67b24d68a56551d43a6ec9fe8c5f91b526d4c1a46a6387b956bf2d64744e/numpy-2.2.4-cp313-cp313-macosx_14_0_arm64.whl", hash = "sha256:79bd5f0a02aa16808fcbc79a9a376a147cc1045f7dfe44c6e7d53fa8b8a79392", size = 5148759 },
    { url = "https://files.pythonhosted.org/packages/1c/8b/e2fc8a75fcb7be12d90b31477c9356c0cbb44abce7ffb36be39a0017afad/numpy-2.2.4-cp313-cp313-macosx_14_0_x86_64.whl", hash = "sha256:3387dd7232804b341165cedcb90694565a6015433ee076c6754775e85d86f1fc", size = 6683092 },
    { url = "https://files.pythonhosted.org/packages/13/73/41b7b27f169ecf368b52533edb72e56a133f9e86256e809e169362553b49/numpy-2.2.4-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6f527d8fdb0286fd2fd97a2a96c6be17ba4232da346931d967a0630050dfd298", size = 14081422 },
    { url = "https://files.pythonhosted.org/packages/4b/04/e208ff3ae3ddfbafc05910f89546382f15a3f10186b1f56bd99f159689c2/numpy-2.2.4-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bce43e386c16898b91e162e5baaad90c4b06f9dcbe36282490032cec98dc8ae7", size = 16132202 },
    { url = "https://files.pythonhosted.org/packages/fe/bc/2218160574d862d5e55f803d88ddcad88beff94791f9c5f86d67bd8fbf1c/numpy-2.2.4-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:31504f970f563d99f71a3512d0c01a645b692b12a63630d6aafa0939e52361e6", size = 15573131 },
    { url = "https://files.pythonhosted.org/packages/a5/78/97c775bc4f05abc8a8426436b7cb1be806a02a2994b195945600855e3a25/numpy-2.2.4-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:81413336ef121a6ba746892fad881a83351ee3e1e4011f52e97fba79233611fd", size = 17894270 },
    { url = "https://files.pythonhosted.org/packages/b9/eb/38c06217a5f6de27dcb41524ca95a44e395e6a1decdc0c99fec0832ce6ae/numpy-2.2.4-cp313-cp313-win32.whl", hash = "sha256:f486038e44caa08dbd97275a9a35a283a8f1d2f0ee60ac260a1790e76660833c", size = 6308141 },
    { url = "https://files.pythonhosted.org/packages/52/17/d0dd10ab6d125c6d11ffb6dfa3423c3571befab8358d4f85cd4471964fcd/numpy-2.2.4-cp313-cp313-win_amd64.whl", hash = "sha256:207a2b8441cc8b6a2a78c9ddc64d00d20c303d79fba08c577752f080c4007ee3", size = 12636885 },
    { url = "https://files.pythonhosted.org/packages/fa/e2/793288ede17a0fdc921172916efb40f3cbc2aa97e76c5c84aba6dc7e8747/numpy-2.2.4-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:8120575cb4882318c791f839a4fd66161a6fa46f3f0a5e613071aae35b5dd8f8", size = 20961829 },
    { url = "https://files.pythonhosted.org/packages/3a/75/bb4573f6c462afd1ea5cbedcc362fe3e9bdbcc57aefd37c681be1155fbaa/numpy-2.2.4-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:a761ba0fa886a7bb33c6c8f6f20213735cb19642c580a931c625ee377ee8bd39", size = 14161419 },
    { url = "https://files.pythonhosted.org/packages/03/68/07b4cd01090ca46c7a336958b413cdbe75002286295f2addea767b7f16c9/numpy-2.2.4-cp313-cp313t-macosx_14_0_arm64.whl", hash = "sha256:ac0280f1ba4a4bfff363a99a6aceed4f8e123f8a9b234c89140f5e894e452ecd", size = 5196414 },
    { url = "https://files.pythonhosted.org/packages/a5/fd/d4a29478d622fedff5c4b4b4cedfc37a00691079623c0575978d2446db9e/numpy-2.2.4-cp313-cp313t-macosx_14_0_x86_64.whl", hash = "sha256:879cf3a9a2b53a4672a168c21375166171bc3932b7e21f622201811c43cdd3b0", size = 6709379 },
    { url = "https://files.pythonhosted.org/packages/41/78/96dddb75bb9be730b87c72f30ffdd62611aba234e4e460576a068c98eff6/numpy-2.2.4-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f05d4198c1bacc9124018109c5fba2f3201dbe7ab6e92ff100494f236209c960", size = 14051725 },
    { url = "https://files.pythonhosted.org/packages/00/06/5306b8199bffac2a29d9119c11f457f6c7d41115a335b78d3f86fad4dbe8/numpy-2.2.4-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e2f085ce2e813a50dfd0e01fbfc0c12bbe5d2063d99f8b29da30e544fb6483b8", size = 16101638 },
    { url = "https://files.pythonhosted.org/packages/fa/03/74c5b631ee1ded596945c12027649e6344614144369fd3ec1aaced782882/numpy-2.2.4-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:92bda934a791c01d6d9d8e038363c50918ef7c40601552a58ac84c9613a665bc", size = 15571717 },
    { url = "https://files.pythonhosted.org/packages/cb/dc/4fc7c0283abe0981e3b89f9b332a134e237dd476b0c018e1e21083310c31/numpy-2.2.4-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:ee4d528022f4c5ff67332469e10efe06a267e32f4067dc76bb7e2cddf3cd25ff", size = 17879998 },
    { url = "https://files.pythonhosted.org/packages/e5/2b/878576190c5cfa29ed896b518cc516aecc7c98a919e20706c12480465f43/numpy-2.2.4-cp313-cp313t-win32.whl", hash = "sha256:05c076d531e9998e7e694c36e8b349969c56eadd2cdcd07242958489d79a7286", size = 6366896 },
    { url = "https://files.pythonhosted.org/packages/3e/05/eb7eec66b95cf697f08c754ef26c3549d03ebd682819f794cb039574a0a6/numpy-2.2.4-cp313-cp313t-win_amd64.whl", hash = "sha256:188dcbca89834cc2e14eb2f106c96d6d46f200fe0200310fc29089657379c58d", size = 12739119 },
]

[[package]]
name = "nvidia-cublas-cu12"
version = "12.4.5.8"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ae/71/1c91302526c45ab494c23f61c7a84aa568b8c1f9d196efa5993957faf906/nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl", hash = "sha256:2fc8da60df463fdefa81e323eef2e36489e1c94335b5358bcb38360adf75ac9b", size = 363438805 },
]

[[package]]
name = "nvidia-cuda-cupti-cu12"
version = "12.4.127"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/42/f4f60238e8194a3106d06a058d494b18e006c10bb2b915655bd9f6ea4cb1/nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:9dec60f5ac126f7bb551c055072b69d85392b13311fcc1bcda2202d172df30fb", size = 13813957 },
]

[[package]]
name = "nvidia-cuda-nvrtc-cu12"
version = "12.4.127"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/14/91ae57cd4db3f9ef7aa99f4019cfa8d54cb4caa7e00975df6467e9725a9f/nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:a178759ebb095827bd30ef56598ec182b85547f1508941a3d560eb7ea1fbf338", size = 24640306 },
]

[[package]]
name = "nvidia-cuda-runtime-cu12"
version = "12.4.127"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ea/27/1795d86fe88ef397885f2e580ac37628ed058a92ed2c39dc8eac3adf0619/nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:64403288fa2136ee8e467cdc9c9427e0434110899d07c779f25b5c068934faa5", size = 883737 },
]

[[package]]
name = "nvidia-cudnn-cu12"
version = "9.1.0.70"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "nvidia-cublas-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/9f/fd/713452cd72343f682b1c7b9321e23829f00b842ceaedcda96e742ea0b0b3/nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl", hash = "sha256:165764f44ef8c61fcdfdfdbe769d687e06374059fbb388b6c89ecb0e28793a6f", size = 664752741 },
]

[[package]]
name = "nvidia-cufft-cu12"
version = "11.2.1.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "nvidia-nvjitlink-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/27/94/3266821f65b92b3138631e9c8e7fe1fb513804ac934485a8d05776e1dd43/nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl", hash = "sha256:f083fc24912aa410be21fa16d157fed2055dab1cc4b6934a0e03cba69eb242b9", size = 211459117 },
]

[[package]]
name = "nvidia-curand-cu12"
version = "10.3.5.147"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/6d/44ad094874c6f1b9c654f8ed939590bdc408349f137f9b98a3a23ccec411/nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl", hash = "sha256:a88f583d4e0bb643c49743469964103aa59f7f708d862c3ddb0fc07f851e3b8b", size = 56305206 },
]

[[package]]
name = "nvidia-cusolver-cu12"
version = "11.6.1.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "nvidia-cublas-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
    { name = "nvidia-cusparse-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
    { name = "nvidia-nvjitlink-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/3a/e1/5b9089a4b2a4790dfdea8b3a006052cfecff58139d5a4e34cb1a51df8d6f/nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl", hash = "sha256:19e33fa442bcfd085b3086c4ebf7e8debc07cfe01e11513cc6d332fd918ac260", size = 127936057 },
]

[[package]]
name = "nvidia-cusparse-cu12"
version = "12.3.1.170"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "nvidia-nvjitlink-cu12", marker = "(platform_machine != 'aarch64' and sys_platform == 'linux') or (sys_platform != 'darwin' and sys_platform != 'linux')" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/db/f7/97a9ea26ed4bbbfc2d470994b8b4f338ef663be97b8f677519ac195e113d/nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl", hash = "sha256:ea4f11a2904e2a8dc4b1833cc1b5181cde564edd0d5cd33e3c168eff2d1863f1", size = 207454763 },
]

[[package]]
name = "nvidia-cusparselt-cu12"
version = "0.6.2"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/a8/bcbb63b53a4b1234feeafb65544ee55495e1bb37ec31b999b963cbccfd1d/nvidia_cusparselt_cu12-0.6.2-py3-none-manylinux2014_x86_64.whl", hash = "sha256:df2c24502fd76ebafe7457dbc4716b2fec071aabaed4fb7691a201cde03704d9", size = 150057751 },
]

[[package]]
name = "nvidia-nccl-cu12"
version = "2.21.5"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/df/99/12cd266d6233f47d00daf3a72739872bdc10267d0383508b0b9c84a18bb6/nvidia_nccl_cu12-2.21.5-py3-none-manylinux2014_x86_64.whl", hash = "sha256:8579076d30a8c24988834445f8d633c697d42397e92ffc3f63fa26766d25e0a0", size = 188654414 },
]

[[package]]
name = "nvidia-nvjitlink-cu12"
version = "12.4.127"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ff/ff/847841bacfbefc97a00036e0fce5a0f086b640756dc38caea5e1bb002655/nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:06b3b9b25bf3f8af351d664978ca26a16d2c5127dbd53c0497e28d1fb9611d57", size = 21066810 },
]

[[package]]
name = "nvidia-nvtx-cu12"
version = "12.4.127"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/87/20/199b8713428322a2f22b722c62b8cc278cc53dffa9705d744484b5035ee9/nvidia_nvtx_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:781e950d9b9f60d8241ccea575b32f5105a5baf4c2351cab5256a24869f12a1a", size = 99144 },
]

[[package]]
name = "oauthlib"
version = "3.2.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6d/fa/fbf4001037904031639e6bfbfc02badfc7e12f137a8afa254df6c4c8a670/oauthlib-3.2.2.tar.gz", hash = "sha256:9859c40929662bec5d64f34d01c99e093149682a3f38915dc0655d5a633dd918", size = 177352 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/80/cab10959dc1faead58dc8384a781dfbf93cb4d33d50988f7a69f1b7c9bbe/oauthlib-3.2.2-py3-none-any.whl", hash = "sha256:8139f29aac13e25d502680e9e19963e83f16838d48a0d71c287fe40e7067fbca", size = 151688 },
]

[[package]]
name = "ollama"
version = "0.4.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx" },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b0/6d/dc77539c735bbed5d0c873fb029fb86aa9f0163df169b34152914331c369/ollama-0.4.7.tar.gz", hash = "sha256:891dcbe54f55397d82d289c459de0ea897e103b86a3f1fad0fdb1895922a75ff", size = 12843 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/31/83/c3ffac86906c10184c88c2e916460806b072a2cfe34cdcaf3a0c0e836d39/ollama-0.4.7-py3-none-any.whl", hash = "sha256:85505663cca67a83707be5fb3aeff0ea72e67846cea5985529d8eca4366564a1", size = 13210 },
]

[[package]]
name = "omegaconf"
version = "2.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "antlr4-python3-runtime" },
    { name = "pyyaml" },
]
sdist = { url = "https://files.pythonhosted.org/packages/09/48/6388f1bb9da707110532cb70ec4d2822858ddfb44f1cdf1233c20a80ea4b/omegaconf-2.3.0.tar.gz", hash = "sha256:d5d4b6d29955cc50ad50c46dc269bcd92c6e00f5f90d23ab5fee7bfca4ba4cc7", size = 3298120 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e3/94/1843518e420fa3ed6919835845df698c7e27e183cb997394e4a670973a65/omegaconf-2.3.0-py3-none-any.whl", hash = "sha256:7b4df175cdb08ba400f45cae3bdcae7ba8365db4d165fc65fd04b050ab63b46b", size = 79500 },
]

[[package]]
name = "openai"
version = "1.72.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "jiter" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/41/56/41de36c0e9f787c406211552ecf2ca4fba3db900207c5c158c4dc67263fc/openai-1.72.0.tar.gz", hash = "sha256:f51de971448905cc90ed5175a5b19e92fd94e31f68cde4025762f9f5257150db", size = 426061 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/03/1c/a0870f31bd71244c8c3a82e171677d9a148a8ea1cb157308cb9e06a41a37/openai-1.72.0-py3-none-any.whl", hash = "sha256:34f5496ba5c8cb06c592831d69e847e2d164526a2fb92afdc3b5cf2891c328c3", size = 643863 },
]

[[package]]
name = "opencv-python"
version = "4.11.0.86"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "numpy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/17/06/68c27a523103dad5837dc5b87e71285280c4f098c60e4fe8a8db6486ab09/opencv-python-4.11.0.86.tar.gz", hash = "sha256:03d60ccae62304860d232272e4a4fda93c39d595780cb40b161b310244b736a4", size = 95171956 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/05/4d/53b30a2a3ac1f75f65a59eb29cf2ee7207ce64867db47036ad61743d5a23/opencv_python-4.11.0.86-cp37-abi3-macosx_13_0_arm64.whl", hash = "sha256:432f67c223f1dc2824f5e73cdfcd9db0efc8710647d4e813012195dc9122a52a", size = 37326322 },
    { url = "https://files.pythonhosted.org/packages/3b/84/0a67490741867eacdfa37bc18df96e08a9d579583b419010d7f3da8ff503/opencv_python-4.11.0.86-cp37-abi3-macosx_13_0_x86_64.whl", hash = "sha256:9d05ef13d23fe97f575153558653e2d6e87103995d54e6a35db3f282fe1f9c66", size = 56723197 },
    { url = "https://files.pythonhosted.org/packages/f3/bd/29c126788da65c1fb2b5fb621b7fed0ed5f9122aa22a0868c5e2c15c6d23/opencv_python-4.11.0.86-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1b92ae2c8852208817e6776ba1ea0d6b1e0a1b5431e971a2a0ddd2a8cc398202", size = 42230439 },
    { url = "https://files.pythonhosted.org/packages/2c/8b/90eb44a40476fa0e71e05a0283947cfd74a5d36121a11d926ad6f3193cc4/opencv_python-4.11.0.86-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6b02611523803495003bd87362db3e1d2a0454a6a63025dc6658a9830570aa0d", size = 62986597 },
    { url = "https://files.pythonhosted.org/packages/fb/d7/1d5941a9dde095468b288d989ff6539dd69cd429dbf1b9e839013d21b6f0/opencv_python-4.11.0.86-cp37-abi3-win32.whl", hash = "sha256:810549cb2a4aedaa84ad9a1c92fbfdfc14090e2749cedf2c1589ad8359aa169b", size = 29384337 },
    { url = "https://files.pythonhosted.org/packages/a4/7d/f1c30a92854540bf789e9cd5dde7ef49bbe63f855b85a2e6b3db8135c591/opencv_python-4.11.0.86-cp37-abi3-win_amd64.whl", hash = "sha256:085ad9b77c18853ea66283e98affefe2de8cc4c1f43eda4c100cf9b2721142ec", size = 39488044 },
]

[[package]]
name = "opencv-python-headless"
version = "4.11.0.86"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "numpy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/36/2f/5b2b3ba52c864848885ba988f24b7f105052f68da9ab0e693cc7c25b0b30/opencv-python-headless-4.11.0.86.tar.gz", hash = "sha256:996eb282ca4b43ec6a3972414de0e2331f5d9cda2b41091a49739c19fb843798", size = 95177929 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/dc/53/2c50afa0b1e05ecdb4603818e85f7d174e683d874ef63a6abe3ac92220c8/opencv_python_headless-4.11.0.86-cp37-abi3-macosx_13_0_arm64.whl", hash = "sha256:48128188ade4a7e517237c8e1e11a9cdf5c282761473383e77beb875bb1e61ca", size = 37326460 },
    { url = "https://files.pythonhosted.org/packages/3b/43/68555327df94bb9b59a1fd645f63fafb0762515344d2046698762fc19d58/opencv_python_headless-4.11.0.86-cp37-abi3-macosx_13_0_x86_64.whl", hash = "sha256:a66c1b286a9de872c343ee7c3553b084244299714ebb50fbdcd76f07ebbe6c81", size = 56723330 },
    { url = "https://files.pythonhosted.org/packages/45/be/1438ce43ebe65317344a87e4b150865c5585f4c0db880a34cdae5ac46881/opencv_python_headless-4.11.0.86-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6efabcaa9df731f29e5ea9051776715b1bdd1845d7c9530065c7951d2a2899eb", size = 29487060 },
    { url = "https://files.pythonhosted.org/packages/dd/5c/c139a7876099916879609372bfa513b7f1257f7f1a908b0bdc1c2328241b/opencv_python_headless-4.11.0.86-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0e0a27c19dd1f40ddff94976cfe43066fbbe9dfbb2ec1907d66c19caef42a57b", size = 49969856 },
    { url = "https://files.pythonhosted.org/packages/95/dd/ed1191c9dc91abcc9f752b499b7928aacabf10567bb2c2535944d848af18/opencv_python_headless-4.11.0.86-cp37-abi3-win32.whl", hash = "sha256:f447d8acbb0b6f2808da71fddd29c1cdd448d2bc98f72d9bb78a7a898fc9621b", size = 29324425 },
    { url = "https://files.pythonhosted.org/packages/86/8a/69176a64335aed183529207ba8bc3d329c2999d852b4f3818027203f50e6/opencv_python_headless-4.11.0.86-cp37-abi3-win_amd64.whl", hash = "sha256:6c304df9caa7a6a5710b91709dd4786bf20a74d57672b3c31f7033cc638174ca", size = 39402386 },
]

[[package]]
name = "orjson"
version = "3.10.16"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/98/c7/03913cc4332174071950acf5b0735463e3f63760c80585ef369270c2b372/orjson-3.10.16.tar.gz", hash = "sha256:d2aaa5c495e11d17b9b93205f5fa196737ee3202f000aaebf028dc9a73750f10", size = 5410415 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/97/29/43f91a5512b5d2535594438eb41c5357865fd5e64dec745d90a588820c75/orjson-3.10.16-cp311-cp311-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl", hash = "sha256:44fcbe1a1884f8bc9e2e863168b0f84230c3d634afe41c678637d2728ea8e739", size = 249180 },
    { url = "https://files.pythonhosted.org/packages/0c/36/2a72d55e266473c19a86d97b7363bb8bf558ab450f75205689a287d5ce61/orjson-3.10.16-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:78177bf0a9d0192e0b34c3d78bcff7fe21d1b5d84aeb5ebdfe0dbe637b885225", size = 138510 },
    { url = "https://files.pythonhosted.org/packages/bb/ad/f86d6f55c1a68b57ff6ea7966bce5f4e5163f2e526ddb7db9fc3c2c8d1c4/orjson-3.10.16-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:12824073a010a754bb27330cad21d6e9b98374f497f391b8707752b96f72e741", size = 132373 },
    { url = "https://files.pythonhosted.org/packages/5e/8b/d18f2711493a809f3082a88fda89342bc8e16767743b909cd3c34989fba3/orjson-3.10.16-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ddd41007e56284e9867864aa2f29f3136bb1dd19a49ca43c0b4eda22a579cf53", size = 136773 },
    { url = "https://files.pythonhosted.org/packages/a1/dc/ce025f002f8e0749e3f057c4d773a4d4de32b7b4c1fc5a50b429e7532586/orjson-3.10.16-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:0877c4d35de639645de83666458ca1f12560d9fa7aa9b25d8bb8f52f61627d14", size = 138029 },
    { url = "https://files.pythonhosted.org/packages/0e/1b/cf9df85852b91160029d9f26014230366a2b4deb8cc51fabe68e250a8c1a/orjson-3.10.16-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9a09a539e9cc3beead3e7107093b4ac176d015bec64f811afb5965fce077a03c", size = 142677 },
    { url = "https://files.pythonhosted.org/packages/92/18/5b1e1e995bffad49dc4311a0bdfd874bc6f135fd20f0e1f671adc2c9910e/orjson-3.10.16-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:31b98bc9b40610fec971d9a4d67bb2ed02eec0a8ae35f8ccd2086320c28526ca", size = 132800 },
    { url = "https://files.pythonhosted.org/packages/d6/eb/467f25b580e942fcca1344adef40633b7f05ac44a65a63fc913f9a805d58/orjson-3.10.16-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:0ce243f5a8739f3a18830bc62dc2e05b69a7545bafd3e3249f86668b2bcd8e50", size = 135451 },
    { url = "https://files.pythonhosted.org/packages/8d/4b/9d10888038975cb375982e9339d9495bac382d5c976c500b8d6f2c8e2e4e/orjson-3.10.16-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:64792c0025bae049b3074c6abe0cf06f23c8e9f5a445f4bab31dc5ca23dbf9e1", size = 412358 },
    { url = "https://files.pythonhosted.org/packages/3b/e2/cfbcfcc4fbe619e0ca9bdbbfccb2d62b540bbfe41e0ee77d44a628594f59/orjson-3.10.16-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:ea53f7e68eec718b8e17e942f7ca56c6bd43562eb19db3f22d90d75e13f0431d", size = 152772 },
    { url = "https://files.pythonhosted.org/packages/b9/d6/627a1b00569be46173007c11dde3da4618c9bfe18409325b0e3e2a82fe29/orjson-3.10.16-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:a741ba1a9488c92227711bde8c8c2b63d7d3816883268c808fbeada00400c164", size = 137225 },
    { url = "https://files.pythonhosted.org/packages/0a/7b/a73c67b505021af845b9f05c7c848793258ea141fa2058b52dd9b067c2b4/orjson-3.10.16-cp311-cp311-win32.whl", hash = "sha256:c7ed2c61bb8226384c3fdf1fb01c51b47b03e3f4536c985078cccc2fd19f1619", size = 141733 },
    { url = "https://files.pythonhosted.org/packages/f4/22/5e8217c48d68c0adbfb181e749d6a733761074e598b083c69a1383d18147/orjson-3.10.16-cp311-cp311-win_amd64.whl", hash = "sha256:cd67d8b3e0e56222a2e7b7f7da9031e30ecd1fe251c023340b9f12caca85ab60", size = 133784 },
    { url = "https://files.pythonhosted.org/packages/5d/15/67ce9d4c959c83f112542222ea3b9209c1d424231d71d74c4890ea0acd2b/orjson-3.10.16-cp312-cp312-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl", hash = "sha256:6d3444abbfa71ba21bb042caa4b062535b122248259fdb9deea567969140abca", size = 249325 },
    { url = "https://files.pythonhosted.org/packages/da/2c/1426b06f30a1b9ada74b6f512c1ddf9d2760f53f61cdb59efeb9ad342133/orjson-3.10.16-cp312-cp312-macosx_15_0_arm64.whl", hash = "sha256:30245c08d818fdcaa48b7d5b81499b8cae09acabb216fe61ca619876b128e184", size = 133621 },
    { url = "https://files.pythonhosted.org/packages/9e/88/18d26130954bc73bee3be10f95371ea1dfb8679e0e2c46b0f6d8c6289402/orjson-3.10.16-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a0ba1d0baa71bf7579a4ccdcf503e6f3098ef9542106a0eca82395898c8a500a", size = 138270 },
    { url = "https://files.pythonhosted.org/packages/4f/f9/6d8b64fcd58fae072e80ee7981be8ba0d7c26ace954e5cd1d027fc80518f/orjson-3.10.16-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:eb0beefa5ef3af8845f3a69ff2a4aa62529b5acec1cfe5f8a6b4141033fd46ef", size = 132346 },
    { url = "https://files.pythonhosted.org/packages/16/3f/2513fd5bc786f40cd12af569c23cae6381aeddbefeed2a98f0a666eb5d0d/orjson-3.10.16-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6daa0e1c9bf2e030e93c98394de94506f2a4d12e1e9dadd7c53d5e44d0f9628e", size = 136845 },
    { url = "https://files.pythonhosted.org/packages/6d/42/b0e7b36720f5ab722b48e8ccf06514d4f769358dd73c51abd8728ef58d0b/orjson-3.10.16-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9da9019afb21e02410ef600e56666652b73eb3e4d213a0ec919ff391a7dd52aa", size = 138078 },
    { url = "https://files.pythonhosted.org/packages/a3/a8/d220afb8a439604be74fc755dbc740bded5ed14745ca536b304ed32eb18a/orjson-3.10.16-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:daeb3a1ee17b69981d3aae30c3b4e786b0f8c9e6c71f2b48f1aef934f63f38f4", size = 142712 },
    { url = "https://files.pythonhosted.org/packages/8c/88/7e41e9883c00f84f92fe357a8371edae816d9d7ef39c67b5106960c20389/orjson-3.10.16-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80fed80eaf0e20a31942ae5d0728849862446512769692474be5e6b73123a23b", size = 133136 },
    { url = "https://files.pythonhosted.org/packages/e9/ca/61116095307ad0be828ea26093febaf59e38596d84a9c8d765c3c5e4934f/orjson-3.10.16-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:73390ed838f03764540a7bdc4071fe0123914c2cc02fb6abf35182d5fd1b7a42", size = 135258 },
    { url = "https://files.pythonhosted.org/packages/dc/1b/09493cf7d801505f094c9295f79c98c1e0af2ac01c7ed8d25b30fcb19ada/orjson-3.10.16-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:a22bba012a0c94ec02a7768953020ab0d3e2b884760f859176343a36c01adf87", size = 412326 },
    { url = "https://files.pythonhosted.org/packages/ea/02/125d7bbd7f7a500190ddc8ae5d2d3c39d87ed3ed28f5b37cfe76962c678d/orjson-3.10.16-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:5385bbfdbc90ff5b2635b7e6bebf259652db00a92b5e3c45b616df75b9058e88", size = 152800 },
    { url = "https://files.pythonhosted.org/packages/f9/09/7658a9e3e793d5b3b00598023e0fb6935d0e7bbb8ff72311c5415a8ce677/orjson-3.10.16-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:02c6279016346e774dd92625d46c6c40db687b8a0d685aadb91e26e46cc33e1e", size = 137516 },
    { url = "https://files.pythonhosted.org/packages/29/87/32b7a4831e909d347278101a48d4cf9f3f25901b2295e7709df1651f65a1/orjson-3.10.16-cp312-cp312-win32.whl", hash = "sha256:7ca55097a11426db80f79378e873a8c51f4dde9ffc22de44850f9696b7eb0e8c", size = 141759 },
    { url = "https://files.pythonhosted.org/packages/35/ce/81a27e7b439b807bd393585271364cdddf50dc281fc57c4feef7ccb186a6/orjson-3.10.16-cp312-cp312-win_amd64.whl", hash = "sha256:86d127efdd3f9bf5f04809b70faca1e6836556ea3cc46e662b44dab3fe71f3d6", size = 133944 },
    { url = "https://files.pythonhosted.org/packages/87/b9/ff6aa28b8c86af9526160905593a2fe8d004ac7a5e592ee0b0ff71017511/orjson-3.10.16-cp313-cp313-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl", hash = "sha256:148a97f7de811ba14bc6dbc4a433e0341ffd2cc285065199fb5f6a98013744bd", size = 249289 },
    { url = "https://files.pythonhosted.org/packages/6c/81/6d92a586149b52684ab8fd70f3623c91d0e6a692f30fd8c728916ab2263c/orjson-3.10.16-cp313-cp313-macosx_15_0_arm64.whl", hash = "sha256:1d960c1bf0e734ea36d0adc880076de3846aaec45ffad29b78c7f1b7962516b8", size = 133640 },
    { url = "https://files.pythonhosted.org/packages/c2/88/b72443f4793d2e16039ab85d0026677932b15ab968595fb7149750d74134/orjson-3.10.16-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a318cd184d1269f68634464b12871386808dc8b7c27de8565234d25975a7a137", size = 138286 },
    { url = "https://files.pythonhosted.org/packages/c3/3c/72a22d4b28c076c4016d5a52bd644a8e4d849d3bb0373d9e377f9e3b2250/orjson-3.10.16-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:df23f8df3ef9223d1d6748bea63fca55aae7da30a875700809c500a05975522b", size = 132307 },
    { url = "https://files.pythonhosted.org/packages/8a/a2/f1259561bdb6ad7061ff1b95dab082fe32758c4bc143ba8d3d70831f0a06/orjson-3.10.16-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b94dda8dd6d1378f1037d7f3f6b21db769ef911c4567cbaa962bb6dc5021cf90", size = 136739 },
    { url = "https://files.pythonhosted.org/packages/3d/af/c7583c4b34f33d8b8b90cfaab010ff18dd64e7074cc1e117a5f1eff20dcf/orjson-3.10.16-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f12970a26666a8775346003fd94347d03ccb98ab8aa063036818381acf5f523e", size = 138076 },
    { url = "https://files.pythonhosted.org/packages/d7/59/d7fc7fbdd3d4a64c2eae4fc7341a5aa39cf9549bd5e2d7f6d3c07f8b715b/orjson-3.10.16-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:15a1431a245d856bd56e4d29ea0023eb4d2c8f71efe914beb3dee8ab3f0cd7fb", size = 142643 },
    { url = "https://files.pythonhosted.org/packages/92/0e/3bd8f2197d27601f16b4464ae948826da2bcf128af31230a9dbbad7ceb57/orjson-3.10.16-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c83655cfc247f399a222567d146524674a7b217af7ef8289c0ff53cfe8db09f0", size = 133168 },
    { url = "https://files.pythonhosted.org/packages/af/a8/351fd87b664b02f899f9144d2c3dc848b33ac04a5df05234cbfb9e2a7540/orjson-3.10.16-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:fa59ae64cb6ddde8f09bdbf7baf933c4cd05734ad84dcf4e43b887eb24e37652", size = 135271 },
    { url = "https://files.pythonhosted.org/packages/ba/b0/a6d42a7d412d867c60c0337d95123517dd5a9370deea705ea1be0f89389e/orjson-3.10.16-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:ca5426e5aacc2e9507d341bc169d8af9c3cbe88f4cd4c1cf2f87e8564730eb56", size = 412444 },
    { url = "https://files.pythonhosted.org/packages/79/ec/7572cd4e20863f60996f3f10bc0a6da64a6fd9c35954189a914cec0b7377/orjson-3.10.16-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:6fd5da4edf98a400946cd3a195680de56f1e7575109b9acb9493331047157430", size = 152737 },
    { url = "https://files.pythonhosted.org/packages/a9/19/ceb9e8fed5403b2e76a8ac15f581b9d25780a3be3c9b3aa54b7777a210d5/orjson-3.10.16-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:980ecc7a53e567169282a5e0ff078393bac78320d44238da4e246d71a4e0e8f5", size = 137482 },
    { url = "https://files.pythonhosted.org/packages/1b/78/a78bb810f3786579dbbbd94768284cbe8f2fd65167cd7020260679665c17/orjson-3.10.16-cp313-cp313-win32.whl", hash = "sha256:28f79944dd006ac540a6465ebd5f8f45dfdf0948ff998eac7a908275b4c1add6", size = 141714 },
    { url = "https://files.pythonhosted.org/packages/81/9c/b66ce9245ff319df2c3278acd351a3f6145ef34b4a2d7f4b0f739368370f/orjson-3.10.16-cp313-cp313-win_amd64.whl", hash = "sha256:fe0a145e96d51971407cb8ba947e63ead2aa915db59d6631a355f5f2150b56b7", size = 133954 },
]

[[package]]
name = "overrides"
version = "7.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/36/86/b585f53236dec60aba864e050778b25045f857e17f6e5ea0ae95fe80edd2/overrides-7.7.0.tar.gz", hash = "sha256:55158fa3d93b98cc75299b1e67078ad9003ca27945c76162c1c0766d6f91820a", size = 22812 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/ab/fc8290c6a4c722e5514d80f62b2dc4c4df1a68a41d1364e625c35990fcf3/overrides-7.7.0-py3-none-any.whl", hash = "sha256:c7ed9d062f78b8e4c1a7b70bd8796b35ead4d9f510227ef9c5dc7626c60d7e49", size = 17832 },
]

[[package]]
name = "packaging"
version = "24.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d0/63/68dbb6eb2de9cb10ee4c9c14a0148804425e13c4fb20d61cce69f53106da/packaging-24.2.tar.gz", hash = "sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f", size = 163950 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/ef/eb23f262cca3c0c4eb7ab1933c3b1f03d021f2c48f54763065b6f0e321be/packaging-24.2-py3-none-any.whl", hash = "sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759", size = 65451 },
]

[[package]]
name = "pandas"
version = "2.2.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "numpy" },
    { name = "python-dateutil" },
    { name = "pytz" },
    { name = "tzdata" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9c/d6/9f8431bacc2e19dca897724cd097b1bb224a6ad5433784a44b587c7c13af/pandas-2.2.3.tar.gz", hash = "sha256:4f18ba62b61d7e192368b84517265a99b4d7ee8912f8708660fb4a366cc82667", size = 4399213 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a8/44/d9502bf0ed197ba9bf1103c9867d5904ddcaf869e52329787fc54ed70cc8/pandas-2.2.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:66108071e1b935240e74525006034333f98bcdb87ea116de573a6a0dccb6c039", size = 12602222 },
    { url = "https://files.pythonhosted.org/packages/52/11/9eac327a38834f162b8250aab32a6781339c69afe7574368fffe46387edf/pandas-2.2.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:7c2875855b0ff77b2a64a0365e24455d9990730d6431b9e0ee18ad8acee13dbd", size = 11321274 },
    { url = "https://files.pythonhosted.org/packages/45/fb/c4beeb084718598ba19aa9f5abbc8aed8b42f90930da861fcb1acdb54c3a/pandas-2.2.3-cp311-cp311-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:cd8d0c3be0515c12fed0bdbae072551c8b54b7192c7b1fda0ba56059a0179698", size = 15579836 },
    { url = "https://files.pythonhosted.org/packages/cd/5f/4dba1d39bb9c38d574a9a22548c540177f78ea47b32f99c0ff2ec499fac5/pandas-2.2.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c124333816c3a9b03fbeef3a9f230ba9a737e9e5bb4060aa2107a86cc0a497fc", size = 13058505 },
    { url = "https://files.pythonhosted.org/packages/b9/57/708135b90391995361636634df1f1130d03ba456e95bcf576fada459115a/pandas-2.2.3-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:63cc132e40a2e084cf01adf0775b15ac515ba905d7dcca47e9a251819c575ef3", size = 16744420 },
    { url = "https://files.pythonhosted.org/packages/86/4a/03ed6b7ee323cf30404265c284cee9c65c56a212e0a08d9ee06984ba2240/pandas-2.2.3-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:29401dbfa9ad77319367d36940cd8a0b3a11aba16063e39632d98b0e931ddf32", size = 14440457 },
    { url = "https://files.pythonhosted.org/packages/ed/8c/87ddf1fcb55d11f9f847e3c69bb1c6f8e46e2f40ab1a2d2abadb2401b007/pandas-2.2.3-cp311-cp311-win_amd64.whl", hash = "sha256:3fc6873a41186404dad67245896a6e440baacc92f5b716ccd1bc9ed2995ab2c5", size = 11617166 },
    { url = "https://files.pythonhosted.org/packages/17/a3/fb2734118db0af37ea7433f57f722c0a56687e14b14690edff0cdb4b7e58/pandas-2.2.3-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:b1d432e8d08679a40e2a6d8b2f9770a5c21793a6f9f47fdd52c5ce1948a5a8a9", size = 12529893 },
    { url = "https://files.pythonhosted.org/packages/e1/0c/ad295fd74bfac85358fd579e271cded3ac969de81f62dd0142c426b9da91/pandas-2.2.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:a5a1595fe639f5988ba6a8e5bc9649af3baf26df3998a0abe56c02609392e0a4", size = 11363475 },
    { url = "https://files.pythonhosted.org/packages/c6/2a/4bba3f03f7d07207481fed47f5b35f556c7441acddc368ec43d6643c5777/pandas-2.2.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:5de54125a92bb4d1c051c0659e6fcb75256bf799a732a87184e5ea503965bce3", size = 15188645 },
    { url = "https://files.pythonhosted.org/packages/38/f8/d8fddee9ed0d0c0f4a2132c1dfcf0e3e53265055da8df952a53e7eaf178c/pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fffb8ae78d8af97f849404f21411c95062db1496aeb3e56f146f0355c9989319", size = 12739445 },
    { url = "https://files.pythonhosted.org/packages/20/e8/45a05d9c39d2cea61ab175dbe6a2de1d05b679e8de2011da4ee190d7e748/pandas-2.2.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6dfcb5ee8d4d50c06a51c2fffa6cff6272098ad6540aed1a76d15fb9318194d8", size = 16359235 },
    { url = "https://files.pythonhosted.org/packages/1d/99/617d07a6a5e429ff90c90da64d428516605a1ec7d7bea494235e1c3882de/pandas-2.2.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:062309c1b9ea12a50e8ce661145c6aab431b1e99530d3cd60640e255778bd43a", size = 14056756 },
    { url = "https://files.pythonhosted.org/packages/29/d4/1244ab8edf173a10fd601f7e13b9566c1b525c4f365d6bee918e68381889/pandas-2.2.3-cp312-cp312-win_amd64.whl", hash = "sha256:59ef3764d0fe818125a5097d2ae867ca3fa64df032331b7e0917cf5d7bf66b13", size = 11504248 },
    { url = "https://files.pythonhosted.org/packages/64/22/3b8f4e0ed70644e85cfdcd57454686b9057c6c38d2f74fe4b8bc2527214a/pandas-2.2.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:f00d1345d84d8c86a63e476bb4955e46458b304b9575dcf71102b5c705320015", size = 12477643 },
    { url = "https://files.pythonhosted.org/packages/e4/93/b3f5d1838500e22c8d793625da672f3eec046b1a99257666c94446969282/pandas-2.2.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:3508d914817e153ad359d7e069d752cdd736a247c322d932eb89e6bc84217f28", size = 11281573 },
    { url = "https://files.pythonhosted.org/packages/f5/94/6c79b07f0e5aab1dcfa35a75f4817f5c4f677931d4234afcd75f0e6a66ca/pandas-2.2.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:22a9d949bfc9a502d320aa04e5d02feab689d61da4e7764b62c30b991c42c5f0", size = 15196085 },
    { url = "https://files.pythonhosted.org/packages/e8/31/aa8da88ca0eadbabd0a639788a6da13bb2ff6edbbb9f29aa786450a30a91/pandas-2.2.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f3a255b2c19987fbbe62a9dfd6cff7ff2aa9ccab3fc75218fd4b7530f01efa24", size = 12711809 },
    { url = "https://files.pythonhosted.org/packages/ee/7c/c6dbdb0cb2a4344cacfb8de1c5808ca885b2e4dcfde8008266608f9372af/pandas-2.2.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:800250ecdadb6d9c78eae4990da62743b857b470883fa27f652db8bdde7f6659", size = 16356316 },
    { url = "https://files.pythonhosted.org/packages/57/b7/8b757e7d92023b832869fa8881a992696a0bfe2e26f72c9ae9f255988d42/pandas-2.2.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:6374c452ff3ec675a8f46fd9ab25c4ad0ba590b71cf0656f8b6daa5202bca3fb", size = 14022055 },
    { url = "https://files.pythonhosted.org/packages/3b/bc/4b18e2b8c002572c5a441a64826252ce5da2aa738855747247a971988043/pandas-2.2.3-cp313-cp313-win_amd64.whl", hash = "sha256:61c5ad4043f791b61dd4752191d9f07f0ae412515d59ba8f005832a532f8736d", size = 11481175 },
    { url = "https://files.pythonhosted.org/packages/76/a3/a5d88146815e972d40d19247b2c162e88213ef51c7c25993942c39dbf41d/pandas-2.2.3-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:3b71f27954685ee685317063bf13c7709a7ba74fc996b84fc6821c59b0f06468", size = 12615650 },
    { url = "https://files.pythonhosted.org/packages/9c/8c/f0fd18f6140ddafc0c24122c8a964e48294acc579d47def376fef12bcb4a/pandas-2.2.3-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:38cf8125c40dae9d5acc10fa66af8ea6fdf760b2714ee482ca691fc66e6fcb18", size = 11290177 },
    { url = "https://files.pythonhosted.org/packages/ed/f9/e995754eab9c0f14c6777401f7eece0943840b7a9fc932221c19d1abee9f/pandas-2.2.3-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:ba96630bc17c875161df3818780af30e43be9b166ce51c9a18c1feae342906c2", size = 14651526 },
    { url = "https://files.pythonhosted.org/packages/25/b0/98d6ae2e1abac4f35230aa756005e8654649d305df9a28b16b9ae4353bff/pandas-2.2.3-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1db71525a1538b30142094edb9adc10be3f3e176748cd7acc2240c2f2e5aa3a4", size = 11871013 },
    { url = "https://files.pythonhosted.org/packages/cc/57/0f72a10f9db6a4628744c8e8f0df4e6e21de01212c7c981d31e50ffc8328/pandas-2.2.3-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:15c0e1e02e93116177d29ff83e8b1619c93ddc9c49083f237d4312337a61165d", size = 15711620 },
    { url = "https://files.pythonhosted.org/packages/ab/5f/b38085618b950b79d2d9164a711c52b10aefc0ae6833b96f626b7021b2ed/pandas-2.2.3-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:ad5b65698ab28ed8d7f18790a0dc58005c7629f227be9ecc1072aa74c0c1d43a", size = 13098436 },
]

[[package]]
name = "pandocfilters"
version = "1.5.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/70/6f/3dd4940bbe001c06a65f88e36bad298bc7a0de5036115639926b0c5c0458/pandocfilters-1.5.1.tar.gz", hash = "sha256:002b4a555ee4ebc03f8b66307e287fa492e4a77b4ea14d3f934328297bb4939e", size = 8454 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ef/af/4fbc8cab944db5d21b7e2a5b8e9211a03a79852b1157e2c102fcc61ac440/pandocfilters-1.5.1-py2.py3-none-any.whl", hash = "sha256:93be382804a9cdb0a7267585f157e5d1731bbe5545a85b268d6f5fe6232de2bc", size = 8663 },
]

[[package]]
name = "parso"
version = "0.8.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/66/94/68e2e17afaa9169cf6412ab0f28623903be73d1b32e208d9e8e541bb086d/parso-0.8.4.tar.gz", hash = "sha256:eb3a7b58240fb99099a345571deecc0f9540ea5f4dd2fe14c2a99d6b281ab92d", size = 400609 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c6/ac/dac4a63f978e4dcb3c6d3a78c4d8e0192a113d288502a1216950c41b1027/parso-0.8.4-py2.py3-none-any.whl", hash = "sha256:a418670a20291dacd2dddc80c377c5c3791378ee1e8d12bffc35420643d43f18", size = 103650 },
]

[[package]]
name = "patchright"
version = "1.50.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "greenlet" },
    { name = "pyee" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/c7/f7/c53073b9eae6163cc196dccf0cfda4a1b793c49d11e8f41a436af4417e7c/patchright-1.50.0-py3-none-macosx_10_13_x86_64.whl", hash = "sha256:7f171a993ec7372f30b32683319bcdf0af4706b2f6dfcb27ea77ff3d05995cc7", size = 40253042 },
    { url = "https://files.pythonhosted.org/packages/87/d9/3f5a54d2225967d8dd571305957161539c7c705fb85681953f324a819655/patchright-1.50.0-py3-none-macosx_11_0_arm64.whl", hash = "sha256:f1c18e80088c1c2f5a95df793c6693ce38bfb37daf63f4621474165b82398b56", size = 39497322 },
    { url = "https://files.pythonhosted.org/packages/68/67/44952501d00d337e82e04208138cdc086563ec83502f96fa12b3e6511f83/patchright-1.50.0-py3-none-macosx_11_0_universal2.whl", hash = "sha256:53b940e653e26fb70a1da9a99f80fb382a60e82cd2c9784057583f82aefa23b0", size = 40253040 },
    { url = "https://files.pythonhosted.org/packages/5e/3f/5bde503e2e0da69002559b1a722a1ece2a254e70aa26176f9e110360c005/patchright-1.50.0-py3-none-manylinux1_x86_64.whl", hash = "sha256:67aff93af2772db3745d734a45e5f31abab8441925fafe686b0384472f12edcd", size = 45052191 },
    { url = "https://files.pythonhosted.org/packages/37/de/10801601b57c1d4e6e2813de25e910597c732eb6fd6090de961427c0ef7a/patchright-1.50.0-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cd643f3c2023ef31fa9abc49e0e9d3a2778079d636ca705c1f1d99e2b28407e2", size = 44468594 },
    { url = "https://files.pythonhosted.org/packages/bd/53/71d7eaf553f126d3977c48dfac74ad55f7fa421f5f599fd884a8b2606f6f/patchright-1.50.0-py3-none-win32.whl", hash = "sha256:40e254f5c2624b65683dd3589dff0f9ea94318fac69ac26b642f49e1b6fbcf1b", size = 34760022 },
    { url = "https://files.pythonhosted.org/packages/4d/6d/4c2b434576b1db32710b0edeede1b72538262ea2296a6d4e9f7d3285ee49/patchright-1.50.0-py3-none-win_amd64.whl", hash = "sha256:820b49ae371681566b2e2cfbf70b702d0c151439946e67104514ed3143ad4854", size = 34760026 },
]

[[package]]
name = "pebble"
version = "5.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5f/5b/90bf2acce03a12750a570cede27b9cddd4b6f5f2cf4de1048231bb21c382/pebble-5.1.1.tar.gz", hash = "sha256:4e91a5b8e48b30b26eaa5391ba2cf65fbb3594fba17b88bc0b3351cf849d0305", size = 38672 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4d/a7/bece0e6b17b75506c4bf13eb79728931e2f240d7928a02f0e6d2ca9c41e9/pebble-5.1.1-py3-none-any.whl", hash = "sha256:c262c94159cf6419fd4ac27ff72408650a16d6c3cf000171fb2a0386038c416e", size = 34598 },
]

[[package]]
name = "pexpect"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ptyprocess" },
]
sdist = { url = "https://files.pythonhosted.org/packages/42/92/cc564bf6381ff43ce1f4d06852fc19a2f11d180f23dc32d9588bee2f149d/pexpect-4.9.0.tar.gz", hash = "sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f", size = 166450 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9e/c3/059298687310d527a58bb01f3b1965787ee3b40dce76752eda8b44e9a2c5/pexpect-4.9.0-py2.py3-none-any.whl", hash = "sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523", size = 63772 },
]

[[package]]
name = "pillow"
version = "11.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f3/af/c097e544e7bd278333db77933e535098c259609c4eb3b85381109602fb5b/pillow-11.1.0.tar.gz", hash = "sha256:368da70808b36d73b4b390a8ffac11069f8a5c85f29eff1f1b01bcf3ef5b2a20", size = 46742715 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/dd/d6/2000bfd8d5414fb70cbbe52c8332f2283ff30ed66a9cde42716c8ecbe22c/pillow-11.1.0-cp311-cp311-macosx_10_10_x86_64.whl", hash = "sha256:e06695e0326d05b06833b40b7ef477e475d0b1ba3a6d27da1bb48c23209bf457", size = 3229968 },
    { url = "https://files.pythonhosted.org/packages/d9/45/3fe487010dd9ce0a06adf9b8ff4f273cc0a44536e234b0fad3532a42c15b/pillow-11.1.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:96f82000e12f23e4f29346e42702b6ed9a2f2fea34a740dd5ffffcc8c539eb35", size = 3101806 },
    { url = "https://files.pythonhosted.org/packages/e3/72/776b3629c47d9d5f1c160113158a7a7ad177688d3a1159cd3b62ded5a33a/pillow-11.1.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a3cd561ded2cf2bbae44d4605837221b987c216cff94f49dfeed63488bb228d2", size = 4322283 },
    { url = "https://files.pythonhosted.org/packages/e4/c2/e25199e7e4e71d64eeb869f5b72c7ddec70e0a87926398785ab944d92375/pillow-11.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f189805c8be5ca5add39e6f899e6ce2ed824e65fb45f3c28cb2841911da19070", size = 4402945 },
    { url = "https://files.pythonhosted.org/packages/c1/ed/51d6136c9d5911f78632b1b86c45241c712c5a80ed7fa7f9120a5dff1eba/pillow-11.1.0-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:dd0052e9db3474df30433f83a71b9b23bd9e4ef1de13d92df21a52c0303b8ab6", size = 4361228 },
    { url = "https://files.pythonhosted.org/packages/48/a4/fbfe9d5581d7b111b28f1d8c2762dee92e9821bb209af9fa83c940e507a0/pillow-11.1.0-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:837060a8599b8f5d402e97197d4924f05a2e0d68756998345c829c33186217b1", size = 4484021 },
    { url = "https://files.pythonhosted.org/packages/39/db/0b3c1a5018117f3c1d4df671fb8e47d08937f27519e8614bbe86153b65a5/pillow-11.1.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:aa8dd43daa836b9a8128dbe7d923423e5ad86f50a7a14dc688194b7be5c0dea2", size = 4287449 },
    { url = "https://files.pythonhosted.org/packages/d9/58/bc128da7fea8c89fc85e09f773c4901e95b5936000e6f303222490c052f3/pillow-11.1.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:0a2f91f8a8b367e7a57c6e91cd25af510168091fb89ec5146003e424e1558a96", size = 4419972 },
    { url = "https://files.pythonhosted.org/packages/5f/bb/58f34379bde9fe197f51841c5bbe8830c28bbb6d3801f16a83b8f2ad37df/pillow-11.1.0-cp311-cp311-win32.whl", hash = "sha256:c12fc111ef090845de2bb15009372175d76ac99969bdf31e2ce9b42e4b8cd88f", size = 2291201 },
    { url = "https://files.pythonhosted.org/packages/3a/c6/fce9255272bcf0c39e15abd2f8fd8429a954cf344469eaceb9d0d1366913/pillow-11.1.0-cp311-cp311-win_amd64.whl", hash = "sha256:fbd43429d0d7ed6533b25fc993861b8fd512c42d04514a0dd6337fb3ccf22761", size = 2625686 },
    { url = "https://files.pythonhosted.org/packages/c8/52/8ba066d569d932365509054859f74f2a9abee273edcef5cd75e4bc3e831e/pillow-11.1.0-cp311-cp311-win_arm64.whl", hash = "sha256:f7955ecf5609dee9442cbface754f2c6e541d9e6eda87fad7f7a989b0bdb9d71", size = 2375194 },
    { url = "https://files.pythonhosted.org/packages/95/20/9ce6ed62c91c073fcaa23d216e68289e19d95fb8188b9fb7a63d36771db8/pillow-11.1.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:2062ffb1d36544d42fcaa277b069c88b01bb7298f4efa06731a7fd6cc290b81a", size = 3226818 },
    { url = "https://files.pythonhosted.org/packages/b9/d8/f6004d98579a2596c098d1e30d10b248798cceff82d2b77aa914875bfea1/pillow-11.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:a85b653980faad27e88b141348707ceeef8a1186f75ecc600c395dcac19f385b", size = 3101662 },
    { url = "https://files.pythonhosted.org/packages/08/d9/892e705f90051c7a2574d9f24579c9e100c828700d78a63239676f960b74/pillow-11.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9409c080586d1f683df3f184f20e36fb647f2e0bc3988094d4fd8c9f4eb1b3b3", size = 4329317 },
    { url = "https://files.pythonhosted.org/packages/8c/aa/7f29711f26680eab0bcd3ecdd6d23ed6bce180d82e3f6380fb7ae35fcf3b/pillow-11.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7fdadc077553621911f27ce206ffcbec7d3f8d7b50e0da39f10997e8e2bb7f6a", size = 4412999 },
    { url = "https://files.pythonhosted.org/packages/c8/c4/8f0fe3b9e0f7196f6d0bbb151f9fba323d72a41da068610c4c960b16632a/pillow-11.1.0-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:93a18841d09bcdd774dcdc308e4537e1f867b3dec059c131fde0327899734aa1", size = 4368819 },
    { url = "https://files.pythonhosted.org/packages/38/0d/84200ed6a871ce386ddc82904bfadc0c6b28b0c0ec78176871a4679e40b3/pillow-11.1.0-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:9aa9aeddeed452b2f616ff5507459e7bab436916ccb10961c4a382cd3e03f47f", size = 4496081 },
    { url = "https://files.pythonhosted.org/packages/84/9c/9bcd66f714d7e25b64118e3952d52841a4babc6d97b6d28e2261c52045d4/pillow-11.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3cdcdb0b896e981678eee140d882b70092dac83ac1cdf6b3a60e2216a73f2b91", size = 4296513 },
    { url = "https://files.pythonhosted.org/packages/db/61/ada2a226e22da011b45f7104c95ebda1b63dcbb0c378ad0f7c2a710f8fd2/pillow-11.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:36ba10b9cb413e7c7dfa3e189aba252deee0602c86c309799da5a74009ac7a1c", size = 4431298 },
    { url = "https://files.pythonhosted.org/packages/e7/c4/fc6e86750523f367923522014b821c11ebc5ad402e659d8c9d09b3c9d70c/pillow-11.1.0-cp312-cp312-win32.whl", hash = "sha256:cfd5cd998c2e36a862d0e27b2df63237e67273f2fc78f47445b14e73a810e7e6", size = 2291630 },
    { url = "https://files.pythonhosted.org/packages/08/5c/2104299949b9d504baf3f4d35f73dbd14ef31bbd1ddc2c1b66a5b7dfda44/pillow-11.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:a697cd8ba0383bba3d2d3ada02b34ed268cb548b369943cd349007730c92bddf", size = 2626369 },
    { url = "https://files.pythonhosted.org/packages/37/f3/9b18362206b244167c958984b57c7f70a0289bfb59a530dd8af5f699b910/pillow-11.1.0-cp312-cp312-win_arm64.whl", hash = "sha256:4dd43a78897793f60766563969442020e90eb7847463eca901e41ba186a7d4a5", size = 2375240 },
    { url = "https://files.pythonhosted.org/packages/b3/31/9ca79cafdce364fd5c980cd3416c20ce1bebd235b470d262f9d24d810184/pillow-11.1.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:ae98e14432d458fc3de11a77ccb3ae65ddce70f730e7c76140653048c71bfcbc", size = 3226640 },
    { url = "https://files.pythonhosted.org/packages/ac/0f/ff07ad45a1f172a497aa393b13a9d81a32e1477ef0e869d030e3c1532521/pillow-11.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cc1331b6d5a6e144aeb5e626f4375f5b7ae9934ba620c0ac6b3e43d5e683a0f0", size = 3101437 },
    { url = "https://files.pythonhosted.org/packages/08/2f/9906fca87a68d29ec4530be1f893149e0cb64a86d1f9f70a7cfcdfe8ae44/pillow-11.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:758e9d4ef15d3560214cddbc97b8ef3ef86ce04d62ddac17ad39ba87e89bd3b1", size = 4326605 },
    { url = "https://files.pythonhosted.org/packages/b0/0f/f3547ee15b145bc5c8b336401b2d4c9d9da67da9dcb572d7c0d4103d2c69/pillow-11.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b523466b1a31d0dcef7c5be1f20b942919b62fd6e9a9be199d035509cbefc0ec", size = 4411173 },
    { url = "https://files.pythonhosted.org/packages/b1/df/bf8176aa5db515c5de584c5e00df9bab0713548fd780c82a86cba2c2fedb/pillow-11.1.0-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:9044b5e4f7083f209c4e35aa5dd54b1dd5b112b108648f5c902ad586d4f945c5", size = 4369145 },
    { url = "https://files.pythonhosted.org/packages/de/7c/7433122d1cfadc740f577cb55526fdc39129a648ac65ce64db2eb7209277/pillow-11.1.0-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:3764d53e09cdedd91bee65c2527815d315c6b90d7b8b79759cc48d7bf5d4f114", size = 4496340 },
    { url = "https://files.pythonhosted.org/packages/25/46/dd94b93ca6bd555588835f2504bd90c00d5438fe131cf01cfa0c5131a19d/pillow-11.1.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:31eba6bbdd27dde97b0174ddf0297d7a9c3a507a8a1480e1e60ef914fe23d352", size = 4296906 },
    { url = "https://files.pythonhosted.org/packages/a8/28/2f9d32014dfc7753e586db9add35b8a41b7a3b46540e965cb6d6bc607bd2/pillow-11.1.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:b5d658fbd9f0d6eea113aea286b21d3cd4d3fd978157cbf2447a6035916506d3", size = 4431759 },
    { url = "https://files.pythonhosted.org/packages/33/48/19c2cbe7403870fbe8b7737d19eb013f46299cdfe4501573367f6396c775/pillow-11.1.0-cp313-cp313-win32.whl", hash = "sha256:f86d3a7a9af5d826744fabf4afd15b9dfef44fe69a98541f666f66fbb8d3fef9", size = 2291657 },
    { url = "https://files.pythonhosted.org/packages/3b/ad/285c556747d34c399f332ba7c1a595ba245796ef3e22eae190f5364bb62b/pillow-11.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:593c5fd6be85da83656b93ffcccc2312d2d149d251e98588b14fbc288fd8909c", size = 2626304 },
    { url = "https://files.pythonhosted.org/packages/e5/7b/ef35a71163bf36db06e9c8729608f78dedf032fc8313d19bd4be5c2588f3/pillow-11.1.0-cp313-cp313-win_arm64.whl", hash = "sha256:11633d58b6ee5733bde153a8dafd25e505ea3d32e261accd388827ee987baf65", size = 2375117 },
    { url = "https://files.pythonhosted.org/packages/79/30/77f54228401e84d6791354888549b45824ab0ffde659bafa67956303a09f/pillow-11.1.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:70ca5ef3b3b1c4a0812b5c63c57c23b63e53bc38e758b37a951e5bc466449861", size = 3230060 },
    { url = "https://files.pythonhosted.org/packages/ce/b1/56723b74b07dd64c1010fee011951ea9c35a43d8020acd03111f14298225/pillow-11.1.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:8000376f139d4d38d6851eb149b321a52bb8893a88dae8ee7d95840431977081", size = 3106192 },
    { url = "https://files.pythonhosted.org/packages/e1/cd/7bf7180e08f80a4dcc6b4c3a0aa9e0b0ae57168562726a05dc8aa8fa66b0/pillow-11.1.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9ee85f0696a17dd28fbcfceb59f9510aa71934b483d1f5601d1030c3c8304f3c", size = 4446805 },
    { url = "https://files.pythonhosted.org/packages/97/42/87c856ea30c8ed97e8efbe672b58c8304dee0573f8c7cab62ae9e31db6ae/pillow-11.1.0-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:dd0e081319328928531df7a0e63621caf67652c8464303fd102141b785ef9547", size = 4530623 },
    { url = "https://files.pythonhosted.org/packages/ff/41/026879e90c84a88e33fb00cc6bd915ac2743c67e87a18f80270dfe3c2041/pillow-11.1.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:e63e4e5081de46517099dc30abe418122f54531a6ae2ebc8680bcd7096860eab", size = 4465191 },
    { url = "https://files.pythonhosted.org/packages/e5/fb/a7960e838bc5df57a2ce23183bfd2290d97c33028b96bde332a9057834d3/pillow-11.1.0-cp313-cp313t-win32.whl", hash = "sha256:dda60aa465b861324e65a78c9f5cf0f4bc713e4309f83bc387be158b077963d9", size = 2295494 },
    { url = "https://files.pythonhosted.org/packages/d7/6c/6ec83ee2f6f0fda8d4cf89045c6be4b0373ebfc363ba8538f8c999f63fcd/pillow-11.1.0-cp313-cp313t-win_amd64.whl", hash = "sha256:ad5db5781c774ab9a9b2c4302bbf0c1014960a0a7be63278d13ae6fdf88126fe", size = 2631595 },
    { url = "https://files.pythonhosted.org/packages/cf/6c/41c21c6c8af92b9fea313aa47c75de49e2f9a467964ee33eb0135d47eb64/pillow-11.1.0-cp313-cp313t-win_arm64.whl", hash = "sha256:67cd427c68926108778a9005f2a04adbd5e67c442ed21d95389fe1d595458756", size = 2377651 },
]

[[package]]
name = "platformdirs"
version = "4.3.7"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b6/2d/7d512a3913d60623e7eb945c6d1b4f0bddf1d0b7ada5225274c87e5b53d1/platformdirs-4.3.7.tar.gz", hash = "sha256:eb437d586b6a0986388f0d6f74aa0cde27b48d0e3d66843640bfb6bdcdb6e351", size = 21291 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6d/45/59578566b3275b8fd9157885918fcd0c4d74162928a5310926887b856a51/platformdirs-4.3.7-py3-none-any.whl", hash = "sha256:a03875334331946f13c549dbd8f4bac7a13a50a895a0eb1e8c6a8ace80d40a94", size = 18499 },
]

[[package]]
name = "playwright"
version = "1.51.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "greenlet" },
    { name = "pyee" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/1b/e9/db98b5a8a41b3691be52dcc9b9d11b5db01bfc9b835e8e3ffe387b5c9266/playwright-1.51.0-py3-none-macosx_10_13_x86_64.whl", hash = "sha256:bcaaa3d5d73bda659bfb9ff2a288b51e85a91bd89eda86eaf8186550973e416a", size = 39634776 },
    { url = "https://files.pythonhosted.org/packages/32/4a/5f2ff6866bdf88e86147930b0be86b227f3691f4eb01daad5198302a8cbe/playwright-1.51.0-py3-none-macosx_11_0_arm64.whl", hash = "sha256:2e0ae6eb44297b24738e1a6d9c580ca4243b4e21b7e65cf936a71492c08dd0d4", size = 37986511 },
    { url = "https://files.pythonhosted.org/packages/ba/b1/061c322319072225beba45e8c6695b7c1429f83bb97bdb5ed51ea3a009fc/playwright-1.51.0-py3-none-macosx_11_0_universal2.whl", hash = "sha256:ab4c0ff00bded52c946be60734868febc964c8a08a9b448d7c20cb3811c6521c", size = 39634776 },
    { url = "https://files.pythonhosted.org/packages/7a/fd/bc60798803414ecab66456208eeff4308344d0c055ca0d294d2cdd692b60/playwright-1.51.0-py3-none-manylinux1_x86_64.whl", hash = "sha256:d5c9f67bc6ef49094618991c78a1466c5bac5ed09157660d78b8510b77f92746", size = 45164868 },
    { url = "https://files.pythonhosted.org/packages/0d/14/13db550d7b892aefe80f8581c6557a17cbfc2e084383cd09d25fdd488f6e/playwright-1.51.0-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:814e4ec2a1a0d6f6221f075622c06b31ceb2bdc6d622258cfefed900c01569ae", size = 44564157 },
    { url = "https://files.pythonhosted.org/packages/51/e4/4342f0bd51727df790deda95ee35db066ac05cf4593a73d0c42249fa39a6/playwright-1.51.0-py3-none-win32.whl", hash = "sha256:4cef804991867ea27f608b70fa288ee52a57651e22d02ab287f98f8620b9408c", size = 34862688 },
    { url = "https://files.pythonhosted.org/packages/20/0f/098488de02e3d52fc77e8d55c1467f6703701b6ea6788f40409bb8c00dd4/playwright-1.51.0-py3-none-win_amd64.whl", hash = "sha256:9ece9316c5d383aed1a207f079fc2d552fff92184f0ecf37cc596e912d00a8c3", size = 34862693 },
]

[[package]]
name = "playwright-stealth"
version = "1.0.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "playwright" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e5/dc/4e88b517e4c9cfb63f1b0b67d59adddcef2dc2fe0883b90e07119d15895a/playwright-stealth-1.0.6.tar.gz", hash = "sha256:b504d951d00fac755c7d13665a29611d415180510bd7d23f14ebc89439ba2043", size = 19984 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/34/10/60981cb8d8e22487061b98a0803313c4fb519cc95ab1421516304a0cfcd0/playwright_stealth-1.0.6-py3-none-any.whl", hash = "sha256:b1b2bcf58eb6859aa53d42c49b91c4e27b74a6d13fc3d0c85eea513dd55efda3", size = 28288 },
]

[[package]]
name = "pluggy"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/96/2d/02d4312c973c6050a18b314a5ad0b3210edb65a906f868e31c111dede4a6/pluggy-1.5.0.tar.gz", hash = "sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1", size = 67955 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/5f/e351af9a41f866ac3f1fac4ca0613908d9a41741cfcf2228f4ad853b697d/pluggy-1.5.0-py3-none-any.whl", hash = "sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669", size = 20556 },
]

[[package]]
name = "posthog"
version = "3.24.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "backoff" },
    { name = "distro" },
    { name = "monotonic" },
    { name = "python-dateutil" },
    { name = "requests" },
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/4b/e6/071d5dbfe65ef1ac7f7d5a987e2bfab8d9007b0aef4247060c32c3197579/posthog-3.24.1.tar.gz", hash = "sha256:1b854b1d70b26d9add1fd3755b4f72acb565db32722cc5d076d9db799187753e", size = 72516 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/a0/7f0d25c795c208f8c139f858f4ab79d396ddd278e83cecd1a90d62934b03/posthog-3.24.1-py2.py3-none-any.whl", hash = "sha256:d4d1c13854cd5bc007bcc396d38dc8d047429709faf4c7bc2f5af246e2a3f76d", size = 85706 },
]

[[package]]
name = "pre-commit"
version = "4.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cfgv" },
    { name = "identify" },
    { name = "nodeenv" },
    { name = "pyyaml" },
    { name = "virtualenv" },
]
sdist = { url = "https://files.pythonhosted.org/packages/08/39/679ca9b26c7bb2999ff122d50faa301e49af82ca9c066ec061cfbc0c6784/pre_commit-4.2.0.tar.gz", hash = "sha256:601283b9757afd87d40c4c4a9b2b5de9637a8ea02eaff7adc2d0fb4e04841146", size = 193424 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/74/a88bf1b1efeae488a0c0b7bdf71429c313722d1fc0f377537fbe554e6180/pre_commit-4.2.0-py2.py3-none-any.whl", hash = "sha256:a009ca7205f1eb497d10b845e52c838a98b6cdd2102a6c8e4540e94ee75c58bd", size = 220707 },
]

[[package]]
name = "prometheus-client"
version = "0.21.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/62/14/7d0f567991f3a9af8d1cd4f619040c93b68f09a02b6d0b6ab1b2d1ded5fe/prometheus_client-0.21.1.tar.gz", hash = "sha256:252505a722ac04b0456be05c05f75f45d760c2911ffc45f2a06bcaed9f3ae3fb", size = 78551 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ff/c2/ab7d37426c179ceb9aeb109a85cda8948bb269b7561a0be870cc656eefe4/prometheus_client-0.21.1-py3-none-any.whl", hash = "sha256:594b45c410d6f4f8888940fe80b5cc2521b305a1fafe1c58609ef715a001f301", size = 54682 },
]

[[package]]
name = "prompt-toolkit"
version = "3.0.50"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "wcwidth" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a1/e1/bd15cb8ffdcfeeb2bdc215de3c3cffca11408d829e4b8416dcfe71ba8854/prompt_toolkit-3.0.50.tar.gz", hash = "sha256:544748f3860a2623ca5cd6d2795e7a14f3d0e1c3c9728359013f79877fc89bab", size = 429087 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e4/ea/d836f008d33151c7a1f62caf3d8dd782e4d15f6a43897f64480c2b8de2ad/prompt_toolkit-3.0.50-py3-none-any.whl", hash = "sha256:9b6427eb19e479d98acff65196a307c555eb567989e6d88ebbb1b509d9779198", size = 387816 },
]

[[package]]
name = "propcache"
version = "0.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/07/c8/fdc6686a986feae3541ea23dcaa661bd93972d3940460646c6bb96e21c40/propcache-0.3.1.tar.gz", hash = "sha256:40d980c33765359098837527e18eddefc9a24cea5b45e078a7f3bb5b032c6ecf", size = 43651 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/90/0f/5a5319ee83bd651f75311fcb0c492c21322a7fc8f788e4eef23f44243427/propcache-0.3.1-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:7f30241577d2fef2602113b70ef7231bf4c69a97e04693bde08ddab913ba0ce5", size = 80243 },
    { url = "https://files.pythonhosted.org/packages/ce/84/3db5537e0879942783e2256616ff15d870a11d7ac26541336fe1b673c818/propcache-0.3.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:43593c6772aa12abc3af7784bff4a41ffa921608dd38b77cf1dfd7f5c4e71371", size = 46503 },
    { url = "https://files.pythonhosted.org/packages/e2/c8/b649ed972433c3f0d827d7f0cf9ea47162f4ef8f4fe98c5f3641a0bc63ff/propcache-0.3.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:a75801768bbe65499495660b777e018cbe90c7980f07f8aa57d6be79ea6f71da", size = 45934 },
    { url = "https://files.pythonhosted.org/packages/59/f9/4c0a5cf6974c2c43b1a6810c40d889769cc8f84cea676cbe1e62766a45f8/propcache-0.3.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f6f1324db48f001c2ca26a25fa25af60711e09b9aaf4b28488602776f4f9a744", size = 233633 },
    { url = "https://files.pythonhosted.org/packages/e7/64/66f2f4d1b4f0007c6e9078bd95b609b633d3957fe6dd23eac33ebde4b584/propcache-0.3.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5cdb0f3e1eb6dfc9965d19734d8f9c481b294b5274337a8cb5cb01b462dcb7e0", size = 241124 },
    { url = "https://files.pythonhosted.org/packages/aa/bf/7b8c9fd097d511638fa9b6af3d986adbdf567598a567b46338c925144c1b/propcache-0.3.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1eb34d90aac9bfbced9a58b266f8946cb5935869ff01b164573a7634d39fbcb5", size = 240283 },
    { url = "https://files.pythonhosted.org/packages/fa/c9/e85aeeeaae83358e2a1ef32d6ff50a483a5d5248bc38510d030a6f4e2816/propcache-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f35c7070eeec2cdaac6fd3fe245226ed2a6292d3ee8c938e5bb645b434c5f256", size = 232498 },
    { url = "https://files.pythonhosted.org/packages/8e/66/acb88e1f30ef5536d785c283af2e62931cb934a56a3ecf39105887aa8905/propcache-0.3.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b23c11c2c9e6d4e7300c92e022046ad09b91fd00e36e83c44483df4afa990073", size = 221486 },
    { url = "https://files.pythonhosted.org/packages/f5/f9/233ddb05ffdcaee4448508ee1d70aa7deff21bb41469ccdfcc339f871427/propcache-0.3.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:3e19ea4ea0bf46179f8a3652ac1426e6dcbaf577ce4b4f65be581e237340420d", size = 222675 },
    { url = "https://files.pythonhosted.org/packages/98/b8/eb977e28138f9e22a5a789daf608d36e05ed93093ef12a12441030da800a/propcache-0.3.1-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:bd39c92e4c8f6cbf5f08257d6360123af72af9f4da75a690bef50da77362d25f", size = 215727 },
    { url = "https://files.pythonhosted.org/packages/89/2d/5f52d9c579f67b8ee1edd9ec073c91b23cc5b7ff7951a1e449e04ed8fdf3/propcache-0.3.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:b0313e8b923b3814d1c4a524c93dfecea5f39fa95601f6a9b1ac96cd66f89ea0", size = 217878 },
    { url = "https://files.pythonhosted.org/packages/7a/fd/5283e5ed8a82b00c7a989b99bb6ea173db1ad750bf0bf8dff08d3f4a4e28/propcache-0.3.1-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:e861ad82892408487be144906a368ddbe2dc6297074ade2d892341b35c59844a", size = 230558 },
    { url = "https://files.pythonhosted.org/packages/90/38/ab17d75938ef7ac87332c588857422ae126b1c76253f0f5b1242032923ca/propcache-0.3.1-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:61014615c1274df8da5991a1e5da85a3ccb00c2d4701ac6f3383afd3ca47ab0a", size = 233754 },
    { url = "https://files.pythonhosted.org/packages/06/5d/3b921b9c60659ae464137508d3b4c2b3f52f592ceb1964aa2533b32fcf0b/propcache-0.3.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:71ebe3fe42656a2328ab08933d420df5f3ab121772eef78f2dc63624157f0ed9", size = 226088 },
    { url = "https://files.pythonhosted.org/packages/54/6e/30a11f4417d9266b5a464ac5a8c5164ddc9dd153dfa77bf57918165eb4ae/propcache-0.3.1-cp311-cp311-win32.whl", hash = "sha256:58aa11f4ca8b60113d4b8e32d37e7e78bd8af4d1a5b5cb4979ed856a45e62005", size = 40859 },
    { url = "https://files.pythonhosted.org/packages/1d/3a/8a68dd867da9ca2ee9dfd361093e9cb08cb0f37e5ddb2276f1b5177d7731/propcache-0.3.1-cp311-cp311-win_amd64.whl", hash = "sha256:9532ea0b26a401264b1365146c440a6d78269ed41f83f23818d4b79497aeabe7", size = 45153 },
    { url = "https://files.pythonhosted.org/packages/41/aa/ca78d9be314d1e15ff517b992bebbed3bdfef5b8919e85bf4940e57b6137/propcache-0.3.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:f78eb8422acc93d7b69964012ad7048764bb45a54ba7a39bb9e146c72ea29723", size = 80430 },
    { url = "https://files.pythonhosted.org/packages/1a/d8/f0c17c44d1cda0ad1979af2e593ea290defdde9eaeb89b08abbe02a5e8e1/propcache-0.3.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:89498dd49c2f9a026ee057965cdf8192e5ae070ce7d7a7bd4b66a8e257d0c976", size = 46637 },
    { url = "https://files.pythonhosted.org/packages/ae/bd/c1e37265910752e6e5e8a4c1605d0129e5b7933c3dc3cf1b9b48ed83b364/propcache-0.3.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:09400e98545c998d57d10035ff623266927cb784d13dd2b31fd33b8a5316b85b", size = 46123 },
    { url = "https://files.pythonhosted.org/packages/d4/b0/911eda0865f90c0c7e9f0415d40a5bf681204da5fd7ca089361a64c16b28/propcache-0.3.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:aa8efd8c5adc5a2c9d3b952815ff8f7710cefdcaf5f2c36d26aff51aeca2f12f", size = 243031 },
    { url = "https://files.pythonhosted.org/packages/0a/06/0da53397c76a74271621807265b6eb61fb011451b1ddebf43213df763669/propcache-0.3.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c2fe5c910f6007e716a06d269608d307b4f36e7babee5f36533722660e8c4a70", size = 249100 },
    { url = "https://files.pythonhosted.org/packages/f1/eb/13090e05bf6b963fc1653cdc922133ced467cb4b8dab53158db5a37aa21e/propcache-0.3.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a0ab8cf8cdd2194f8ff979a43ab43049b1df0b37aa64ab7eca04ac14429baeb7", size = 250170 },
    { url = "https://files.pythonhosted.org/packages/3b/4c/f72c9e1022b3b043ec7dc475a0f405d4c3e10b9b1d378a7330fecf0652da/propcache-0.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:563f9d8c03ad645597b8d010ef4e9eab359faeb11a0a2ac9f7b4bc8c28ebef25", size = 245000 },
    { url = "https://files.pythonhosted.org/packages/e8/fd/970ca0e22acc829f1adf5de3724085e778c1ad8a75bec010049502cb3a86/propcache-0.3.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:fb6e0faf8cb6b4beea5d6ed7b5a578254c6d7df54c36ccd3d8b3eb00d6770277", size = 230262 },
    { url = "https://files.pythonhosted.org/packages/c4/42/817289120c6b9194a44f6c3e6b2c3277c5b70bbad39e7df648f177cc3634/propcache-0.3.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1c5c7ab7f2bb3f573d1cb921993006ba2d39e8621019dffb1c5bc94cdbae81e8", size = 236772 },
    { url = "https://files.pythonhosted.org/packages/7c/9c/3b3942b302badd589ad6b672da3ca7b660a6c2f505cafd058133ddc73918/propcache-0.3.1-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:050b571b2e96ec942898f8eb46ea4bfbb19bd5502424747e83badc2d4a99a44e", size = 231133 },
    { url = "https://files.pythonhosted.org/packages/98/a1/75f6355f9ad039108ff000dfc2e19962c8dea0430da9a1428e7975cf24b2/propcache-0.3.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:e1c4d24b804b3a87e9350f79e2371a705a188d292fd310e663483af6ee6718ee", size = 230741 },
    { url = "https://files.pythonhosted.org/packages/67/0c/3e82563af77d1f8731132166da69fdfd95e71210e31f18edce08a1eb11ea/propcache-0.3.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:e4fe2a6d5ce975c117a6bb1e8ccda772d1e7029c1cca1acd209f91d30fa72815", size = 244047 },
    { url = "https://files.pythonhosted.org/packages/f7/50/9fb7cca01532a08c4d5186d7bb2da6c4c587825c0ae134b89b47c7d62628/propcache-0.3.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:feccd282de1f6322f56f6845bf1207a537227812f0a9bf5571df52bb418d79d5", size = 246467 },
    { url = "https://files.pythonhosted.org/packages/a9/02/ccbcf3e1c604c16cc525309161d57412c23cf2351523aedbb280eb7c9094/propcache-0.3.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ec314cde7314d2dd0510c6787326bbffcbdc317ecee6b7401ce218b3099075a7", size = 241022 },
    { url = "https://files.pythonhosted.org/packages/db/19/e777227545e09ca1e77a6e21274ae9ec45de0f589f0ce3eca2a41f366220/propcache-0.3.1-cp312-cp312-win32.whl", hash = "sha256:7d2d5a0028d920738372630870e7d9644ce437142197f8c827194fca404bf03b", size = 40647 },
    { url = "https://files.pythonhosted.org/packages/24/bb/3b1b01da5dd04c77a204c84e538ff11f624e31431cfde7201d9110b092b1/propcache-0.3.1-cp312-cp312-win_amd64.whl", hash = "sha256:88c423efef9d7a59dae0614eaed718449c09a5ac79a5f224a8b9664d603f04a3", size = 44784 },
    { url = "https://files.pythonhosted.org/packages/58/60/f645cc8b570f99be3cf46714170c2de4b4c9d6b827b912811eff1eb8a412/propcache-0.3.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:f1528ec4374617a7a753f90f20e2f551121bb558fcb35926f99e3c42367164b8", size = 77865 },
    { url = "https://files.pythonhosted.org/packages/6f/d4/c1adbf3901537582e65cf90fd9c26fde1298fde5a2c593f987112c0d0798/propcache-0.3.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:dc1915ec523b3b494933b5424980831b636fe483d7d543f7afb7b3bf00f0c10f", size = 45452 },
    { url = "https://files.pythonhosted.org/packages/d1/b5/fe752b2e63f49f727c6c1c224175d21b7d1727ce1d4873ef1c24c9216830/propcache-0.3.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:a110205022d077da24e60b3df8bcee73971be9575dec5573dd17ae5d81751111", size = 44800 },
    { url = "https://files.pythonhosted.org/packages/62/37/fc357e345bc1971e21f76597028b059c3d795c5ca7690d7a8d9a03c9708a/propcache-0.3.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d249609e547c04d190e820d0d4c8ca03ed4582bcf8e4e160a6969ddfb57b62e5", size = 225804 },
    { url = "https://files.pythonhosted.org/packages/0d/f1/16e12c33e3dbe7f8b737809bad05719cff1dccb8df4dafbcff5575002c0e/propcache-0.3.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5ced33d827625d0a589e831126ccb4f5c29dfdf6766cac441d23995a65825dcb", size = 230650 },
    { url = "https://files.pythonhosted.org/packages/3e/a2/018b9f2ed876bf5091e60153f727e8f9073d97573f790ff7cdf6bc1d1fb8/propcache-0.3.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:4114c4ada8f3181af20808bedb250da6bae56660e4b8dfd9cd95d4549c0962f7", size = 234235 },
    { url = "https://files.pythonhosted.org/packages/45/5f/3faee66fc930dfb5da509e34c6ac7128870631c0e3582987fad161fcb4b1/propcache-0.3.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:975af16f406ce48f1333ec5e912fe11064605d5c5b3f6746969077cc3adeb120", size = 228249 },
    { url = "https://files.pythonhosted.org/packages/62/1e/a0d5ebda5da7ff34d2f5259a3e171a94be83c41eb1e7cd21a2105a84a02e/propcache-0.3.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a34aa3a1abc50740be6ac0ab9d594e274f59960d3ad253cd318af76b996dd654", size = 214964 },
    { url = "https://files.pythonhosted.org/packages/db/a0/d72da3f61ceab126e9be1f3bc7844b4e98c6e61c985097474668e7e52152/propcache-0.3.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:9cec3239c85ed15bfaded997773fdad9fb5662b0a7cbc854a43f291eb183179e", size = 222501 },
    { url = "https://files.pythonhosted.org/packages/18/6d/a008e07ad7b905011253adbbd97e5b5375c33f0b961355ca0a30377504ac/propcache-0.3.1-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:05543250deac8e61084234d5fc54f8ebd254e8f2b39a16b1dce48904f45b744b", size = 217917 },
    { url = "https://files.pythonhosted.org/packages/98/37/02c9343ffe59e590e0e56dc5c97d0da2b8b19fa747ebacf158310f97a79a/propcache-0.3.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:5cb5918253912e088edbf023788de539219718d3b10aef334476b62d2b53de53", size = 217089 },
    { url = "https://files.pythonhosted.org/packages/53/1b/d3406629a2c8a5666d4674c50f757a77be119b113eedd47b0375afdf1b42/propcache-0.3.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f3bbecd2f34d0e6d3c543fdb3b15d6b60dd69970c2b4c822379e5ec8f6f621d5", size = 228102 },
    { url = "https://files.pythonhosted.org/packages/cd/a7/3664756cf50ce739e5f3abd48febc0be1a713b1f389a502ca819791a6b69/propcache-0.3.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:aca63103895c7d960a5b9b044a83f544b233c95e0dcff114389d64d762017af7", size = 230122 },
    { url = "https://files.pythonhosted.org/packages/35/36/0bbabaacdcc26dac4f8139625e930f4311864251276033a52fd52ff2a274/propcache-0.3.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:5a0a9898fdb99bf11786265468571e628ba60af80dc3f6eb89a3545540c6b0ef", size = 226818 },
    { url = "https://files.pythonhosted.org/packages/cc/27/4e0ef21084b53bd35d4dae1634b6d0bad35e9c58ed4f032511acca9d4d26/propcache-0.3.1-cp313-cp313-win32.whl", hash = "sha256:3a02a28095b5e63128bcae98eb59025924f121f048a62393db682f049bf4ac24", size = 40112 },
    { url = "https://files.pythonhosted.org/packages/a6/2c/a54614d61895ba6dd7ac8f107e2b2a0347259ab29cbf2ecc7b94fa38c4dc/propcache-0.3.1-cp313-cp313-win_amd64.whl", hash = "sha256:813fbb8b6aea2fc9659815e585e548fe706d6f663fa73dff59a1677d4595a037", size = 44034 },
    { url = "https://files.pythonhosted.org/packages/5a/a8/0a4fd2f664fc6acc66438370905124ce62e84e2e860f2557015ee4a61c7e/propcache-0.3.1-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:a444192f20f5ce8a5e52761a031b90f5ea6288b1eef42ad4c7e64fef33540b8f", size = 82613 },
    { url = "https://files.pythonhosted.org/packages/4d/e5/5ef30eb2cd81576256d7b6caaa0ce33cd1d2c2c92c8903cccb1af1a4ff2f/propcache-0.3.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:0fbe94666e62ebe36cd652f5fc012abfbc2342de99b523f8267a678e4dfdee3c", size = 47763 },
    { url = "https://files.pythonhosted.org/packages/87/9a/87091ceb048efeba4d28e903c0b15bcc84b7c0bf27dc0261e62335d9b7b8/propcache-0.3.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:f011f104db880f4e2166bcdcf7f58250f7a465bc6b068dc84c824a3d4a5c94dc", size = 47175 },
    { url = "https://files.pythonhosted.org/packages/3e/2f/854e653c96ad1161f96194c6678a41bbb38c7947d17768e8811a77635a08/propcache-0.3.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3e584b6d388aeb0001d6d5c2bd86b26304adde6d9bb9bfa9c4889805021b96de", size = 292265 },
    { url = "https://files.pythonhosted.org/packages/40/8d/090955e13ed06bc3496ba4a9fb26c62e209ac41973cb0d6222de20c6868f/propcache-0.3.1-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8a17583515a04358b034e241f952f1715243482fc2c2945fd99a1b03a0bd77d6", size = 294412 },
    { url = "https://files.pythonhosted.org/packages/39/e6/d51601342e53cc7582449e6a3c14a0479fab2f0750c1f4d22302e34219c6/propcache-0.3.1-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5aed8d8308215089c0734a2af4f2e95eeb360660184ad3912686c181e500b2e7", size = 294290 },
    { url = "https://files.pythonhosted.org/packages/3b/4d/be5f1a90abc1881884aa5878989a1acdafd379a91d9c7e5e12cef37ec0d7/propcache-0.3.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6d8e309ff9a0503ef70dc9a0ebd3e69cf7b3894c9ae2ae81fc10943c37762458", size = 282926 },
    { url = "https://files.pythonhosted.org/packages/57/2b/8f61b998c7ea93a2b7eca79e53f3e903db1787fca9373af9e2cf8dc22f9d/propcache-0.3.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b655032b202028a582d27aeedc2e813299f82cb232f969f87a4fde491a233f11", size = 267808 },
    { url = "https://files.pythonhosted.org/packages/11/1c/311326c3dfce59c58a6098388ba984b0e5fb0381ef2279ec458ef99bd547/propcache-0.3.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:9f64d91b751df77931336b5ff7bafbe8845c5770b06630e27acd5dbb71e1931c", size = 290916 },
    { url = "https://files.pythonhosted.org/packages/4b/74/91939924b0385e54dc48eb2e4edd1e4903ffd053cf1916ebc5347ac227f7/propcache-0.3.1-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:19a06db789a4bd896ee91ebc50d059e23b3639c25d58eb35be3ca1cbe967c3bf", size = 262661 },
    { url = "https://files.pythonhosted.org/packages/c2/d7/e6079af45136ad325c5337f5dd9ef97ab5dc349e0ff362fe5c5db95e2454/propcache-0.3.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:bef100c88d8692864651b5f98e871fb090bd65c8a41a1cb0ff2322db39c96c27", size = 264384 },
    { url = "https://files.pythonhosted.org/packages/b7/d5/ba91702207ac61ae6f1c2da81c5d0d6bf6ce89e08a2b4d44e411c0bbe867/propcache-0.3.1-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:87380fb1f3089d2a0b8b00f006ed12bd41bd858fabfa7330c954c70f50ed8757", size = 291420 },
    { url = "https://files.pythonhosted.org/packages/58/70/2117780ed7edcd7ba6b8134cb7802aada90b894a9810ec56b7bb6018bee7/propcache-0.3.1-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:e474fc718e73ba5ec5180358aa07f6aded0ff5f2abe700e3115c37d75c947e18", size = 290880 },
    { url = "https://files.pythonhosted.org/packages/4a/1f/ecd9ce27710021ae623631c0146719280a929d895a095f6d85efb6a0be2e/propcache-0.3.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:17d1c688a443355234f3c031349da69444be052613483f3e4158eef751abcd8a", size = 287407 },
    { url = "https://files.pythonhosted.org/packages/3e/66/2e90547d6b60180fb29e23dc87bd8c116517d4255240ec6d3f7dc23d1926/propcache-0.3.1-cp313-cp313t-win32.whl", hash = "sha256:359e81a949a7619802eb601d66d37072b79b79c2505e6d3fd8b945538411400d", size = 42573 },
    { url = "https://files.pythonhosted.org/packages/cb/8f/50ad8599399d1861b4d2b6b45271f0ef6af1b09b0a2386a46dbaf19c9535/propcache-0.3.1-cp313-cp313t-win_amd64.whl", hash = "sha256:e7fb9a84c9abbf2b2683fa3e7b0d7da4d8ecf139a1c635732a8bda29c5214b0e", size = 46757 },
    { url = "https://files.pythonhosted.org/packages/b8/d3/c3cb8f1d6ae3b37f83e1de806713a9b3642c5895f0215a62e1a4bd6e5e34/propcache-0.3.1-py3-none-any.whl", hash = "sha256:9a8ecf38de50a7f518c21568c80f985e776397b902f1ce0b01f799aba1608b40", size = 12376 },
]

[[package]]
name = "proto-plus"
version = "1.26.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f4/ac/87285f15f7cce6d4a008f33f1757fb5a13611ea8914eb58c3d0d26243468/proto_plus-1.26.1.tar.gz", hash = "sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012", size = 56142 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/6d/280c4c2ce28b1593a19ad5239c8b826871fc6ec275c21afc8e1820108039/proto_plus-1.26.1-py3-none-any.whl", hash = "sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66", size = 50163 },
]

[[package]]
name = "protobuf"
version = "5.29.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/17/7d/b9dca7365f0e2c4fa7c193ff795427cfa6290147e5185ab11ece280a18e7/protobuf-5.29.4.tar.gz", hash = "sha256:4f1dfcd7997b31ef8f53ec82781ff434a28bf71d9102ddde14d076adcfc78c99", size = 424902 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9a/b2/043a1a1a20edd134563699b0e91862726a0dc9146c090743b6c44d798e75/protobuf-5.29.4-cp310-abi3-win32.whl", hash = "sha256:13eb236f8eb9ec34e63fc8b1d6efd2777d062fa6aaa68268fb67cf77f6839ad7", size = 422709 },
    { url = "https://files.pythonhosted.org/packages/79/fc/2474b59570daa818de6124c0a15741ee3e5d6302e9d6ce0bdfd12e98119f/protobuf-5.29.4-cp310-abi3-win_amd64.whl", hash = "sha256:bcefcdf3976233f8a502d265eb65ea740c989bacc6c30a58290ed0e519eb4b8d", size = 434506 },
    { url = "https://files.pythonhosted.org/packages/46/de/7c126bbb06aa0f8a7b38aaf8bd746c514d70e6a2a3f6dd460b3b7aad7aae/protobuf-5.29.4-cp38-abi3-macosx_10_9_universal2.whl", hash = "sha256:307ecba1d852ec237e9ba668e087326a67564ef83e45a0189a772ede9e854dd0", size = 417826 },
    { url = "https://files.pythonhosted.org/packages/a2/b5/bade14ae31ba871a139aa45e7a8183d869efe87c34a4850c87b936963261/protobuf-5.29.4-cp38-abi3-manylinux2014_aarch64.whl", hash = "sha256:aec4962f9ea93c431d5714ed1be1c93f13e1a8618e70035ba2b0564d9e633f2e", size = 319574 },
    { url = "https://files.pythonhosted.org/packages/46/88/b01ed2291aae68b708f7d334288ad5fb3e7aa769a9c309c91a0d55cb91b0/protobuf-5.29.4-cp38-abi3-manylinux2014_x86_64.whl", hash = "sha256:d7d3f7d1d5a66ed4942d4fefb12ac4b14a29028b209d4bfb25c68ae172059922", size = 319672 },
    { url = "https://files.pythonhosted.org/packages/12/fb/a586e0c973c95502e054ac5f81f88394f24ccc7982dac19c515acd9e2c93/protobuf-5.29.4-py3-none-any.whl", hash = "sha256:3fde11b505e1597f71b875ef2fc52062b6a9740e5f7c8997ce878b6009145862", size = 172551 },
]

[[package]]
name = "proxy-lite"
version = "0.1.0"
source = { git = "https://github.com/leo-notte/proxy-lite#a47956f973967a260c82f343e9f11c235679eaaa" }
dependencies = [
    { name = "omegaconf" },
    { name = "openai" },
    { name = "opencv-python" },
    { name = "opencv-python-headless" },
    { name = "playwright" },
    { name = "playwright-stealth" },
    { name = "pre-commit" },
    { name = "pydantic" },
    { name = "rich" },
    { name = "setuptools" },
    { name = "streamlit" },
    { name = "tenacity" },
    { name = "torch" },
    { name = "torchvision" },
]

[[package]]
name = "psutil"
version = "7.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2a/80/336820c1ad9286a4ded7e845b2eccfcb27851ab8ac6abece774a6ff4d3de/psutil-7.0.0.tar.gz", hash = "sha256:7be9c3eba38beccb6495ea33afd982a44074b78f28c434a1f51cc07fd315c456", size = 497003 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ed/e6/2d26234410f8b8abdbf891c9da62bee396583f713fb9f3325a4760875d22/psutil-7.0.0-cp36-abi3-macosx_10_9_x86_64.whl", hash = "sha256:101d71dc322e3cffd7cea0650b09b3d08b8e7c4109dd6809fe452dfd00e58b25", size = 238051 },
    { url = "https://files.pythonhosted.org/packages/04/8b/30f930733afe425e3cbfc0e1468a30a18942350c1a8816acfade80c005c4/psutil-7.0.0-cp36-abi3-macosx_11_0_arm64.whl", hash = "sha256:39db632f6bb862eeccf56660871433e111b6ea58f2caea825571951d4b6aa3da", size = 239535 },
    { url = "https://files.pythonhosted.org/packages/2a/ed/d362e84620dd22876b55389248e522338ed1bf134a5edd3b8231d7207f6d/psutil-7.0.0-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1fcee592b4c6f146991ca55919ea3d1f8926497a713ed7faaf8225e174581e91", size = 275004 },
    { url = "https://files.pythonhosted.org/packages/bf/b9/b0eb3f3cbcb734d930fdf839431606844a825b23eaf9a6ab371edac8162c/psutil-7.0.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4b1388a4f6875d7e2aff5c4ca1cc16c545ed41dd8bb596cefea80111db353a34", size = 277986 },
    { url = "https://files.pythonhosted.org/packages/eb/a2/709e0fe2f093556c17fbafda93ac032257242cabcc7ff3369e2cb76a97aa/psutil-7.0.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a5f098451abc2828f7dc6b58d44b532b22f2088f4999a937557b603ce72b1993", size = 279544 },
    { url = "https://files.pythonhosted.org/packages/50/e6/eecf58810b9d12e6427369784efe814a1eec0f492084ce8eb8f4d89d6d61/psutil-7.0.0-cp37-abi3-win32.whl", hash = "sha256:ba3fcef7523064a6c9da440fc4d6bd07da93ac726b5733c29027d7dc95b39d99", size = 241053 },
    { url = "https://files.pythonhosted.org/packages/50/1b/6921afe68c74868b4c9fa424dad3be35b095e16687989ebbb50ce4fceb7c/psutil-7.0.0-cp37-abi3-win_amd64.whl", hash = "sha256:4cf3d4eb1aa9b348dec30105c55cd9b7d4629285735a102beb4441e38db90553", size = 244885 },
]

[[package]]
name = "ptyprocess"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/20/e5/16ff212c1e452235a90aeb09066144d0c5a6a8c0834397e03f5224495c4e/ptyprocess-0.7.0.tar.gz", hash = "sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220", size = 70762 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/22/a6/858897256d0deac81a172289110f31629fc4cee19b6f01283303e18c8db3/ptyprocess-0.7.0-py2.py3-none-any.whl", hash = "sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35", size = 13993 },
]

[[package]]
name = "pure-eval"
version = "0.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/cd/05/0a34433a064256a578f1783a10da6df098ceaa4a57bbeaa96a6c0352786b/pure_eval-0.2.3.tar.gz", hash = "sha256:5f4e983f40564c576c7c8635ae88db5956bb2229d7e9237d03b3c0b0190eaf42", size = 19752 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8e/37/efad0257dc6e593a18957422533ff0f87ede7c9c6ea010a2177d738fb82f/pure_eval-0.2.3-py3-none-any.whl", hash = "sha256:1db8e35b67b3d218d818ae653e27f06c3aa420901fa7b081ca98cbedc874e0d0", size = 11842 },
]

[[package]]
name = "pyarrow"
version = "19.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7f/09/a9046344212690f0632b9c709f9bf18506522feb333c894d0de81d62341a/pyarrow-19.0.1.tar.gz", hash = "sha256:3bf266b485df66a400f282ac0b6d1b500b9d2ae73314a153dbe97d6d5cc8a99e", size = 1129437 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a0/55/f1a8d838ec07fe3ca53edbe76f782df7b9aafd4417080eebf0b42aab0c52/pyarrow-19.0.1-cp311-cp311-macosx_12_0_arm64.whl", hash = "sha256:cc55d71898ea30dc95900297d191377caba257612f384207fe9f8293b5850f90", size = 30713987 },
    { url = "https://files.pythonhosted.org/packages/13/12/428861540bb54c98a140ae858a11f71d041ef9e501e6b7eb965ca7909505/pyarrow-19.0.1-cp311-cp311-macosx_12_0_x86_64.whl", hash = "sha256:7a544ec12de66769612b2d6988c36adc96fb9767ecc8ee0a4d270b10b1c51e00", size = 32135613 },
    { url = "https://files.pythonhosted.org/packages/2f/8a/23d7cc5ae2066c6c736bce1db8ea7bc9ac3ef97ac7e1c1667706c764d2d9/pyarrow-19.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0148bb4fc158bfbc3d6dfe5001d93ebeed253793fff4435167f6ce1dc4bddeae", size = 41149147 },
    { url = "https://files.pythonhosted.org/packages/a2/7a/845d151bb81a892dfb368bf11db584cf8b216963ccce40a5cf50a2492a18/pyarrow-19.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f24faab6ed18f216a37870d8c5623f9c044566d75ec586ef884e13a02a9d62c5", size = 42178045 },
    { url = "https://files.pythonhosted.org/packages/a7/31/e7282d79a70816132cf6cae7e378adfccce9ae10352d21c2fecf9d9756dd/pyarrow-19.0.1-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:4982f8e2b7afd6dae8608d70ba5bd91699077323f812a0448d8b7abdff6cb5d3", size = 40532998 },
    { url = "https://files.pythonhosted.org/packages/b8/82/20f3c290d6e705e2ee9c1fa1d5a0869365ee477e1788073d8b548da8b64c/pyarrow-19.0.1-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:49a3aecb62c1be1d822f8bf629226d4a96418228a42f5b40835c1f10d42e4db6", size = 42084055 },
    { url = "https://files.pythonhosted.org/packages/ff/77/e62aebd343238863f2c9f080ad2ef6ace25c919c6ab383436b5b81cbeef7/pyarrow-19.0.1-cp311-cp311-win_amd64.whl", hash = "sha256:008a4009efdb4ea3d2e18f05cd31f9d43c388aad29c636112c2966605ba33466", size = 25283133 },
    { url = "https://files.pythonhosted.org/packages/78/b4/94e828704b050e723f67d67c3535cf7076c7432cd4cf046e4bb3b96a9c9d/pyarrow-19.0.1-cp312-cp312-macosx_12_0_arm64.whl", hash = "sha256:80b2ad2b193e7d19e81008a96e313fbd53157945c7be9ac65f44f8937a55427b", size = 30670749 },
    { url = "https://files.pythonhosted.org/packages/7e/3b/4692965e04bb1df55e2c314c4296f1eb12b4f3052d4cf43d29e076aedf66/pyarrow-19.0.1-cp312-cp312-macosx_12_0_x86_64.whl", hash = "sha256:ee8dec072569f43835932a3b10c55973593abc00936c202707a4ad06af7cb294", size = 32128007 },
    { url = "https://files.pythonhosted.org/packages/22/f7/2239af706252c6582a5635c35caa17cb4d401cd74a87821ef702e3888957/pyarrow-19.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4d5d1ec7ec5324b98887bdc006f4d2ce534e10e60f7ad995e7875ffa0ff9cb14", size = 41144566 },
    { url = "https://files.pythonhosted.org/packages/fb/e3/c9661b2b2849cfefddd9fd65b64e093594b231b472de08ff658f76c732b2/pyarrow-19.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f3ad4c0eb4e2a9aeb990af6c09e6fa0b195c8c0e7b272ecc8d4d2b6574809d34", size = 42202991 },
    { url = "https://files.pythonhosted.org/packages/fe/4f/a2c0ed309167ef436674782dfee4a124570ba64299c551e38d3fdaf0a17b/pyarrow-19.0.1-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:d383591f3dcbe545f6cc62daaef9c7cdfe0dff0fb9e1c8121101cabe9098cfa6", size = 40507986 },
    { url = "https://files.pythonhosted.org/packages/27/2e/29bb28a7102a6f71026a9d70d1d61df926887e36ec797f2e6acfd2dd3867/pyarrow-19.0.1-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:b4c4156a625f1e35d6c0b2132635a237708944eb41df5fbe7d50f20d20c17832", size = 42087026 },
    { url = "https://files.pythonhosted.org/packages/16/33/2a67c0f783251106aeeee516f4806161e7b481f7d744d0d643d2f30230a5/pyarrow-19.0.1-cp312-cp312-win_amd64.whl", hash = "sha256:5bd1618ae5e5476b7654c7b55a6364ae87686d4724538c24185bbb2952679960", size = 25250108 },
    { url = "https://files.pythonhosted.org/packages/2b/8d/275c58d4b00781bd36579501a259eacc5c6dfb369be4ddeb672ceb551d2d/pyarrow-19.0.1-cp313-cp313-macosx_12_0_arm64.whl", hash = "sha256:e45274b20e524ae5c39d7fc1ca2aa923aab494776d2d4b316b49ec7572ca324c", size = 30653552 },
    { url = "https://files.pythonhosted.org/packages/a0/9e/e6aca5cc4ef0c7aec5f8db93feb0bde08dbad8c56b9014216205d271101b/pyarrow-19.0.1-cp313-cp313-macosx_12_0_x86_64.whl", hash = "sha256:d9dedeaf19097a143ed6da37f04f4051aba353c95ef507764d344229b2b740ae", size = 32103413 },
    { url = "https://files.pythonhosted.org/packages/6a/fa/a7033f66e5d4f1308c7eb0dfcd2ccd70f881724eb6fd1776657fdf65458f/pyarrow-19.0.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6ebfb5171bb5f4a52319344ebbbecc731af3f021e49318c74f33d520d31ae0c4", size = 41134869 },
    { url = "https://files.pythonhosted.org/packages/2d/92/34d2569be8e7abdc9d145c98dc410db0071ac579b92ebc30da35f500d630/pyarrow-19.0.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f2a21d39fbdb948857f67eacb5bbaaf36802de044ec36fbef7a1c8f0dd3a4ab2", size = 42192626 },
    { url = "https://files.pythonhosted.org/packages/0a/1f/80c617b1084fc833804dc3309aa9d8daacd46f9ec8d736df733f15aebe2c/pyarrow-19.0.1-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:99bc1bec6d234359743b01e70d4310d0ab240c3d6b0da7e2a93663b0158616f6", size = 40496708 },
    { url = "https://files.pythonhosted.org/packages/e6/90/83698fcecf939a611c8d9a78e38e7fed7792dcc4317e29e72cf8135526fb/pyarrow-19.0.1-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:1b93ef2c93e77c442c979b0d596af45e4665d8b96da598db145b0fec014b9136", size = 42075728 },
    { url = "https://files.pythonhosted.org/packages/40/49/2325f5c9e7a1c125c01ba0c509d400b152c972a47958768e4e35e04d13d8/pyarrow-19.0.1-cp313-cp313-win_amd64.whl", hash = "sha256:d9d46e06846a41ba906ab25302cf0fd522f81aa2a85a71021826f34639ad31ef", size = 25242568 },
    { url = "https://files.pythonhosted.org/packages/3f/72/135088d995a759d4d916ec4824cb19e066585b4909ebad4ab196177aa825/pyarrow-19.0.1-cp313-cp313t-macosx_12_0_arm64.whl", hash = "sha256:c0fe3dbbf054a00d1f162fda94ce236a899ca01123a798c561ba307ca38af5f0", size = 30702371 },
    { url = "https://files.pythonhosted.org/packages/2e/01/00beeebd33d6bac701f20816a29d2018eba463616bbc07397fdf99ac4ce3/pyarrow-19.0.1-cp313-cp313t-macosx_12_0_x86_64.whl", hash = "sha256:96606c3ba57944d128e8a8399da4812f56c7f61de8c647e3470b417f795d0ef9", size = 32116046 },
    { url = "https://files.pythonhosted.org/packages/1f/c9/23b1ea718dfe967cbd986d16cf2a31fe59d015874258baae16d7ea0ccabc/pyarrow-19.0.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:8f04d49a6b64cf24719c080b3c2029a3a5b16417fd5fd7c4041f94233af732f3", size = 41091183 },
    { url = "https://files.pythonhosted.org/packages/3a/d4/b4a3aa781a2c715520aa8ab4fe2e7fa49d33a1d4e71c8fc6ab7b5de7a3f8/pyarrow-19.0.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:5a9137cf7e1640dce4c190551ee69d478f7121b5c6f323553b319cac936395f6", size = 42171896 },
    { url = "https://files.pythonhosted.org/packages/23/1b/716d4cd5a3cbc387c6e6745d2704c4b46654ba2668260d25c402626c5ddb/pyarrow-19.0.1-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:7c1bca1897c28013db5e4c83944a2ab53231f541b9e0c3f4791206d0c0de389a", size = 40464851 },
    { url = "https://files.pythonhosted.org/packages/ed/bd/54907846383dcc7ee28772d7e646f6c34276a17da740002a5cefe90f04f7/pyarrow-19.0.1-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:58d9397b2e273ef76264b45531e9d552d8ec8a6688b7390b5be44c02a37aade8", size = 42085744 },
]

[[package]]
name = "pyasn1"
version = "0.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ba/e9/01f1a64245b89f039897cb0130016d79f77d52669aae6ee7b159a6c4c018/pyasn1-0.6.1.tar.gz", hash = "sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034", size = 145322 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c8/f1/d6a797abb14f6283c0ddff96bbdd46937f64122b8c925cab503dd37f8214/pyasn1-0.6.1-py3-none-any.whl", hash = "sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629", size = 83135 },
]

[[package]]
name = "pyasn1-modules"
version = "0.4.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e9/e6/78ebbb10a8c8e4b61a59249394a4a594c1a7af95593dc933a349c8d00964/pyasn1_modules-0.4.2.tar.gz", hash = "sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6", size = 307892 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/47/8d/d529b5d697919ba8c11ad626e835d4039be708a35b0d22de83a269a6682c/pyasn1_modules-0.4.2-py3-none-any.whl", hash = "sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a", size = 181259 },
]

[[package]]
name = "pycparser"
version = "2.22"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1d/b2/31537cf4b1ca988837256c910a668b553fceb8f069bedc4b1c826024b52c/pycparser-2.22.tar.gz", hash = "sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6", size = 172736 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/13/a3/a812df4e2dd5696d1f351d58b8fe16a405b234ad2886a0dab9183fb78109/pycparser-2.22-py3-none-any.whl", hash = "sha256:c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc", size = 117552 },
]

[[package]]
name = "pydantic"
version = "2.11.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/10/2e/ca897f093ee6c5f3b0bee123ee4465c50e75431c3d5b6a3b44a47134e891/pydantic-2.11.3.tar.gz", hash = "sha256:7471657138c16adad9322fe3070c0116dd6c3ad8d649300e3cbdfe91f4db4ec3", size = 785513 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/1d/407b29780a289868ed696d1616f4aad49d6388e5a77f567dcd2629dcd7b8/pydantic-2.11.3-py3-none-any.whl", hash = "sha256:a082753436a07f9ba1289c6ffa01cd93db3548776088aa917cc43b63f68fa60f", size = 443591 },
]

[package.optional-dependencies]
email = [
    { name = "email-validator" },
]

[[package]]
name = "pydantic-core"
version = "2.33.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/17/19/ed6a078a5287aea7922de6841ef4c06157931622c89c2a47940837b5eecd/pydantic_core-2.33.1.tar.gz", hash = "sha256:bcc9c6fdb0ced789245b02b7d6603e17d1563064ddcfc36f046b61c0c05dd9df", size = 434395 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d6/7f/c6298830cb780c46b4f46bb24298d01019ffa4d21769f39b908cd14bbd50/pydantic_core-2.33.1-cp311-cp311-macosx_10_12_x86_64.whl", hash = "sha256:6e966fc3caaf9f1d96b349b0341c70c8d6573bf1bac7261f7b0ba88f96c56c24", size = 2044224 },
    { url = "https://files.pythonhosted.org/packages/a8/65/6ab3a536776cad5343f625245bd38165d6663256ad43f3a200e5936afd6c/pydantic_core-2.33.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:bfd0adeee563d59c598ceabddf2c92eec77abcb3f4a391b19aa7366170bd9e30", size = 1858845 },
    { url = "https://files.pythonhosted.org/packages/e9/15/9a22fd26ba5ee8c669d4b8c9c244238e940cd5d818649603ca81d1c69861/pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:91815221101ad3c6b507804178a7bb5cb7b2ead9ecd600041669c8d805ebd595", size = 1910029 },
    { url = "https://files.pythonhosted.org/packages/d5/33/8cb1a62818974045086f55f604044bf35b9342900318f9a2a029a1bec460/pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:9fea9c1869bb4742d174a57b4700c6dadea951df8b06de40c2fedb4f02931c2e", size = 1997784 },
    { url = "https://files.pythonhosted.org/packages/c0/ca/49958e4df7715c71773e1ea5be1c74544923d10319173264e6db122543f9/pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1d20eb4861329bb2484c021b9d9a977566ab16d84000a57e28061151c62b349a", size = 2141075 },
    { url = "https://files.pythonhosted.org/packages/7b/a6/0b3a167a9773c79ba834b959b4e18c3ae9216b8319bd8422792abc8a41b1/pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0fb935c5591573ae3201640579f30128ccc10739b45663f93c06796854405505", size = 2745849 },
    { url = "https://files.pythonhosted.org/packages/0b/60/516484135173aa9e5861d7a0663dce82e4746d2e7f803627d8c25dfa5578/pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c964fd24e6166420d18fb53996d8c9fd6eac9bf5ae3ec3d03015be4414ce497f", size = 2005794 },
    { url = "https://files.pythonhosted.org/packages/86/70/05b1eb77459ad47de00cf78ee003016da0cedf8b9170260488d7c21e9181/pydantic_core-2.33.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:681d65e9011f7392db5aa002b7423cc442d6a673c635668c227c6c8d0e5a4f77", size = 2123237 },
    { url = "https://files.pythonhosted.org/packages/c7/57/12667a1409c04ae7dc95d3b43158948eb0368e9c790be8b095cb60611459/pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:e100c52f7355a48413e2999bfb4e139d2977a904495441b374f3d4fb4a170961", size = 2086351 },
    { url = "https://files.pythonhosted.org/packages/57/61/cc6d1d1c1664b58fdd6ecc64c84366c34ec9b606aeb66cafab6f4088974c/pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_armv7l.whl", hash = "sha256:048831bd363490be79acdd3232f74a0e9951b11b2b4cc058aeb72b22fdc3abe1", size = 2258914 },
    { url = "https://files.pythonhosted.org/packages/d1/0a/edb137176a1f5419b2ddee8bde6a0a548cfa3c74f657f63e56232df8de88/pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:bdc84017d28459c00db6f918a7272a5190bec3090058334e43a76afb279eac7c", size = 2257385 },
    { url = "https://files.pythonhosted.org/packages/26/3c/48ca982d50e4b0e1d9954919c887bdc1c2b462801bf408613ccc641b3daa/pydantic_core-2.33.1-cp311-cp311-win32.whl", hash = "sha256:32cd11c5914d1179df70406427097c7dcde19fddf1418c787540f4b730289896", size = 1923765 },
    { url = "https://files.pythonhosted.org/packages/33/cd/7ab70b99e5e21559f5de38a0928ea84e6f23fdef2b0d16a6feaf942b003c/pydantic_core-2.33.1-cp311-cp311-win_amd64.whl", hash = "sha256:2ea62419ba8c397e7da28a9170a16219d310d2cf4970dbc65c32faf20d828c83", size = 1950688 },
    { url = "https://files.pythonhosted.org/packages/4b/ae/db1fc237b82e2cacd379f63e3335748ab88b5adde98bf7544a1b1bd10a84/pydantic_core-2.33.1-cp311-cp311-win_arm64.whl", hash = "sha256:fc903512177361e868bc1f5b80ac8c8a6e05fcdd574a5fb5ffeac5a9982b9e89", size = 1908185 },
    { url = "https://files.pythonhosted.org/packages/c8/ce/3cb22b07c29938f97ff5f5bb27521f95e2ebec399b882392deb68d6c440e/pydantic_core-2.33.1-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:1293d7febb995e9d3ec3ea09caf1a26214eec45b0f29f6074abb004723fc1de8", size = 2026640 },
    { url = "https://files.pythonhosted.org/packages/19/78/f381d643b12378fee782a72126ec5d793081ef03791c28a0fd542a5bee64/pydantic_core-2.33.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:99b56acd433386c8f20be5c4000786d1e7ca0523c8eefc995d14d79c7a081498", size = 1852649 },
    { url = "https://files.pythonhosted.org/packages/9d/2b/98a37b80b15aac9eb2c6cfc6dbd35e5058a352891c5cce3a8472d77665a6/pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:35a5ec3fa8c2fe6c53e1b2ccc2454398f95d5393ab398478f53e1afbbeb4d939", size = 1892472 },
    { url = "https://files.pythonhosted.org/packages/4e/d4/3c59514e0f55a161004792b9ff3039da52448f43f5834f905abef9db6e4a/pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:b172f7b9d2f3abc0efd12e3386f7e48b576ef309544ac3a63e5e9cdd2e24585d", size = 1977509 },
    { url = "https://files.pythonhosted.org/packages/a9/b6/c2c7946ef70576f79a25db59a576bce088bdc5952d1b93c9789b091df716/pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9097b9f17f91eea659b9ec58148c0747ec354a42f7389b9d50701610d86f812e", size = 2128702 },
    { url = "https://files.pythonhosted.org/packages/88/fe/65a880f81e3f2a974312b61f82a03d85528f89a010ce21ad92f109d94deb/pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:cc77ec5b7e2118b152b0d886c7514a4653bcb58c6b1d760134a9fab915f777b3", size = 2679428 },
    { url = "https://files.pythonhosted.org/packages/6f/ff/4459e4146afd0462fb483bb98aa2436d69c484737feaceba1341615fb0ac/pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d5e3d15245b08fa4a84cefc6c9222e6f37c98111c8679fbd94aa145f9a0ae23d", size = 2008753 },
    { url = "https://files.pythonhosted.org/packages/7c/76/1c42e384e8d78452ededac8b583fe2550c84abfef83a0552e0e7478ccbc3/pydantic_core-2.33.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:ef99779001d7ac2e2461d8ab55d3373fe7315caefdbecd8ced75304ae5a6fc6b", size = 2114849 },
    { url = "https://files.pythonhosted.org/packages/00/72/7d0cf05095c15f7ffe0eb78914b166d591c0eed72f294da68378da205101/pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:fc6bf8869e193855e8d91d91f6bf59699a5cdfaa47a404e278e776dd7f168b39", size = 2069541 },
    { url = "https://files.pythonhosted.org/packages/b3/69/94a514066bb7d8be499aa764926937409d2389c09be0b5107a970286ef81/pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:b1caa0bc2741b043db7823843e1bde8aaa58a55a58fda06083b0569f8b45693a", size = 2239225 },
    { url = "https://files.pythonhosted.org/packages/84/b0/e390071eadb44b41f4f54c3cef64d8bf5f9612c92686c9299eaa09e267e2/pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:ec259f62538e8bf364903a7d0d0239447059f9434b284f5536e8402b7dd198db", size = 2248373 },
    { url = "https://files.pythonhosted.org/packages/d6/b2/288b3579ffc07e92af66e2f1a11be3b056fe1214aab314748461f21a31c3/pydantic_core-2.33.1-cp312-cp312-win32.whl", hash = "sha256:e14f369c98a7c15772b9da98987f58e2b509a93235582838bd0d1d8c08b68fda", size = 1907034 },
    { url = "https://files.pythonhosted.org/packages/02/28/58442ad1c22b5b6742b992ba9518420235adced665513868f99a1c2638a5/pydantic_core-2.33.1-cp312-cp312-win_amd64.whl", hash = "sha256:1c607801d85e2e123357b3893f82c97a42856192997b95b4d8325deb1cd0c5f4", size = 1956848 },
    { url = "https://files.pythonhosted.org/packages/a1/eb/f54809b51c7e2a1d9f439f158b8dd94359321abcc98767e16fc48ae5a77e/pydantic_core-2.33.1-cp312-cp312-win_arm64.whl", hash = "sha256:8d13f0276806ee722e70a1c93da19748594f19ac4299c7e41237fc791d1861ea", size = 1903986 },
    { url = "https://files.pythonhosted.org/packages/7a/24/eed3466a4308d79155f1cdd5c7432c80ddcc4530ba8623b79d5ced021641/pydantic_core-2.33.1-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:70af6a21237b53d1fe7b9325b20e65cbf2f0a848cf77bed492b029139701e66a", size = 2033551 },
    { url = "https://files.pythonhosted.org/packages/ab/14/df54b1a0bc9b6ded9b758b73139d2c11b4e8eb43e8ab9c5847c0a2913ada/pydantic_core-2.33.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:282b3fe1bbbe5ae35224a0dbd05aed9ccabccd241e8e6b60370484234b456266", size = 1852785 },
    { url = "https://files.pythonhosted.org/packages/fa/96/e275f15ff3d34bb04b0125d9bc8848bf69f25d784d92a63676112451bfb9/pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4b315e596282bbb5822d0c7ee9d255595bd7506d1cb20c2911a4da0b970187d3", size = 1897758 },
    { url = "https://files.pythonhosted.org/packages/b7/d8/96bc536e975b69e3a924b507d2a19aedbf50b24e08c80fb00e35f9baaed8/pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:1dfae24cf9921875ca0ca6a8ecb4bb2f13c855794ed0d468d6abbec6e6dcd44a", size = 1986109 },
    { url = "https://files.pythonhosted.org/packages/90/72/ab58e43ce7e900b88cb571ed057b2fcd0e95b708a2e0bed475b10130393e/pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:6dd8ecfde08d8bfadaea669e83c63939af76f4cf5538a72597016edfa3fad516", size = 2129159 },
    { url = "https://files.pythonhosted.org/packages/dc/3f/52d85781406886c6870ac995ec0ba7ccc028b530b0798c9080531b409fdb/pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2f593494876eae852dc98c43c6f260f45abdbfeec9e4324e31a481d948214764", size = 2680222 },
    { url = "https://files.pythonhosted.org/packages/f4/56/6e2ef42f363a0eec0fd92f74a91e0ac48cd2e49b695aac1509ad81eee86a/pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:948b73114f47fd7016088e5186d13faf5e1b2fe83f5e320e371f035557fd264d", size = 2006980 },
    { url = "https://files.pythonhosted.org/packages/4c/c0/604536c4379cc78359f9ee0aa319f4aedf6b652ec2854953f5a14fc38c5a/pydantic_core-2.33.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:e11f3864eb516af21b01e25fac915a82e9ddad3bb0fb9e95a246067398b435a4", size = 2120840 },
    { url = "https://files.pythonhosted.org/packages/1f/46/9eb764814f508f0edfb291a0f75d10854d78113fa13900ce13729aaec3ae/pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:549150be302428b56fdad0c23c2741dcdb5572413776826c965619a25d9c6bde", size = 2072518 },
    { url = "https://files.pythonhosted.org/packages/42/e3/fb6b2a732b82d1666fa6bf53e3627867ea3131c5f39f98ce92141e3e3dc1/pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:495bc156026efafd9ef2d82372bd38afce78ddd82bf28ef5276c469e57c0c83e", size = 2248025 },
    { url = "https://files.pythonhosted.org/packages/5c/9d/fbe8fe9d1aa4dac88723f10a921bc7418bd3378a567cb5e21193a3c48b43/pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:ec79de2a8680b1a67a07490bddf9636d5c2fab609ba8c57597e855fa5fa4dacd", size = 2254991 },
    { url = "https://files.pythonhosted.org/packages/aa/99/07e2237b8a66438d9b26482332cda99a9acccb58d284af7bc7c946a42fd3/pydantic_core-2.33.1-cp313-cp313-win32.whl", hash = "sha256:ee12a7be1742f81b8a65b36c6921022301d466b82d80315d215c4c691724986f", size = 1915262 },
    { url = "https://files.pythonhosted.org/packages/8a/f4/e457a7849beeed1e5defbcf5051c6f7b3c91a0624dd31543a64fc9adcf52/pydantic_core-2.33.1-cp313-cp313-win_amd64.whl", hash = "sha256:ede9b407e39949d2afc46385ce6bd6e11588660c26f80576c11c958e6647bc40", size = 1956626 },
    { url = "https://files.pythonhosted.org/packages/20/d0/e8d567a7cff7b04e017ae164d98011f1e1894269fe8e90ea187a3cbfb562/pydantic_core-2.33.1-cp313-cp313-win_arm64.whl", hash = "sha256:aa687a23d4b7871a00e03ca96a09cad0f28f443690d300500603bd0adba4b523", size = 1909590 },
    { url = "https://files.pythonhosted.org/packages/ef/fd/24ea4302d7a527d672c5be06e17df16aabfb4e9fdc6e0b345c21580f3d2a/pydantic_core-2.33.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:401d7b76e1000d0dd5538e6381d28febdcacb097c8d340dde7d7fc6e13e9f95d", size = 1812963 },
    { url = "https://files.pythonhosted.org/packages/5f/95/4fbc2ecdeb5c1c53f1175a32d870250194eb2fdf6291b795ab08c8646d5d/pydantic_core-2.33.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7aeb055a42d734c0255c9e489ac67e75397d59c6fbe60d155851e9782f276a9c", size = 1986896 },
    { url = "https://files.pythonhosted.org/packages/71/ae/fe31e7f4a62431222d8f65a3bd02e3fa7e6026d154a00818e6d30520ea77/pydantic_core-2.33.1-cp313-cp313t-win_amd64.whl", hash = "sha256:338ea9b73e6e109f15ab439e62cb3b78aa752c7fd9536794112e14bee02c8d18", size = 1931810 },
    { url = "https://files.pythonhosted.org/packages/0b/76/1794e440c1801ed35415238d2c728f26cd12695df9057154ad768b7b991c/pydantic_core-2.33.1-pp311-pypy311_pp73-macosx_10_12_x86_64.whl", hash = "sha256:3a371dc00282c4b84246509a5ddc808e61b9864aa1eae9ecc92bb1268b82db4a", size = 2042858 },
    { url = "https://files.pythonhosted.org/packages/73/b4/9cd7b081fb0b1b4f8150507cd59d27b275c3e22ad60b35cb19ea0977d9b9/pydantic_core-2.33.1-pp311-pypy311_pp73-macosx_11_0_arm64.whl", hash = "sha256:f59295ecc75a1788af8ba92f2e8c6eeaa5a94c22fc4d151e8d9638814f85c8fc", size = 1873745 },
    { url = "https://files.pythonhosted.org/packages/e1/d7/9ddb7575d4321e40d0363903c2576c8c0c3280ebea137777e5ab58d723e3/pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:08530b8ac922003033f399128505f513e30ca770527cc8bbacf75a84fcc2c74b", size = 1904188 },
    { url = "https://files.pythonhosted.org/packages/d1/a8/3194ccfe461bb08da19377ebec8cb4f13c9bd82e13baebc53c5c7c39a029/pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bae370459da6a5466978c0eacf90690cb57ec9d533f8e63e564ef3822bfa04fe", size = 2083479 },
    { url = "https://files.pythonhosted.org/packages/42/c7/84cb569555d7179ca0b3f838cef08f66f7089b54432f5b8599aac6e9533e/pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:e3de2777e3b9f4d603112f78006f4ae0acb936e95f06da6cb1a45fbad6bdb4b5", size = 2118415 },
    { url = "https://files.pythonhosted.org/packages/3b/67/72abb8c73e0837716afbb58a59cc9e3ae43d1aa8677f3b4bc72c16142716/pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_aarch64.whl", hash = "sha256:3a64e81e8cba118e108d7126362ea30e021291b7805d47e4896e52c791be2761", size = 2079623 },
    { url = "https://files.pythonhosted.org/packages/0b/cd/c59707e35a47ba4cbbf153c3f7c56420c58653b5801b055dc52cccc8e2dc/pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_armv7l.whl", hash = "sha256:52928d8c1b6bda03cc6d811e8923dffc87a2d3c8b3bfd2ce16471c7147a24850", size = 2250175 },
    { url = "https://files.pythonhosted.org/packages/84/32/e4325a6676b0bed32d5b084566ec86ed7fd1e9bcbfc49c578b1755bde920/pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_x86_64.whl", hash = "sha256:1b30d92c9412beb5ac6b10a3eb7ef92ccb14e3f2a8d7732e2d739f58b3aa7544", size = 2254674 },
    { url = "https://files.pythonhosted.org/packages/12/6f/5596dc418f2e292ffc661d21931ab34591952e2843e7168ea5a52591f6ff/pydantic_core-2.33.1-pp311-pypy311_pp73-win_amd64.whl", hash = "sha256:f995719707e0e29f0f41a8aa3bcea6e761a36c9136104d3189eafb83f5cec5e5", size = 2080951 },
]

[[package]]
name = "pydantic-settings"
version = "2.8.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "python-dotenv" },
]
sdist = { url = "https://files.pythonhosted.org/packages/88/82/c79424d7d8c29b994fb01d277da57b0a9b09cc03c3ff875f9bd8a86b2145/pydantic_settings-2.8.1.tar.gz", hash = "sha256:d5c663dfbe9db9d5e1c646b2e161da12f0d734d422ee56f567d0ea2cee4e8585", size = 83550 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0b/53/a64f03044927dc47aafe029c42a5b7aabc38dfb813475e0e1bf71c4a59d0/pydantic_settings-2.8.1-py3-none-any.whl", hash = "sha256:81942d5ac3d905f7f3ee1a70df5dfb62d5569c12f51a5a647defc1c3d9ee2e9c", size = 30839 },
]

[[package]]
name = "pydeck"
version = "0.9.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "jinja2" },
    { name = "numpy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a1/ca/40e14e196864a0f61a92abb14d09b3d3da98f94ccb03b49cf51688140dab/pydeck-0.9.1.tar.gz", hash = "sha256:f74475ae637951d63f2ee58326757f8d4f9cd9f2a457cf42950715003e2cb605", size = 3832240 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ab/4c/b888e6cf58bd9db9c93f40d1c6be8283ff49d88919231afe93a6bcf61626/pydeck-0.9.1-py2.py3-none-any.whl", hash = "sha256:b3f75ba0d273fc917094fa61224f3f6076ca8752b93d46faf3bcfd9f9d59b038", size = 6900403 },
]

[[package]]
name = "pyee"
version = "12.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/0a/37/8fb6e653597b2b67ef552ed49b438d5398ba3b85a9453f8ada0fd77d455c/pyee-12.1.1.tar.gz", hash = "sha256:bbc33c09e2ff827f74191e3e5bbc6be7da02f627b7ec30d86f5ce1a6fb2424a3", size = 30915 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/25/68/7e150cba9eeffdeb3c5cecdb6896d70c8edd46ce41c0491e12fb2b2256ff/pyee-12.1.1-py3-none-any.whl", hash = "sha256:18a19c650556bb6b32b406d7f017c8f513aceed1ef7ca618fb65de7bd2d347ef", size = 15527 },
]

[[package]]
name = "pygments"
version = "2.19.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2d/c3338d48ea6cc0feb8446d8e6937e1408088a72a39937982cc6111d17f84/pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f", size = 4968581 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/0b/9fcc47d19c48b59121088dd6da2488a49d5f72dacf8262e2790a1d2c7d15/pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c", size = 1225293 },
]

[[package]]
name = "pyjwt"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/46/bd74733ff231675599650d3e47f361794b22ef3e3770998dda30d3b63726/pyjwt-2.10.1.tar.gz", hash = "sha256:3cc5772eb20009233caf06e9d8a0577824723b44e6648ee0a2aedb6cf9381953", size = 87785 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/ad/689f02752eeec26aed679477e80e632ef1b682313be70793d798c1d5fc8f/PyJWT-2.10.1-py3-none-any.whl", hash = "sha256:dcdd193e30abefd5debf142f9adfcdd2b58004e644f25406ffaebd50bd98dacb", size = 22997 },
]

[[package]]
name = "pynacl"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a7/22/27582568be639dfe22ddb3902225f91f2f17ceff88ce80e4db396c8986da/PyNaCl-1.5.0.tar.gz", hash = "sha256:8ac7448f09ab85811607bdd21ec2464495ac8b7c66d146bf545b0f08fb9220ba", size = 3392854 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ce/75/0b8ede18506041c0bf23ac4d8e2971b4161cd6ce630b177d0a08eb0d8857/PyNaCl-1.5.0-cp36-abi3-macosx_10_10_universal2.whl", hash = "sha256:401002a4aaa07c9414132aaed7f6836ff98f59277a234704ff66878c2ee4a0d1", size = 349920 },
    { url = "https://files.pythonhosted.org/packages/59/bb/fddf10acd09637327a97ef89d2a9d621328850a72f1fdc8c08bdf72e385f/PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl", hash = "sha256:52cb72a79269189d4e0dc537556f4740f7f0a9ec41c1322598799b0bdad4ef92", size = 601722 },
    { url = "https://files.pythonhosted.org/packages/5d/70/87a065c37cca41a75f2ce113a5a2c2aa7533be648b184ade58971b5f7ccc/PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a36d4a9dda1f19ce6e03c9a784a2921a4b726b02e1c736600ca9c22029474394", size = 680087 },
    { url = "https://files.pythonhosted.org/packages/ee/87/f1bb6a595f14a327e8285b9eb54d41fef76c585a0edef0a45f6fc95de125/PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl", hash = "sha256:0c84947a22519e013607c9be43706dd42513f9e6ae5d39d3613ca1e142fba44d", size = 856678 },
    { url = "https://files.pythonhosted.org/packages/66/28/ca86676b69bf9f90e710571b67450508484388bfce09acf8a46f0b8c785f/PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:06b8f6fa7f5de8d5d2f7573fe8c863c051225a27b61e6860fd047b1775807858", size = 1133660 },
    { url = "https://files.pythonhosted.org/packages/3d/85/c262db650e86812585e2bc59e497a8f59948a005325a11bbbc9ecd3fe26b/PyNaCl-1.5.0-cp36-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:a422368fc821589c228f4c49438a368831cb5bbc0eab5ebe1d7fac9dded6567b", size = 663824 },
    { url = "https://files.pythonhosted.org/packages/fd/1a/cc308a884bd299b651f1633acb978e8596c71c33ca85e9dc9fa33a5399b9/PyNaCl-1.5.0-cp36-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:61f642bf2378713e2c2e1de73444a3778e5f0a38be6fee0fe532fe30060282ff", size = 1117912 },
    { url = "https://files.pythonhosted.org/packages/25/2d/b7df6ddb0c2a33afdb358f8af6ea3b8c4d1196ca45497dd37a56f0c122be/PyNaCl-1.5.0-cp36-abi3-win32.whl", hash = "sha256:e46dae94e34b085175f8abb3b0aaa7da40767865ac82c928eeb9e57e1ea8a543", size = 204624 },
    { url = "https://files.pythonhosted.org/packages/5e/22/d3db169895faaf3e2eda892f005f433a62db2decbcfbc2f61e6517adfa87/PyNaCl-1.5.0-cp36-abi3-win_amd64.whl", hash = "sha256:20f42270d27e1b6a29f54032090b972d97f0a1b0948cc52392041ef7831fee93", size = 212141 },
]

[[package]]
name = "pyobjc-core"
version = "11.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5c/94/a111239b98260869780a5767e5d74bfd3a8c13a40457f479c28dcd91f89d/pyobjc_core-11.0.tar.gz", hash = "sha256:63bced211cb8a8fb5c8ff46473603da30e51112861bd02c438fbbbc8578d9a70", size = 994931 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/52/05/fa97309c3b1bc1ec90d701db89902e0bd5e1024023aa2c5387b889458b1b/pyobjc_core-11.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:50675c0bb8696fe960a28466f9baf6943df2928a1fd85625d678fa2f428bd0bd", size = 727295 },
    { url = "https://files.pythonhosted.org/packages/56/ce/bf3ff9a9347721a398c3dfb83e29b43fb166b7ef590f3f7b7ddcd283df39/pyobjc_core-11.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:a03061d4955c62ddd7754224a80cdadfdf17b6b5f60df1d9169a3b1b02923f0b", size = 739750 },
    { url = "https://files.pythonhosted.org/packages/72/16/0c468e73dbecb821e3da8819236fe832dfc53eb5f66a11775b055a7589ea/pyobjc_core-11.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:c338c1deb7ab2e9436d4175d1127da2eeed4a1b564b3d83b9f3ae4844ba97e86", size = 743900 },
    { url = "https://files.pythonhosted.org/packages/f3/88/cecec88fd51f62a6cd7775cc4fb6bfde16652f97df88d28c84fb77ca0c18/pyobjc_core-11.0-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:b4e9dc4296110f251a4033ff3f40320b35873ea7f876bd29a1c9705bb5e08c59", size = 791905 },
]

[[package]]
name = "pyobjc-framework-cocoa"
version = "11.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyobjc-core", marker = "sys_platform == 'darwin'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c5/32/53809096ad5fc3e7a2c5ddea642590a5f2cb5b81d0ad6ea67fdb2263d9f9/pyobjc_framework_cocoa-11.0.tar.gz", hash = "sha256:00346a8cb81ad7b017b32ff7bf596000f9faa905807b1bd234644ebd47f692c5", size = 6173848 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/23/97/81fd41ad90e9c241172110aa635a6239d56f50d75923aaedbbe351828580/pyobjc_framework_Cocoa-11.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:3ea7be6e6dd801b297440de02d312ba3fa7fd3c322db747ae1cb237e975f5d33", size = 385534 },
    { url = "https://files.pythonhosted.org/packages/5b/8d/0e2558447c26b3ba64f7c9776a5a6c9d2ae8abf9d34308b174ae0934402e/pyobjc_framework_Cocoa-11.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:280a577b83c68175a28b2b7138d1d2d3111f2b2b66c30e86f81a19c2b02eae71", size = 385811 },
    { url = "https://files.pythonhosted.org/packages/1d/a5/609281a7e89efefbef9db1d8fe66bc0458c3b4e74e2227c644f9c18926fa/pyobjc_framework_Cocoa-11.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:15b2bd977ed340074f930f1330f03d42912d5882b697d78bd06f8ebe263ef92e", size = 385889 },
    { url = "https://files.pythonhosted.org/packages/93/f6/2d5a863673ef7b85a3cba875c43e6c495fb1307427a6801001ae94bb5e54/pyobjc_framework_Cocoa-11.0-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:5750001db544e67f2b66f02067d8f0da96bb2ef71732bde104f01b8628f9d7ea", size = 389831 },
]

[[package]]
name = "pyotp"
version = "2.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f3/b2/1d5994ba2acde054a443bd5e2d384175449c7d2b6d1a0614dbca3a63abfc/pyotp-2.9.0.tar.gz", hash = "sha256:346b6642e0dbdde3b4ff5a930b664ca82abfa116356ed48cc42c7d6590d36f63", size = 17763 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c3/c0/c33c8792c3e50193ef55adb95c1c3c2786fe281123291c2dbf0eaab95a6f/pyotp-2.9.0-py3-none-any.whl", hash = "sha256:81c2e5865b8ac55e825b0358e496e1d9387c811e85bb40e71a3b29b288963612", size = 13376 },
]

[[package]]
name = "pysocks"
version = "1.7.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bd/11/293dd436aea955d45fc4e8a35b6ae7270f5b8e00b53cf6c024c83b657a11/PySocks-1.7.1.tar.gz", hash = "sha256:3f8804571ebe159c380ac6de37643bb4685970655d3bba243530d6558b799aa0", size = 284429 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8d/59/b4572118e098ac8e46e399a1dd0f2d85403ce8bbaad9ec79373ed6badaf9/PySocks-1.7.1-py3-none-any.whl", hash = "sha256:2725bd0a9925919b9b51739eea5f9e2bae91e83288108a9ad338b2e3a4435ee5", size = 16725 },
]

[[package]]
name = "pytest"
version = "8.3.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ae/3c/c9d525a414d506893f0cd8a8d0de7706446213181570cdbd766691164e40/pytest-8.3.5.tar.gz", hash = "sha256:f4efe70cc14e511565ac476b57c279e12a855b11f48f212af1080ef2263d3845", size = 1450891 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/30/3d/64ad57c803f1fa1e963a7946b6e0fea4a70df53c1a7fed304586539c2bac/pytest-8.3.5-py3-none-any.whl", hash = "sha256:c69214aa47deac29fad6c2a4f590b9c4a9fdb16a403176fe154b79c0b4d4d820", size = 343634 },
]

[[package]]
name = "pytest-asyncio"
version = "0.26.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8e/c4/453c52c659521066969523e87d85d54139bbd17b78f09532fb8eb8cdb58e/pytest_asyncio-0.26.0.tar.gz", hash = "sha256:c4df2a697648241ff39e7f0e4a73050b03f123f760673956cf0d72a4990e312f", size = 54156 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/20/7f/338843f449ace853647ace35870874f69a764d251872ed1b4de9f234822c/pytest_asyncio-0.26.0-py3-none-any.whl", hash = "sha256:7b51ed894f4fbea1340262bdae5135797ebbe21d8638978e35d31c6d19f72fb0", size = 19694 },
]

[[package]]
name = "pytest-mock"
version = "3.14.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/90/a955c3ab35ccd41ad4de556596fa86685bf4fc5ffcc62d22d856cfd4e29a/pytest-mock-3.14.0.tar.gz", hash = "sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0", size = 32814 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f2/3b/b26f90f74e2986a82df6e7ac7e319b8ea7ccece1caec9f8ab6104dc70603/pytest_mock-3.14.0-py3-none-any.whl", hash = "sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f", size = 9863 },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892 },
]

[[package]]
name = "python-dotenv"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/88/2c/7bb1416c5620485aa793f2de31d3df393d3686aa8a8506d11e10e13c5baf/python_dotenv-1.1.0.tar.gz", hash = "sha256:41f90bc6f5f177fb41f53e87666db362025010eb28f60a01c9143bfa33a2b2d5", size = 39920 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/1e/18/98a99ad95133c6a6e2005fe89faedf294a748bd5dc803008059409ac9b1e/python_dotenv-1.1.0-py3-none-any.whl", hash = "sha256:d7c01d9e2293916c18baf562d95698754b0dbbb5e74d457c45d4f6561fb9d55d", size = 20256 },
]

[[package]]
name = "python-json-logger"
version = "3.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/9e/de/d3144a0bceede957f961e975f3752760fbe390d57fbe194baf709d8f1f7b/python_json_logger-3.3.0.tar.gz", hash = "sha256:12b7e74b17775e7d565129296105bbe3910842d9d0eb083fc83a6a617aa8df84", size = 16642 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/08/20/0f2523b9e50a8052bc6a8b732dfc8568abbdc42010aef03a2d750bdab3b2/python_json_logger-3.3.0-py3-none-any.whl", hash = "sha256:dd980fae8cffb24c13caf6e158d3d61c0d6d22342f932cb6e9deedab3d35eec7", size = 15163 },
]

[[package]]
name = "python-multipart"
version = "0.0.18"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b4/86/b6b38677dec2e2e7898fc5b6f7e42c2d011919a92d25339451892f27b89c/python_multipart-0.0.18.tar.gz", hash = "sha256:7a68db60c8bfb82e460637fa4750727b45af1d5e2ed215593f917f64694d34fe", size = 36622 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/13/6b/b60f47101ba2cac66b4a83246630e68ae9bbe2e614cbae5f4465f46dee13/python_multipart-0.0.18-py3-none-any.whl", hash = "sha256:efe91480f485f6a361427a541db4796f9e1591afc0fb8e7a4ba06bfbc6708996", size = 24389 },
]

[[package]]
name = "pytz"
version = "2025.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f8/bf/abbd3cdfb8fbc7fb3d4d38d320f2441b1e7cbe29be4f23797b4a2b5d8aac/pytz-2025.2.tar.gz", hash = "sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3", size = 320884 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/c4/34e93fe5f5429d7570ec1fa436f1986fb1f00c3e0f43a589fe2bbcd22c3f/pytz-2025.2-py2.py3-none-any.whl", hash = "sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00", size = 509225 },
]

[[package]]
name = "pywin32"
version = "310"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f7/b1/68aa2986129fb1011dabbe95f0136f44509afaf072b12b8f815905a39f33/pywin32-310-cp311-cp311-win32.whl", hash = "sha256:1e765f9564e83011a63321bb9d27ec456a0ed90d3732c4b2e312b855365ed8bd", size = 8784284 },
    { url = "https://files.pythonhosted.org/packages/b3/bd/d1592635992dd8db5bb8ace0551bc3a769de1ac8850200cfa517e72739fb/pywin32-310-cp311-cp311-win_amd64.whl", hash = "sha256:126298077a9d7c95c53823934f000599f66ec9296b09167810eb24875f32689c", size = 9520748 },
    { url = "https://files.pythonhosted.org/packages/90/b1/ac8b1ffce6603849eb45a91cf126c0fa5431f186c2e768bf56889c46f51c/pywin32-310-cp311-cp311-win_arm64.whl", hash = "sha256:19ec5fc9b1d51c4350be7bb00760ffce46e6c95eaf2f0b2f1150657b1a43c582", size = 8455941 },
    { url = "https://files.pythonhosted.org/packages/6b/ec/4fdbe47932f671d6e348474ea35ed94227fb5df56a7c30cbbb42cd396ed0/pywin32-310-cp312-cp312-win32.whl", hash = "sha256:8a75a5cc3893e83a108c05d82198880704c44bbaee4d06e442e471d3c9ea4f3d", size = 8796239 },
    { url = "https://files.pythonhosted.org/packages/e3/e5/b0627f8bb84e06991bea89ad8153a9e50ace40b2e1195d68e9dff6b03d0f/pywin32-310-cp312-cp312-win_amd64.whl", hash = "sha256:bf5c397c9a9a19a6f62f3fb821fbf36cac08f03770056711f765ec1503972060", size = 9503839 },
    { url = "https://files.pythonhosted.org/packages/1f/32/9ccf53748df72301a89713936645a664ec001abd35ecc8578beda593d37d/pywin32-310-cp312-cp312-win_arm64.whl", hash = "sha256:2349cc906eae872d0663d4d6290d13b90621eaf78964bb1578632ff20e152966", size = 8459470 },
    { url = "https://files.pythonhosted.org/packages/1c/09/9c1b978ffc4ae53999e89c19c77ba882d9fce476729f23ef55211ea1c034/pywin32-310-cp313-cp313-win32.whl", hash = "sha256:5d241a659c496ada3253cd01cfaa779b048e90ce4b2b38cd44168ad555ce74ab", size = 8794384 },
    { url = "https://files.pythonhosted.org/packages/45/3c/b4640f740ffebadd5d34df35fecba0e1cfef8fde9f3e594df91c28ad9b50/pywin32-310-cp313-cp313-win_amd64.whl", hash = "sha256:667827eb3a90208ddbdcc9e860c81bde63a135710e21e4cb3348968e4bd5249e", size = 9503039 },
    { url = "https://files.pythonhosted.org/packages/b4/f4/f785020090fb050e7fb6d34b780f2231f302609dc964672f72bfaeb59a28/pywin32-310-cp313-cp313-win_arm64.whl", hash = "sha256:e308f831de771482b7cf692a1f308f8fca701b2d8f9dde6cc440c7da17e47b33", size = 8458152 },
]

[[package]]
name = "pywinpty"
version = "2.0.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2d/7c/917f9c4681bb8d34bfbe0b79d36bbcd902651aeab48790df3d30ba0202fb/pywinpty-2.0.15.tar.gz", hash = "sha256:312cf39153a8736c617d45ce8b6ad6cd2107de121df91c455b10ce6bba7a39b2", size = 29017 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5e/ac/6884dcb7108af66ad53f73ef4dad096e768c9203a6e6ce5e6b0c4a46e238/pywinpty-2.0.15-cp311-cp311-win_amd64.whl", hash = "sha256:9a6bcec2df2707aaa9d08b86071970ee32c5026e10bcc3cc5f6f391d85baf7ca", size = 1405249 },
    { url = "https://files.pythonhosted.org/packages/88/e5/9714def18c3a411809771a3fbcec70bffa764b9675afb00048a620fca604/pywinpty-2.0.15-cp312-cp312-win_amd64.whl", hash = "sha256:83a8f20b430bbc5d8957249f875341a60219a4e971580f2ba694fbfb54a45ebc", size = 1405243 },
    { url = "https://files.pythonhosted.org/packages/fb/16/2ab7b3b7f55f3c6929e5f629e1a68362981e4e5fed592a2ed1cb4b4914a5/pywinpty-2.0.15-cp313-cp313-win_amd64.whl", hash = "sha256:ab5920877dd632c124b4ed17bc6dd6ef3b9f86cd492b963ffdb1a67b85b0f408", size = 1405020 },
    { url = "https://files.pythonhosted.org/packages/7c/16/edef3515dd2030db2795dbfbe392232c7a0f3dc41b98e92b38b42ba497c7/pywinpty-2.0.15-cp313-cp313t-win_amd64.whl", hash = "sha256:a4560ad8c01e537708d2790dbe7da7d986791de805d89dd0d3697ca59e9e4901", size = 1404151 },
]

[[package]]
name = "pyyaml"
version = "6.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/54/ed/79a089b6be93607fa5cdaedf301d7dfb23af5f25c398d5ead2525b063e17/pyyaml-6.0.2.tar.gz", hash = "sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e", size = 130631 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f8/aa/7af4e81f7acba21a4c6be026da38fd2b872ca46226673c89a758ebdc4fd2/PyYAML-6.0.2-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:cc1c1159b3d456576af7a3e4d1ba7e6924cb39de8f67111c735f6fc832082774", size = 184612 },
    { url = "https://files.pythonhosted.org/packages/8b/62/b9faa998fd185f65c1371643678e4d58254add437edb764a08c5a98fb986/PyYAML-6.0.2-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:1e2120ef853f59c7419231f3bf4e7021f1b936f6ebd222406c3b60212205d2ee", size = 172040 },
    { url = "https://files.pythonhosted.org/packages/ad/0c/c804f5f922a9a6563bab712d8dcc70251e8af811fce4524d57c2c0fd49a4/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5d225db5a45f21e78dd9358e58a98702a0302f2659a3c6cd320564b75b86f47c", size = 736829 },
    { url = "https://files.pythonhosted.org/packages/51/16/6af8d6a6b210c8e54f1406a6b9481febf9c64a3109c541567e35a49aa2e7/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5ac9328ec4831237bec75defaf839f7d4564be1e6b25ac710bd1a96321cc8317", size = 764167 },
    { url = "https://files.pythonhosted.org/packages/75/e4/2c27590dfc9992f73aabbeb9241ae20220bd9452df27483b6e56d3975cc5/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3ad2a3decf9aaba3d29c8f537ac4b243e36bef957511b4766cb0057d32b0be85", size = 762952 },
    { url = "https://files.pythonhosted.org/packages/9b/97/ecc1abf4a823f5ac61941a9c00fe501b02ac3ab0e373c3857f7d4b83e2b6/PyYAML-6.0.2-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:ff3824dc5261f50c9b0dfb3be22b4567a6f938ccce4587b38952d85fd9e9afe4", size = 735301 },
    { url = "https://files.pythonhosted.org/packages/45/73/0f49dacd6e82c9430e46f4a027baa4ca205e8b0a9dce1397f44edc23559d/PyYAML-6.0.2-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:797b4f722ffa07cc8d62053e4cff1486fa6dc094105d13fea7b1de7d8bf71c9e", size = 756638 },
    { url = "https://files.pythonhosted.org/packages/22/5f/956f0f9fc65223a58fbc14459bf34b4cc48dec52e00535c79b8db361aabd/PyYAML-6.0.2-cp311-cp311-win32.whl", hash = "sha256:11d8f3dd2b9c1207dcaf2ee0bbbfd5991f571186ec9cc78427ba5bd32afae4b5", size = 143850 },
    { url = "https://files.pythonhosted.org/packages/ed/23/8da0bbe2ab9dcdd11f4f4557ccaf95c10b9811b13ecced089d43ce59c3c8/PyYAML-6.0.2-cp311-cp311-win_amd64.whl", hash = "sha256:e10ce637b18caea04431ce14fabcf5c64a1c61ec9c56b071a4b7ca131ca52d44", size = 161980 },
    { url = "https://files.pythonhosted.org/packages/86/0c/c581167fc46d6d6d7ddcfb8c843a4de25bdd27e4466938109ca68492292c/PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab", size = 183873 },
    { url = "https://files.pythonhosted.org/packages/a8/0c/38374f5bb272c051e2a69281d71cba6fdb983413e6758b84482905e29a5d/PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725", size = 173302 },
    { url = "https://files.pythonhosted.org/packages/c3/93/9916574aa8c00aa06bbac729972eb1071d002b8e158bd0e83a3b9a20a1f7/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5", size = 739154 },
    { url = "https://files.pythonhosted.org/packages/95/0f/b8938f1cbd09739c6da569d172531567dbcc9789e0029aa070856f123984/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425", size = 766223 },
    { url = "https://files.pythonhosted.org/packages/b9/2b/614b4752f2e127db5cc206abc23a8c19678e92b23c3db30fc86ab731d3bd/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476", size = 767542 },
    { url = "https://files.pythonhosted.org/packages/d4/00/dd137d5bcc7efea1836d6264f049359861cf548469d18da90cd8216cf05f/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48", size = 731164 },
    { url = "https://files.pythonhosted.org/packages/c9/1f/4f998c900485e5c0ef43838363ba4a9723ac0ad73a9dc42068b12aaba4e4/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b", size = 756611 },
    { url = "https://files.pythonhosted.org/packages/df/d1/f5a275fdb252768b7a11ec63585bc38d0e87c9e05668a139fea92b80634c/PyYAML-6.0.2-cp312-cp312-win32.whl", hash = "sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4", size = 140591 },
    { url = "https://files.pythonhosted.org/packages/0c/e8/4f648c598b17c3d06e8753d7d13d57542b30d56e6c2dedf9c331ae56312e/PyYAML-6.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8", size = 156338 },
    { url = "https://files.pythonhosted.org/packages/ef/e3/3af305b830494fa85d95f6d95ef7fa73f2ee1cc8ef5b495c7c3269fb835f/PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba", size = 181309 },
    { url = "https://files.pythonhosted.org/packages/45/9f/3b1c20a0b7a3200524eb0076cc027a970d320bd3a6592873c85c92a08731/PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1", size = 171679 },
    { url = "https://files.pythonhosted.org/packages/7c/9a/337322f27005c33bcb656c655fa78325b730324c78620e8328ae28b64d0c/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133", size = 733428 },
    { url = "https://files.pythonhosted.org/packages/a3/69/864fbe19e6c18ea3cc196cbe5d392175b4cf3d5d0ac1403ec3f2d237ebb5/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484", size = 763361 },
    { url = "https://files.pythonhosted.org/packages/04/24/b7721e4845c2f162d26f50521b825fb061bc0a5afcf9a386840f23ea19fa/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5", size = 759523 },
    { url = "https://files.pythonhosted.org/packages/2b/b2/e3234f59ba06559c6ff63c4e10baea10e5e7df868092bf9ab40e5b9c56b6/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc", size = 726660 },
    { url = "https://files.pythonhosted.org/packages/fe/0f/25911a9f080464c59fab9027482f822b86bf0608957a5fcc6eaac85aa515/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652", size = 751597 },
    { url = "https://files.pythonhosted.org/packages/14/0d/e2c3b43bbce3cf6bd97c840b46088a3031085179e596d4929729d8d68270/PyYAML-6.0.2-cp313-cp313-win32.whl", hash = "sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183", size = 140527 },
    { url = "https://files.pythonhosted.org/packages/fa/de/02b54f42487e3d3c6efb3f89428677074ca7bf43aae402517bc7cca949f3/PyYAML-6.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563", size = 156446 },
]

[[package]]
name = "pyzmq"
version = "26.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi", marker = "implementation_name == 'pypy'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/11/b9213d25230ac18a71b39b3723494e57adebe36e066397b961657b3b41c1/pyzmq-26.4.0.tar.gz", hash = "sha256:4bd13f85f80962f91a651a7356fe0472791a5f7a92f227822b5acf44795c626d", size = 278293 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/6d/234e3b0aa82fd0290b1896e9992f56bdddf1f97266110be54d0177a9d2d9/pyzmq-26.4.0-cp311-cp311-macosx_10_15_universal2.whl", hash = "sha256:bfcf82644c9b45ddd7cd2a041f3ff8dce4a0904429b74d73a439e8cab1bd9e54", size = 1339723 },
    { url = "https://files.pythonhosted.org/packages/4f/11/6d561efe29ad83f7149a7cd48e498e539ed09019c6cd7ecc73f4cc725028/pyzmq-26.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e9bcae3979b2654d5289d3490742378b2f3ce804b0b5fd42036074e2bf35b030", size = 672645 },
    { url = "https://files.pythonhosted.org/packages/19/fd/81bfe3e23f418644660bad1a90f0d22f0b3eebe33dd65a79385530bceb3d/pyzmq-26.4.0-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ccdff8ac4246b6fb60dcf3982dfaeeff5dd04f36051fe0632748fc0aa0679c01", size = 910133 },
    { url = "https://files.pythonhosted.org/packages/97/68/321b9c775595ea3df832a9516252b653fe32818db66fdc8fa31c9b9fce37/pyzmq-26.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4550af385b442dc2d55ab7717837812799d3674cb12f9a3aa897611839c18e9e", size = 867428 },
    { url = "https://files.pythonhosted.org/packages/4e/6e/159cbf2055ef36aa2aa297e01b24523176e5b48ead283c23a94179fb2ba2/pyzmq-26.4.0-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:2f9f7ffe9db1187a253fca95191854b3fda24696f086e8789d1d449308a34b88", size = 862409 },
    { url = "https://files.pythonhosted.org/packages/05/1c/45fb8db7be5a7d0cadea1070a9cbded5199a2d578de2208197e592f219bd/pyzmq-26.4.0-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:3709c9ff7ba61589b7372923fd82b99a81932b592a5c7f1a24147c91da9a68d6", size = 1205007 },
    { url = "https://files.pythonhosted.org/packages/f8/fa/658c7f583af6498b463f2fa600f34e298e1b330886f82f1feba0dc2dd6c3/pyzmq-26.4.0-cp311-cp311-musllinux_1_1_i686.whl", hash = "sha256:f8f3c30fb2d26ae5ce36b59768ba60fb72507ea9efc72f8f69fa088450cff1df", size = 1514599 },
    { url = "https://files.pythonhosted.org/packages/4d/d7/44d641522353ce0a2bbd150379cb5ec32f7120944e6bfba4846586945658/pyzmq-26.4.0-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:382a4a48c8080e273427fc692037e3f7d2851959ffe40864f2db32646eeb3cef", size = 1414546 },
    { url = "https://files.pythonhosted.org/packages/72/76/c8ed7263218b3d1e9bce07b9058502024188bd52cc0b0a267a9513b431fc/pyzmq-26.4.0-cp311-cp311-win32.whl", hash = "sha256:d56aad0517d4c09e3b4f15adebba8f6372c5102c27742a5bdbfc74a7dceb8fca", size = 579247 },
    { url = "https://files.pythonhosted.org/packages/c3/d0/2d9abfa2571a0b1a67c0ada79a8aa1ba1cce57992d80f771abcdf99bb32c/pyzmq-26.4.0-cp311-cp311-win_amd64.whl", hash = "sha256:963977ac8baed7058c1e126014f3fe58b3773f45c78cce7af5c26c09b6823896", size = 644727 },
    { url = "https://files.pythonhosted.org/packages/0d/d1/c8ad82393be6ccedfc3c9f3adb07f8f3976e3c4802640fe3f71441941e70/pyzmq-26.4.0-cp311-cp311-win_arm64.whl", hash = "sha256:c0c8e8cadc81e44cc5088fcd53b9b3b4ce9344815f6c4a03aec653509296fae3", size = 559942 },
    { url = "https://files.pythonhosted.org/packages/10/44/a778555ebfdf6c7fc00816aad12d185d10a74d975800341b1bc36bad1187/pyzmq-26.4.0-cp312-cp312-macosx_10_15_universal2.whl", hash = "sha256:5227cb8da4b6f68acfd48d20c588197fd67745c278827d5238c707daf579227b", size = 1341586 },
    { url = "https://files.pythonhosted.org/packages/9c/4f/f3a58dc69ac757e5103be3bd41fb78721a5e17da7cc617ddb56d973a365c/pyzmq-26.4.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e1c07a7fa7f7ba86554a2b1bef198c9fed570c08ee062fd2fd6a4dcacd45f905", size = 665880 },
    { url = "https://files.pythonhosted.org/packages/fe/45/50230bcfb3ae5cb98bee683b6edeba1919f2565d7cc1851d3c38e2260795/pyzmq-26.4.0-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ae775fa83f52f52de73183f7ef5395186f7105d5ed65b1ae65ba27cb1260de2b", size = 902216 },
    { url = "https://files.pythonhosted.org/packages/41/59/56bbdc5689be5e13727491ad2ba5efd7cd564365750514f9bc8f212eef82/pyzmq-26.4.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:66c760d0226ebd52f1e6b644a9e839b5db1e107a23f2fcd46ec0569a4fdd4e63", size = 859814 },
    { url = "https://files.pythonhosted.org/packages/81/b1/57db58cfc8af592ce94f40649bd1804369c05b2190e4cbc0a2dad572baeb/pyzmq-26.4.0-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:ef8c6ecc1d520debc147173eaa3765d53f06cd8dbe7bd377064cdbc53ab456f5", size = 855889 },
    { url = "https://files.pythonhosted.org/packages/e8/92/47542e629cbac8f221c230a6d0f38dd3d9cff9f6f589ed45fdf572ffd726/pyzmq-26.4.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:3150ef4084e163dec29ae667b10d96aad309b668fac6810c9e8c27cf543d6e0b", size = 1197153 },
    { url = "https://files.pythonhosted.org/packages/07/e5/b10a979d1d565d54410afc87499b16c96b4a181af46e7645ab4831b1088c/pyzmq-26.4.0-cp312-cp312-musllinux_1_1_i686.whl", hash = "sha256:4448c9e55bf8329fa1dcedd32f661bf611214fa70c8e02fee4347bc589d39a84", size = 1507352 },
    { url = "https://files.pythonhosted.org/packages/ab/58/5a23db84507ab9c01c04b1232a7a763be66e992aa2e66498521bbbc72a71/pyzmq-26.4.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:e07dde3647afb084d985310d067a3efa6efad0621ee10826f2cb2f9a31b89d2f", size = 1406834 },
    { url = "https://files.pythonhosted.org/packages/22/74/aaa837b331580c13b79ac39396601fb361454ee184ca85e8861914769b99/pyzmq-26.4.0-cp312-cp312-win32.whl", hash = "sha256:ba034a32ecf9af72adfa5ee383ad0fd4f4e38cdb62b13624278ef768fe5b5b44", size = 577992 },
    { url = "https://files.pythonhosted.org/packages/30/0f/55f8c02c182856743b82dde46b2dc3e314edda7f1098c12a8227eeda0833/pyzmq-26.4.0-cp312-cp312-win_amd64.whl", hash = "sha256:056a97aab4064f526ecb32f4343917a4022a5d9efb6b9df990ff72e1879e40be", size = 640466 },
    { url = "https://files.pythonhosted.org/packages/e4/29/073779afc3ef6f830b8de95026ef20b2d1ec22d0324d767748d806e57379/pyzmq-26.4.0-cp312-cp312-win_arm64.whl", hash = "sha256:2f23c750e485ce1eb639dbd576d27d168595908aa2d60b149e2d9e34c9df40e0", size = 556342 },
    { url = "https://files.pythonhosted.org/packages/d7/20/fb2c92542488db70f833b92893769a569458311a76474bda89dc4264bd18/pyzmq-26.4.0-cp313-cp313-macosx_10_15_universal2.whl", hash = "sha256:c43fac689880f5174d6fc864857d1247fe5cfa22b09ed058a344ca92bf5301e3", size = 1339484 },
    { url = "https://files.pythonhosted.org/packages/58/29/2f06b9cabda3a6ea2c10f43e67ded3e47fc25c54822e2506dfb8325155d4/pyzmq-26.4.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:902aca7eba477657c5fb81c808318460328758e8367ecdd1964b6330c73cae43", size = 666106 },
    { url = "https://files.pythonhosted.org/packages/77/e4/dcf62bd29e5e190bd21bfccaa4f3386e01bf40d948c239239c2f1e726729/pyzmq-26.4.0-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e5e48a830bfd152fe17fbdeaf99ac5271aa4122521bf0d275b6b24e52ef35eb6", size = 902056 },
    { url = "https://files.pythonhosted.org/packages/1a/cf/b36b3d7aea236087d20189bec1a87eeb2b66009731d7055e5c65f845cdba/pyzmq-26.4.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:31be2b6de98c824c06f5574331f805707c667dc8f60cb18580b7de078479891e", size = 860148 },
    { url = "https://files.pythonhosted.org/packages/18/a6/f048826bc87528c208e90604c3bf573801e54bd91e390cbd2dfa860e82dc/pyzmq-26.4.0-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:6332452034be001bbf3206ac59c0d2a7713de5f25bb38b06519fc6967b7cf771", size = 855983 },
    { url = "https://files.pythonhosted.org/packages/0a/27/454d34ab6a1d9772a36add22f17f6b85baf7c16e14325fa29e7202ca8ee8/pyzmq-26.4.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:da8c0f5dd352136853e6a09b1b986ee5278dfddfebd30515e16eae425c872b30", size = 1197274 },
    { url = "https://files.pythonhosted.org/packages/f4/3d/7abfeab6b83ad38aa34cbd57c6fc29752c391e3954fd12848bd8d2ec0df6/pyzmq-26.4.0-cp313-cp313-musllinux_1_1_i686.whl", hash = "sha256:f4ccc1a0a2c9806dda2a2dd118a3b7b681e448f3bb354056cad44a65169f6d86", size = 1507120 },
    { url = "https://files.pythonhosted.org/packages/13/ff/bc8d21dbb9bc8705126e875438a1969c4f77e03fc8565d6901c7933a3d01/pyzmq-26.4.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:1c0b5fceadbab461578daf8d1dcc918ebe7ddd2952f748cf30c7cf2de5d51101", size = 1406738 },
    { url = "https://files.pythonhosted.org/packages/f5/5d/d4cd85b24de71d84d81229e3bbb13392b2698432cf8fdcea5afda253d587/pyzmq-26.4.0-cp313-cp313-win32.whl", hash = "sha256:28e2b0ff5ba4b3dd11062d905682bad33385cfa3cc03e81abd7f0822263e6637", size = 577826 },
    { url = "https://files.pythonhosted.org/packages/c6/6c/f289c1789d7bb6e5a3b3bef7b2a55089b8561d17132be7d960d3ff33b14e/pyzmq-26.4.0-cp313-cp313-win_amd64.whl", hash = "sha256:23ecc9d241004c10e8b4f49d12ac064cd7000e1643343944a10df98e57bc544b", size = 640406 },
    { url = "https://files.pythonhosted.org/packages/b3/99/676b8851cb955eb5236a0c1e9ec679ea5ede092bf8bf2c8a68d7e965cac3/pyzmq-26.4.0-cp313-cp313-win_arm64.whl", hash = "sha256:1edb0385c7f025045d6e0f759d4d3afe43c17a3d898914ec6582e6f464203c08", size = 556216 },
    { url = "https://files.pythonhosted.org/packages/65/c2/1fac340de9d7df71efc59d9c50fc7a635a77b103392d1842898dd023afcb/pyzmq-26.4.0-cp313-cp313t-macosx_10_15_universal2.whl", hash = "sha256:93a29e882b2ba1db86ba5dd5e88e18e0ac6b627026c5cfbec9983422011b82d4", size = 1333769 },
    { url = "https://files.pythonhosted.org/packages/5c/c7/6c03637e8d742c3b00bec4f5e4cd9d1c01b2f3694c6f140742e93ca637ed/pyzmq-26.4.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cb45684f276f57110bb89e4300c00f1233ca631f08f5f42528a5c408a79efc4a", size = 658826 },
    { url = "https://files.pythonhosted.org/packages/a5/97/a8dca65913c0f78e0545af2bb5078aebfc142ca7d91cdaffa1fbc73e5dbd/pyzmq-26.4.0-cp313-cp313t-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f72073e75260cb301aad4258ad6150fa7f57c719b3f498cb91e31df16784d89b", size = 891650 },
    { url = "https://files.pythonhosted.org/packages/7d/7e/f63af1031eb060bf02d033732b910fe48548dcfdbe9c785e9f74a6cc6ae4/pyzmq-26.4.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:be37e24b13026cfedd233bcbbccd8c0bcd2fdd186216094d095f60076201538d", size = 849776 },
    { url = "https://files.pythonhosted.org/packages/f6/fa/1a009ce582802a895c0d5fe9413f029c940a0a8ee828657a3bb0acffd88b/pyzmq-26.4.0-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:237b283044934d26f1eeff4075f751b05d2f3ed42a257fc44386d00df6a270cf", size = 842516 },
    { url = "https://files.pythonhosted.org/packages/6e/bc/f88b0bad0f7a7f500547d71e99f10336f2314e525d4ebf576a1ea4a1d903/pyzmq-26.4.0-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:b30f862f6768b17040929a68432c8a8be77780317f45a353cb17e423127d250c", size = 1189183 },
    { url = "https://files.pythonhosted.org/packages/d9/8c/db446a3dd9cf894406dec2e61eeffaa3c07c3abb783deaebb9812c4af6a5/pyzmq-26.4.0-cp313-cp313t-musllinux_1_1_i686.whl", hash = "sha256:c80fcd3504232f13617c6ab501124d373e4895424e65de8b72042333316f64a8", size = 1495501 },
    { url = "https://files.pythonhosted.org/packages/05/4c/bf3cad0d64c3214ac881299c4562b815f05d503bccc513e3fd4fdc6f67e4/pyzmq-26.4.0-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:26a2a7451606b87f67cdeca2c2789d86f605da08b4bd616b1a9981605ca3a364", size = 1395540 },
    { url = "https://files.pythonhosted.org/packages/04/52/a70fcd5592715702248306d8e1729c10742c2eac44529984413b05c68658/pyzmq-26.4.0-pp311-pypy311_pp73-macosx_10_15_x86_64.whl", hash = "sha256:4478b14cb54a805088299c25a79f27eaf530564a7a4f72bf432a040042b554eb", size = 834405 },
    { url = "https://files.pythonhosted.org/packages/25/f9/1a03f1accff16b3af1a6fa22cbf7ced074776abbf688b2e9cb4629700c62/pyzmq-26.4.0-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:8a28ac29c60e4ba84b5f58605ace8ad495414a724fe7aceb7cf06cd0598d04e1", size = 569578 },
    { url = "https://files.pythonhosted.org/packages/76/0c/3a633acd762aa6655fcb71fa841907eae0ab1e8582ff494b137266de341d/pyzmq-26.4.0-pp311-pypy311_pp73-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:43b03c1ceea27c6520124f4fb2ba9c647409b9abdf9a62388117148a90419494", size = 798248 },
    { url = "https://files.pythonhosted.org/packages/cd/cc/6c99c84aa60ac1cc56747bed6be8ce6305b9b861d7475772e7a25ce019d3/pyzmq-26.4.0-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7731abd23a782851426d4e37deb2057bf9410848a4459b5ede4fe89342e687a9", size = 756757 },
    { url = "https://files.pythonhosted.org/packages/13/9c/d8073bd898eb896e94c679abe82e47506e2b750eb261cf6010ced869797c/pyzmq-26.4.0-pp311-pypy311_pp73-win_amd64.whl", hash = "sha256:a222ad02fbe80166b0526c038776e8042cd4e5f0dec1489a006a1df47e9040e0", size = 555371 },
]

[[package]]
name = "redis"
version = "5.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "async-timeout", marker = "python_full_version < '3.11.3'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/47/da/d283a37303a995cd36f8b92db85135153dc4f7a8e4441aa827721b442cfb/redis-5.2.1.tar.gz", hash = "sha256:16f2e22dff21d5125e8481515e386711a34cbec50f0e44413dd7d9c060a54e0f", size = 4608355 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3c/5f/fa26b9b2672cbe30e07d9a5bdf39cf16e3b80b42916757c5f92bca88e4ba/redis-5.2.1-py3-none-any.whl", hash = "sha256:ee7e1056b9aea0f04c6c2ed59452947f34c4940ee025f5dd83e6a6418b6989e4", size = 261502 },
]

[[package]]
name = "referencing"
version = "0.36.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "attrs" },
    { name = "rpds-py" },
    { name = "typing-extensions", marker = "python_full_version < '3.13'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2f/db/98b5c277be99dd18bfd91dd04e1b759cad18d1a338188c936e92f921c7e2/referencing-0.36.2.tar.gz", hash = "sha256:df2e89862cd09deabbdba16944cc3f10feb6b3e6f18e902f7cc25609a34775aa", size = 74744 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c1/b1/3baf80dc6d2b7bc27a95a67752d0208e410351e3feb4eb78de5f77454d8d/referencing-0.36.2-py3-none-any.whl", hash = "sha256:e8699adbbf8b5c7de96d8ffa0eb5c158b3beafce084968e2ea8bb08c6794dcd0", size = 26775 },
]

[[package]]
name = "regex"
version = "2024.11.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8e/5f/bd69653fbfb76cf8604468d3b4ec4c403197144c7bfe0e6a5fc9e02a07cb/regex-2024.11.6.tar.gz", hash = "sha256:7ab159b063c52a0333c884e4679f8d7a85112ee3078fe3d9004b2dd875585519", size = 399494 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/58/58/7e4d9493a66c88a7da6d205768119f51af0f684fe7be7bac8328e217a52c/regex-2024.11.6-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:5478c6962ad548b54a591778e93cd7c456a7a29f8eca9c49e4f9a806dcc5d638", size = 482669 },
    { url = "https://files.pythonhosted.org/packages/34/4c/8f8e631fcdc2ff978609eaeef1d6994bf2f028b59d9ac67640ed051f1218/regex-2024.11.6-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2c89a8cc122b25ce6945f0423dc1352cb9593c68abd19223eebbd4e56612c5b7", size = 287684 },
    { url = "https://files.pythonhosted.org/packages/c5/1b/f0e4d13e6adf866ce9b069e191f303a30ab1277e037037a365c3aad5cc9c/regex-2024.11.6-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:94d87b689cdd831934fa3ce16cc15cd65748e6d689f5d2b8f4f4df2065c9fa20", size = 284589 },
    { url = "https://files.pythonhosted.org/packages/25/4d/ab21047f446693887f25510887e6820b93f791992994f6498b0318904d4a/regex-2024.11.6-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1062b39a0a2b75a9c694f7a08e7183a80c63c0d62b301418ffd9c35f55aaa114", size = 792121 },
    { url = "https://files.pythonhosted.org/packages/45/ee/c867e15cd894985cb32b731d89576c41a4642a57850c162490ea34b78c3b/regex-2024.11.6-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:167ed4852351d8a750da48712c3930b031f6efdaa0f22fa1933716bfcd6bf4a3", size = 831275 },
    { url = "https://files.pythonhosted.org/packages/b3/12/b0f480726cf1c60f6536fa5e1c95275a77624f3ac8fdccf79e6727499e28/regex-2024.11.6-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2d548dafee61f06ebdb584080621f3e0c23fff312f0de1afc776e2a2ba99a74f", size = 818257 },
    { url = "https://files.pythonhosted.org/packages/bf/ce/0d0e61429f603bac433910d99ef1a02ce45a8967ffbe3cbee48599e62d88/regex-2024.11.6-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f2a19f302cd1ce5dd01a9099aaa19cae6173306d1302a43b627f62e21cf18ac0", size = 792727 },
    { url = "https://files.pythonhosted.org/packages/e4/c1/243c83c53d4a419c1556f43777ccb552bccdf79d08fda3980e4e77dd9137/regex-2024.11.6-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:bec9931dfb61ddd8ef2ebc05646293812cb6b16b60cf7c9511a832b6f1854b55", size = 780667 },
    { url = "https://files.pythonhosted.org/packages/c5/f4/75eb0dd4ce4b37f04928987f1d22547ddaf6c4bae697623c1b05da67a8aa/regex-2024.11.6-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:9714398225f299aa85267fd222f7142fcb5c769e73d7733344efc46f2ef5cf89", size = 776963 },
    { url = "https://files.pythonhosted.org/packages/16/5d/95c568574e630e141a69ff8a254c2f188b4398e813c40d49228c9bbd9875/regex-2024.11.6-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:202eb32e89f60fc147a41e55cb086db2a3f8cb82f9a9a88440dcfc5d37faae8d", size = 784700 },
    { url = "https://files.pythonhosted.org/packages/8e/b5/f8495c7917f15cc6fee1e7f395e324ec3e00ab3c665a7dc9d27562fd5290/regex-2024.11.6-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:4181b814e56078e9b00427ca358ec44333765f5ca1b45597ec7446d3a1ef6e34", size = 848592 },
    { url = "https://files.pythonhosted.org/packages/1c/80/6dd7118e8cb212c3c60b191b932dc57db93fb2e36fb9e0e92f72a5909af9/regex-2024.11.6-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:068376da5a7e4da51968ce4c122a7cd31afaaec4fccc7856c92f63876e57b51d", size = 852929 },
    { url = "https://files.pythonhosted.org/packages/11/9b/5a05d2040297d2d254baf95eeeb6df83554e5e1df03bc1a6687fc4ba1f66/regex-2024.11.6-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:ac10f2c4184420d881a3475fb2c6f4d95d53a8d50209a2500723d831036f7c45", size = 781213 },
    { url = "https://files.pythonhosted.org/packages/26/b7/b14e2440156ab39e0177506c08c18accaf2b8932e39fb092074de733d868/regex-2024.11.6-cp311-cp311-win32.whl", hash = "sha256:c36f9b6f5f8649bb251a5f3f66564438977b7ef8386a52460ae77e6070d309d9", size = 261734 },
    { url = "https://files.pythonhosted.org/packages/80/32/763a6cc01d21fb3819227a1cc3f60fd251c13c37c27a73b8ff4315433a8e/regex-2024.11.6-cp311-cp311-win_amd64.whl", hash = "sha256:02e28184be537f0e75c1f9b2f8847dc51e08e6e171c6bde130b2687e0c33cf60", size = 274052 },
    { url = "https://files.pythonhosted.org/packages/ba/30/9a87ce8336b172cc232a0db89a3af97929d06c11ceaa19d97d84fa90a8f8/regex-2024.11.6-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:52fb28f528778f184f870b7cf8f225f5eef0a8f6e3778529bdd40c7b3920796a", size = 483781 },
    { url = "https://files.pythonhosted.org/packages/01/e8/00008ad4ff4be8b1844786ba6636035f7ef926db5686e4c0f98093612add/regex-2024.11.6-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:fdd6028445d2460f33136c55eeb1f601ab06d74cb3347132e1c24250187500d9", size = 288455 },
    { url = "https://files.pythonhosted.org/packages/60/85/cebcc0aff603ea0a201667b203f13ba75d9fc8668fab917ac5b2de3967bc/regex-2024.11.6-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:805e6b60c54bf766b251e94526ebad60b7de0c70f70a4e6210ee2891acb70bf2", size = 284759 },
    { url = "https://files.pythonhosted.org/packages/94/2b/701a4b0585cb05472a4da28ee28fdfe155f3638f5e1ec92306d924e5faf0/regex-2024.11.6-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b85c2530be953a890eaffde05485238f07029600e8f098cdf1848d414a8b45e4", size = 794976 },
    { url = "https://files.pythonhosted.org/packages/4b/bf/fa87e563bf5fee75db8915f7352e1887b1249126a1be4813837f5dbec965/regex-2024.11.6-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bb26437975da7dc36b7efad18aa9dd4ea569d2357ae6b783bf1118dabd9ea577", size = 833077 },
    { url = "https://files.pythonhosted.org/packages/a1/56/7295e6bad94b047f4d0834e4779491b81216583c00c288252ef625c01d23/regex-2024.11.6-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:abfa5080c374a76a251ba60683242bc17eeb2c9818d0d30117b4486be10c59d3", size = 823160 },
    { url = "https://files.pythonhosted.org/packages/fb/13/e3b075031a738c9598c51cfbc4c7879e26729c53aa9cca59211c44235314/regex-2024.11.6-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b7fa6606c2881c1db9479b0eaa11ed5dfa11c8d60a474ff0e095099f39d98e", size = 796896 },
    { url = "https://files.pythonhosted.org/packages/24/56/0b3f1b66d592be6efec23a795b37732682520b47c53da5a32c33ed7d84e3/regex-2024.11.6-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0c32f75920cf99fe6b6c539c399a4a128452eaf1af27f39bce8909c9a3fd8cbe", size = 783997 },
    { url = "https://files.pythonhosted.org/packages/f9/a1/eb378dada8b91c0e4c5f08ffb56f25fcae47bf52ad18f9b2f33b83e6d498/regex-2024.11.6-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:982e6d21414e78e1f51cf595d7f321dcd14de1f2881c5dc6a6e23bbbbd68435e", size = 781725 },
    { url = "https://files.pythonhosted.org/packages/83/f2/033e7dec0cfd6dda93390089864732a3409246ffe8b042e9554afa9bff4e/regex-2024.11.6-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:a7c2155f790e2fb448faed6dd241386719802296ec588a8b9051c1f5c481bc29", size = 789481 },
    { url = "https://files.pythonhosted.org/packages/83/23/15d4552ea28990a74e7696780c438aadd73a20318c47e527b47a4a5a596d/regex-2024.11.6-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:149f5008d286636e48cd0b1dd65018548944e495b0265b45e1bffecce1ef7f39", size = 852896 },
    { url = "https://files.pythonhosted.org/packages/e3/39/ed4416bc90deedbfdada2568b2cb0bc1fdb98efe11f5378d9892b2a88f8f/regex-2024.11.6-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:e5364a4502efca094731680e80009632ad6624084aff9a23ce8c8c6820de3e51", size = 860138 },
    { url = "https://files.pythonhosted.org/packages/93/2d/dd56bb76bd8e95bbce684326302f287455b56242a4f9c61f1bc76e28360e/regex-2024.11.6-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:0a86e7eeca091c09e021db8eb72d54751e527fa47b8d5787caf96d9831bd02ad", size = 787692 },
    { url = "https://files.pythonhosted.org/packages/0b/55/31877a249ab7a5156758246b9c59539abbeba22461b7d8adc9e8475ff73e/regex-2024.11.6-cp312-cp312-win32.whl", hash = "sha256:32f9a4c643baad4efa81d549c2aadefaeba12249b2adc5af541759237eee1c54", size = 262135 },
    { url = "https://files.pythonhosted.org/packages/38/ec/ad2d7de49a600cdb8dd78434a1aeffe28b9d6fc42eb36afab4a27ad23384/regex-2024.11.6-cp312-cp312-win_amd64.whl", hash = "sha256:a93c194e2df18f7d264092dc8539b8ffb86b45b899ab976aa15d48214138e81b", size = 273567 },
    { url = "https://files.pythonhosted.org/packages/90/73/bcb0e36614601016552fa9344544a3a2ae1809dc1401b100eab02e772e1f/regex-2024.11.6-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a6ba92c0bcdf96cbf43a12c717eae4bc98325ca3730f6b130ffa2e3c3c723d84", size = 483525 },
    { url = "https://files.pythonhosted.org/packages/0f/3f/f1a082a46b31e25291d830b369b6b0c5576a6f7fb89d3053a354c24b8a83/regex-2024.11.6-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:525eab0b789891ac3be914d36893bdf972d483fe66551f79d3e27146191a37d4", size = 288324 },
    { url = "https://files.pythonhosted.org/packages/09/c9/4e68181a4a652fb3ef5099e077faf4fd2a694ea6e0f806a7737aff9e758a/regex-2024.11.6-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:086a27a0b4ca227941700e0b31425e7a28ef1ae8e5e05a33826e17e47fbfdba0", size = 284617 },
    { url = "https://files.pythonhosted.org/packages/fc/fd/37868b75eaf63843165f1d2122ca6cb94bfc0271e4428cf58c0616786dce/regex-2024.11.6-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:bde01f35767c4a7899b7eb6e823b125a64de314a8ee9791367c9a34d56af18d0", size = 795023 },
    { url = "https://files.pythonhosted.org/packages/c4/7c/d4cd9c528502a3dedb5c13c146e7a7a539a3853dc20209c8e75d9ba9d1b2/regex-2024.11.6-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b583904576650166b3d920d2bcce13971f6f9e9a396c673187f49811b2769dc7", size = 833072 },
    { url = "https://files.pythonhosted.org/packages/4f/db/46f563a08f969159c5a0f0e722260568425363bea43bb7ae370becb66a67/regex-2024.11.6-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1c4de13f06a0d54fa0d5ab1b7138bfa0d883220965a29616e3ea61b35d5f5fc7", size = 823130 },
    { url = "https://files.pythonhosted.org/packages/db/60/1eeca2074f5b87df394fccaa432ae3fc06c9c9bfa97c5051aed70e6e00c2/regex-2024.11.6-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3cde6e9f2580eb1665965ce9bf17ff4952f34f5b126beb509fee8f4e994f143c", size = 796857 },
    { url = "https://files.pythonhosted.org/packages/10/db/ac718a08fcee981554d2f7bb8402f1faa7e868c1345c16ab1ebec54b0d7b/regex-2024.11.6-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0d7f453dca13f40a02b79636a339c5b62b670141e63efd511d3f8f73fba162b3", size = 784006 },
    { url = "https://files.pythonhosted.org/packages/c2/41/7da3fe70216cea93144bf12da2b87367590bcf07db97604edeea55dac9ad/regex-2024.11.6-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:59dfe1ed21aea057a65c6b586afd2a945de04fc7db3de0a6e3ed5397ad491b07", size = 781650 },
    { url = "https://files.pythonhosted.org/packages/a7/d5/880921ee4eec393a4752e6ab9f0fe28009435417c3102fc413f3fe81c4e5/regex-2024.11.6-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:b97c1e0bd37c5cd7902e65f410779d39eeda155800b65fc4d04cc432efa9bc6e", size = 789545 },
    { url = "https://files.pythonhosted.org/packages/dc/96/53770115e507081122beca8899ab7f5ae28ae790bfcc82b5e38976df6a77/regex-2024.11.6-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f9d1e379028e0fc2ae3654bac3cbbef81bf3fd571272a42d56c24007979bafb6", size = 853045 },
    { url = "https://files.pythonhosted.org/packages/31/d3/1372add5251cc2d44b451bd94f43b2ec78e15a6e82bff6a290ef9fd8f00a/regex-2024.11.6-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:13291b39131e2d002a7940fb176e120bec5145f3aeb7621be6534e46251912c4", size = 860182 },
    { url = "https://files.pythonhosted.org/packages/ed/e3/c446a64984ea9f69982ba1a69d4658d5014bc7a0ea468a07e1a1265db6e2/regex-2024.11.6-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4f51f88c126370dcec4908576c5a627220da6c09d0bff31cfa89f2523843316d", size = 787733 },
    { url = "https://files.pythonhosted.org/packages/2b/f1/e40c8373e3480e4f29f2692bd21b3e05f296d3afebc7e5dcf21b9756ca1c/regex-2024.11.6-cp313-cp313-win32.whl", hash = "sha256:63b13cfd72e9601125027202cad74995ab26921d8cd935c25f09c630436348ff", size = 262122 },
    { url = "https://files.pythonhosted.org/packages/45/94/bc295babb3062a731f52621cdc992d123111282e291abaf23faa413443ea/regex-2024.11.6-cp313-cp313-win_amd64.whl", hash = "sha256:2b3361af3198667e99927da8b84c1b010752fa4b1115ee30beaa332cabc3ef1a", size = 273545 },
]

[[package]]
name = "requests"
version = "2.32.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "idna" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/63/70/2bf7780ad2d390a8d301ad0b550f1581eadbd9a20f896afe06353c2a2913/requests-2.32.3.tar.gz", hash = "sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760", size = 131218 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/9b/335f9764261e915ed497fcdeb11df5dfd6f7bf257d4a6a2a686d80da4d54/requests-2.32.3-py3-none-any.whl", hash = "sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6", size = 64928 },
]

[[package]]
name = "requests-file"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/72/97/bf44e6c6bd8ddbb99943baf7ba8b1a8485bcd2fe0e55e5708d7fee4ff1ae/requests_file-2.1.0.tar.gz", hash = "sha256:0f549a3f3b0699415ac04d167e9cb39bccfb730cb832b4d20be3d9867356e658", size = 6891 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/25/dd878a121fcfdf38f52850f11c512e13ec87c2ea72385933818e5b6c15ce/requests_file-2.1.0-py2.py3-none-any.whl", hash = "sha256:cf270de5a4c5874e84599fc5778303d496c10ae5e870bfa378818f35d21bda5c", size = 4244 },
]

[[package]]
name = "requests-toolbelt"
version = "1.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f3/61/d7545dafb7ac2230c70d38d31cbfe4cc64f7144dc41f6e4e4b78ecd9f5bb/requests-toolbelt-1.0.0.tar.gz", hash = "sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6", size = 206888 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3f/51/d4db610ef29373b879047326cbf6fa98b6c1969d6f6dc423279de2b1be2c/requests_toolbelt-1.0.0-py2.py3-none-any.whl", hash = "sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06", size = 54481 },
]

[[package]]
name = "rfc3339-validator"
version = "0.1.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/28/ea/a9387748e2d111c3c2b275ba970b735e04e15cdb1eb30693b6b5708c4dbd/rfc3339_validator-0.1.4.tar.gz", hash = "sha256:138a2abdf93304ad60530167e51d2dfb9549521a836871b88d7f4695d0022f6b", size = 5513 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7b/44/4e421b96b67b2daff264473f7465db72fbdf36a07e05494f50300cc7b0c6/rfc3339_validator-0.1.4-py2.py3-none-any.whl", hash = "sha256:24f6ec1eda14ef823da9e36ec7113124b39c04d50a4d3d3a3c2859577e7791fa", size = 3490 },
]

[[package]]
name = "rfc3986-validator"
version = "0.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/da/88/f270de456dd7d11dcc808abfa291ecdd3f45ff44e3b549ffa01b126464d0/rfc3986_validator-0.1.1.tar.gz", hash = "sha256:3d44bde7921b3b9ec3ae4e3adca370438eccebc676456449b145d533b240d055", size = 6760 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9e/51/17023c0f8f1869d8806b979a2bffa3f861f26a3f1a66b094288323fba52f/rfc3986_validator-0.1.1-py2.py3-none-any.whl", hash = "sha256:2f235c432ef459970b4306369336b9d5dbdda31b510ca1e327636e01f528bfa9", size = 4242 },
]

[[package]]
name = "rich"
version = "14.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markdown-it-py" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a1/53/830aa4c3066a8ab0ae9a9955976fb770fe9c6102117c8ec4ab3ea62d89e8/rich-14.0.0.tar.gz", hash = "sha256:82f1bc23a6a21ebca4ae0c45af9bdbc492ed20231dcb63f297d6d1021a9d5725", size = 224078 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0d/9b/63f4c7ebc259242c89b3acafdb37b41d1185c07ff0011164674e9076b491/rich-14.0.0-py3-none-any.whl", hash = "sha256:1c9491e1951aac09caffd42f448ee3d04e58923ffe14993f6e83068dc395d7e0", size = 243229 },
]

[[package]]
name = "rpds-py"
version = "0.24.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0b/b3/52b213298a0ba7097c7ea96bee95e1947aa84cc816d48cebb539770cdf41/rpds_py-0.24.0.tar.gz", hash = "sha256:772cc1b2cd963e7e17e6cc55fe0371fb9c704d63e44cacec7b9b7f523b78919e", size = 26863 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/80/e6/c1458bbfb257448fdb2528071f1f4e19e26798ed5ef6d47d7aab0cb69661/rpds_py-0.24.0-cp311-cp311-macosx_10_12_x86_64.whl", hash = "sha256:2d3ee4615df36ab8eb16c2507b11e764dcc11fd350bbf4da16d09cda11fcedef", size = 377679 },
    { url = "https://files.pythonhosted.org/packages/dd/26/ea4181ef78f58b2c167548c6a833d7dc22408e5b3b181bda9dda440bb92d/rpds_py-0.24.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:e13ae74a8a3a0c2f22f450f773e35f893484fcfacb00bb4344a7e0f4f48e1f97", size = 362571 },
    { url = "https://files.pythonhosted.org/packages/56/fa/1ec54dd492c64c280a2249a047fc3369e2789dc474eac20445ebfc72934b/rpds_py-0.24.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cf86f72d705fc2ef776bb7dd9e5fbba79d7e1f3e258bf9377f8204ad0fc1c51e", size = 388012 },
    { url = "https://files.pythonhosted.org/packages/3a/be/bad8b0e0f7e58ef4973bb75e91c472a7d51da1977ed43b09989264bf065c/rpds_py-0.24.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:c43583ea8517ed2e780a345dd9960896afc1327e8cf3ac8239c167530397440d", size = 394730 },
    { url = "https://files.pythonhosted.org/packages/35/56/ab417fc90c21826df048fc16e55316ac40876e4b790104ececcbce813d8f/rpds_py-0.24.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4cd031e63bc5f05bdcda120646a0d32f6d729486d0067f09d79c8db5368f4586", size = 448264 },
    { url = "https://files.pythonhosted.org/packages/b6/75/4c63862d5c05408589196c8440a35a14ea4ae337fa70ded1f03638373f06/rpds_py-0.24.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:34d90ad8c045df9a4259c47d2e16a3f21fdb396665c94520dbfe8766e62187a4", size = 446813 },
    { url = "https://files.pythonhosted.org/packages/e7/0c/91cf17dffa9a38835869797a9f041056091ebba6a53963d3641207e3d467/rpds_py-0.24.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e838bf2bb0b91ee67bf2b889a1a841e5ecac06dd7a2b1ef4e6151e2ce155c7ae", size = 389438 },
    { url = "https://files.pythonhosted.org/packages/1b/b0/60e6c72727c978276e02851819f3986bc40668f115be72c1bc4d922c950f/rpds_py-0.24.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04ecf5c1ff4d589987b4d9882872f80ba13da7d42427234fce8f22efb43133bc", size = 420416 },
    { url = "https://files.pythonhosted.org/packages/a1/d7/f46f85b9f863fb59fd3c534b5c874c48bee86b19e93423b9da8784605415/rpds_py-0.24.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:630d3d8ea77eabd6cbcd2ea712e1c5cecb5b558d39547ac988351195db433f6c", size = 565236 },
    { url = "https://files.pythonhosted.org/packages/2a/d1/1467620ded6dd70afc45ec822cdf8dfe7139537780d1f3905de143deb6fd/rpds_py-0.24.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:ebcb786b9ff30b994d5969213a8430cbb984cdd7ea9fd6df06663194bd3c450c", size = 592016 },
    { url = "https://files.pythonhosted.org/packages/5d/13/fb1ded2e6adfaa0c0833106c42feb290973f665300f4facd5bf5d7891d9c/rpds_py-0.24.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:174e46569968ddbbeb8a806d9922f17cd2b524aa753b468f35b97ff9c19cb718", size = 560123 },
    { url = "https://files.pythonhosted.org/packages/1e/df/09fc1857ac7cc2eb16465a7199c314cbce7edde53c8ef21d615410d7335b/rpds_py-0.24.0-cp311-cp311-win32.whl", hash = "sha256:5ef877fa3bbfb40b388a5ae1cb00636a624690dcb9a29a65267054c9ea86d88a", size = 222256 },
    { url = "https://files.pythonhosted.org/packages/ff/25/939b40bc4d54bf910e5ee60fb5af99262c92458f4948239e8c06b0b750e7/rpds_py-0.24.0-cp311-cp311-win_amd64.whl", hash = "sha256:e274f62cbd274359eff63e5c7e7274c913e8e09620f6a57aae66744b3df046d6", size = 234718 },
    { url = "https://files.pythonhosted.org/packages/1a/e0/1c55f4a3be5f1ca1a4fd1f3ff1504a1478c1ed48d84de24574c4fa87e921/rpds_py-0.24.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:d8551e733626afec514b5d15befabea0dd70a343a9f23322860c4f16a9430205", size = 366945 },
    { url = "https://files.pythonhosted.org/packages/39/1b/a3501574fbf29118164314dbc800d568b8c1c7b3258b505360e8abb3902c/rpds_py-0.24.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:0e374c0ce0ca82e5b67cd61fb964077d40ec177dd2c4eda67dba130de09085c7", size = 351935 },
    { url = "https://files.pythonhosted.org/packages/dc/47/77d3d71c55f6a374edde29f1aca0b2e547325ed00a9da820cabbc9497d2b/rpds_py-0.24.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d69d003296df4840bd445a5d15fa5b6ff6ac40496f956a221c4d1f6f7b4bc4d9", size = 390817 },
    { url = "https://files.pythonhosted.org/packages/4e/ec/1e336ee27484379e19c7f9cc170f4217c608aee406d3ae3a2e45336bff36/rpds_py-0.24.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:8212ff58ac6dfde49946bea57474a386cca3f7706fc72c25b772b9ca4af6b79e", size = 401983 },
    { url = "https://files.pythonhosted.org/packages/07/f8/39b65cbc272c635eaea6d393c2ad1ccc81c39eca2db6723a0ca4b2108fce/rpds_py-0.24.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:528927e63a70b4d5f3f5ccc1fa988a35456eb5d15f804d276709c33fc2f19bda", size = 451719 },
    { url = "https://files.pythonhosted.org/packages/32/05/05c2b27dd9c30432f31738afed0300659cb9415db0ff7429b05dfb09bbde/rpds_py-0.24.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a824d2c7a703ba6daaca848f9c3d5cb93af0505be505de70e7e66829affd676e", size = 442546 },
    { url = "https://files.pythonhosted.org/packages/7d/e0/19383c8b5d509bd741532a47821c3e96acf4543d0832beba41b4434bcc49/rpds_py-0.24.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:44d51febb7a114293ffd56c6cf4736cb31cd68c0fddd6aa303ed09ea5a48e029", size = 393695 },
    { url = "https://files.pythonhosted.org/packages/9d/15/39f14e96d94981d0275715ae8ea564772237f3fa89bc3c21e24de934f2c7/rpds_py-0.24.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:3fab5f4a2c64a8fb64fc13b3d139848817a64d467dd6ed60dcdd6b479e7febc9", size = 427218 },
    { url = "https://files.pythonhosted.org/packages/22/b9/12da7124905a680f690da7a9de6f11de770b5e359f5649972f7181c8bf51/rpds_py-0.24.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:9be4f99bee42ac107870c61dfdb294d912bf81c3c6d45538aad7aecab468b6b7", size = 568062 },
    { url = "https://files.pythonhosted.org/packages/88/17/75229017a2143d915f6f803721a6d721eca24f2659c5718a538afa276b4f/rpds_py-0.24.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:564c96b6076a98215af52f55efa90d8419cc2ef45d99e314fddefe816bc24f91", size = 596262 },
    { url = "https://files.pythonhosted.org/packages/aa/64/8e8a1d8bd1b6b638d6acb6d41ab2cec7f2067a5b8b4c9175703875159a7c/rpds_py-0.24.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:75a810b7664c17f24bf2ffd7f92416c00ec84b49bb68e6a0d93e542406336b56", size = 564306 },
    { url = "https://files.pythonhosted.org/packages/68/1c/a7eac8d8ed8cb234a9b1064647824c387753343c3fab6ed7c83481ed0be7/rpds_py-0.24.0-cp312-cp312-win32.whl", hash = "sha256:f6016bd950be4dcd047b7475fdf55fb1e1f59fc7403f387be0e8123e4a576d30", size = 224281 },
    { url = "https://files.pythonhosted.org/packages/bb/46/b8b5424d1d21f2f2f3f2d468660085318d4f74a8df8289e3dd6ad224d488/rpds_py-0.24.0-cp312-cp312-win_amd64.whl", hash = "sha256:998c01b8e71cf051c28f5d6f1187abbdf5cf45fc0efce5da6c06447cba997034", size = 239719 },
    { url = "https://files.pythonhosted.org/packages/9d/c3/3607abc770395bc6d5a00cb66385a5479fb8cd7416ddef90393b17ef4340/rpds_py-0.24.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:3d2d8e4508e15fc05b31285c4b00ddf2e0eb94259c2dc896771966a163122a0c", size = 367072 },
    { url = "https://files.pythonhosted.org/packages/d8/35/8c7ee0fe465793e3af3298dc5a9f3013bd63e7a69df04ccfded8293a4982/rpds_py-0.24.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0f00c16e089282ad68a3820fd0c831c35d3194b7cdc31d6e469511d9bffc535c", size = 351919 },
    { url = "https://files.pythonhosted.org/packages/91/d3/7e1b972501eb5466b9aca46a9c31bcbbdc3ea5a076e9ab33f4438c1d069d/rpds_py-0.24.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:951cc481c0c395c4a08639a469d53b7d4afa252529a085418b82a6b43c45c240", size = 390360 },
    { url = "https://files.pythonhosted.org/packages/a2/a8/ccabb50d3c91c26ad01f9b09a6a3b03e4502ce51a33867c38446df9f896b/rpds_py-0.24.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:c9ca89938dff18828a328af41ffdf3902405a19f4131c88e22e776a8e228c5a8", size = 400704 },
    { url = "https://files.pythonhosted.org/packages/53/ae/5fa5bf0f3bc6ce21b5ea88fc0ecd3a439e7cb09dd5f9ffb3dbe1b6894fc5/rpds_py-0.24.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ed0ef550042a8dbcd657dfb284a8ee00f0ba269d3f2286b0493b15a5694f9fe8", size = 450839 },
    { url = "https://files.pythonhosted.org/packages/e3/ac/c4e18b36d9938247e2b54f6a03746f3183ca20e1edd7d3654796867f5100/rpds_py-0.24.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2b2356688e5d958c4d5cb964af865bea84db29971d3e563fb78e46e20fe1848b", size = 441494 },
    { url = "https://files.pythonhosted.org/packages/bf/08/b543969c12a8f44db6c0f08ced009abf8f519191ca6985509e7c44102e3c/rpds_py-0.24.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:78884d155fd15d9f64f5d6124b486f3d3f7fd7cd71a78e9670a0f6f6ca06fb2d", size = 393185 },
    { url = "https://files.pythonhosted.org/packages/da/7e/f6eb6a7042ce708f9dfc781832a86063cea8a125bbe451d663697b51944f/rpds_py-0.24.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:6a4a535013aeeef13c5532f802708cecae8d66c282babb5cd916379b72110cf7", size = 426168 },
    { url = "https://files.pythonhosted.org/packages/38/b0/6cd2bb0509ac0b51af4bb138e145b7c4c902bb4b724d6fd143689d6e0383/rpds_py-0.24.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:84e0566f15cf4d769dade9b366b7b87c959be472c92dffb70462dd0844d7cbad", size = 567622 },
    { url = "https://files.pythonhosted.org/packages/64/b0/c401f4f077547d98e8b4c2ec6526a80e7cb04f519d416430ec1421ee9e0b/rpds_py-0.24.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:823e74ab6fbaa028ec89615ff6acb409e90ff45580c45920d4dfdddb069f2120", size = 595435 },
    { url = "https://files.pythonhosted.org/packages/9f/ec/7993b6e803294c87b61c85bd63e11142ccfb2373cf88a61ec602abcbf9d6/rpds_py-0.24.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:c61a2cb0085c8783906b2f8b1f16a7e65777823c7f4d0a6aaffe26dc0d358dd9", size = 563762 },
    { url = "https://files.pythonhosted.org/packages/1f/29/4508003204cb2f461dc2b83dd85f8aa2b915bc98fe6046b9d50d4aa05401/rpds_py-0.24.0-cp313-cp313-win32.whl", hash = "sha256:60d9b630c8025b9458a9d114e3af579a2c54bd32df601c4581bd054e85258143", size = 223510 },
    { url = "https://files.pythonhosted.org/packages/f9/12/09e048d1814195e01f354155fb772fb0854bd3450b5f5a82224b3a319f0e/rpds_py-0.24.0-cp313-cp313-win_amd64.whl", hash = "sha256:6eea559077d29486c68218178ea946263b87f1c41ae7f996b1f30a983c476a5a", size = 239075 },
    { url = "https://files.pythonhosted.org/packages/d2/03/5027cde39bb2408d61e4dd0cf81f815949bb629932a6c8df1701d0257fc4/rpds_py-0.24.0-cp313-cp313t-macosx_10_12_x86_64.whl", hash = "sha256:d09dc82af2d3c17e7dd17120b202a79b578d79f2b5424bda209d9966efeed114", size = 362974 },
    { url = "https://files.pythonhosted.org/packages/bf/10/24d374a2131b1ffafb783e436e770e42dfdb74b69a2cd25eba8c8b29d861/rpds_py-0.24.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:5fc13b44de6419d1e7a7e592a4885b323fbc2f46e1f22151e3a8ed3b8b920405", size = 348730 },
    { url = "https://files.pythonhosted.org/packages/7a/d1/1ef88d0516d46cd8df12e5916966dbf716d5ec79b265eda56ba1b173398c/rpds_py-0.24.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c347a20d79cedc0a7bd51c4d4b7dbc613ca4e65a756b5c3e57ec84bd43505b47", size = 387627 },
    { url = "https://files.pythonhosted.org/packages/4e/35/07339051b8b901ecefd449ebf8e5522e92bcb95e1078818cbfd9db8e573c/rpds_py-0.24.0-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:20f2712bd1cc26a3cc16c5a1bfee9ed1abc33d4cdf1aabd297fe0eb724df4272", size = 394094 },
    { url = "https://files.pythonhosted.org/packages/dc/62/ee89ece19e0ba322b08734e95441952062391065c157bbd4f8802316b4f1/rpds_py-0.24.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:aad911555286884be1e427ef0dc0ba3929e6821cbeca2194b13dc415a462c7fd", size = 449639 },
    { url = "https://files.pythonhosted.org/packages/15/24/b30e9f9e71baa0b9dada3a4ab43d567c6b04a36d1cb531045f7a8a0a7439/rpds_py-0.24.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0aeb3329c1721c43c58cae274d7d2ca85c1690d89485d9c63a006cb79a85771a", size = 438584 },
    { url = "https://files.pythonhosted.org/packages/28/d9/49f7b8f3b4147db13961e19d5e30077cd0854ccc08487026d2cb2142aa4a/rpds_py-0.24.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2a0f156e9509cee987283abd2296ec816225145a13ed0391df8f71bf1d789e2d", size = 391047 },
    { url = "https://files.pythonhosted.org/packages/49/b0/e66918d0972c33a259ba3cd7b7ff10ed8bd91dbcfcbec6367b21f026db75/rpds_py-0.24.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:aa6800adc8204ce898c8a424303969b7aa6a5e4ad2789c13f8648739830323b7", size = 418085 },
    { url = "https://files.pythonhosted.org/packages/e1/6b/99ed7ea0a94c7ae5520a21be77a82306aac9e4e715d4435076ead07d05c6/rpds_py-0.24.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:a18fc371e900a21d7392517c6f60fe859e802547309e94313cd8181ad9db004d", size = 564498 },
    { url = "https://files.pythonhosted.org/packages/28/26/1cacfee6b800e6fb5f91acecc2e52f17dbf8b0796a7c984b4568b6d70e38/rpds_py-0.24.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:9168764133fd919f8dcca2ead66de0105f4ef5659cbb4fa044f7014bed9a1797", size = 590202 },
    { url = "https://files.pythonhosted.org/packages/a9/9e/57bd2f9fba04a37cef673f9a66b11ca8c43ccdd50d386c455cd4380fe461/rpds_py-0.24.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:5f6e3cec44ba05ee5cbdebe92d052f69b63ae792e7d05f1020ac5e964394080c", size = 561771 },
    { url = "https://files.pythonhosted.org/packages/9f/cf/b719120f375ab970d1c297dbf8de1e3c9edd26fe92c0ed7178dd94b45992/rpds_py-0.24.0-cp313-cp313t-win32.whl", hash = "sha256:8ebc7e65ca4b111d928b669713865f021b7773350eeac4a31d3e70144297baba", size = 221195 },
    { url = "https://files.pythonhosted.org/packages/2d/e5/22865285789f3412ad0c3d7ec4dc0a3e86483b794be8a5d9ed5a19390900/rpds_py-0.24.0-cp313-cp313t-win_amd64.whl", hash = "sha256:675269d407a257b8c00a6b58205b72eec8231656506c56fd429d924ca00bb350", size = 237354 },
    { url = "https://files.pythonhosted.org/packages/65/53/40bcc246a8354530d51a26d2b5b9afd1deacfb0d79e67295cc74df362f52/rpds_py-0.24.0-pp311-pypy311_pp73-macosx_10_12_x86_64.whl", hash = "sha256:f9e0057a509e096e47c87f753136c9b10d7a91842d8042c2ee6866899a717c0d", size = 378386 },
    { url = "https://files.pythonhosted.org/packages/80/b0/5ea97dd2f53e3618560aa1f9674e896e63dff95a9b796879a201bc4c1f00/rpds_py-0.24.0-pp311-pypy311_pp73-macosx_11_0_arm64.whl", hash = "sha256:d6e109a454412ab82979c5b1b3aee0604eca4bbf9a02693bb9df027af2bfa91a", size = 363440 },
    { url = "https://files.pythonhosted.org/packages/57/9d/259b6eada6f747cdd60c9a5eb3efab15f6704c182547149926c38e5bd0d5/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:fc1c892b1ec1f8cbd5da8de287577b455e388d9c328ad592eabbdcb6fc93bee5", size = 388816 },
    { url = "https://files.pythonhosted.org/packages/94/c1/faafc7183712f89f4b7620c3c15979ada13df137d35ef3011ae83e93b005/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:9c39438c55983d48f4bb3487734d040e22dad200dab22c41e331cee145e7a50d", size = 395058 },
    { url = "https://files.pythonhosted.org/packages/6c/96/d7fa9d2a7b7604a61da201cc0306a355006254942093779d7121c64700ce/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9d7e8ce990ae17dda686f7e82fd41a055c668e13ddcf058e7fb5e9da20b57793", size = 448692 },
    { url = "https://files.pythonhosted.org/packages/96/37/a3146c6eebc65d6d8c96cc5ffdcdb6af2987412c789004213227fbe52467/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9ea7f4174d2e4194289cb0c4e172d83e79a6404297ff95f2875cf9ac9bced8ba", size = 446462 },
    { url = "https://files.pythonhosted.org/packages/1f/13/6481dfd9ac7de43acdaaa416e3a7da40bc4bb8f5c6ca85e794100aa54596/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bb2954155bb8f63bb19d56d80e5e5320b61d71084617ed89efedb861a684baea", size = 390460 },
    { url = "https://files.pythonhosted.org/packages/61/e1/37e36bce65e109543cc4ff8d23206908649023549604fa2e7fbeba5342f7/rpds_py-0.24.0-pp311-pypy311_pp73-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04f2b712a2206e13800a8136b07aaedc23af3facab84918e7aa89e4be0260032", size = 421609 },
    { url = "https://files.pythonhosted.org/packages/20/dd/1f1a923d6cd798b8582176aca8a0784676f1a0449fb6f07fce6ac1cdbfb6/rpds_py-0.24.0-pp311-pypy311_pp73-musllinux_1_2_aarch64.whl", hash = "sha256:eda5c1e2a715a4cbbca2d6d304988460942551e4e5e3b7457b50943cd741626d", size = 565818 },
    { url = "https://files.pythonhosted.org/packages/56/ec/d8da6df6a1eb3a418944a17b1cb38dd430b9e5a2e972eafd2b06f10c7c46/rpds_py-0.24.0-pp311-pypy311_pp73-musllinux_1_2_i686.whl", hash = "sha256:9abc80fe8c1f87218db116016de575a7998ab1629078c90840e8d11ab423ee25", size = 592627 },
    { url = "https://files.pythonhosted.org/packages/b3/14/c492b9c7d5dd133e13f211ddea6bb9870f99e4f73932f11aa00bc09a9be9/rpds_py-0.24.0-pp311-pypy311_pp73-musllinux_1_2_x86_64.whl", hash = "sha256:6a727fd083009bc83eb83d6950f0c32b3c94c8b80a9b667c87f4bd1274ca30ba", size = 560885 },
]

[[package]]
name = "rq"
version = "2.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "redis" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8f/51/15482430f8774b6e22b24a1a51bdda52c2926ebaf8175a9936140317f56e/rq-2.3.1.tar.gz", hash = "sha256:9cb33be7a90c6b36c0d6b9a6524aaf85b8855251ace476d74a076e6dfc5684d6", size = 649084 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b4/4b/ae55d7ec548d5f77cb8cfee59d78725c4e26bdf9c052b9d0b4726ceca98c/rq-2.3.1-py3-none-any.whl", hash = "sha256:2bbd48b976fdd840865dcab4bed358eb94b4dd8a02e92add75a346a909c1793d", size = 100363 },
]

[[package]]
name = "rsa"
version = "4.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/aa/65/7d973b89c4d2351d7fb232c2e452547ddfa243e93131e7cfa766da627b52/rsa-4.9.tar.gz", hash = "sha256:e38464a49c6c85d7f1351b0126661487a7e0a14a50f1675ec50eb34d4f20ef21", size = 29711 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/49/97/fa78e3d2f65c02c8e1268b9aba606569fe97f6c8f7c2d74394553347c145/rsa-4.9-py3-none-any.whl", hash = "sha256:90260d9058e514786967344d0ef75fa8727eed8a7d2e43ce9f4bcf1b536174f7", size = 34315 },
]

[[package]]
name = "ruff"
version = "0.11.5"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/45/71/5759b2a6b2279bb77fe15b1435b89473631c2cd6374d45ccdb6b785810be/ruff-0.11.5.tar.gz", hash = "sha256:cae2e2439cb88853e421901ec040a758960b576126dab520fa08e9de431d1bef", size = 3976488 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/23/db/6efda6381778eec7f35875b5cbefd194904832a1153d68d36d6b269d81a8/ruff-0.11.5-py3-none-linux_armv6l.whl", hash = "sha256:2561294e108eb648e50f210671cc56aee590fb6167b594144401532138c66c7b", size = 10103150 },
    { url = "https://files.pythonhosted.org/packages/44/f2/06cd9006077a8db61956768bc200a8e52515bf33a8f9b671ee527bb10d77/ruff-0.11.5-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:ac12884b9e005c12d0bd121f56ccf8033e1614f736f766c118ad60780882a077", size = 10898637 },
    { url = "https://files.pythonhosted.org/packages/18/f5/af390a013c56022fe6f72b95c86eb7b2585c89cc25d63882d3bfe411ecf1/ruff-0.11.5-py3-none-macosx_11_0_arm64.whl", hash = "sha256:4bfd80a6ec559a5eeb96c33f832418bf0fb96752de0539905cf7b0cc1d31d779", size = 10236012 },
    { url = "https://files.pythonhosted.org/packages/b8/ca/b9bf954cfed165e1a0c24b86305d5c8ea75def256707f2448439ac5e0d8b/ruff-0.11.5-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0947c0a1afa75dcb5db4b34b070ec2bccee869d40e6cc8ab25aca11a7d527794", size = 10415338 },
    { url = "https://files.pythonhosted.org/packages/d9/4d/2522dde4e790f1b59885283f8786ab0046958dfd39959c81acc75d347467/ruff-0.11.5-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:ad871ff74b5ec9caa66cb725b85d4ef89b53f8170f47c3406e32ef040400b038", size = 9965277 },
    { url = "https://files.pythonhosted.org/packages/e5/7a/749f56f150eef71ce2f626a2f6988446c620af2f9ba2a7804295ca450397/ruff-0.11.5-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e6cf918390cfe46d240732d4d72fa6e18e528ca1f60e318a10835cf2fa3dc19f", size = 11541614 },
    { url = "https://files.pythonhosted.org/packages/89/b2/7d9b8435222485b6aac627d9c29793ba89be40b5de11584ca604b829e960/ruff-0.11.5-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:56145ee1478582f61c08f21076dc59153310d606ad663acc00ea3ab5b2125f82", size = 12198873 },
    { url = "https://files.pythonhosted.org/packages/00/e0/a1a69ef5ffb5c5f9c31554b27e030a9c468fc6f57055886d27d316dfbabd/ruff-0.11.5-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e5f66f8f1e8c9fc594cbd66fbc5f246a8d91f916cb9667e80208663ec3728304", size = 11670190 },
    { url = "https://files.pythonhosted.org/packages/05/61/c1c16df6e92975072c07f8b20dad35cd858e8462b8865bc856fe5d6ccb63/ruff-0.11.5-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:80b4df4d335a80315ab9afc81ed1cff62be112bd165e162b5eed8ac55bfc8470", size = 13902301 },
    { url = "https://files.pythonhosted.org/packages/79/89/0af10c8af4363304fd8cb833bd407a2850c760b71edf742c18d5a87bb3ad/ruff-0.11.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3068befab73620b8a0cc2431bd46b3cd619bc17d6f7695a3e1bb166b652c382a", size = 11350132 },
    { url = "https://files.pythonhosted.org/packages/b9/e1/ecb4c687cbf15164dd00e38cf62cbab238cad05dd8b6b0fc68b0c2785e15/ruff-0.11.5-py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:f5da2e710a9641828e09aa98b92c9ebbc60518fdf3921241326ca3e8f8e55b8b", size = 10312937 },
    { url = "https://files.pythonhosted.org/packages/cf/4f/0e53fe5e500b65934500949361e3cd290c5ba60f0324ed59d15f46479c06/ruff-0.11.5-py3-none-musllinux_1_2_armv7l.whl", hash = "sha256:ef39f19cb8ec98cbc762344921e216f3857a06c47412030374fffd413fb8fd3a", size = 9936683 },
    { url = "https://files.pythonhosted.org/packages/04/a8/8183c4da6d35794ae7f76f96261ef5960853cd3f899c2671961f97a27d8e/ruff-0.11.5-py3-none-musllinux_1_2_i686.whl", hash = "sha256:b2a7cedf47244f431fd11aa5a7e2806dda2e0c365873bda7834e8f7d785ae159", size = 10950217 },
    { url = "https://files.pythonhosted.org/packages/26/88/9b85a5a8af21e46a0639b107fcf9bfc31da4f1d263f2fc7fbe7199b47f0a/ruff-0.11.5-py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:81be52e7519f3d1a0beadcf8e974715b2dfc808ae8ec729ecfc79bddf8dbb783", size = 11404521 },
    { url = "https://files.pythonhosted.org/packages/fc/52/047f35d3b20fd1ae9ccfe28791ef0f3ca0ef0b3e6c1a58badd97d450131b/ruff-0.11.5-py3-none-win32.whl", hash = "sha256:e268da7b40f56e3eca571508a7e567e794f9bfcc0f412c4b607931d3af9c4afe", size = 10320697 },
    { url = "https://files.pythonhosted.org/packages/b9/fe/00c78010e3332a6e92762424cf4c1919065707e962232797d0b57fd8267e/ruff-0.11.5-py3-none-win_amd64.whl", hash = "sha256:6c6dc38af3cfe2863213ea25b6dc616d679205732dc0fb673356c2d69608f800", size = 11378665 },
    { url = "https://files.pythonhosted.org/packages/43/7c/c83fe5cbb70ff017612ff36654edfebec4b1ef79b558b8e5fd933bab836b/ruff-0.11.5-py3-none-win_arm64.whl", hash = "sha256:67e241b4314f4eacf14a601d586026a962f4002a475aa702c69980a38087aa4e", size = 10460287 },
]

[[package]]
name = "s3transfer"
version = "0.10.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "botocore" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c0/0a/1cdbabf9edd0ea7747efdf6c9ab4e7061b085aa7f9bfc36bb1601563b069/s3transfer-0.10.4.tar.gz", hash = "sha256:29edc09801743c21eb5ecbc617a152df41d3c287f67b615f73e5f750583666a7", size = 145287 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/66/05/7957af15543b8c9799209506df4660cba7afc4cf94bfb60513827e96bed6/s3transfer-0.10.4-py3-none-any.whl", hash = "sha256:244a76a24355363a68164241438de1b72f8781664920260c48465896b712a41e", size = 83175 },
]

[[package]]
name = "safetensors"
version = "0.5.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/71/7e/2d5d6ee7b40c0682315367ec7475693d110f512922d582fef1bd4a63adc3/safetensors-0.5.3.tar.gz", hash = "sha256:b6b0d6ecacec39a4fdd99cc19f4576f5219ce858e6fd8dbe7609df0b8dc56965", size = 67210 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/ae/88f6c49dbd0cc4da0e08610019a3c78a7d390879a919411a410a1876d03a/safetensors-0.5.3-cp38-abi3-macosx_10_12_x86_64.whl", hash = "sha256:bd20eb133db8ed15b40110b7c00c6df51655a2998132193de2f75f72d99c7073", size = 436917 },
    { url = "https://files.pythonhosted.org/packages/b8/3b/11f1b4a2f5d2ab7da34ecc062b0bc301f2be024d110a6466726bec8c055c/safetensors-0.5.3-cp38-abi3-macosx_11_0_arm64.whl", hash = "sha256:21d01c14ff6c415c485616b8b0bf961c46b3b343ca59110d38d744e577f9cce7", size = 418419 },
    { url = "https://files.pythonhosted.org/packages/5d/9a/add3e6fef267658075c5a41573c26d42d80c935cdc992384dfae435feaef/safetensors-0.5.3-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:11bce6164887cd491ca75c2326a113ba934be596e22b28b1742ce27b1d076467", size = 459493 },
    { url = "https://files.pythonhosted.org/packages/df/5c/bf2cae92222513cc23b3ff85c4a1bb2811a2c3583ac0f8e8d502751de934/safetensors-0.5.3-cp38-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:4a243be3590bc3301c821da7a18d87224ef35cbd3e5f5727e4e0728b8172411e", size = 472400 },
    { url = "https://files.pythonhosted.org/packages/58/11/7456afb740bd45782d0f4c8e8e1bb9e572f1bf82899fb6ace58af47b4282/safetensors-0.5.3-cp38-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8bd84b12b1670a6f8e50f01e28156422a2bc07fb16fc4e98bded13039d688a0d", size = 522891 },
    { url = "https://files.pythonhosted.org/packages/57/3d/fe73a9d2ace487e7285f6e157afee2383bd1ddb911b7cb44a55cf812eae3/safetensors-0.5.3-cp38-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:391ac8cab7c829452175f871fcaf414aa1e292b5448bd02620f675a7f3e7abb9", size = 537694 },
    { url = "https://files.pythonhosted.org/packages/a6/f8/dae3421624fcc87a89d42e1898a798bc7ff72c61f38973a65d60df8f124c/safetensors-0.5.3-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:cead1fa41fc54b1e61089fa57452e8834f798cb1dc7a09ba3524f1eb08e0317a", size = 471642 },
    { url = "https://files.pythonhosted.org/packages/ce/20/1fbe16f9b815f6c5a672f5b760951e20e17e43f67f231428f871909a37f6/safetensors-0.5.3-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:1077f3e94182d72618357b04b5ced540ceb71c8a813d3319f1aba448e68a770d", size = 502241 },
    { url = "https://files.pythonhosted.org/packages/5f/18/8e108846b506487aa4629fe4116b27db65c3dde922de2c8e0cc1133f3f29/safetensors-0.5.3-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:799021e78287bac619c7b3f3606730a22da4cda27759ddf55d37c8db7511c74b", size = 638001 },
    { url = "https://files.pythonhosted.org/packages/82/5a/c116111d8291af6c8c8a8b40628fe833b9db97d8141c2a82359d14d9e078/safetensors-0.5.3-cp38-abi3-musllinux_1_2_armv7l.whl", hash = "sha256:df26da01aaac504334644e1b7642fa000bfec820e7cef83aeac4e355e03195ff", size = 734013 },
    { url = "https://files.pythonhosted.org/packages/7d/ff/41fcc4d3b7de837963622e8610d998710705bbde9a8a17221d85e5d0baad/safetensors-0.5.3-cp38-abi3-musllinux_1_2_i686.whl", hash = "sha256:32c3ef2d7af8b9f52ff685ed0bc43913cdcde135089ae322ee576de93eae5135", size = 670687 },
    { url = "https://files.pythonhosted.org/packages/40/ad/2b113098e69c985a3d8fbda4b902778eae4a35b7d5188859b4a63d30c161/safetensors-0.5.3-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:37f1521be045e56fc2b54c606d4455573e717b2d887c579ee1dbba5f868ece04", size = 643147 },
    { url = "https://files.pythonhosted.org/packages/0a/0c/95aeb51d4246bd9a3242d3d8349c1112b4ee7611a4b40f0c5c93b05f001d/safetensors-0.5.3-cp38-abi3-win32.whl", hash = "sha256:cfc0ec0846dcf6763b0ed3d1846ff36008c6e7290683b61616c4b040f6a54ace", size = 296677 },
    { url = "https://files.pythonhosted.org/packages/69/e2/b011c38e5394c4c18fb5500778a55ec43ad6106126e74723ffaee246f56e/safetensors-0.5.3-cp38-abi3-win_amd64.whl", hash = "sha256:836cbbc320b47e80acd40e44c8682db0e8ad7123209f69b093def21ec7cafd11", size = 308878 },
]

[[package]]
name = "scikit-learn"
version = "1.6.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "joblib" },
    { name = "numpy" },
    { name = "scipy" },
    { name = "threadpoolctl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9e/a5/4ae3b3a0755f7b35a280ac90b28817d1f380318973cff14075ab41ef50d9/scikit_learn-1.6.1.tar.gz", hash = "sha256:b4fc2525eca2c69a59260f583c56a7557c6ccdf8deafdba6e060f94c1c59738e", size = 7068312 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6c/2a/e291c29670795406a824567d1dfc91db7b699799a002fdaa452bceea8f6e/scikit_learn-1.6.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:72abc587c75234935e97d09aa4913a82f7b03ee0b74111dcc2881cba3c5a7b33", size = 12102620 },
    { url = "https://files.pythonhosted.org/packages/25/92/ee1d7a00bb6b8c55755d4984fd82608603a3cc59959245068ce32e7fb808/scikit_learn-1.6.1-cp311-cp311-macosx_12_0_arm64.whl", hash = "sha256:b3b00cdc8f1317b5f33191df1386c0befd16625f49d979fe77a8d44cae82410d", size = 11116234 },
    { url = "https://files.pythonhosted.org/packages/30/cd/ed4399485ef364bb25f388ab438e3724e60dc218c547a407b6e90ccccaef/scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dc4765af3386811c3ca21638f63b9cf5ecf66261cc4815c1db3f1e7dc7b79db2", size = 12592155 },
    { url = "https://files.pythonhosted.org/packages/a8/f3/62fc9a5a659bb58a03cdd7e258956a5824bdc9b4bb3c5d932f55880be569/scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:25fc636bdaf1cc2f4a124a116312d837148b5e10872147bdaf4887926b8c03d8", size = 13497069 },
    { url = "https://files.pythonhosted.org/packages/a1/a6/c5b78606743a1f28eae8f11973de6613a5ee87366796583fb74c67d54939/scikit_learn-1.6.1-cp311-cp311-win_amd64.whl", hash = "sha256:fa909b1a36e000a03c382aade0bd2063fd5680ff8b8e501660c0f59f021a6415", size = 11139809 },
    { url = "https://files.pythonhosted.org/packages/0a/18/c797c9b8c10380d05616db3bfb48e2a3358c767affd0857d56c2eb501caa/scikit_learn-1.6.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:926f207c804104677af4857b2c609940b743d04c4c35ce0ddc8ff4f053cddc1b", size = 12104516 },
    { url = "https://files.pythonhosted.org/packages/c4/b7/2e35f8e289ab70108f8cbb2e7a2208f0575dc704749721286519dcf35f6f/scikit_learn-1.6.1-cp312-cp312-macosx_12_0_arm64.whl", hash = "sha256:2c2cae262064e6a9b77eee1c8e768fc46aa0b8338c6a8297b9b6759720ec0ff2", size = 11167837 },
    { url = "https://files.pythonhosted.org/packages/a4/f6/ff7beaeb644bcad72bcfd5a03ff36d32ee4e53a8b29a639f11bcb65d06cd/scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1061b7c028a8663fb9a1a1baf9317b64a257fcb036dae5c8752b2abef31d136f", size = 12253728 },
    { url = "https://files.pythonhosted.org/packages/29/7a/8bce8968883e9465de20be15542f4c7e221952441727c4dad24d534c6d99/scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2e69fab4ebfc9c9b580a7a80111b43d214ab06250f8a7ef590a4edf72464dd86", size = 13147700 },
    { url = "https://files.pythonhosted.org/packages/62/27/585859e72e117fe861c2079bcba35591a84f801e21bc1ab85bce6ce60305/scikit_learn-1.6.1-cp312-cp312-win_amd64.whl", hash = "sha256:70b1d7e85b1c96383f872a519b3375f92f14731e279a7b4c6cfd650cf5dffc52", size = 11110613 },
    { url = "https://files.pythonhosted.org/packages/2e/59/8eb1872ca87009bdcdb7f3cdc679ad557b992c12f4b61f9250659e592c63/scikit_learn-1.6.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:2ffa1e9e25b3d93990e74a4be2c2fc61ee5af85811562f1288d5d055880c4322", size = 12010001 },
    { url = "https://files.pythonhosted.org/packages/9d/05/f2fc4effc5b32e525408524c982c468c29d22f828834f0625c5ef3d601be/scikit_learn-1.6.1-cp313-cp313-macosx_12_0_arm64.whl", hash = "sha256:dc5cf3d68c5a20ad6d571584c0750ec641cc46aeef1c1507be51300e6003a7e1", size = 11096360 },
    { url = "https://files.pythonhosted.org/packages/c8/e4/4195d52cf4f113573fb8ebc44ed5a81bd511a92c0228889125fac2f4c3d1/scikit_learn-1.6.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c06beb2e839ecc641366000ca84f3cf6fa9faa1777e29cf0c04be6e4d096a348", size = 12209004 },
    { url = "https://files.pythonhosted.org/packages/94/be/47e16cdd1e7fcf97d95b3cb08bde1abb13e627861af427a3651fcb80b517/scikit_learn-1.6.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e8ca8cb270fee8f1f76fa9bfd5c3507d60c6438bbee5687f81042e2bb98e5a97", size = 13171776 },
    { url = "https://files.pythonhosted.org/packages/34/b0/ca92b90859070a1487827dbc672f998da95ce83edce1270fc23f96f1f61a/scikit_learn-1.6.1-cp313-cp313-win_amd64.whl", hash = "sha256:7a1c43c8ec9fde528d664d947dc4c0789be4077a3647f232869f41d9bf50e0fb", size = 11071865 },
    { url = "https://files.pythonhosted.org/packages/12/ae/993b0fb24a356e71e9a894e42b8a9eec528d4c70217353a1cd7a48bc25d4/scikit_learn-1.6.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:a17c1dea1d56dcda2fac315712f3651a1fea86565b64b48fa1bc090249cbf236", size = 11955804 },
    { url = "https://files.pythonhosted.org/packages/d6/54/32fa2ee591af44507eac86406fa6bba968d1eb22831494470d0a2e4a1eb1/scikit_learn-1.6.1-cp313-cp313t-macosx_12_0_arm64.whl", hash = "sha256:6a7aa5f9908f0f28f4edaa6963c0a6183f1911e63a69aa03782f0d924c830a35", size = 11100530 },
    { url = "https://files.pythonhosted.org/packages/3f/58/55856da1adec655bdce77b502e94a267bf40a8c0b89f8622837f89503b5a/scikit_learn-1.6.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0650e730afb87402baa88afbf31c07b84c98272622aaba002559b614600ca691", size = 12433852 },
    { url = "https://files.pythonhosted.org/packages/ff/4f/c83853af13901a574f8f13b645467285a48940f185b690936bb700a50863/scikit_learn-1.6.1-cp313-cp313t-win_amd64.whl", hash = "sha256:3f59fe08dc03ea158605170eb52b22a105f238a5d512c4470ddeca71feae8e5f", size = 11337256 },
]

[[package]]
name = "scipy"
version = "1.15.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "numpy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/b9/31ba9cd990e626574baf93fbc1ac61cf9ed54faafd04c479117517661637/scipy-1.15.2.tar.gz", hash = "sha256:cd58a314d92838f7e6f755c8a2167ead4f27e1fd5c1251fd54289569ef3495ec", size = 59417316 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/40/1f/bf0a5f338bda7c35c08b4ed0df797e7bafe8a78a97275e9f439aceb46193/scipy-1.15.2-cp311-cp311-macosx_10_13_x86_64.whl", hash = "sha256:92233b2df6938147be6fa8824b8136f29a18f016ecde986666be5f4d686a91a4", size = 38703651 },
    { url = "https://files.pythonhosted.org/packages/de/54/db126aad3874601048c2c20ae3d8a433dbfd7ba8381551e6f62606d9bd8e/scipy-1.15.2-cp311-cp311-macosx_12_0_arm64.whl", hash = "sha256:62ca1ff3eb513e09ed17a5736929429189adf16d2d740f44e53270cc800ecff1", size = 30102038 },
    { url = "https://files.pythonhosted.org/packages/61/d8/84da3fffefb6c7d5a16968fe5b9f24c98606b165bb801bb0b8bc3985200f/scipy-1.15.2-cp311-cp311-macosx_14_0_arm64.whl", hash = "sha256:4c6676490ad76d1c2894d77f976144b41bd1a4052107902238047fb6a473e971", size = 22375518 },
    { url = "https://files.pythonhosted.org/packages/44/78/25535a6e63d3b9c4c90147371aedb5d04c72f3aee3a34451f2dc27c0c07f/scipy-1.15.2-cp311-cp311-macosx_14_0_x86_64.whl", hash = "sha256:a8bf5cb4a25046ac61d38f8d3c3426ec11ebc350246a4642f2f315fe95bda655", size = 25142523 },
    { url = "https://files.pythonhosted.org/packages/e0/22/4b4a26fe1cd9ed0bc2b2cb87b17d57e32ab72c346949eaf9288001f8aa8e/scipy-1.15.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6a8e34cf4c188b6dd004654f88586d78f95639e48a25dfae9c5e34a6dc34547e", size = 35491547 },
    { url = "https://files.pythonhosted.org/packages/32/ea/564bacc26b676c06a00266a3f25fdfe91a9d9a2532ccea7ce6dd394541bc/scipy-1.15.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:28a0d2c2075946346e4408b211240764759e0fabaeb08d871639b5f3b1aca8a0", size = 37634077 },
    { url = "https://files.pythonhosted.org/packages/43/c2/bfd4e60668897a303b0ffb7191e965a5da4056f0d98acfb6ba529678f0fb/scipy-1.15.2-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:42dabaaa798e987c425ed76062794e93a243be8f0f20fff6e7a89f4d61cb3d40", size = 37231657 },
    { url = "https://files.pythonhosted.org/packages/4a/75/5f13050bf4f84c931bcab4f4e83c212a36876c3c2244475db34e4b5fe1a6/scipy-1.15.2-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:6f5e296ec63c5da6ba6fa0343ea73fd51b8b3e1a300b0a8cae3ed4b1122c7462", size = 40035857 },
    { url = "https://files.pythonhosted.org/packages/b9/8b/7ec1832b09dbc88f3db411f8cdd47db04505c4b72c99b11c920a8f0479c3/scipy-1.15.2-cp311-cp311-win_amd64.whl", hash = "sha256:597a0c7008b21c035831c39927406c6181bcf8f60a73f36219b69d010aa04737", size = 41217654 },
    { url = "https://files.pythonhosted.org/packages/4b/5d/3c78815cbab499610f26b5bae6aed33e227225a9fa5290008a733a64f6fc/scipy-1.15.2-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:c4697a10da8f8765bb7c83e24a470da5797e37041edfd77fd95ba3811a47c4fd", size = 38756184 },
    { url = "https://files.pythonhosted.org/packages/37/20/3d04eb066b471b6e171827548b9ddb3c21c6bbea72a4d84fc5989933910b/scipy-1.15.2-cp312-cp312-macosx_12_0_arm64.whl", hash = "sha256:869269b767d5ee7ea6991ed7e22b3ca1f22de73ab9a49c44bad338b725603301", size = 30163558 },
    { url = "https://files.pythonhosted.org/packages/a4/98/e5c964526c929ef1f795d4c343b2ff98634ad2051bd2bbadfef9e772e413/scipy-1.15.2-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:bad78d580270a4d32470563ea86c6590b465cb98f83d760ff5b0990cb5518a93", size = 22437211 },
    { url = "https://files.pythonhosted.org/packages/1d/cd/1dc7371e29195ecbf5222f9afeedb210e0a75057d8afbd942aa6cf8c8eca/scipy-1.15.2-cp312-cp312-macosx_14_0_x86_64.whl", hash = "sha256:b09ae80010f52efddb15551025f9016c910296cf70adbf03ce2a8704f3a5ad20", size = 25232260 },
    { url = "https://files.pythonhosted.org/packages/f0/24/1a181a9e5050090e0b5138c5f496fee33293c342b788d02586bc410c6477/scipy-1.15.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5a6fd6eac1ce74a9f77a7fc724080d507c5812d61e72bd5e4c489b042455865e", size = 35198095 },
    { url = "https://files.pythonhosted.org/packages/c0/53/eaada1a414c026673eb983f8b4a55fe5eb172725d33d62c1b21f63ff6ca4/scipy-1.15.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2b871df1fe1a3ba85d90e22742b93584f8d2b8e6124f8372ab15c71b73e428b8", size = 37297371 },
    { url = "https://files.pythonhosted.org/packages/e9/06/0449b744892ed22b7e7b9a1994a866e64895363572677a316a9042af1fe5/scipy-1.15.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:03205d57a28e18dfd39f0377d5002725bf1f19a46f444108c29bdb246b6c8a11", size = 36872390 },
    { url = "https://files.pythonhosted.org/packages/6a/6f/a8ac3cfd9505ec695c1bc35edc034d13afbd2fc1882a7c6b473e280397bb/scipy-1.15.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:601881dfb761311045b03114c5fe718a12634e5608c3b403737ae463c9885d53", size = 39700276 },
    { url = "https://files.pythonhosted.org/packages/f5/6f/e6e5aff77ea2a48dd96808bb51d7450875af154ee7cbe72188afb0b37929/scipy-1.15.2-cp312-cp312-win_amd64.whl", hash = "sha256:e7c68b6a43259ba0aab737237876e5c2c549a031ddb7abc28c7b47f22e202ded", size = 40942317 },
    { url = "https://files.pythonhosted.org/packages/53/40/09319f6e0f276ea2754196185f95cd191cb852288440ce035d5c3a931ea2/scipy-1.15.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:01edfac9f0798ad6b46d9c4c9ca0e0ad23dbf0b1eb70e96adb9fa7f525eff0bf", size = 38717587 },
    { url = "https://files.pythonhosted.org/packages/fe/c3/2854f40ecd19585d65afaef601e5e1f8dbf6758b2f95b5ea93d38655a2c6/scipy-1.15.2-cp313-cp313-macosx_12_0_arm64.whl", hash = "sha256:08b57a9336b8e79b305a143c3655cc5bdbe6d5ece3378578888d2afbb51c4e37", size = 30100266 },
    { url = "https://files.pythonhosted.org/packages/dd/b1/f9fe6e3c828cb5930b5fe74cb479de5f3d66d682fa8adb77249acaf545b8/scipy-1.15.2-cp313-cp313-macosx_14_0_arm64.whl", hash = "sha256:54c462098484e7466362a9f1672d20888f724911a74c22ae35b61f9c5919183d", size = 22373768 },
    { url = "https://files.pythonhosted.org/packages/15/9d/a60db8c795700414c3f681908a2b911e031e024d93214f2d23c6dae174ab/scipy-1.15.2-cp313-cp313-macosx_14_0_x86_64.whl", hash = "sha256:cf72ff559a53a6a6d77bd8eefd12a17995ffa44ad86c77a5df96f533d4e6c6bb", size = 25154719 },
    { url = "https://files.pythonhosted.org/packages/37/3b/9bda92a85cd93f19f9ed90ade84aa1e51657e29988317fabdd44544f1dd4/scipy-1.15.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9de9d1416b3d9e7df9923ab23cd2fe714244af10b763975bea9e4f2e81cebd27", size = 35163195 },
    { url = "https://files.pythonhosted.org/packages/03/5a/fc34bf1aa14dc7c0e701691fa8685f3faec80e57d816615e3625f28feb43/scipy-1.15.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fb530e4794fc8ea76a4a21ccb67dea33e5e0e60f07fc38a49e821e1eae3b71a0", size = 37255404 },
    { url = "https://files.pythonhosted.org/packages/4a/71/472eac45440cee134c8a180dbe4c01b3ec247e0338b7c759e6cd71f199a7/scipy-1.15.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:5ea7ed46d437fc52350b028b1d44e002646e28f3e8ddc714011aaf87330f2f32", size = 36860011 },
    { url = "https://files.pythonhosted.org/packages/01/b3/21f890f4f42daf20e4d3aaa18182dddb9192771cd47445aaae2e318f6738/scipy-1.15.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:11e7ad32cf184b74380f43d3c0a706f49358b904fa7d5345f16ddf993609184d", size = 39657406 },
    { url = "https://files.pythonhosted.org/packages/0d/76/77cf2ac1f2a9cc00c073d49e1e16244e389dd88e2490c91d84e1e3e4d126/scipy-1.15.2-cp313-cp313-win_amd64.whl", hash = "sha256:a5080a79dfb9b78b768cebf3c9dcbc7b665c5875793569f48bf0e2b1d7f68f6f", size = 40961243 },
    { url = "https://files.pythonhosted.org/packages/4c/4b/a57f8ddcf48e129e6054fa9899a2a86d1fc6b07a0e15c7eebff7ca94533f/scipy-1.15.2-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:447ce30cee6a9d5d1379087c9e474628dab3db4a67484be1b7dc3196bfb2fac9", size = 38870286 },
    { url = "https://files.pythonhosted.org/packages/0c/43/c304d69a56c91ad5f188c0714f6a97b9c1fed93128c691148621274a3a68/scipy-1.15.2-cp313-cp313t-macosx_12_0_arm64.whl", hash = "sha256:c90ebe8aaa4397eaefa8455a8182b164a6cc1d59ad53f79943f266d99f68687f", size = 30141634 },
    { url = "https://files.pythonhosted.org/packages/44/1a/6c21b45d2548eb73be9b9bff421aaaa7e85e22c1f9b3bc44b23485dfce0a/scipy-1.15.2-cp313-cp313t-macosx_14_0_arm64.whl", hash = "sha256:def751dd08243934c884a3221156d63e15234a3155cf25978b0a668409d45eb6", size = 22415179 },
    { url = "https://files.pythonhosted.org/packages/74/4b/aefac4bba80ef815b64f55da06f62f92be5d03b467f2ce3668071799429a/scipy-1.15.2-cp313-cp313t-macosx_14_0_x86_64.whl", hash = "sha256:302093e7dfb120e55515936cb55618ee0b895f8bcaf18ff81eca086c17bd80af", size = 25126412 },
    { url = "https://files.pythonhosted.org/packages/b1/53/1cbb148e6e8f1660aacd9f0a9dfa2b05e9ff1cb54b4386fe868477972ac2/scipy-1.15.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7cd5b77413e1855351cdde594eca99c1f4a588c2d63711388b6a1f1c01f62274", size = 34952867 },
    { url = "https://files.pythonhosted.org/packages/2c/23/e0eb7f31a9c13cf2dca083828b97992dd22f8184c6ce4fec5deec0c81fcf/scipy-1.15.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6d0194c37037707b2afa7a2f2a924cf7bac3dc292d51b6a925e5fcb89bc5c776", size = 36890009 },
    { url = "https://files.pythonhosted.org/packages/03/f3/e699e19cabe96bbac5189c04aaa970718f0105cff03d458dc5e2b6bd1e8c/scipy-1.15.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:bae43364d600fdc3ac327db99659dcb79e6e7ecd279a75fe1266669d9a652828", size = 36545159 },
    { url = "https://files.pythonhosted.org/packages/af/f5/ab3838e56fe5cc22383d6fcf2336e48c8fe33e944b9037fbf6cbdf5a11f8/scipy-1.15.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f031846580d9acccd0044efd1a90e6f4df3a6e12b4b6bd694a7bc03a89892b28", size = 39136566 },
    { url = "https://files.pythonhosted.org/packages/0a/c8/b3f566db71461cabd4b2d5b39bcc24a7e1c119535c8361f81426be39bb47/scipy-1.15.2-cp313-cp313t-win_amd64.whl", hash = "sha256:fe8a9eb875d430d81755472c5ba75e84acc980e4a8f6204d402849234d3017db", size = 40477705 },
]

[[package]]
name = "screeninfo"
version = "0.8.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cython", marker = "sys_platform == 'darwin'" },
    { name = "pyobjc-framework-cocoa", marker = "sys_platform == 'darwin'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ec/bb/e69e5e628d43f118e0af4fc063c20058faa8635c95a1296764acc8167e27/screeninfo-0.8.1.tar.gz", hash = "sha256:9983076bcc7e34402a1a9e4d7dabf3729411fd2abb3f3b4be7eba73519cd2ed1", size = 10666 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6e/bf/c5205d480307bef660e56544b9e3d7ff687da776abb30c9cb3f330887570/screeninfo-0.8.1-py3-none-any.whl", hash = "sha256:e97d6b173856edcfa3bd282f81deb528188aff14b11ec3e195584e7641be733c", size = 12907 },
]

[[package]]
name = "send2trash"
version = "1.8.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fd/3a/aec9b02217bb79b87bbc1a21bc6abc51e3d5dcf65c30487ac96c0908c722/Send2Trash-1.8.3.tar.gz", hash = "sha256:b18e7a3966d99871aefeb00cfbcfdced55ce4871194810fc71f4aa484b953abf", size = 17394 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/40/b0/4562db6223154aa4e22f939003cb92514c79f3d4dccca3444253fd17f902/Send2Trash-1.8.3-py3-none-any.whl", hash = "sha256:0c31227e0bd08961c7665474a3d1ef7193929fedda4233843689baa056be46c9", size = 18072 },
]

[[package]]
name = "sentence-transformers"
version = "4.0.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "huggingface-hub" },
    { name = "pillow" },
    { name = "scikit-learn" },
    { name = "scipy" },
    { name = "torch" },
    { name = "tqdm" },
    { name = "transformers" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3c/74/606783c6b2e80a609af25d2c487bbe32eb8f0970b0f7519fbb1a099f3ab8/sentence_transformers-4.0.2.tar.gz", hash = "sha256:d33d0c5a69ae0d682115c90e74fc1dc24c4786aeea78e26f5889b037e5921880", size = 267724 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/58/770e1e762893abbfe3cd048f1ed1ea6e00122a195651ea98fb27f55ad17a/sentence_transformers-4.0.2-py3-none-any.whl", hash = "sha256:25f5086d0746c22177f9fb7d431f3eebe6375f3afe1dc7c341c4ca9061e98771", size = 340618 },
]

[[package]]
name = "setuptools"
version = "78.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a9/5a/0db4da3bc908df06e5efae42b44e75c81dd52716e10192ff36d0c1c8e379/setuptools-78.1.0.tar.gz", hash = "sha256:18fd474d4a82a5f83dac888df697af65afa82dec7323d09c3e37d1f14288da54", size = 1367827 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/21/f43f0a1fa8b06b32812e0975981f4677d28e0f3271601dc88ac5a5b83220/setuptools-78.1.0-py3-none-any.whl", hash = "sha256:3e386e96793c8702ae83d17b853fb93d3e09ef82ec62722e61da5cd22376dcd8", size = 1256108 },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050 },
]

[[package]]
name = "slack-sdk"
version = "3.35.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/32/a5/13077a5696ded22cc955ff6314028b7e6140b1c989b19ca27a6b26590e6e/slack_sdk-3.35.0.tar.gz", hash = "sha256:8183b6cbf26a0c1e2441478cd9c0dc4eef08d60c1394cfdc9a769e309a9b6459", size = 232887 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/8e/eed71dc79a187ba32681f12a104786ab89355bc474082211d92e1fba6bcf/slack_sdk-3.35.0-py2.py3-none-any.whl", hash = "sha256:00933d171fbd8a068b321ebb5f89612cc781d3183d8e3447c85499eca9d865be", size = 293272 },
]

[[package]]
name = "smmap"
version = "5.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/44/cd/a040c4b3119bbe532e5b0732286f805445375489fceaec1f48306068ee3b/smmap-5.0.2.tar.gz", hash = "sha256:26ea65a03958fa0c8a1c7e8c7a58fdc77221b8910f6be2131affade476898ad5", size = 22329 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/04/be/d09147ad1ec7934636ad912901c5fd7667e1c858e19d355237db0d0cd5e4/smmap-5.0.2-py3-none-any.whl", hash = "sha256:b30115f0def7d7531d22a0fb6502488d879e75b260a9db4d0819cfb25403af5e", size = 24303 },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235 },
]

[[package]]
name = "soupsieve"
version = "2.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d7/ce/fbaeed4f9fb8b2daa961f90591662df6a86c1abf25c548329a86920aedfb/soupsieve-2.6.tar.gz", hash = "sha256:e2e68417777af359ec65daac1057404a3c8a5455bb8abc36f1a9866ab1a51abb", size = 101569 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/c2/fe97d779f3ef3b15f05c94a2f1e3d21732574ed441687474db9d342a7315/soupsieve-2.6-py3-none-any.whl", hash = "sha256:e72c4ff06e4fb6e4b5a9f0f55fe6e81514581fca1515028625d0f299c602ccc9", size = 36186 },
]

[[package]]
name = "sse-starlette"
version = "2.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "starlette" },
]
sdist = { url = "https://files.pythonhosted.org/packages/71/a4/80d2a11af59fe75b48230846989e93979c892d3a20016b42bb44edb9e398/sse_starlette-2.2.1.tar.gz", hash = "sha256:54470d5f19274aeed6b2d473430b08b4b379ea851d953b11d7f1c4a2c118b419", size = 17376 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/e0/5b8bd393f27f4a62461c5cf2479c75a2cc2ffa330976f9f00f5f6e4f50eb/sse_starlette-2.2.1-py3-none-any.whl", hash = "sha256:6410a3d3ba0c89e7675d4c273a301d64649c03a5ef1ca101f10b47f895fd0e99", size = 10120 },
]

[[package]]
name = "stack-data"
version = "0.6.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "asttokens" },
    { name = "executing" },
    { name = "pure-eval" },
]
sdist = { url = "https://files.pythonhosted.org/packages/28/e3/55dcc2cfbc3ca9c29519eb6884dd1415ecb53b0e934862d3559ddcb7e20b/stack_data-0.6.3.tar.gz", hash = "sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9", size = 44707 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f1/7b/ce1eafaf1a76852e2ec9b22edecf1daa58175c090266e9f6c64afcd81d91/stack_data-0.6.3-py3-none-any.whl", hash = "sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695", size = 24521 },
]

[[package]]
name = "starlette"
version = "0.46.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/04/1b/52b27f2e13ceedc79a908e29eac426a63465a1a01248e5f24aa36a62aeb3/starlette-0.46.1.tar.gz", hash = "sha256:3c88d58ee4bd1bb807c0d1acb381838afc7752f9ddaec81bbe4383611d833230", size = 2580102 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a0/4b/528ccf7a982216885a1ff4908e886b8fb5f19862d1962f56a3fce2435a70/starlette-0.46.1-py3-none-any.whl", hash = "sha256:77c74ed9d2720138b25875133f3a2dae6d854af2ec37dceb56aef370c1d8a227", size = 71995 },
]

[[package]]
name = "streamlit"
version = "1.44.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "altair" },
    { name = "blinker" },
    { name = "cachetools" },
    { name = "click" },
    { name = "gitpython" },
    { name = "numpy" },
    { name = "packaging" },
    { name = "pandas" },
    { name = "pillow" },
    { name = "protobuf" },
    { name = "pyarrow" },
    { name = "pydeck" },
    { name = "requests" },
    { name = "tenacity" },
    { name = "toml" },
    { name = "tornado" },
    { name = "typing-extensions" },
    { name = "watchdog", marker = "sys_platform != 'darwin'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3e/c0/7286284567e5045f0c587c426d0c41aee5d10c0a2e360e627a83037e9f0c/streamlit-1.44.1.tar.gz", hash = "sha256:c6914ed6d5b76870b461510476806db370f36425ae0e6654d227c988288198d3", size = 9423685 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/eb/17/fc425e1d4d86e31b2aaf0812a2ef2163763a0670d671720c7c36e8679323/streamlit-1.44.1-py3-none-any.whl", hash = "sha256:9fe355f58b11f4eb71e74f115ce1f38c4c9eaff2733e6bcffb510ac1298a5990", size = 9812242 },
]

[[package]]
name = "sympy"
version = "1.13.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mpmath" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ca/99/5a5b6f19ff9f083671ddf7b9632028436167cd3d33e11015754e41b249a4/sympy-1.13.1.tar.gz", hash = "sha256:9cebf7e04ff162015ce31c9c6c9144daa34a93bd082f54fd8f12deca4f47515f", size = 7533040 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/fe/81695a1aa331a842b582453b605175f419fe8540355886031328089d840a/sympy-1.13.1-py3-none-any.whl", hash = "sha256:db36cdc64bf61b9b24578b6f7bab1ecdd2452cf008f34faa33776680c26d66f8", size = 6189177 },
]

[[package]]
name = "tenacity"
version = "9.1.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0a/d4/2b0cd0fe285e14b36db076e78c93766ff1d529d70408bd1d2a5a84f1d929/tenacity-9.1.2.tar.gz", hash = "sha256:1169d376c297e7de388d18b4481760d478b0e99a777cad3a9c86e556f4b697cb", size = 48036 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e5/30/643397144bfbfec6f6ef821f36f33e57d35946c44a2352d3c9f0ae847619/tenacity-9.1.2-py3-none-any.whl", hash = "sha256:f77bf36710d8b73a50b2dd155c97b870017ad21afe6ab300326b0371b3b05138", size = 28248 },
]

[[package]]
name = "terminado"
version = "0.18.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ptyprocess", marker = "os_name != 'nt'" },
    { name = "pywinpty", marker = "(os_name == 'nt' and platform_machine != 'aarch64' and sys_platform == 'linux') or (os_name == 'nt' and sys_platform != 'darwin' and sys_platform != 'linux')" },
    { name = "tornado" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8a/11/965c6fd8e5cc254f1fe142d547387da17a8ebfd75a3455f637c663fb38a0/terminado-0.18.1.tar.gz", hash = "sha256:de09f2c4b85de4765f7714688fff57d3e75bad1f909b589fde880460c753fd2e", size = 32701 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/9e/2064975477fdc887e47ad42157e214526dcad8f317a948dee17e1659a62f/terminado-0.18.1-py3-none-any.whl", hash = "sha256:a4468e1b37bb318f8a86514f65814e1afc977cf29b3992a4500d9dd305dcceb0", size = 14154 },
]

[[package]]
name = "threadpoolctl"
version = "3.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b7/4d/08c89e34946fce2aec4fbb45c9016efd5f4d7f24af8e5d93296e935631d8/threadpoolctl-3.6.0.tar.gz", hash = "sha256:8ab8b4aa3491d812b623328249fab5302a68d2d71745c8a4c719a2fcaba9f44e", size = 21274 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/d5/f9a850d79b0851d1d4ef6456097579a9005b31fea68726a4ae5f2d82ddd9/threadpoolctl-3.6.0-py3-none-any.whl", hash = "sha256:43a0b8fd5a2928500110039e43a5eed8480b918967083ea48dc3ab9f13c4a7fb", size = 18638 },
]

[[package]]
name = "tiktoken"
version = "0.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "regex" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ea/cf/756fedf6981e82897f2d570dd25fa597eb3f4459068ae0572d7e888cfd6f/tiktoken-0.9.0.tar.gz", hash = "sha256:d02a5ca6a938e0490e1ff957bc48c8b078c88cb83977be1625b1fd8aac792c5d", size = 35991 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4d/ae/4613a59a2a48e761c5161237fc850eb470b4bb93696db89da51b79a871f1/tiktoken-0.9.0-cp311-cp311-macosx_10_12_x86_64.whl", hash = "sha256:f32cc56168eac4851109e9b5d327637f15fd662aa30dd79f964b7c39fbadd26e", size = 1065987 },
    { url = "https://files.pythonhosted.org/packages/3f/86/55d9d1f5b5a7e1164d0f1538a85529b5fcba2b105f92db3622e5d7de6522/tiktoken-0.9.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:45556bc41241e5294063508caf901bf92ba52d8ef9222023f83d2483a3055348", size = 1009155 },
    { url = "https://files.pythonhosted.org/packages/03/58/01fb6240df083b7c1916d1dcb024e2b761213c95d576e9f780dfb5625a76/tiktoken-0.9.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:03935988a91d6d3216e2ec7c645afbb3d870b37bcb67ada1943ec48678e7ee33", size = 1142898 },
    { url = "https://files.pythonhosted.org/packages/b1/73/41591c525680cd460a6becf56c9b17468d3711b1df242c53d2c7b2183d16/tiktoken-0.9.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8b3d80aad8d2c6b9238fc1a5524542087c52b860b10cbf952429ffb714bc1136", size = 1197535 },
    { url = "https://files.pythonhosted.org/packages/7d/7c/1069f25521c8f01a1a182f362e5c8e0337907fae91b368b7da9c3e39b810/tiktoken-0.9.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:b2a21133be05dc116b1d0372af051cd2c6aa1d2188250c9b553f9fa49301b336", size = 1259548 },
    { url = "https://files.pythonhosted.org/packages/6f/07/c67ad1724b8e14e2b4c8cca04b15da158733ac60136879131db05dda7c30/tiktoken-0.9.0-cp311-cp311-win_amd64.whl", hash = "sha256:11a20e67fdf58b0e2dea7b8654a288e481bb4fc0289d3ad21291f8d0849915fb", size = 893895 },
    { url = "https://files.pythonhosted.org/packages/cf/e5/21ff33ecfa2101c1bb0f9b6df750553bd873b7fb532ce2cb276ff40b197f/tiktoken-0.9.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:e88f121c1c22b726649ce67c089b90ddda8b9662545a8aeb03cfef15967ddd03", size = 1065073 },
    { url = "https://files.pythonhosted.org/packages/8e/03/a95e7b4863ee9ceec1c55983e4cc9558bcfd8f4f80e19c4f8a99642f697d/tiktoken-0.9.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:a6600660f2f72369acb13a57fb3e212434ed38b045fd8cc6cdd74947b4b5d210", size = 1008075 },
    { url = "https://files.pythonhosted.org/packages/40/10/1305bb02a561595088235a513ec73e50b32e74364fef4de519da69bc8010/tiktoken-0.9.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:95e811743b5dfa74f4b227927ed86cbc57cad4df859cb3b643be797914e41794", size = 1140754 },
    { url = "https://files.pythonhosted.org/packages/1b/40/da42522018ca496432ffd02793c3a72a739ac04c3794a4914570c9bb2925/tiktoken-0.9.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:99376e1370d59bcf6935c933cb9ba64adc29033b7e73f5f7569f3aad86552b22", size = 1196678 },
    { url = "https://files.pythonhosted.org/packages/5c/41/1e59dddaae270ba20187ceb8aa52c75b24ffc09f547233991d5fd822838b/tiktoken-0.9.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:badb947c32739fb6ddde173e14885fb3de4d32ab9d8c591cbd013c22b4c31dd2", size = 1259283 },
    { url = "https://files.pythonhosted.org/packages/5b/64/b16003419a1d7728d0d8c0d56a4c24325e7b10a21a9dd1fc0f7115c02f0a/tiktoken-0.9.0-cp312-cp312-win_amd64.whl", hash = "sha256:5a62d7a25225bafed786a524c1b9f0910a1128f4232615bf3f8257a73aaa3b16", size = 894897 },
    { url = "https://files.pythonhosted.org/packages/7a/11/09d936d37f49f4f494ffe660af44acd2d99eb2429d60a57c71318af214e0/tiktoken-0.9.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:2b0e8e05a26eda1249e824156d537015480af7ae222ccb798e5234ae0285dbdb", size = 1064919 },
    { url = "https://files.pythonhosted.org/packages/80/0e/f38ba35713edb8d4197ae602e80837d574244ced7fb1b6070b31c29816e0/tiktoken-0.9.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:27d457f096f87685195eea0165a1807fae87b97b2161fe8c9b1df5bd74ca6f63", size = 1007877 },
    { url = "https://files.pythonhosted.org/packages/fe/82/9197f77421e2a01373e27a79dd36efdd99e6b4115746ecc553318ecafbf0/tiktoken-0.9.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2cf8ded49cddf825390e36dd1ad35cd49589e8161fdcb52aa25f0583e90a3e01", size = 1140095 },
    { url = "https://files.pythonhosted.org/packages/f2/bb/4513da71cac187383541facd0291c4572b03ec23c561de5811781bbd988f/tiktoken-0.9.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:cc156cb314119a8bb9748257a2eaebd5cc0753b6cb491d26694ed42fc7cb3139", size = 1195649 },
    { url = "https://files.pythonhosted.org/packages/fa/5c/74e4c137530dd8504e97e3a41729b1103a4ac29036cbfd3250b11fd29451/tiktoken-0.9.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:cd69372e8c9dd761f0ab873112aba55a0e3e506332dd9f7522ca466e817b1b7a", size = 1258465 },
    { url = "https://files.pythonhosted.org/packages/de/a8/8f499c179ec900783ffe133e9aab10044481679bb9aad78436d239eee716/tiktoken-0.9.0-cp313-cp313-win_amd64.whl", hash = "sha256:5ea0edb6f83dc56d794723286215918c1cde03712cbbafa0348b33448faf5b95", size = 894669 },
]

[[package]]
name = "tinycss2"
version = "1.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "webencodings" },
]
sdist = { url = "https://files.pythonhosted.org/packages/7a/fd/7a5ee21fd08ff70d3d33a5781c255cbe779659bd03278feb98b19ee550f4/tinycss2-1.4.0.tar.gz", hash = "sha256:10c0972f6fc0fbee87c3edb76549357415e94548c1ae10ebccdea16fb404a9b7", size = 87085 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e6/34/ebdc18bae6aa14fbee1a08b63c015c72b64868ff7dae68808ab500c492e2/tinycss2-1.4.0-py3-none-any.whl", hash = "sha256:3a49cf47b7675da0b15d0c6e1df8df4ebd96e9394bb905a5775adb0d884c5289", size = 26610 },
]

[[package]]
name = "tld"
version = "0.13"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/19/2b/678082222bc1d2823ea8384c6806085b85226ff73885c703fe0c7143ef64/tld-0.13.tar.gz", hash = "sha256:93dde5e1c04bdf1844976eae440706379d21f4ab235b73c05d7483e074fb5629", size = 446824 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ea/75/779ddeaf4d847ba0021ad99d1b615a853f2a5762bd5d118273c7f7673c38/tld-0.13-py2.py3-none-any.whl", hash = "sha256:f75b2be080f767ed17c2338a339eaa4fab5792586319ca819119da252f9f3749", size = 263789 },
]

[[package]]
name = "tldextract"
version = "5.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "filelock" },
    { name = "idna" },
    { name = "requests" },
    { name = "requests-file" },
]
sdist = { url = "https://files.pythonhosted.org/packages/20/7a/e469c4f71231a848492da31a7be6921a6cd04ecc8eed58e924bece0fb6de/tldextract-5.2.0.tar.gz", hash = "sha256:c3a8c4daf2c25a57f54d6ef6762aeac7eff5ac3da04cdb607130be757b8457ab", size = 126839 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5e/20/b400e99827439eb91d5aa283e09d43e7e46aba66b07edf6f09404cb741da/tldextract-5.2.0-py3-none-any.whl", hash = "sha256:59509cbf99628c9440f4d19d3a1fd8488d50297ea23879c136576263c5a04eba", size = 106308 },
]

[[package]]
name = "tokenizers"
version = "0.21.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "huggingface-hub" },
]
sdist = { url = "https://files.pythonhosted.org/packages/92/76/5ac0c97f1117b91b7eb7323dcd61af80d72f790b4df71249a7850c195f30/tokenizers-0.21.1.tar.gz", hash = "sha256:a1bb04dc5b448985f86ecd4b05407f5a8d97cb2c0532199b2a302a604a0165ab", size = 343256 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a5/1f/328aee25f9115bf04262e8b4e5a2050b7b7cf44b59c74e982db7270c7f30/tokenizers-0.21.1-cp39-abi3-macosx_10_12_x86_64.whl", hash = "sha256:e78e413e9e668ad790a29456e677d9d3aa50a9ad311a40905d6861ba7692cf41", size = 2780767 },
    { url = "https://files.pythonhosted.org/packages/ae/1a/4526797f3719b0287853f12c5ad563a9be09d446c44ac784cdd7c50f76ab/tokenizers-0.21.1-cp39-abi3-macosx_11_0_arm64.whl", hash = "sha256:cd51cd0a91ecc801633829fcd1fda9cf8682ed3477c6243b9a095539de4aecf3", size = 2650555 },
    { url = "https://files.pythonhosted.org/packages/4d/7a/a209b29f971a9fdc1da86f917fe4524564924db50d13f0724feed37b2a4d/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:28da6b72d4fb14ee200a1bd386ff74ade8992d7f725f2bde2c495a9a98cf4d9f", size = 2937541 },
    { url = "https://files.pythonhosted.org/packages/3c/1e/b788b50ffc6191e0b1fc2b0d49df8cff16fe415302e5ceb89f619d12c5bc/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:34d8cfde551c9916cb92014e040806122295a6800914bab5865deb85623931cf", size = 2819058 },
    { url = "https://files.pythonhosted.org/packages/36/aa/3626dfa09a0ecc5b57a8c58eeaeb7dd7ca9a37ad9dd681edab5acd55764c/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:aaa852d23e125b73d283c98f007e06d4595732104b65402f46e8ef24b588d9f8", size = 3133278 },
    { url = "https://files.pythonhosted.org/packages/a4/4d/8fbc203838b3d26269f944a89459d94c858f5b3f9a9b6ee9728cdcf69161/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a21a15d5c8e603331b8a59548bbe113564136dc0f5ad8306dd5033459a226da0", size = 3144253 },
    { url = "https://files.pythonhosted.org/packages/d8/1b/2bd062adeb7c7511b847b32e356024980c0ffcf35f28947792c2d8ad2288/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2fdbd4c067c60a0ac7eca14b6bd18a5bebace54eb757c706b47ea93204f7a37c", size = 3398225 },
    { url = "https://files.pythonhosted.org/packages/8a/63/38be071b0c8e06840bc6046991636bcb30c27f6bb1e670f4f4bc87cf49cc/tokenizers-0.21.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2dd9a0061e403546f7377df940e866c3e678d7d4e9643d0461ea442b4f89e61a", size = 3038874 },
    { url = "https://files.pythonhosted.org/packages/ec/83/afa94193c09246417c23a3c75a8a0a96bf44ab5630a3015538d0c316dd4b/tokenizers-0.21.1-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:db9484aeb2e200c43b915a1a0150ea885e35f357a5a8fabf7373af333dcc8dbf", size = 9014448 },
    { url = "https://files.pythonhosted.org/packages/ae/b3/0e1a37d4f84c0f014d43701c11eb8072704f6efe8d8fc2dcdb79c47d76de/tokenizers-0.21.1-cp39-abi3-musllinux_1_2_armv7l.whl", hash = "sha256:ed248ab5279e601a30a4d67bdb897ecbe955a50f1e7bb62bd99f07dd11c2f5b6", size = 8937877 },
    { url = "https://files.pythonhosted.org/packages/ac/33/ff08f50e6d615eb180a4a328c65907feb6ded0b8f990ec923969759dc379/tokenizers-0.21.1-cp39-abi3-musllinux_1_2_i686.whl", hash = "sha256:9ac78b12e541d4ce67b4dfd970e44c060a2147b9b2a21f509566d556a509c67d", size = 9186645 },
    { url = "https://files.pythonhosted.org/packages/5f/aa/8ae85f69a9f6012c6f8011c6f4aa1c96154c816e9eea2e1b758601157833/tokenizers-0.21.1-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:e5a69c1a4496b81a5ee5d2c1f3f7fbdf95e90a0196101b0ee89ed9956b8a168f", size = 9384380 },
    { url = "https://files.pythonhosted.org/packages/e8/5b/a5d98c89f747455e8b7a9504910c865d5e51da55e825a7ae641fb5ff0a58/tokenizers-0.21.1-cp39-abi3-win32.whl", hash = "sha256:1039a3a5734944e09de1d48761ade94e00d0fa760c0e0551151d4dd851ba63e3", size = 2239506 },
    { url = "https://files.pythonhosted.org/packages/e6/b6/072a8e053ae600dcc2ac0da81a23548e3b523301a442a6ca900e92ac35be/tokenizers-0.21.1-cp39-abi3-win_amd64.whl", hash = "sha256:0f0dcbcc9f6e13e675a66d7a5f2f225a736745ce484c1a4e07476a89ccdad382", size = 2435481 },
]

[[package]]
name = "toml"
version = "0.10.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/be/ba/1f744cdc819428fc6b5084ec34d9b30660f6f9daaf70eead706e3203ec3c/toml-0.10.2.tar.gz", hash = "sha256:b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f", size = 22253 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/44/6f/7120676b6d73228c96e17f1f794d8ab046fc910d781c8d151120c3f1569e/toml-0.10.2-py2.py3-none-any.whl", hash = "sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b", size = 16588 },
]

[[package]]
name = "torch"
version = "2.6.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "filelock" },
    { name = "fsspec" },
    { name = "jinja2" },
    { name = "networkx" },
    { name = "nvidia-cublas-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cuda-cupti-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cuda-nvrtc-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cuda-runtime-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cudnn-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cufft-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-curand-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cusolver-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cusparse-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-cusparselt-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-nccl-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-nvjitlink-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "nvidia-nvtx-cu12", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "setuptools", marker = "python_full_version >= '3.12'" },
    { name = "sympy" },
    { name = "triton", marker = "platform_machine == 'x86_64' and sys_platform == 'linux'" },
    { name = "typing-extensions" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/a9/97cbbc97002fff0de394a2da2cdfa859481fdca36996d7bd845d50aa9d8d/torch-2.6.0-cp311-cp311-manylinux1_x86_64.whl", hash = "sha256:7979834102cd5b7a43cc64e87f2f3b14bd0e1458f06e9f88ffa386d07c7446e1", size = 766715424 },
    { url = "https://files.pythonhosted.org/packages/6d/fa/134ce8f8a7ea07f09588c9cc2cea0d69249efab977707cf67669431dcf5c/torch-2.6.0-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:ccbd0320411fe1a3b3fec7b4d3185aa7d0c52adac94480ab024b5c8f74a0bf1d", size = 95759416 },
    { url = "https://files.pythonhosted.org/packages/11/c5/2370d96b31eb1841c3a0883a492c15278a6718ccad61bb6a649c80d1d9eb/torch-2.6.0-cp311-cp311-win_amd64.whl", hash = "sha256:46763dcb051180ce1ed23d1891d9b1598e07d051ce4c9d14307029809c4d64f7", size = 204164970 },
    { url = "https://files.pythonhosted.org/packages/0b/fa/f33a4148c6fb46ca2a3f8de39c24d473822d5774d652b66ed9b1214da5f7/torch-2.6.0-cp311-none-macosx_11_0_arm64.whl", hash = "sha256:94fc63b3b4bedd327af588696559f68c264440e2503cc9e6954019473d74ae21", size = 66530713 },
    { url = "https://files.pythonhosted.org/packages/e5/35/0c52d708144c2deb595cd22819a609f78fdd699b95ff6f0ebcd456e3c7c1/torch-2.6.0-cp312-cp312-manylinux1_x86_64.whl", hash = "sha256:2bb8987f3bb1ef2675897034402373ddfc8f5ef0e156e2d8cfc47cacafdda4a9", size = 766624563 },
    { url = "https://files.pythonhosted.org/packages/01/d6/455ab3fbb2c61c71c8842753b566012e1ed111e7a4c82e0e1c20d0c76b62/torch-2.6.0-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:b789069020c5588c70d5c2158ac0aa23fd24a028f34a8b4fcb8fcb4d7efcf5fb", size = 95607867 },
    { url = "https://files.pythonhosted.org/packages/18/cf/ae99bd066571656185be0d88ee70abc58467b76f2f7c8bfeb48735a71fe6/torch-2.6.0-cp312-cp312-win_amd64.whl", hash = "sha256:7e1448426d0ba3620408218b50aa6ada88aeae34f7a239ba5431f6c8774b1239", size = 204120469 },
    { url = "https://files.pythonhosted.org/packages/81/b4/605ae4173aa37fb5aa14605d100ff31f4f5d49f617928c9f486bb3aaec08/torch-2.6.0-cp312-none-macosx_11_0_arm64.whl", hash = "sha256:9a610afe216a85a8b9bc9f8365ed561535c93e804c2a317ef7fabcc5deda0989", size = 66532538 },
    { url = "https://files.pythonhosted.org/packages/24/85/ead1349fc30fe5a32cadd947c91bda4a62fbfd7f8c34ee61f6398d38fb48/torch-2.6.0-cp313-cp313-manylinux1_x86_64.whl", hash = "sha256:4874a73507a300a5d089ceaff616a569e7bb7c613c56f37f63ec3ffac65259cf", size = 766626191 },
    { url = "https://files.pythonhosted.org/packages/dd/b0/26f06f9428b250d856f6d512413e9e800b78625f63801cbba13957432036/torch-2.6.0-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:a0d5e1b9874c1a6c25556840ab8920569a7a4137afa8a63a32cee0bc7d89bd4b", size = 95611439 },
    { url = "https://files.pythonhosted.org/packages/c2/9c/fc5224e9770c83faed3a087112d73147cd7c7bfb7557dcf9ad87e1dda163/torch-2.6.0-cp313-cp313-win_amd64.whl", hash = "sha256:510c73251bee9ba02ae1cb6c9d4ee0907b3ce6020e62784e2d7598e0cfa4d6cc", size = 204126475 },
    { url = "https://files.pythonhosted.org/packages/88/8b/d60c0491ab63634763be1537ad488694d316ddc4a20eaadd639cedc53971/torch-2.6.0-cp313-none-macosx_11_0_arm64.whl", hash = "sha256:ff96f4038f8af9f7ec4231710ed4549da1bdebad95923953a25045dcf6fd87e2", size = 66536783 },
]

[[package]]
name = "torchvision"
version = "0.21.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "numpy" },
    { name = "pillow" },
    { name = "torch" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/3d/b7241abfa3e6651c6e00796f5de2bd1ce4d500bf5159bcbfeea47e711b93/torchvision-0.21.0-1-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:ff96666b94a55e802ea6796cabe788541719e6f4905fc59c380fed3517b6a64d", size = 2329320 },
    { url = "https://files.pythonhosted.org/packages/52/5b/76ca113a853b19c7b1da761f8a72cb6429b3bd0bf932537d8df4657f47c3/torchvision-0.21.0-1-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:ffa2a16499508fe6798323e455f312c7c55f2a88901c9a7c0fb1efa86cf7e327", size = 2329878 },
    { url = "https://files.pythonhosted.org/packages/4e/fe/5e193353706dab96fe73ae100d5a633ff635ce310e0d92f3bc2958d075b1/torchvision-0.21.0-1-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:7e9e9afa150e40cd2a8f0701c43cb82a8d724f512896455c0918b987f94b84a4", size = 2280711 },
    { url = "https://files.pythonhosted.org/packages/29/88/00c69db213ee2443ada8886ec60789b227e06bb869d85ee324578221a7f7/torchvision-0.21.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:110d115333524d60e9e474d53c7d20f096dbd8a080232f88dddb90566f90064c", size = 1784141 },
    { url = "https://files.pythonhosted.org/packages/be/a2/b0cedf0a411f1a5d75cfc0b87cde56dd1ddc1878be46a42c905cd8580220/torchvision-0.21.0-cp311-cp311-manylinux1_x86_64.whl", hash = "sha256:3891cd086c5071bda6b4ee9d266bb2ac39c998c045c2ebcd1e818b8316fb5d41", size = 7237719 },
    { url = "https://files.pythonhosted.org/packages/8c/a1/ee962ef9d0b2bf7a6f8b14cb95acb70e05cd2101af521032a09e43f8582f/torchvision-0.21.0-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:54454923a50104c66a9ab6bd8b73a11c2fc218c964b1006d5d1fe5b442c3dcb6", size = 14700617 },
    { url = "https://files.pythonhosted.org/packages/88/53/4ad334b9b1d8dd99836869fec139cb74a27781298360b91b9506c53f1d10/torchvision-0.21.0-cp311-cp311-win_amd64.whl", hash = "sha256:49bcfad8cfe2c27dee116c45d4f866d7974bcf14a5a9fbef893635deae322f2f", size = 1560523 },
    { url = "https://files.pythonhosted.org/packages/6e/1b/28f527b22d5e8800184d0bc847f801ae92c7573a8c15979d92b7091c0751/torchvision-0.21.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:97a5814a93c793aaf0179cfc7f916024f4b63218929aee977b645633d074a49f", size = 1784140 },
    { url = "https://files.pythonhosted.org/packages/36/63/0722e153fd27d64d5b0af45b5c8cb0e80b35a68cf0130303bc9a8bb095c7/torchvision-0.21.0-cp312-cp312-manylinux1_x86_64.whl", hash = "sha256:b578bcad8a4083b40d34f689b19ca9f7c63e511758d806510ea03c29ac568f7b", size = 7238673 },
    { url = "https://files.pythonhosted.org/packages/bb/ea/03541ed901cdc30b934f897060d09bbf7a98466a08ad1680320f9ce0cbe0/torchvision-0.21.0-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:5083a5b1fec2351bf5ea9900a741d54086db75baec4b1d21e39451e00977f1b1", size = 14701186 },
    { url = "https://files.pythonhosted.org/packages/4c/6a/c7752603060d076dfed95135b78b047dc71792630cbcb022e3693d6f32ef/torchvision-0.21.0-cp312-cp312-win_amd64.whl", hash = "sha256:6eb75d41e3bbfc2f7642d0abba9383cc9ae6c5a4ca8d6b00628c225e1eaa63b3", size = 1560520 },
    { url = "https://files.pythonhosted.org/packages/f9/56/47d456b61c3bbce7bed4af3925c83d405bb87468e659fd3cf3d9840c3b51/torchvision-0.21.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:659b76c86757cb2ee4ca2db245e0740cfc3081fef46f0f1064d11adb4a8cee31", size = 1784141 },
    { url = "https://files.pythonhosted.org/packages/cb/4c/99880813aa50e64447fb1c4c6c804a793d2d78f7f7c53e99ddee7fa175fa/torchvision-0.21.0-cp313-cp313-manylinux1_x86_64.whl", hash = "sha256:084ac3f5a1f50c70d630a488d19bf62f323018eae1b1c1232f2b7047d3a7b76d", size = 7238714 },
    { url = "https://files.pythonhosted.org/packages/0b/2d/3c3ee10608310a395594aac7da8640372ed79c6585910ccae6919658dcdc/torchvision-0.21.0-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:5045a3a5f21ec3eea6962fa5f2fa2d4283f854caec25ada493fcf4aab2925467", size = 2281252 },
    { url = "https://files.pythonhosted.org/packages/ed/b4/fc60e3bc003879d3de842baea258fffc3586f4b49cd435a5ba1e09c33315/torchvision-0.21.0-cp313-cp313-win_amd64.whl", hash = "sha256:9147f5e096a9270684e3befdee350f3cacafd48e0c54ab195f45790a9c146d67", size = 1560519 },
]

[[package]]
name = "tornado"
version = "6.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/59/45/a0daf161f7d6f36c3ea5fc0c2de619746cc3dd4c76402e9db545bd920f63/tornado-6.4.2.tar.gz", hash = "sha256:92bad5b4746e9879fd7bf1eb21dce4e3fc5128d71601f80005afa39237ad620b", size = 501135 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/26/7e/71f604d8cea1b58f82ba3590290b66da1e72d840aeb37e0d5f7291bd30db/tornado-6.4.2-cp38-abi3-macosx_10_9_universal2.whl", hash = "sha256:e828cce1123e9e44ae2a50a9de3055497ab1d0aeb440c5ac23064d9e44880da1", size = 436299 },
    { url = "https://files.pythonhosted.org/packages/96/44/87543a3b99016d0bf54fdaab30d24bf0af2e848f1d13d34a3a5380aabe16/tornado-6.4.2-cp38-abi3-macosx_10_9_x86_64.whl", hash = "sha256:072ce12ada169c5b00b7d92a99ba089447ccc993ea2143c9ede887e0937aa803", size = 434253 },
    { url = "https://files.pythonhosted.org/packages/cb/fb/fdf679b4ce51bcb7210801ef4f11fdac96e9885daa402861751353beea6e/tornado-6.4.2-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1a017d239bd1bb0919f72af256a970624241f070496635784d9bf0db640d3fec", size = 437602 },
    { url = "https://files.pythonhosted.org/packages/4f/3b/e31aeffffc22b475a64dbeb273026a21b5b566f74dee48742817626c47dc/tornado-6.4.2-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c36e62ce8f63409301537222faffcef7dfc5284f27eec227389f2ad11b09d946", size = 436972 },
    { url = "https://files.pythonhosted.org/packages/22/55/b78a464de78051a30599ceb6983b01d8f732e6f69bf37b4ed07f642ac0fc/tornado-6.4.2-cp38-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bca9eb02196e789c9cb5c3c7c0f04fb447dc2adffd95265b2c7223a8a615ccbf", size = 437173 },
    { url = "https://files.pythonhosted.org/packages/79/5e/be4fb0d1684eb822c9a62fb18a3e44a06188f78aa466b2ad991d2ee31104/tornado-6.4.2-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:304463bd0772442ff4d0f5149c6f1c2135a1fae045adf070821c6cdc76980634", size = 437892 },
    { url = "https://files.pythonhosted.org/packages/f5/33/4f91fdd94ea36e1d796147003b490fe60a0215ac5737b6f9c65e160d4fe0/tornado-6.4.2-cp38-abi3-musllinux_1_2_i686.whl", hash = "sha256:c82c46813ba483a385ab2a99caeaedf92585a1f90defb5693351fa7e4ea0bf73", size = 437334 },
    { url = "https://files.pythonhosted.org/packages/2b/ae/c1b22d4524b0e10da2f29a176fb2890386f7bd1f63aacf186444873a88a0/tornado-6.4.2-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:932d195ca9015956fa502c6b56af9eb06106140d844a335590c1ec7f5277d10c", size = 437261 },
    { url = "https://files.pythonhosted.org/packages/b5/25/36dbd49ab6d179bcfc4c6c093a51795a4f3bed380543a8242ac3517a1751/tornado-6.4.2-cp38-abi3-win32.whl", hash = "sha256:2876cef82e6c5978fde1e0d5b1f919d756968d5b4282418f3146b79b58556482", size = 438463 },
    { url = "https://files.pythonhosted.org/packages/61/cc/58b1adeb1bb46228442081e746fcdbc4540905c87e8add7c277540934edb/tornado-6.4.2-cp38-abi3-win_amd64.whl", hash = "sha256:908b71bf3ff37d81073356a5fadcc660eb10c1476ee6e2725588626ce7e5ca38", size = 438907 },
]

[[package]]
name = "tqdm"
version = "4.67.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a8/4b/29b4ef32e036bb34e4ab51796dd745cdba7ed47ad142a9f4a1eb8e0c744d/tqdm-4.67.1.tar.gz", hash = "sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2", size = 169737 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/30/dc54f88dd4a2b5dc8a0279bdd7270e735851848b762aeb1c1184ed1f6b14/tqdm-4.67.1-py3-none-any.whl", hash = "sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2", size = 78540 },
]

[[package]]
name = "trafilatura"
version = "2.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "courlan" },
    { name = "htmldate" },
    { name = "justext" },
    { name = "lxml" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/06/25/e3ebeefdebfdfae8c4a4396f5a6ea51fc6fa0831d63ce338e5090a8003dc/trafilatura-2.0.0.tar.gz", hash = "sha256:ceb7094a6ecc97e72fea73c7dba36714c5c5b577b6470e4520dca893706d6247", size = 253404 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/b6/097367f180b6383a3581ca1b86fcae284e52075fa941d1232df35293363c/trafilatura-2.0.0-py3-none-any.whl", hash = "sha256:77eb5d1e993747f6f20938e1de2d840020719735690c840b9a1024803a4cd51d", size = 132557 },
]

[[package]]
name = "traitlets"
version = "5.14.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/eb/79/72064e6a701c2183016abbbfedaba506d81e30e232a68c9f0d6f6fcd1574/traitlets-5.14.3.tar.gz", hash = "sha256:9ed0579d3502c94b4b3732ac120375cda96f923114522847de4b3bb98b96b6b7", size = 161621 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/00/c0/8f5d070730d7836adc9c9b6408dec68c6ced86b304a9b26a14df072a6e8c/traitlets-5.14.3-py3-none-any.whl", hash = "sha256:b74e89e397b1ed28cc831db7aea759ba6640cb3de13090ca145426688ff1ac4f", size = 85359 },
]

[[package]]
name = "transformers"
version = "4.51.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "filelock" },
    { name = "huggingface-hub" },
    { name = "numpy" },
    { name = "packaging" },
    { name = "pyyaml" },
    { name = "regex" },
    { name = "requests" },
    { name = "safetensors" },
    { name = "tokenizers" },
    { name = "tqdm" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e4/cf/f5b8a3e9e9f9f8290202278d1e1156ee40ef7bca4055f55893e79026d77a/transformers-4.51.2.tar.gz", hash = "sha256:ed221c31581e97127cff5de775b05f05d19698b439d7d638ff445502a7f37331", size = 8925420 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/15/af/a3eb4449c8fdde24413555a66e9c100b669f4428fc829bad4ceb73472f4f/transformers-4.51.2-py3-none-any.whl", hash = "sha256:5cb8259098b75ff4b5dd04533a318f7c4750d5307d9617e6d0593526432c404d", size = 10366692 },
]

[[package]]
name = "triton"
version = "3.2.0"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a7/2e/757d2280d4fefe7d33af7615124e7e298ae7b8e3bc4446cdb8e88b0f9bab/triton-3.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8009a1fb093ee8546495e96731336a33fb8856a38e45bb4ab6affd6dbc3ba220", size = 253157636 },
    { url = "https://files.pythonhosted.org/packages/06/00/59500052cb1cf8cf5316be93598946bc451f14072c6ff256904428eaf03c/triton-3.2.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8d9b215efc1c26fa7eefb9a157915c92d52e000d2bf83e5f69704047e63f125c", size = 253159365 },
    { url = "https://files.pythonhosted.org/packages/c7/30/37a3384d1e2e9320331baca41e835e90a3767303642c7a80d4510152cbcf/triton-3.2.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e5dfa23ba84541d7c0a531dfce76d8bcd19159d50a4a8b14ad01e91734a5c1b0", size = 253154278 },
]

[[package]]
name = "types-python-dateutil"
version = "2.9.0.20241206"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a9/60/47d92293d9bc521cd2301e423a358abfac0ad409b3a1606d8fbae1321961/types_python_dateutil-2.9.0.20241206.tar.gz", hash = "sha256:18f493414c26ffba692a72369fea7a154c502646301ebfe3d56a04b3767284cb", size = 13802 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0f/b3/ca41df24db5eb99b00d97f89d7674a90cb6b3134c52fb8121b6d8d30f15c/types_python_dateutil-2.9.0.20241206-py3-none-any.whl", hash = "sha256:e248a4bc70a486d3e3ec84d0dc30eec3a5f979d6e7ee4123ae043eedbb987f53", size = 14384 },
]

[[package]]
name = "typing-extensions"
version = "4.13.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f6/37/23083fcd6e35492953e8d2aaaa68b860eb422b34627b13f2ce3eb6106061/typing_extensions-4.13.2.tar.gz", hash = "sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef", size = 106967 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8b/54/b1ae86c0973cc6f0210b53d508ca3641fb6d0c56823f288d108bc7ab3cc8/typing_extensions-4.13.2-py3-none-any.whl", hash = "sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c", size = 45806 },
]

[[package]]
name = "typing-inspection"
version = "0.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/82/5c/e6082df02e215b846b4b8c0b887a64d7d08ffaba30605502639d44c06b82/typing_inspection-0.4.0.tar.gz", hash = "sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122", size = 76222 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/31/08/aa4fdfb71f7de5176385bd9e90852eaf6b5d622735020ad600f2bab54385/typing_inspection-0.4.0-py3-none-any.whl", hash = "sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f", size = 14125 },
]

[[package]]
name = "tzdata"
version = "2025.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/95/32/1a225d6164441be760d75c2c42e2780dc0873fe382da3e98a2e1e48361e5/tzdata-2025.2.tar.gz", hash = "sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9", size = 196380 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5c/23/c7abc0ca0a1526a0774eca151daeb8de62ec457e77262b66b359c3c7679e/tzdata-2025.2-py2.py3-none-any.whl", hash = "sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8", size = 347839 },
]

[[package]]
name = "tzlocal"
version = "5.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "tzdata", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8b/2e/c14812d3d4d9cd1773c6be938f89e5735a1f11a9f184ac3639b93cef35d5/tzlocal-5.3.1.tar.gz", hash = "sha256:cceffc7edecefea1f595541dbd6e990cb1ea3d19bf01b2809f362a03dd7921fd", size = 30761 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c2/14/e2a54fabd4f08cd7af1c07030603c3356b74da07f7cc056e600436edfa17/tzlocal-5.3.1-py3-none-any.whl", hash = "sha256:eb1a66c3ef5847adf7a834f1be0800581b683b5608e74f86ecbcef8ab91bb85d", size = 18026 },
]

[[package]]
name = "ua-parser"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ua-parser-builtins" },
]
sdist = { url = "https://files.pythonhosted.org/packages/70/0e/ed98be735bc89d5040e0c60f5620d0b8c04e9e7da99ed1459e8050e90a77/ua_parser-1.0.1.tar.gz", hash = "sha256:f9d92bf19d4329019cef91707aecc23c6d65143ad7e29a233f0580fb0d15547d", size = 728106 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/94/37/be6dfbfa45719aa82c008fb4772cfe5c46db765a2ca4b6f524a1fdfee4d7/ua_parser-1.0.1-py3-none-any.whl", hash = "sha256:b059f2cb0935addea7e551251cbbf42e9a8872f86134163bc1a4f79e0945ffea", size = 31410 },
]

[[package]]
name = "ua-parser-builtins"
version = "0.18.0.post1"
source = { registry = "https://pypi.org/simple" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6f/d3/13adff37f15489c784cc7669c35a6c3bf94b87540229eedf52ef2a1d0175/ua_parser_builtins-0.18.0.post1-py3-none-any.whl", hash = "sha256:eb4f93504040c3a990a6b0742a2afd540d87d7f9f05fd66e94c101db1564674d", size = 86077 },
]

[[package]]
name = "uri-template"
version = "1.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/31/c7/0336f2bd0bcbada6ccef7aaa25e443c118a704f828a0620c6fa0207c1b64/uri-template-1.3.0.tar.gz", hash = "sha256:0e00f8eb65e18c7de20d595a14336e9f337ead580c70934141624b6d1ffdacc7", size = 21678 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e7/00/3fca040d7cf8a32776d3d81a00c8ee7457e00f80c649f1e4a863c8321ae9/uri_template-1.3.0-py3-none-any.whl", hash = "sha256:a44a133ea12d44a0c0f06d7d42a52d71282e77e2f937d8abd5655b8d56fc1363", size = 11140 },
]

[[package]]
name = "urllib3"
version = "2.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8a/78/16493d9c386d8e60e442a35feac5e00f0913c0f4b7c217c11e8ec2ff53e0/urllib3-2.4.0.tar.gz", hash = "sha256:414bc6535b787febd7567804cc015fee39daab8ad86268f1310a9250697de466", size = 390672 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6b/11/cc635220681e93a0183390e26485430ca2c7b5f9d33b15c74c2861cb8091/urllib3-2.4.0-py3-none-any.whl", hash = "sha256:4e16665048960a0900c702d4a66415956a584919c03361cac9f1df5c5dd7e813", size = 128680 },
]

[[package]]
name = "uvicorn"
version = "0.29.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/49/8d/5005d39cd79c9ae87baf7d7aafdcdfe0b13aa69d9a1e3b7f1c984a2ac6d2/uvicorn-0.29.0.tar.gz", hash = "sha256:6a69214c0b6a087462412670b3ef21224fa48cae0e452b5883e8e8bdfdd11dd0", size = 40894 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/73/f5/cbb16fcbe277c1e0b8b3ddd188f2df0e0947f545c49119b589643632d156/uvicorn-0.29.0-py3-none-any.whl", hash = "sha256:2c2aac7ff4f4365c206fd773a39bf4ebd1047c238f8b8268ad996829323473de", size = 60813 },
]

[[package]]
name = "uvloop"
version = "0.21.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/af/c0/854216d09d33c543f12a44b393c402e89a920b1a0a7dc634c42de91b9cf6/uvloop-0.21.0.tar.gz", hash = "sha256:3bf12b0fda68447806a7ad847bfa591613177275d35b6724b1ee573faa3704e3", size = 2492741 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/57/a7/4cf0334105c1160dd6819f3297f8700fda7fc30ab4f61fbf3e725acbc7cc/uvloop-0.21.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:c0f3fa6200b3108919f8bdabb9a7f87f20e7097ea3c543754cabc7d717d95cf8", size = 1447410 },
    { url = "https://files.pythonhosted.org/packages/8c/7c/1517b0bbc2dbe784b563d6ab54f2ef88c890fdad77232c98ed490aa07132/uvloop-0.21.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:0878c2640cf341b269b7e128b1a5fed890adc4455513ca710d77d5e93aa6d6a0", size = 805476 },
    { url = "https://files.pythonhosted.org/packages/ee/ea/0bfae1aceb82a503f358d8d2fa126ca9dbdb2ba9c7866974faec1cb5875c/uvloop-0.21.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b9fb766bb57b7388745d8bcc53a359b116b8a04c83a2288069809d2b3466c37e", size = 3960855 },
    { url = "https://files.pythonhosted.org/packages/8a/ca/0864176a649838b838f36d44bf31c451597ab363b60dc9e09c9630619d41/uvloop-0.21.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8a375441696e2eda1c43c44ccb66e04d61ceeffcd76e4929e527b7fa401b90fb", size = 3973185 },
    { url = "https://files.pythonhosted.org/packages/30/bf/08ad29979a936d63787ba47a540de2132169f140d54aa25bc8c3df3e67f4/uvloop-0.21.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:baa0e6291d91649c6ba4ed4b2f982f9fa165b5bbd50a9e203c416a2797bab3c6", size = 3820256 },
    { url = "https://files.pythonhosted.org/packages/da/e2/5cf6ef37e3daf2f06e651aae5ea108ad30df3cb269102678b61ebf1fdf42/uvloop-0.21.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:4509360fcc4c3bd2c70d87573ad472de40c13387f5fda8cb58350a1d7475e58d", size = 3937323 },
    { url = "https://files.pythonhosted.org/packages/8c/4c/03f93178830dc7ce8b4cdee1d36770d2f5ebb6f3d37d354e061eefc73545/uvloop-0.21.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:359ec2c888397b9e592a889c4d72ba3d6befba8b2bb01743f72fffbde663b59c", size = 1471284 },
    { url = "https://files.pythonhosted.org/packages/43/3e/92c03f4d05e50f09251bd8b2b2b584a2a7f8fe600008bcc4523337abe676/uvloop-0.21.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:f7089d2dc73179ce5ac255bdf37c236a9f914b264825fdaacaded6990a7fb4c2", size = 821349 },
    { url = "https://files.pythonhosted.org/packages/a6/ef/a02ec5da49909dbbfb1fd205a9a1ac4e88ea92dcae885e7c961847cd51e2/uvloop-0.21.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:baa4dcdbd9ae0a372f2167a207cd98c9f9a1ea1188a8a526431eef2f8116cc8d", size = 4580089 },
    { url = "https://files.pythonhosted.org/packages/06/a7/b4e6a19925c900be9f98bec0a75e6e8f79bb53bdeb891916609ab3958967/uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:86975dca1c773a2c9864f4c52c5a55631038e387b47eaf56210f873887b6c8dc", size = 4693770 },
    { url = "https://files.pythonhosted.org/packages/ce/0c/f07435a18a4b94ce6bd0677d8319cd3de61f3a9eeb1e5f8ab4e8b5edfcb3/uvloop-0.21.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:461d9ae6660fbbafedd07559c6a2e57cd553b34b0065b6550685f6653a98c1cb", size = 4451321 },
    { url = "https://files.pythonhosted.org/packages/8f/eb/f7032be105877bcf924709c97b1bf3b90255b4ec251f9340cef912559f28/uvloop-0.21.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:183aef7c8730e54c9a3ee3227464daed66e37ba13040bb3f350bc2ddc040f22f", size = 4659022 },
    { url = "https://files.pythonhosted.org/packages/3f/8d/2cbef610ca21539f0f36e2b34da49302029e7c9f09acef0b1c3b5839412b/uvloop-0.21.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:bfd55dfcc2a512316e65f16e503e9e450cab148ef11df4e4e679b5e8253a5281", size = 1468123 },
    { url = "https://files.pythonhosted.org/packages/93/0d/b0038d5a469f94ed8f2b2fce2434a18396d8fbfb5da85a0a9781ebbdec14/uvloop-0.21.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:787ae31ad8a2856fc4e7c095341cccc7209bd657d0e71ad0dc2ea83c4a6fa8af", size = 819325 },
    { url = "https://files.pythonhosted.org/packages/50/94/0a687f39e78c4c1e02e3272c6b2ccdb4e0085fda3b8352fecd0410ccf915/uvloop-0.21.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5ee4d4ef48036ff6e5cfffb09dd192c7a5027153948d85b8da7ff705065bacc6", size = 4582806 },
    { url = "https://files.pythonhosted.org/packages/d2/19/f5b78616566ea68edd42aacaf645adbf71fbd83fc52281fba555dc27e3f1/uvloop-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f3df876acd7ec037a3d005b3ab85a7e4110422e4d9c1571d4fc89b0fc41b6816", size = 4701068 },
    { url = "https://files.pythonhosted.org/packages/47/57/66f061ee118f413cd22a656de622925097170b9380b30091b78ea0c6ea75/uvloop-0.21.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:bd53ecc9a0f3d87ab847503c2e1552b690362e005ab54e8a48ba97da3924c0dc", size = 4454428 },
    { url = "https://files.pythonhosted.org/packages/63/9a/0962b05b308494e3202d3f794a6e85abe471fe3cafdbcf95c2e8c713aabd/uvloop-0.21.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:a5c39f217ab3c663dc699c04cbd50c13813e31d917642d459fdcec07555cc553", size = 4660018 },
]

[[package]]
name = "virtualenv"
version = "20.30.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "distlib" },
    { name = "filelock" },
    { name = "platformdirs" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/e0/633e369b91bbc664df47dcb5454b6c7cf441e8f5b9d0c250ce9f0546401e/virtualenv-20.30.0.tar.gz", hash = "sha256:800863162bcaa5450a6e4d721049730e7f2dae07720e0902b0e4040bd6f9ada8", size = 4346945 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4c/ed/3cfeb48175f0671ec430ede81f628f9fb2b1084c9064ca67ebe8c0ed6a05/virtualenv-20.30.0-py3-none-any.whl", hash = "sha256:e34302959180fca3af42d1800df014b35019490b119eba981af27f2fa486e5d6", size = 4329461 },
]

[[package]]
name = "watchdog"
version = "6.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/db/7d/7f3d619e951c88ed75c6037b246ddcf2d322812ee8ea189be89511721d54/watchdog-6.0.0.tar.gz", hash = "sha256:9ddf7c82fda3ae8e24decda1338ede66e1c99883db93711d8fb941eaa2d8c282", size = 131220 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a9/c7/ca4bf3e518cb57a686b2feb4f55a1892fd9a3dd13f470fca14e00f80ea36/watchdog-6.0.0-py3-none-manylinux2014_aarch64.whl", hash = "sha256:7607498efa04a3542ae3e05e64da8202e58159aa1fa4acddf7678d34a35d4f13", size = 79079 },
    { url = "https://files.pythonhosted.org/packages/5c/51/d46dc9332f9a647593c947b4b88e2381c8dfc0942d15b8edc0310fa4abb1/watchdog-6.0.0-py3-none-manylinux2014_armv7l.whl", hash = "sha256:9041567ee8953024c83343288ccc458fd0a2d811d6a0fd68c4c22609e3490379", size = 79078 },
    { url = "https://files.pythonhosted.org/packages/d4/57/04edbf5e169cd318d5f07b4766fee38e825d64b6913ca157ca32d1a42267/watchdog-6.0.0-py3-none-manylinux2014_i686.whl", hash = "sha256:82dc3e3143c7e38ec49d61af98d6558288c415eac98486a5c581726e0737c00e", size = 79076 },
    { url = "https://files.pythonhosted.org/packages/ab/cc/da8422b300e13cb187d2203f20b9253e91058aaf7db65b74142013478e66/watchdog-6.0.0-py3-none-manylinux2014_ppc64.whl", hash = "sha256:212ac9b8bf1161dc91bd09c048048a95ca3a4c4f5e5d4a7d1b1a7d5752a7f96f", size = 79077 },
    { url = "https://files.pythonhosted.org/packages/2c/3b/b8964e04ae1a025c44ba8e4291f86e97fac443bca31de8bd98d3263d2fcf/watchdog-6.0.0-py3-none-manylinux2014_ppc64le.whl", hash = "sha256:e3df4cbb9a450c6d49318f6d14f4bbc80d763fa587ba46ec86f99f9e6876bb26", size = 79078 },
    { url = "https://files.pythonhosted.org/packages/62/ae/a696eb424bedff7407801c257d4b1afda455fe40821a2be430e173660e81/watchdog-6.0.0-py3-none-manylinux2014_s390x.whl", hash = "sha256:2cce7cfc2008eb51feb6aab51251fd79b85d9894e98ba847408f662b3395ca3c", size = 79077 },
    { url = "https://files.pythonhosted.org/packages/b5/e8/dbf020b4d98251a9860752a094d09a65e1b436ad181faf929983f697048f/watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl", hash = "sha256:20ffe5b202af80ab4266dcd3e91aae72bf2da48c0d33bdb15c66658e685e94e2", size = 79078 },
    { url = "https://files.pythonhosted.org/packages/07/f6/d0e5b343768e8bcb4cda79f0f2f55051bf26177ecd5651f84c07567461cf/watchdog-6.0.0-py3-none-win32.whl", hash = "sha256:07df1fdd701c5d4c8e55ef6cf55b8f0120fe1aef7ef39a1c6fc6bc2e606d517a", size = 79065 },
    { url = "https://files.pythonhosted.org/packages/db/d9/c495884c6e548fce18a8f40568ff120bc3a4b7b99813081c8ac0c936fa64/watchdog-6.0.0-py3-none-win_amd64.whl", hash = "sha256:cbafb470cf848d93b5d013e2ecb245d4aa1c8fd0504e863ccefa32445359d680", size = 79070 },
    { url = "https://files.pythonhosted.org/packages/33/e8/e40370e6d74ddba47f002a32919d91310d6074130fe4e17dabcafc15cbf1/watchdog-6.0.0-py3-none-win_ia64.whl", hash = "sha256:a1914259fa9e1454315171103c6a30961236f508b9b623eae470268bbcc6a22f", size = 79067 },
]

[[package]]
name = "wcwidth"
version = "0.2.13"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6c/63/53559446a878410fc5a5974feb13d31d78d752eb18aeba59c7fef1af7598/wcwidth-0.2.13.tar.gz", hash = "sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5", size = 101301 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fd/84/fd2ba7aafacbad3c4201d395674fc6348826569da3c0937e75505ead3528/wcwidth-0.2.13-py2.py3-none-any.whl", hash = "sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859", size = 34166 },
]

[[package]]
name = "webcolors"
version = "24.11.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7b/29/061ec845fb58521848f3739e466efd8250b4b7b98c1b6c5bf4d40b419b7e/webcolors-24.11.1.tar.gz", hash = "sha256:ecb3d768f32202af770477b8b65f318fa4f566c22948673a977b00d589dd80f6", size = 45064 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/60/e8/c0e05e4684d13459f93d312077a9a2efbe04d59c393bc2b8802248c908d4/webcolors-24.11.1-py3-none-any.whl", hash = "sha256:515291393b4cdf0eb19c155749a096f779f7d909f7cceea072791cb9095b92e9", size = 14934 },
]

[[package]]
name = "webencodings"
version = "0.5.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0b/02/ae6ceac1baeda530866a85075641cec12989bd8d31af6d5ab4a3e8c92f47/webencodings-0.5.1.tar.gz", hash = "sha256:b36a1c245f2d304965eb4e0a82848379241dc04b865afcc4aab16748587e1923", size = 9721 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f4/24/2a3e3df732393fed8b3ebf2ec078f05546de641fe1b667ee316ec1dcf3b7/webencodings-0.5.1-py2.py3-none-any.whl", hash = "sha256:a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78", size = 11774 },
]

[[package]]
name = "websocket-client"
version = "1.8.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e6/30/fba0d96b4b5fbf5948ed3f4681f7da2f9f64512e1d303f94b4cc174c24a5/websocket_client-1.8.0.tar.gz", hash = "sha256:3239df9f44da632f96012472805d40a23281a991027ce11d2f45a6f24ac4c3da", size = 54648 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5a/84/44687a29792a70e111c5c477230a72c4b957d88d16141199bf9acb7537a3/websocket_client-1.8.0-py3-none-any.whl", hash = "sha256:17b44cc997f5c498e809b22cdf2d9c7a9e71c02c8cc2b6c56e7c2d1239bfa526", size = 58826 },
]

[[package]]
name = "websockets"
version = "13.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e2/73/9223dbc7be3dcaf2a7bbf756c351ec8da04b1fa573edaf545b95f6b0c7fd/websockets-13.1.tar.gz", hash = "sha256:a3b3366087c1bc0a2795111edcadddb8b3b59509d5db5d7ea3fdd69f954a8878", size = 158549 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/f0/cf0b8a30d86b49e267ac84addbebbc7a48a6e7bb7c19db80f62411452311/websockets-13.1-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:61fc0dfcda609cda0fc9fe7977694c0c59cf9d749fbb17f4e9483929e3c48a19", size = 157813 },
    { url = "https://files.pythonhosted.org/packages/bf/e7/22285852502e33071a8cf0ac814f8988480ec6db4754e067b8b9d0e92498/websockets-13.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:ceec59f59d092c5007e815def4ebb80c2de330e9588e101cf8bd94c143ec78a5", size = 155469 },
    { url = "https://files.pythonhosted.org/packages/68/d4/c8c7c1e5b40ee03c5cc235955b0fb1ec90e7e37685a5f69229ad4708dcde/websockets-13.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:c1dca61c6db1166c48b95198c0b7d9c990b30c756fc2923cc66f68d17dc558fd", size = 155717 },
    { url = "https://files.pythonhosted.org/packages/c9/e4/c50999b9b848b1332b07c7fd8886179ac395cb766fda62725d1539e7bc6c/websockets-13.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:308e20f22c2c77f3f39caca508e765f8725020b84aa963474e18c59accbf4c02", size = 165379 },
    { url = "https://files.pythonhosted.org/packages/bc/49/4a4ad8c072f18fd79ab127650e47b160571aacfc30b110ee305ba25fffc9/websockets-13.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:62d516c325e6540e8a57b94abefc3459d7dab8ce52ac75c96cad5549e187e3a7", size = 164376 },
    { url = "https://files.pythonhosted.org/packages/af/9b/8c06d425a1d5a74fd764dd793edd02be18cf6fc3b1ccd1f29244ba132dc0/websockets-13.1-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:87c6e35319b46b99e168eb98472d6c7d8634ee37750d7693656dc766395df096", size = 164753 },
    { url = "https://files.pythonhosted.org/packages/d5/5b/0acb5815095ff800b579ffc38b13ab1b915b317915023748812d24e0c1ac/websockets-13.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:5f9fee94ebafbc3117c30be1844ed01a3b177bb6e39088bc6b2fa1dc15572084", size = 165051 },
    { url = "https://files.pythonhosted.org/packages/30/93/c3891c20114eacb1af09dedfcc620c65c397f4fd80a7009cd12d9457f7f5/websockets-13.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:7c1e90228c2f5cdde263253fa5db63e6653f1c00e7ec64108065a0b9713fa1b3", size = 164489 },
    { url = "https://files.pythonhosted.org/packages/28/09/af9e19885539759efa2e2cd29b8b3f9eecef7ecefea40d46612f12138b36/websockets-13.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:6548f29b0e401eea2b967b2fdc1c7c7b5ebb3eeb470ed23a54cd45ef078a0db9", size = 164438 },
    { url = "https://files.pythonhosted.org/packages/b6/08/6f38b8e625b3d93de731f1d248cc1493327f16cb45b9645b3e791782cff0/websockets-13.1-cp311-cp311-win32.whl", hash = "sha256:c11d4d16e133f6df8916cc5b7e3e96ee4c44c936717d684a94f48f82edb7c92f", size = 158710 },
    { url = "https://files.pythonhosted.org/packages/fb/39/ec8832ecb9bb04a8d318149005ed8cee0ba4e0205835da99e0aa497a091f/websockets-13.1-cp311-cp311-win_amd64.whl", hash = "sha256:d04f13a1d75cb2b8382bdc16ae6fa58c97337253826dfe136195b7f89f661557", size = 159137 },
    { url = "https://files.pythonhosted.org/packages/df/46/c426282f543b3c0296cf964aa5a7bb17e984f58dde23460c3d39b3148fcf/websockets-13.1-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:9d75baf00138f80b48f1eac72ad1535aac0b6461265a0bcad391fc5aba875cfc", size = 157821 },
    { url = "https://files.pythonhosted.org/packages/aa/85/22529867010baac258da7c45848f9415e6cf37fef00a43856627806ffd04/websockets-13.1-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:9b6f347deb3dcfbfde1c20baa21c2ac0751afaa73e64e5b693bb2b848efeaa49", size = 155480 },
    { url = "https://files.pythonhosted.org/packages/29/2c/bdb339bfbde0119a6e84af43ebf6275278698a2241c2719afc0d8b0bdbf2/websockets-13.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:de58647e3f9c42f13f90ac7e5f58900c80a39019848c5547bc691693098ae1bd", size = 155715 },
    { url = "https://files.pythonhosted.org/packages/9f/d0/8612029ea04c5c22bf7af2fd3d63876c4eaeef9b97e86c11972a43aa0e6c/websockets-13.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a1b54689e38d1279a51d11e3467dd2f3a50f5f2e879012ce8f2d6943f00e83f0", size = 165647 },
    { url = "https://files.pythonhosted.org/packages/56/04/1681ed516fa19ca9083f26d3f3a302257e0911ba75009533ed60fbb7b8d1/websockets-13.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:cf1781ef73c073e6b0f90af841aaf98501f975d306bbf6221683dd594ccc52b6", size = 164592 },
    { url = "https://files.pythonhosted.org/packages/38/6f/a96417a49c0ed132bb6087e8e39a37db851c70974f5c724a4b2a70066996/websockets-13.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8d23b88b9388ed85c6faf0e74d8dec4f4d3baf3ecf20a65a47b836d56260d4b9", size = 165012 },
    { url = "https://files.pythonhosted.org/packages/40/8b/fccf294919a1b37d190e86042e1a907b8f66cff2b61e9befdbce03783e25/websockets-13.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3c78383585f47ccb0fcf186dcb8a43f5438bd7d8f47d69e0b56f71bf431a0a68", size = 165311 },
    { url = "https://files.pythonhosted.org/packages/c1/61/f8615cf7ce5fe538476ab6b4defff52beb7262ff8a73d5ef386322d9761d/websockets-13.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:d6d300f8ec35c24025ceb9b9019ae9040c1ab2f01cddc2bcc0b518af31c75c14", size = 164692 },
    { url = "https://files.pythonhosted.org/packages/5c/f1/a29dd6046d3a722d26f182b783a7997d25298873a14028c4760347974ea3/websockets-13.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:a9dcaf8b0cc72a392760bb8755922c03e17a5a54e08cca58e8b74f6902b433cf", size = 164686 },
    { url = "https://files.pythonhosted.org/packages/0f/99/ab1cdb282f7e595391226f03f9b498f52109d25a2ba03832e21614967dfa/websockets-13.1-cp312-cp312-win32.whl", hash = "sha256:2f85cf4f2a1ba8f602298a853cec8526c2ca42a9a4b947ec236eaedb8f2dc80c", size = 158712 },
    { url = "https://files.pythonhosted.org/packages/46/93/e19160db48b5581feac8468330aa11b7292880a94a37d7030478596cc14e/websockets-13.1-cp312-cp312-win_amd64.whl", hash = "sha256:38377f8b0cdeee97c552d20cf1865695fcd56aba155ad1b4ca8779a5b6ef4ac3", size = 159145 },
    { url = "https://files.pythonhosted.org/packages/51/20/2b99ca918e1cbd33c53db2cace5f0c0cd8296fc77558e1908799c712e1cd/websockets-13.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a9ab1e71d3d2e54a0aa646ab6d4eebfaa5f416fe78dfe4da2839525dc5d765c6", size = 157828 },
    { url = "https://files.pythonhosted.org/packages/b8/47/0932a71d3d9c0e9483174f60713c84cee58d62839a143f21a2bcdbd2d205/websockets-13.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:b9d7439d7fab4dce00570bb906875734df13d9faa4b48e261c440a5fec6d9708", size = 155487 },
    { url = "https://files.pythonhosted.org/packages/a9/60/f1711eb59ac7a6c5e98e5637fef5302f45b6f76a2c9d64fd83bbb341377a/websockets-13.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:327b74e915cf13c5931334c61e1a41040e365d380f812513a255aa804b183418", size = 155721 },
    { url = "https://files.pythonhosted.org/packages/6a/e6/ba9a8db7f9d9b0e5f829cf626ff32677f39824968317223605a6b419d445/websockets-13.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:325b1ccdbf5e5725fdcb1b0e9ad4d2545056479d0eee392c291c1bf76206435a", size = 165609 },
    { url = "https://files.pythonhosted.org/packages/c1/22/4ec80f1b9c27a0aebd84ccd857252eda8418ab9681eb571b37ca4c5e1305/websockets-13.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:346bee67a65f189e0e33f520f253d5147ab76ae42493804319b5716e46dddf0f", size = 164556 },
    { url = "https://files.pythonhosted.org/packages/27/ac/35f423cb6bb15600438db80755609d27eda36d4c0b3c9d745ea12766c45e/websockets-13.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:91a0fa841646320ec0d3accdff5b757b06e2e5c86ba32af2e0815c96c7a603c5", size = 164993 },
    { url = "https://files.pythonhosted.org/packages/31/4e/98db4fd267f8be9e52e86b6ee4e9aa7c42b83452ea0ea0672f176224b977/websockets-13.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:18503d2c5f3943e93819238bf20df71982d193f73dcecd26c94514f417f6b135", size = 165360 },
    { url = "https://files.pythonhosted.org/packages/3f/15/3f0de7cda70ffc94b7e7024544072bc5b26e2c1eb36545291abb755d8cdb/websockets-13.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:a9cd1af7e18e5221d2878378fbc287a14cd527fdd5939ed56a18df8a31136bb2", size = 164745 },
    { url = "https://files.pythonhosted.org/packages/a1/6e/66b6b756aebbd680b934c8bdbb6dcb9ce45aad72cde5f8a7208dbb00dd36/websockets-13.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:70c5be9f416aa72aab7a2a76c90ae0a4fe2755c1816c153c1a2bcc3333ce4ce6", size = 164732 },
    { url = "https://files.pythonhosted.org/packages/35/c6/12e3aab52c11aeb289e3dbbc05929e7a9d90d7a9173958477d3ef4f8ce2d/websockets-13.1-cp313-cp313-win32.whl", hash = "sha256:624459daabeb310d3815b276c1adef475b3e6804abaf2d9d2c061c319f7f187d", size = 158709 },
    { url = "https://files.pythonhosted.org/packages/41/d8/63d6194aae711d7263df4498200c690a9c39fb437ede10f3e157a6343e0d/websockets-13.1-cp313-cp313-win_amd64.whl", hash = "sha256:c518e84bb59c2baae725accd355c8dc517b4a3ed8db88b4bc93c78dae2974bf2", size = 159144 },
    { url = "https://files.pythonhosted.org/packages/56/27/96a5cd2626d11c8280656c6c71d8ab50fe006490ef9971ccd154e0c42cd2/websockets-13.1-py3-none-any.whl", hash = "sha256:a9a396a6ad26130cdae92ae10c36af09d9bfe6cafe69670fd3b6da9b07b4044f", size = 152134 },
]

[[package]]
name = "widgetsnbextension"
version = "4.0.14"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/41/53/2e0253c5efd69c9656b1843892052a31c36d37ad42812b5da45c62191f7e/widgetsnbextension-4.0.14.tar.gz", hash = "sha256:a3629b04e3edb893212df862038c7232f62973373869db5084aed739b437b5af", size = 1097428 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ca/51/5447876806d1088a0f8f71e16542bf350918128d0a69437df26047c8e46f/widgetsnbextension-4.0.14-py3-none-any.whl", hash = "sha256:4875a9eaf72fbf5079dc372a51a9f268fc38d46f767cbf85c43a36da5cb9b575", size = 2196503 },
]

[[package]]
name = "win32-setctime"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b3/8f/705086c9d734d3b663af0e9bb3d4de6578d08f46b1b101c2442fd9aecaa2/win32_setctime-1.2.0.tar.gz", hash = "sha256:ae1fdf948f5640aae05c511ade119313fb6a30d7eabe25fef9764dca5873c4c0", size = 4867 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/07/c6fe3ad3e685340704d314d765b7912993bcb8dc198f0e7a89382d37974b/win32_setctime-1.2.0-py3-none-any.whl", hash = "sha256:95d644c4e708aba81dc3704a116d8cbc974d70b3bdb8be1d150e36be6e9d1390", size = 4083 },
]

[[package]]
name = "yarl"
version = "1.19.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "multidict" },
    { name = "propcache" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/4d/8a8f57caccce49573e567744926f88c6ab3ca0b47a257806d1cf88584c5f/yarl-1.19.0.tar.gz", hash = "sha256:01e02bb80ae0dbed44273c304095295106e1d9470460e773268a27d11e594892", size = 184396 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9b/df/5fa7cd75e46306e0f9baf38a7c8969ff6730ea503b86232e85cb740304cf/yarl-1.19.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:163ff326680de5f6d4966954cf9e3fe1bf980f5fee2255e46e89b8cf0f3418b5", size = 145126 },
    { url = "https://files.pythonhosted.org/packages/2a/be/c1b52129cd2166ab7337f08e701a61baa7c260c7b03b534098cc8297aecc/yarl-1.19.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:a626c4d9cca298d1be8625cff4b17004a9066330ac82d132bbda64a4c17c18d3", size = 96691 },
    { url = "https://files.pythonhosted.org/packages/8d/39/ad62139b45515f9bf129c805aeaaedf86fd93ae57ffe911f4caeabef3e74/yarl-1.19.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:961c3e401ea7f13d02b8bb7cb0c709152a632a6e14cdc8119e9c6ee5596cd45d", size = 94505 },
    { url = "https://files.pythonhosted.org/packages/be/be/04e3202cdc9bb5f81761e327af7095cffb0d81e32421a6b87f926052d2ae/yarl-1.19.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a39d7b807ab58e633ed760f80195cbd145b58ba265436af35f9080f1810dfe64", size = 355485 },
    { url = "https://files.pythonhosted.org/packages/00/7d/1463203663ca1ae62af8fb9ebc9601dd07f04dbced7edb1df3141a2cb2fe/yarl-1.19.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:c4228978fb59c6b10f60124ba8e311c26151e176df364e996f3f8ff8b93971b5", size = 344569 },
    { url = "https://files.pythonhosted.org/packages/b0/1b/5263203017348669e637bb73856fb9632110538e92d5e9f8214fcc764da9/yarl-1.19.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9ba536b17ecf3c74a94239ec1137a3ad3caea8c0e4deb8c8d2ffe847d870a8c5", size = 371426 },
    { url = "https://files.pythonhosted.org/packages/78/59/90ca5f16d56b7741e5383951acc2e065fce41920eb5d8fda3065b5e288dc/yarl-1.19.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a251e00e445d2e9df7b827c9843c0b87f58a3254aaa3f162fb610747491fe00f", size = 368102 },
    { url = "https://files.pythonhosted.org/packages/84/f2/5e33aa0251ffd2c2a9041bf887e163eeefdc1dca238fdabac444d9463c3f/yarl-1.19.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f9b92431d8b4d4ca5ccbfdbac95b05a3a6cd70cd73aa62f32f9627acfde7549c", size = 358740 },
    { url = "https://files.pythonhosted.org/packages/22/9e/ba92d234c81cf94495fc01eaa0b6000175733f76bd63e60ff748bce22c81/yarl-1.19.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ec2f56edaf476f70b5831bbd59700b53d9dd011b1f77cd4846b5ab5c5eafdb3f", size = 346965 },
    { url = "https://files.pythonhosted.org/packages/8d/0b/d4f53136ef12ddad540855a886d7503a6cc17cfabb9a03ce0c179f3b9e51/yarl-1.19.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:acf9b92c4245ac8b59bc7ec66a38d3dcb8d1f97fac934672529562bb824ecadb", size = 368547 },
    { url = "https://files.pythonhosted.org/packages/31/4b/35ec8622908a728f378a8511f0ab2d47878b2c0b8cbe035f2d907914a5fc/yarl-1.19.0-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:57711f1465c06fee8825b95c0b83e82991e6d9425f9a042c3c19070a70ac92bf", size = 357610 },
    { url = "https://files.pythonhosted.org/packages/c1/71/1f39f7c55b0684834d945a2bcfdfe59e6e02ca2483a3d33c2f77a0c3b177/yarl-1.19.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:528e86f5b1de0ad8dd758ddef4e0ed24f5d946d4a1cef80ffb2d4fca4e10f122", size = 365331 },
    { url = "https://files.pythonhosted.org/packages/2e/13/57675964de5c8ccf6427df93ac97f9bb7328f3f8f7ebc31a5f5a286ab1c0/yarl-1.19.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:3b77173663e075d9e5a57e09d711e9da2f3266be729ecca0b8ae78190990d260", size = 378624 },
    { url = "https://files.pythonhosted.org/packages/d4/c6/5868e40f8da041ed0c3b5fd8c08cece849d9f609e970e6043308767fbb60/yarl-1.19.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:d8717924cf0a825b62b1a96fc7d28aab7f55a81bf5338b8ef41d7a76ab9223e9", size = 383981 },
    { url = "https://files.pythonhosted.org/packages/f4/3f/e40124c986d96741d3d341ffac35be42b6df82ef8c18b5984ca2e7d838dd/yarl-1.19.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:0df9f0221a78d858793f40cbea3915c29f969c11366646a92ca47e080a14f881", size = 378868 },
    { url = "https://files.pythonhosted.org/packages/01/eb/caf2774c770288bd87a818b11f3a56ada6a855f1987d93421aae01a175bf/yarl-1.19.0-cp311-cp311-win32.whl", hash = "sha256:8b3ade62678ee2c7c10dcd6be19045135e9badad53108f7d2ed14896ee396045", size = 86446 },
    { url = "https://files.pythonhosted.org/packages/4a/97/d4fe6168c1bb789507ffeb58c2e8c675a7e71de732dc02e12bda904c1362/yarl-1.19.0-cp311-cp311-win_amd64.whl", hash = "sha256:0626ee31edb23ac36bdffe607231de2cca055ad3a5e2dc5da587ef8bc6a321bc", size = 93121 },
    { url = "https://files.pythonhosted.org/packages/b8/70/44ef8f69d61cb5123167a4dda87f6c739a833fbdb2ed52960b4e8409d65c/yarl-1.19.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:7b687c334da3ff8eab848c9620c47a253d005e78335e9ce0d6868ed7e8fd170b", size = 146855 },
    { url = "https://files.pythonhosted.org/packages/c3/94/38c14d6c8217cc818647689f2dd647b976ced8fea08d0ac84e3c8168252b/yarl-1.19.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b0fe766febcf523a2930b819c87bb92407ae1368662c1bc267234e79b20ff894", size = 97523 },
    { url = "https://files.pythonhosted.org/packages/35/a5/43a613586a6255105c4655a911c307ef3420e49e540d6ae2c5829863fb25/yarl-1.19.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:742ceffd3c7beeb2b20d47cdb92c513eef83c9ef88c46829f88d5b06be6734ee", size = 95540 },
    { url = "https://files.pythonhosted.org/packages/d4/60/ed26049f4a8b06ebfa6d5f3cb6a51b152fd57081aa818b6497474f65a631/yarl-1.19.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2af682a1e97437382ee0791eacbf540318bd487a942e068e7e0a6c571fadbbd3", size = 344386 },
    { url = "https://files.pythonhosted.org/packages/49/a6/b84899cab411f49af5986cfb44b514040788d81c8084f5811e6a7c0f1ce6/yarl-1.19.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:63702f1a098d0eaaea755e9c9d63172be1acb9e2d4aeb28b187092bcc9ca2d17", size = 338889 },
    { url = "https://files.pythonhosted.org/packages/cc/ce/0704f7166a781b1f81bdd45c4f49eadbae0230ebd35b9ec7cd7769d3a6ff/yarl-1.19.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3560dcba3c71ae7382975dc1e912ee76e50b4cd7c34b454ed620d55464f11876", size = 353107 },
    { url = "https://files.pythonhosted.org/packages/75/e5/0ecd6f2a9cc4264c16d8dfb0d3d71ba8d03cb58f3bcd42b1df4358331189/yarl-1.19.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:68972df6a0cc47c8abaf77525a76ee5c5f6ea9bbdb79b9565b3234ded3c5e675", size = 353128 },
    { url = "https://files.pythonhosted.org/packages/ad/c7/cd0fd1de581f1c2e8f996e704c9fd979e00106f18eebd91b0173cf1a13c6/yarl-1.19.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:5684e7ff93ea74e47542232bd132f608df4d449f8968fde6b05aaf9e08a140f9", size = 349107 },
    { url = "https://files.pythonhosted.org/packages/e6/34/ba3e5a20bd1d6a09034fc7985aaf1309976f2a7a5aefd093c9e56f6e1e0c/yarl-1.19.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8182ad422bfacdebd4759ce3adc6055c0c79d4740aea1104e05652a81cd868c6", size = 335144 },
    { url = "https://files.pythonhosted.org/packages/1e/98/d9b7beb932fade015906efe0980aa7d522b8f93cf5ebf1082e74faa314b7/yarl-1.19.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:aee5b90a5a9b71ac57400a7bdd0feaa27c51e8f961decc8d412e720a004a1791", size = 360795 },
    { url = "https://files.pythonhosted.org/packages/9a/11/70b8770039cc54af5948970591517a1e1d093df3f04f328c655c9a0fefb7/yarl-1.19.0-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:8c0b2371858d5a814b08542d5d548adb03ff2d7ab32f23160e54e92250961a72", size = 360140 },
    { url = "https://files.pythonhosted.org/packages/d4/67/708e3e36fafc4d9d96b4eecc6c8b9f37c8ad50df8a16c7a1d5ba9df53050/yarl-1.19.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:cd430c2b7df4ae92498da09e9b12cad5bdbb140d22d138f9e507de1aa3edfea3", size = 364431 },
    { url = "https://files.pythonhosted.org/packages/c3/8b/937fbbcc895553a7e16fcd86ae4e0724c6ac9468237ad8e7c29cc3b1c9d9/yarl-1.19.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:a93208282c0ccdf73065fd76c6c129bd428dba5ff65d338ae7d2ab27169861a0", size = 373832 },
    { url = "https://files.pythonhosted.org/packages/f8/ca/288ddc2230c9b6647fe907504f1119adb41252ac533eb564d3fc73511215/yarl-1.19.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:b8179280cdeb4c36eb18d6534a328f9d40da60d2b96ac4a295c5f93e2799e9d9", size = 378122 },
    { url = "https://files.pythonhosted.org/packages/4f/5a/79e1ef31d14968fbfc0ecec70a6683b574890d9c7550c376dd6d40de7754/yarl-1.19.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:eda3c2b42dc0c389b7cfda2c4df81c12eeb552019e0de28bde8f913fc3d1fcf3", size = 375178 },
    { url = "https://files.pythonhosted.org/packages/95/38/9b0e56bf14026c3f550ad6425679f6d1a2f4821d70767f39d6f4c56a0820/yarl-1.19.0-cp312-cp312-win32.whl", hash = "sha256:57f3fed859af367b9ca316ecc05ce79ce327d6466342734305aa5cc380e4d8be", size = 86172 },
    { url = "https://files.pythonhosted.org/packages/b3/96/5c2f3987c4bb4e5cdebea3caf99a45946b13a9516f849c02222203d99860/yarl-1.19.0-cp312-cp312-win_amd64.whl", hash = "sha256:5507c1f7dd3d41251b67eecba331c8b2157cfd324849879bebf74676ce76aff7", size = 92617 },
    { url = "https://files.pythonhosted.org/packages/cd/a7/222144efa2f4a47363a5fee27d8a1d24851283b5a7f628890805fe7f7a66/yarl-1.19.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:59281b9ed27bc410e0793833bcbe7fc149739d56ffa071d1e0fe70536a4f7b61", size = 144789 },
    { url = "https://files.pythonhosted.org/packages/72/4f/3ee8de3f94baa33c0716260b0048b1fd5306f104b3efc6e1713693e7063e/yarl-1.19.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:d27a6482ad5e05e8bafd47bf42866f8a1c0c3345abcb48d4511b3c29ecc197dc", size = 96685 },
    { url = "https://files.pythonhosted.org/packages/3e/7c/fbeebf875c1ededd872d6fefabd8a8526ef8aba6e9e8bcdf230d895d487b/yarl-1.19.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:7a8e19fd5a6fdf19a91f2409665c7a089ffe7b9b5394ab33c0eec04cbecdd01f", size = 94307 },
    { url = "https://files.pythonhosted.org/packages/f3/ff/b7a9c1d7df37e594b43b7a8030e228ccd4ce361eeff24a92b17fe210e57d/yarl-1.19.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cda34ab19099c3a1685ad48fe45172536610c312b993310b5f1ca3eb83453b36", size = 342811 },
    { url = "https://files.pythonhosted.org/packages/79/e2/9e092876b2156c1d386e4864e85eba541ccabf2b9dcc47da64624bad0cc9/yarl-1.19.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:7908a25d33f94852b479910f9cae6cdb9e2a509894e8d5f416c8342c0253c397", size = 336928 },
    { url = "https://files.pythonhosted.org/packages/71/24/648d99c134f2e14fc01ba790ad36ab56815e00069e60a12a4af893448b83/yarl-1.19.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e66c14d162bac94973e767b24de5d7e6c5153f7305a64ff4fcba701210bcd638", size = 351021 },
    { url = "https://files.pythonhosted.org/packages/0c/ee/7278d475784d407d1990a5939722e66a0fef057046fb5f1721f0a6eb156c/yarl-1.19.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c03607bf932aa4cfae371e2dc9ca8b76faf031f106dac6a6ff1458418140c165", size = 354454 },
    { url = "https://files.pythonhosted.org/packages/15/ae/242546114e052a7de21a75bd7d4860266439f90bbc21c5e4dd696866d91d/yarl-1.19.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9931343d1c1f4e77421687b6b94bbebd8a15a64ab8279adf6fbb047eff47e536", size = 347594 },
    { url = "https://files.pythonhosted.org/packages/46/2c/35f4347f76ea4c986e9c1f774b085f489b3a1bf1503c67a4dfc5d8e68e92/yarl-1.19.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:262087a8a0d73e1d169d45c2baf968126f93c97cf403e1af23a7d5455d52721f", size = 334113 },
    { url = "https://files.pythonhosted.org/packages/20/89/3086bc8ec8d7bd505531c51056452d7ae6af906d29c427374f1170ac1938/yarl-1.19.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:70f384921c24e703d249a6ccdabeb57dd6312b568b504c69e428a8dd3e8e68ca", size = 361037 },
    { url = "https://files.pythonhosted.org/packages/a1/5b/2c9765524a70d1c51922b41c91caa30c8094a416734349166e1a3d8de055/yarl-1.19.0-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:756b9ea5292a2c180d1fe782a377bc4159b3cfefaca7e41b5b0a00328ef62fa9", size = 361025 },
    { url = "https://files.pythonhosted.org/packages/ca/f8/c4a190bcc3cd98fb428d1dd31519e58004153dc7f2acd1236ecae54e3433/yarl-1.19.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:cbeb9c145d534c240a63b6ecc8a8dd451faeb67b3dc61d729ec197bb93e29497", size = 364397 },
    { url = "https://files.pythonhosted.org/packages/6b/fb/f65b1347be8e12ac4e3e37a9bb880e6b9b604f252aaafd88e4879b1e9348/yarl-1.19.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:087ae8f8319848c18e0d114d0f56131a9c017f29200ab1413b0137ad7c83e2ae", size = 374065 },
    { url = "https://files.pythonhosted.org/packages/1c/c5/102cc3b9baad1a76f9127453ad08e0f5bc9c996c18128b1e28fe03817d6c/yarl-1.19.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:362f5480ba527b6c26ff58cff1f229afe8b7fdd54ee5ffac2ab827c1a75fc71c", size = 381341 },
    { url = "https://files.pythonhosted.org/packages/f7/ce/f5dc0439320dfe59fadab8cdd24ac324be19cf6ae4736422c7e2a510ddf3/yarl-1.19.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:f408d4b4315e814e5c3668094e33d885f13c7809cbe831cbdc5b1bb8c7a448f4", size = 376552 },
    { url = "https://files.pythonhosted.org/packages/a9/4a/4833a134c76af987eff3ce8cb71e42932234120e6be061eb2555061e8844/yarl-1.19.0-cp313-cp313-win32.whl", hash = "sha256:24e4c367ad69988a2283dd45ea88172561ca24b2326b9781e164eb46eea68345", size = 85878 },
    { url = "https://files.pythonhosted.org/packages/32/e9/59327daab3af8f79221638a8f0d11474d20f6a8fbc41e9da80c5ef69e688/yarl-1.19.0-cp313-cp313-win_amd64.whl", hash = "sha256:0110f91c57ab43d1538dfa92d61c45e33b84df9257bd08fcfcda90cce931cbc9", size = 92448 },
    { url = "https://files.pythonhosted.org/packages/a4/06/ae25a353e8f032322df6f30d6bb1fc329773ee48e1a80a2196ccb8d1206b/yarl-1.19.0-py3-none-any.whl", hash = "sha256:a727101eb27f66727576630d02985d8a065d09cd0b5fcbe38a5793f71b2a97ef", size = 45990 },
]

[[package]]
name = "zipp"
version = "3.21.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/3f/50/bad581df71744867e9468ebd0bcd6505de3b275e06f202c2cb016e3ff56f/zipp-3.21.0.tar.gz", hash = "sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4", size = 24545 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/1a/7e4798e9339adc931158c9d69ecc34f5e6791489d469f5e50ec15e35f458/zipp-3.21.0-py3-none-any.whl", hash = "sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931", size = 9630 },
]

[[package]]
name = "zstandard"
version = "0.23.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi", marker = "platform_python_implementation == 'PyPy'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ed/f6/2ac0287b442160a89d726b17a9184a4c615bb5237db763791a7fd16d9df1/zstandard-0.23.0.tar.gz", hash = "sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09", size = 681701 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9e/40/f67e7d2c25a0e2dc1744dd781110b0b60306657f8696cafb7ad7579469bd/zstandard-0.23.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e", size = 788699 },
    { url = "https://files.pythonhosted.org/packages/e8/46/66d5b55f4d737dd6ab75851b224abf0afe5774976fe511a54d2eb9063a41/zstandard-0.23.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23", size = 633681 },
    { url = "https://files.pythonhosted.org/packages/63/b6/677e65c095d8e12b66b8f862b069bcf1f1d781b9c9c6f12eb55000d57583/zstandard-0.23.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a", size = 4944328 },
    { url = "https://files.pythonhosted.org/packages/59/cc/e76acb4c42afa05a9d20827116d1f9287e9c32b7ad58cc3af0721ce2b481/zstandard-0.23.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db", size = 5311955 },
    { url = "https://files.pythonhosted.org/packages/78/e4/644b8075f18fc7f632130c32e8f36f6dc1b93065bf2dd87f03223b187f26/zstandard-0.23.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2", size = 5344944 },
    { url = "https://files.pythonhosted.org/packages/76/3f/dbafccf19cfeca25bbabf6f2dd81796b7218f768ec400f043edc767015a6/zstandard-0.23.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca", size = 5442927 },
    { url = "https://files.pythonhosted.org/packages/0c/c3/d24a01a19b6733b9f218e94d1a87c477d523237e07f94899e1c10f6fd06c/zstandard-0.23.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c", size = 4864910 },
    { url = "https://files.pythonhosted.org/packages/1c/a9/cf8f78ead4597264f7618d0875be01f9bc23c9d1d11afb6d225b867cb423/zstandard-0.23.0-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e", size = 4935544 },
    { url = "https://files.pythonhosted.org/packages/2c/96/8af1e3731b67965fb995a940c04a2c20997a7b3b14826b9d1301cf160879/zstandard-0.23.0-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5", size = 5467094 },
    { url = "https://files.pythonhosted.org/packages/ff/57/43ea9df642c636cb79f88a13ab07d92d88d3bfe3e550b55a25a07a26d878/zstandard-0.23.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48", size = 4860440 },
    { url = "https://files.pythonhosted.org/packages/46/37/edb78f33c7f44f806525f27baa300341918fd4c4af9472fbc2c3094be2e8/zstandard-0.23.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c", size = 4700091 },
    { url = "https://files.pythonhosted.org/packages/c1/f1/454ac3962671a754f3cb49242472df5c2cced4eb959ae203a377b45b1a3c/zstandard-0.23.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003", size = 5208682 },
    { url = "https://files.pythonhosted.org/packages/85/b2/1734b0fff1634390b1b887202d557d2dd542de84a4c155c258cf75da4773/zstandard-0.23.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78", size = 5669707 },
    { url = "https://files.pythonhosted.org/packages/52/5a/87d6971f0997c4b9b09c495bf92189fb63de86a83cadc4977dc19735f652/zstandard-0.23.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473", size = 5201792 },
    { url = "https://files.pythonhosted.org/packages/79/02/6f6a42cc84459d399bd1a4e1adfc78d4dfe45e56d05b072008d10040e13b/zstandard-0.23.0-cp311-cp311-win32.whl", hash = "sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160", size = 430586 },
    { url = "https://files.pythonhosted.org/packages/be/a2/4272175d47c623ff78196f3c10e9dc7045c1b9caf3735bf041e65271eca4/zstandard-0.23.0-cp311-cp311-win_amd64.whl", hash = "sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0", size = 495420 },
    { url = "https://files.pythonhosted.org/packages/7b/83/f23338c963bd9de687d47bf32efe9fd30164e722ba27fb59df33e6b1719b/zstandard-0.23.0-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094", size = 788713 },
    { url = "https://files.pythonhosted.org/packages/5b/b3/1a028f6750fd9227ee0b937a278a434ab7f7fdc3066c3173f64366fe2466/zstandard-0.23.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8", size = 633459 },
    { url = "https://files.pythonhosted.org/packages/26/af/36d89aae0c1f95a0a98e50711bc5d92c144939efc1f81a2fcd3e78d7f4c1/zstandard-0.23.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1", size = 4945707 },
    { url = "https://files.pythonhosted.org/packages/cd/2e/2051f5c772f4dfc0aae3741d5fc72c3dcfe3aaeb461cc231668a4db1ce14/zstandard-0.23.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072", size = 5306545 },
    { url = "https://files.pythonhosted.org/packages/0a/9e/a11c97b087f89cab030fa71206963090d2fecd8eb83e67bb8f3ffb84c024/zstandard-0.23.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20", size = 5337533 },
    { url = "https://files.pythonhosted.org/packages/fc/79/edeb217c57fe1bf16d890aa91a1c2c96b28c07b46afed54a5dcf310c3f6f/zstandard-0.23.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373", size = 5436510 },
    { url = "https://files.pythonhosted.org/packages/81/4f/c21383d97cb7a422ddf1ae824b53ce4b51063d0eeb2afa757eb40804a8ef/zstandard-0.23.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db", size = 4859973 },
    { url = "https://files.pythonhosted.org/packages/ab/15/08d22e87753304405ccac8be2493a495f529edd81d39a0870621462276ef/zstandard-0.23.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772", size = 4936968 },
    { url = "https://files.pythonhosted.org/packages/eb/fa/f3670a597949fe7dcf38119a39f7da49a8a84a6f0b1a2e46b2f71a0ab83f/zstandard-0.23.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105", size = 5467179 },
    { url = "https://files.pythonhosted.org/packages/4e/a9/dad2ab22020211e380adc477a1dbf9f109b1f8d94c614944843e20dc2a99/zstandard-0.23.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba", size = 4848577 },
    { url = "https://files.pythonhosted.org/packages/08/03/dd28b4484b0770f1e23478413e01bee476ae8227bbc81561f9c329e12564/zstandard-0.23.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd", size = 4693899 },
    { url = "https://files.pythonhosted.org/packages/2b/64/3da7497eb635d025841e958bcd66a86117ae320c3b14b0ae86e9e8627518/zstandard-0.23.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a", size = 5199964 },
    { url = "https://files.pythonhosted.org/packages/43/a4/d82decbab158a0e8a6ebb7fc98bc4d903266bce85b6e9aaedea1d288338c/zstandard-0.23.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90", size = 5655398 },
    { url = "https://files.pythonhosted.org/packages/f2/61/ac78a1263bc83a5cf29e7458b77a568eda5a8f81980691bbc6eb6a0d45cc/zstandard-0.23.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35", size = 5191313 },
    { url = "https://files.pythonhosted.org/packages/e7/54/967c478314e16af5baf849b6ee9d6ea724ae5b100eb506011f045d3d4e16/zstandard-0.23.0-cp312-cp312-win32.whl", hash = "sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d", size = 430877 },
    { url = "https://files.pythonhosted.org/packages/75/37/872d74bd7739639c4553bf94c84af7d54d8211b626b352bc57f0fd8d1e3f/zstandard-0.23.0-cp312-cp312-win_amd64.whl", hash = "sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b", size = 495595 },
    { url = "https://files.pythonhosted.org/packages/80/f1/8386f3f7c10261fe85fbc2c012fdb3d4db793b921c9abcc995d8da1b7a80/zstandard-0.23.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9", size = 788975 },
    { url = "https://files.pythonhosted.org/packages/16/e8/cbf01077550b3e5dc86089035ff8f6fbbb312bc0983757c2d1117ebba242/zstandard-0.23.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a", size = 633448 },
    { url = "https://files.pythonhosted.org/packages/06/27/4a1b4c267c29a464a161aeb2589aff212b4db653a1d96bffe3598f3f0d22/zstandard-0.23.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2", size = 4945269 },
    { url = "https://files.pythonhosted.org/packages/7c/64/d99261cc57afd9ae65b707e38045ed8269fbdae73544fd2e4a4d50d0ed83/zstandard-0.23.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5", size = 5306228 },
    { url = "https://files.pythonhosted.org/packages/7a/cf/27b74c6f22541f0263016a0fd6369b1b7818941de639215c84e4e94b2a1c/zstandard-0.23.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f", size = 5336891 },
    { url = "https://files.pythonhosted.org/packages/fa/18/89ac62eac46b69948bf35fcd90d37103f38722968e2981f752d69081ec4d/zstandard-0.23.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed", size = 5436310 },
    { url = "https://files.pythonhosted.org/packages/a8/a8/5ca5328ee568a873f5118d5b5f70d1f36c6387716efe2e369010289a5738/zstandard-0.23.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea", size = 4859912 },
    { url = "https://files.pythonhosted.org/packages/ea/ca/3781059c95fd0868658b1cf0440edd832b942f84ae60685d0cfdb808bca1/zstandard-0.23.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847", size = 4936946 },
    { url = "https://files.pythonhosted.org/packages/ce/11/41a58986f809532742c2b832c53b74ba0e0a5dae7e8ab4642bf5876f35de/zstandard-0.23.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171", size = 5466994 },
    { url = "https://files.pythonhosted.org/packages/83/e3/97d84fe95edd38d7053af05159465d298c8b20cebe9ccb3d26783faa9094/zstandard-0.23.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840", size = 4848681 },
    { url = "https://files.pythonhosted.org/packages/6e/99/cb1e63e931de15c88af26085e3f2d9af9ce53ccafac73b6e48418fd5a6e6/zstandard-0.23.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690", size = 4694239 },
    { url = "https://files.pythonhosted.org/packages/ab/50/b1e703016eebbc6501fc92f34db7b1c68e54e567ef39e6e59cf5fb6f2ec0/zstandard-0.23.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b", size = 5200149 },
    { url = "https://files.pythonhosted.org/packages/aa/e0/932388630aaba70197c78bdb10cce2c91fae01a7e553b76ce85471aec690/zstandard-0.23.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057", size = 5655392 },
    { url = "https://files.pythonhosted.org/packages/02/90/2633473864f67a15526324b007a9f96c96f56d5f32ef2a56cc12f9548723/zstandard-0.23.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33", size = 5191299 },
    { url = "https://files.pythonhosted.org/packages/b0/4c/315ca5c32da7e2dc3455f3b2caee5c8c2246074a61aac6ec3378a97b7136/zstandard-0.23.0-cp313-cp313-win32.whl", hash = "sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd", size = 430862 },
    { url = "https://files.pythonhosted.org/packages/a2/bf/c6aaba098e2d04781e8f4f7c0ba3c7aa73d00e4c436bcc0cf059a66691d1/zstandard-0.23.0-cp313-cp313-win_amd64.whl", hash = "sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b", size = 495578 },
]
